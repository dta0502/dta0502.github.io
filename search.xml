<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>梅花品种-3系5类18型</title>
    <url>/archives/290f3ac4.html</url>
    <content><![CDATA[<p>梅花在中国经长期选育，现有品种300多个。梅花分3系5类18型，将323个梅花品种，首先按其种源组成分为真梅、杏梅和樱李梅3个种系(Branch)，其下按枝态分若干类(Group)，再按花的特征分若干型(Form)。</p>
<a id="more"></a>

<h2 id="真梅种系"><a href="#真梅种系" class="headerlink" title="真梅种系"></a>真梅种系</h2><p>具梅之典型枝叶，开典型梅花，散发典型梅香；内果皮(核)上具蜂窝状点穴。真梅种系包括以下3类：直枝梅类、垂枝梅类、龙游梅类。</p>
<h3 id="直枝梅类"><a href="#直枝梅类" class="headerlink" title="直枝梅类"></a>直枝梅类</h3><p>顾名思义，这类梅花的<strong>树枝均为直上或斜生</strong>，然后又以花型、花萼颜色以及花瓣颜色的不同将其进一步分为很多小类。直枝梅类简直就是梅花界的扛把子，不仅是类型最多的一大类，而且姿态优美，各有不同。 </p>
<h4 id="宫粉型"><a href="#宫粉型" class="headerlink" title="宫粉型"></a>宫粉型</h4><p>宫粉型是最为普遍的一类梅花，也是品种较为丰富的一类梅花，因其花朵粉红，着花密而浓，深受大众喜爱。宫粉型梅花半重瓣至重瓣（即花瓣数量大于10枚），开花呈碗形或碟形，花萼一般为紫红色，有较为浓郁的清香味。 </p>
<img src="/archives/290f3ac4/%E5%AE%AB%E7%B2%89%E5%9E%8B.jpg" class="" title="宫粉型">

<h4 id="玉蝶型"><a href="#玉蝶型" class="headerlink" title="玉蝶型"></a>玉蝶型</h4><p>玉蝶型梅花俗称为玉蝶梅，其花瓣为白色，复瓣或重瓣，萼绛紫色。在蕾期，有时花蕾尖端呈浅红色，但盛开时花色变白。</p>
<img src="/archives/290f3ac4/%E7%8E%89%E8%9D%B6%E5%9E%8B.jpg" class="" title="玉蝶型">

<h4 id="绿萼型"><a href="#绿萼型" class="headerlink" title="绿萼型"></a>绿萼型</h4><p>绿萼型梅花花碟型，单瓣或重瓣。萼片是绿色的，胜在花白或呈淡绿色，是不是特别小清新？据说绿萼型梅花在中国古代还是非常名贵的品种，随着人类技术的进步，绿萼型梅花也已经发展为大众观赏的梅花了。 </p>
<img src="/archives/290f3ac4/%E7%BB%BF%E8%90%BC%E5%9E%8B.jpg" class="" title="绿萼型">

<h4 id="江梅型"><a href="#江梅型" class="headerlink" title="江梅型"></a>江梅型</h4><p>生长势旺盛，开花繁密。<strong>花碟型，单瓣，花瓣5~8枚</strong>。花色纯白、水红、肉红、桃红等。萼绛紫色或绿底上洒绛紫晕。如：“江梅”、“雪梅”、“寒红梅”、“小红长须”等品种。</p>
<img src="/archives/290f3ac4/%E6%B1%9F%E6%A2%85%E5%9E%8B.jpg" class="" title="江梅型">

<h4 id="洒金型"><a href="#洒金型" class="headerlink" title="洒金型"></a>洒金型</h4><p>花单瓣或复瓣。<strong>一树开红、白两色</strong>，具条纹、斑点之彩花。如“单瓣跳枝”、“复瓣跳枝”、“二乔”、“晚跳枝”等品种。</p>
<img src="/archives/290f3ac4/%E6%B4%92%E9%87%91%E5%9E%8B.jpg" class="" title="洒金型">

<h4 id="朱砂型"><a href="#朱砂型" class="headerlink" title="朱砂型"></a>朱砂型</h4><p>花紫红色，单瓣、复瓣或重瓣。<strong>其最主要的特征是枝内新生木质部呈暗紫红色</strong>，故又称“骨红梅”。品种多较名贵，耐寒性较差，繁殖较难。如“白须朱砂”、“朱砂晚照水”、“乌羽玉”、“姬千鸟”等品种。</p>
<img src="/archives/290f3ac4/%E6%9C%B1%E7%A0%82%E5%9E%8B.jpg" class="" title="朱砂型">

<h4 id="黄香型"><a href="#黄香型" class="headerlink" title="黄香型"></a>黄香型</h4><p>花色浅黄，复瓣。是极为罕见的名贵品种。失传数百年后，于1985年2月在黄山发现。如“黄山黄香”、“单瓣黄香”、“曹王黄香”、“南京复黄香”等品种。</p>
<img src="/archives/290f3ac4/%E9%BB%84%E9%A6%99%E5%9E%8B.jpg" class="" title="黄香型">

<h4 id="品字梅型"><a href="#品字梅型" class="headerlink" title="品字梅型"></a>品字梅型</h4><p><strong>典型的一花三果品种</strong>，即是品字梅。开花时并没有什么特别，但在4月花谢后，却是一朵花结出三个果实，而且聚集在一起呈品字形排列，所以被称为品字梅。如“朱砂品字梅”，是1985年从日本引进的，花期在2月中旬至3月上中旬，花径可以达到2.6到3厘米，花蕾为玫瑰红色，花态层层疏叠，就像一个小碗。</p>
<img src="/archives/290f3ac4/%E5%93%81%E5%AD%97%E6%A2%85%E5%9E%8B.jpg" class="" title="品字梅型">

<h4 id="小细梅型"><a href="#小细梅型" class="headerlink" title="小细梅型"></a>小细梅型</h4><p>小梅型如“北京小梅”、“磨山小梅”、“梅州小梅”等品；细梅型如“黄金梅”等品。</p>
<img src="/archives/290f3ac4/%E5%B0%8F%E7%BB%86%E6%A2%85%E5%9E%8B.jpg" class="" title="小细梅型">


<h3 id="垂枝梅类"><a href="#垂枝梅类" class="headerlink" title="垂枝梅类"></a>垂枝梅类</h3><p>垂枝梅类也称作为照水梅，这个类型的梅花小枝是向下生长的，开花的时候自然花向下，给人一种杨柳依依的美感。若照水梅正好长在河畔，可不就像一位美人临水而立，以江河为镜，整理云鬓么？</p>
<h4 id="单粉垂枝型"><a href="#单粉垂枝型" class="headerlink" title="单粉垂枝型"></a>单粉垂枝型</h4><p>花单瓣，碟型，花瓣白或粉色。如：‘单粉照水’等。</p>
<img src="/archives/290f3ac4/%E5%8D%95%E7%B2%89%E5%9E%82%E6%9E%9D%E5%9E%8B.jpg" class="" title="单粉垂枝型">

<h4 id="残雪垂枝型"><a href="#残雪垂枝型" class="headerlink" title="残雪垂枝型"></a>残雪垂枝型</h4><p>花单瓣或复瓣，碟型，花瓣白色，花萼绛紫色。如‘残雪’等。</p>
<img src="/archives/290f3ac4/%E6%AE%8B%E9%9B%AA%E5%9E%82%E6%9E%9D%E5%9E%8B.jpg" class="" title="残雪垂枝型">

<h4 id="骨红垂枝型"><a href="#骨红垂枝型" class="headerlink" title="骨红垂枝型"></a>骨红垂枝型</h4><p>花单瓣或复瓣，深紫红色，花萼绛紫色。如‘骨红垂枝’、‘锦红垂枝’等。 </p>
<img src="/archives/290f3ac4/%E9%AA%A8%E7%BA%A2%E5%9E%82%E6%9E%9D%E5%9E%8B.jpg" class="" title="骨红垂枝型">

<h4 id="白碧垂枝型"><a href="#白碧垂枝型" class="headerlink" title="白碧垂枝型"></a>白碧垂枝型</h4><p>花单瓣或复瓣，白色，花萼纯绿色。如：‘单碧垂枝’、‘双碧垂枝’等。 </p>
<img src="/archives/290f3ac4/%E7%99%BD%E7%A2%A7%E5%9E%82%E6%9E%9D%E5%9E%8B.jpg" class="" title="白碧垂枝型">

<h4 id="五宝垂枝型"><a href="#五宝垂枝型" class="headerlink" title="五宝垂枝型"></a>五宝垂枝型</h4><p>木质部绿白色，花呈红、粉等复色，常呈条斑状，单瓣、复瓣或重瓣，萼绛紫色。如“跳雪垂枝”等品种。</p>
<img src="/archives/290f3ac4/%E4%BA%94%E5%AE%9D%E5%9E%82%E6%9E%9D%E5%9E%8B.jpg" class="" title="五宝垂枝型">


<h3 id="龙游梅类"><a href="#龙游梅类" class="headerlink" title="龙游梅类"></a>龙游梅类</h3><p>龙游梅类小枝天然扭曲如游龙，花蝶形，半重瓣，白色花。该类仅有一型即玉蝶龙游型。细细观赏，确实是小枝如游龙般婉转曲折，别有一番雅趣。 </p>
<h4 id="玉蝶龙游型"><a href="#玉蝶龙游型" class="headerlink" title="玉蝶龙游型"></a>玉蝶龙游型</h4><p>花白色，复瓣，萼紫色。如“龙游”品。</p>
<img src="/archives/290f3ac4/%E7%8E%89%E8%9D%B6%E9%BE%99%E6%B8%B8%E5%9E%8B.jpg" class="" title="玉蝶龙游型">


<h2 id="杏梅种系"><a href="#杏梅种系" class="headerlink" title="杏梅种系"></a>杏梅种系</h2><p>枝叶、花、果似梅而不典型，花不香或微香(非典型梅香)，核面多少具蜂窝状点穴，不过杏梅不如真梅分布均匀整齐。枝叶形态似杏或山杏，介于梅、杏之间，叶绿。小枝古铜色。花型如杏花，多复瓣。花色水红至玫瑰红，瓣爪细长，花托常肿大。花期多较晚。是梅与杏(或山杏)之天然杂交品种，抗寒性较强。杏梅种系仅1类即杏梅类。</p>
<h3 id="杏梅类"><a href="#杏梅类" class="headerlink" title="杏梅类"></a>杏梅类</h3><p>杏梅类包括以下2型。</p>
<h4 id="单瓣杏梅型"><a href="#单瓣杏梅型" class="headerlink" title="单瓣杏梅型"></a>单瓣杏梅型</h4><p>花单瓣，花色、萼、枝叶均似杏花。如“北杏梅”、“燕杏”等品种。</p>
<img src="/archives/290f3ac4/%E5%8D%95%E7%93%A3%E6%9D%8F%E6%A2%85%E5%9E%8B.jpg" class="" title="单瓣杏梅型">

<h4 id="春后型"><a href="#春后型" class="headerlink" title="春后型"></a>春后型</h4><p>花复瓣，且较大，小枝粗。如“送春”(花中等至较大，小枝中粗至粗)、“丰后”(叶大花亦大，小枝粗至极粗)、“淡丰后”等品种。</p>
<img src="/archives/290f3ac4/%E6%98%A5%E5%90%8E%E5%9E%8B.jpg" class="" title="春后型">


<h2 id="樱李梅种系"><a href="#樱李梅种系" class="headerlink" title="樱李梅种系"></a>樱李梅种系</h2><p>樱李梅种系是1987年初由国外(法国)引进栽培的新品系。枝叶、花、果似梅而不典型，花不香或微香(非典型梅香)，核面多少具蜂窝状点穴，只是樱李梅核面点穴深度不及真梅。枝叶似紫叶李，叶常年紫红色，花托不肿大；花似梅，淡紫红色，半重瓣或重瓣，花梗长约1cm；花叶同放。属红叶樱(紫叶李)与宫粉梅的人工杂交品种。只有1类。</p>
<h3 id="樱李梅类"><a href="#樱李梅类" class="headerlink" title="樱李梅类"></a>樱李梅类</h3><p>樱李梅类包括1型。</p>
<h4 id="美人梅型"><a href="#美人梅型" class="headerlink" title="美人梅型"></a>美人梅型</h4><p>生长势强健，抗寒性强。叶紫色，花大，玫瑰红色，重瓣。是大有推广前途的优良品种。如“美人”梅、“小美人”梅等品种。</p>
<img src="/archives/290f3ac4/%E7%BE%8E%E4%BA%BA%E6%A2%85%E5%9E%8B.jpg" class="" title="美人梅型">


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.weibo.com/p/230418138bd57470102w7db" target="_blank" rel="noopener external nofollow noreferrer">梅花品种：“3系5类18型”与“11品种群”</a></li>
<li><a href="http://www.wbg.cas.cn/KPPJ/hbsjt/201702/t20170217_4747164.html" target="_blank" rel="noopener external nofollow noreferrer">第410期：梅花知多少：您听过咏梅，可您了解梅花嘛？</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
        <category>植物</category>
      </categories>
      <tags>
        <tag>植物</tag>
        <tag>梅花</tag>
      </tags>
  </entry>
  <entry>
    <title>LeanCloud云引擎因流控无法唤醒解决方案</title>
    <url>/archives/d179c86b.html</url>
    <content><![CDATA[<p>前段时间，博客的Valine评论后基本收不到邮件通知，这是因为LeanCloud的云引擎休眠后没有被定时任务正常唤醒。去LeanCloud一看，发现了”因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠”。</p>
<blockquote>
<p>官方说法：我们近期发现有大量云引擎的体验版（免费版）用户创建了在同一时刻触发的定时任务唤醒容器运行，会对服务的负载产生一定影响。因此我们决定根据服务器的负载，对这些定时任务添加流控，通过定时任务唤醒容器将有可能会失败。这个改动不会对云引擎的标准版（付费版）用户产生影响。</p>
</blockquote>
<p>下面是解决方案。</p>
<a id="more"></a>

<h2 id="云引擎体验实例休眠策略"><a href="#云引擎体验实例休眠策略" class="headerlink" title="云引擎体验实例休眠策略"></a>云引擎体验实例休眠策略</h2><p>体验实例会执行休眠策略：</p>
<ul>
<li>如果应用最近一段时间（半小时）没有任何外部请求，则休眠。</li>
<li>休眠后如果有新的外部请求实例则马上启动。访问者的体验是第一个请求响应时间是 5 ~ 30 秒（视实例启动时间而定），后续访问响应速度恢复正常。</li>
<li>强制休眠：如果最近 24 小时内累计运行超过 18 小时，则强制休眠。此时新的请求会收到 503 的错误响应码，该错误可在 <code>云引擎 &gt; 统计</code> 中查看。</li>
</ul>
<p>那么我们只要每三十分钟之内在外部访问一次即可解决。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>这里使用的是 GitHub+Actions。</p>
<ol>
<li>打开GitHub，鼠标点击自己头像，然后选择<code>setting</code>。</li>
<li>点击<code>Developer settings</code>。</li>
<li>选择<code>Personal access tokens</code>，添加一个新的<code>TOKEN</code>。这个<code>TOKEN</code>主要使用来启动actions和上传结果用的。设置名字为 <code>GITHUB_TOKEN</code> , 然后勾选 <code>repo , admin:repo_hook , workflow</code> 等选项，最后点击<code>Generate token</code>即可。<strong>名字请务必使用<code>GITHUB_TOKEN</code>。</strong></li>
<li>接下来FORK项目。地址：<a href="https://github.com/blogimg/WakeLeanCloud" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/blogimg/WakeLeanCloud</a></li>
<li>成功FORK后，进入项目的设置。选择<code>Secrets</code>，添加你的<strong>评论后台地址，一定是 Leancloud 的后台地址（环境变量 <code>ADMIN_URL</code>），而不是你的博客地址</strong>。其中 <code>Name</code>的名字必须为<code>SITE</code>，<code>Value</code>可以是多个后台地址（注意请求头也要写），用英文逗号分隔。</li>
<li>接下来对自己的项目点个star就能启动了，启动后请切换到actions，看看是否运行成功。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.antmoe.com/posts/ff6aef7b/#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener external nofollow noreferrer">优雅解决 LeanCloud 流控问题</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Valine</tag>
        <tag>LeanCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Word公式如何多行对齐</title>
    <url>/archives/192fb032.html</url>
    <content><![CDATA[<p>在用Word写论文时，经常碰到公式很长的情况，这时候需要将公式分成多行，每一行的公式在等号处对齐。</p>
<a id="more"></a>

<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>举例来说，预期在Word中插入如下的公式：</p>
<p>$$<br>\begin{aligned}<br>x(t) &amp;=A \cos \left\lbrack\omega_{c} t+\varphi_{n}(t)\right\rbrack \<br>&amp; \approx A \cos \omega_{c} t-A \sin \omega_{c} t \sin \left\lbrack\varphi_{n}(t)\right\rbrack \<br>&amp; \approx A \cos \omega_{c} t-A \varphi_{n}(t) \sin \omega_{c} t<br>\end{aligned}<br>$$</p>
<p>具体步骤如下：</p>
<ol>
<li>首先在同一行内输入公式</li>
</ol>
<img src="/archives/192fb032/%E5%8D%95%E8%A1%8C%E5%85%AC%E5%BC%8F.png" class="" title="单行公式">

<ol start="2">
<li><p>在第三个等号前插入软回车（Shift+Enter）</p>
</li>
<li><p>在<strong>第二个</strong>和<strong>第三个</strong>等号前点击右键，点击“在此字符处对齐”</p>
</li>
</ol>
<img src="/archives/192fb032/%E5%AD%97%E7%AC%A6%E5%A4%84%E5%AF%B9%E9%BD%90.png" class="" title="字符处对齐">

<p>得到：</p>
<img src="/archives/192fb032/%E6%8C%89%E7%85%A7%E7%AD%89%E5%8F%B7%E5%AF%B9%E9%BD%90.png" class="" title="按照等号对齐">

<p>同理，处理后续的等号。</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Word</tag>
      </tags>
  </entry>
  <entry>
    <title>Word题注对图表进行自动化标号</title>
    <url>/archives/ee1790c8.html</url>
    <content><![CDATA[<p>写论文时一般都会要求图、表进行标号，正文中需要通过这个标号来引用图、表。这时候，如果一个个手打就会碰到以下问题：</p>
<ol>
<li>当我们需要在文中添加一张图片，那么这会导致后续的图片标号全部需要重新编号，同时正文中的引用也全部需要更改。</li>
<li>当我们需要图片目录的时候就非常麻烦。</li>
</ol>
<p>这时候我们就需要使用<strong>题注</strong>。</p>
<a id="more"></a>

<h2 id="题注的优势"><a href="#题注的优势" class="headerlink" title="题注的优势"></a>题注的优势</h2><ol>
<li><strong>自动更新</strong>：题注可以随着图片或表格位置的移动，进行编号的自动更新，省去手动更改麻烦。</li>
<li><strong>带章节序号</strong>：题注可以自带章节序号，也可以随着章节序号的更改而自动更改。</li>
<li><strong>统一样式</strong>：在样式选项卡中有题注一项，可以用来快速更改和统一题注的样式。</li>
<li><strong>交叉引用</strong>：正文中需要提到图表名称的地方，可以直接从题注中引用，且同样可自动更新。即图表编号更改后，正文中形如<code>[如图x-x所示]</code>的编号也会随之自动改变。</li>
<li><strong>方便生成目录</strong>：插入题注后，可以通过<code>「题注-插入表目录」</code>来快速生成图表目录。</li>
</ol>
<h2 id="插入题注的具体方法"><a href="#插入题注的具体方法" class="headerlink" title="插入题注的具体方法"></a>插入题注的具体方法</h2><ol>
<li>选中图片或表格，点击<code>「引用 - 插入题注」</code>，弹出题注窗口。</li>
</ol>
<img src="/archives/ee1790c8/%E6%8F%92%E5%85%A5%E9%A2%98%E6%B3%A8-1.png" class="" title="插入题注-1">

<ol start="2">
<li>然后我们可以修改题注的名称，创建和选择标签，选择题注位置，设置编号以及章节号等。</li>
</ol>
<img src="/archives/ee1790c8/%E6%8F%92%E5%85%A5%E9%A2%98%E6%B3%A8-2.png" class="" title="插入题注-2">

<p>这时候，可能会出现如下错误：</p>
<blockquote>
<p>题注或页码中不含章节号请使用“开始”选项卡下的“多级列表”按钮然后选择一种连接到标题样式的编号方案。</p>
</blockquote>
<h3 id="定义新的多级列表并与自定义样式关联"><a href="#定义新的多级列表并与自定义样式关联" class="headerlink" title="定义新的多级列表并与自定义样式关联"></a>定义新的多级列表并与自定义样式关联</h3><p>我们需要定义新的多级列表并关联自定义样式：</p>
<ol>
<li><code>「开始 - 多级列表 - 定义新的多级列表」</code></li>
</ol>
<img src="/archives/ee1790c8/%E5%AE%9A%E4%B9%89%E6%96%B0%E7%9A%84%E5%A4%9A%E7%BA%A7%E5%88%97%E8%A1%A8%E5%B9%B6%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E5%85%B3%E8%81%94-1.png" class="" title="定义新的多级列表并与自定义样式关联-1">

<ol start="2">
<li>我们可以在弹出的框里面修改编号格式、起始编号、<strong>将级别链接到样式</strong>：</li>
</ol>
<img src="/archives/ee1790c8/%E5%AE%9A%E4%B9%89%E6%96%B0%E7%9A%84%E5%A4%9A%E7%BA%A7%E5%88%97%E8%A1%A8%E5%B9%B6%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E5%85%B3%E8%81%94-2.png" class="" title="定义新的多级列表并与自定义样式关联-2">

<p>然后我们再插入题注，就不会出现上面的错误了。</p>
<h2 id="交叉引用具体方法"><a href="#交叉引用具体方法" class="headerlink" title="交叉引用具体方法"></a>交叉引用具体方法</h2><img src="/archives/ee1790c8/%E4%BA%A4%E5%8F%89%E5%BC%95%E7%94%A8.png" class="" title="交叉引用">

<h2 id="插入图、表目录具体方法"><a href="#插入图、表目录具体方法" class="headerlink" title="插入图、表目录具体方法"></a>插入图、表目录具体方法</h2><img src="/archives/ee1790c8/%E6%8F%92%E5%85%A5%E7%9B%AE%E5%BD%95.png" class="" title="插入目录">


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://sspai.com/post/51189" target="_blank" rel="noopener external nofollow noreferrer">Word 中的题注和图表目录，可以这样自动化</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Word</tag>
        <tag>题注</tag>
      </tags>
  </entry>
  <entry>
    <title>新冠肺炎疫情数据可视化</title>
    <url>/archives/e1eb25a0.html</url>
    <content><![CDATA[<p>全国新冠肺炎（2019-nCoV）数据可视化，数据来源于丁香园，从不同的角度进行呈现。</p>
<p>数据更新：</p>
<ul>
<li>2020.02.21-全国除湖北地区的新增病例有所增加，20日（45人）、21日（258人），这是因为山东、浙江两地的监狱确诊了200多人。</li>
<li>2020.02.20-湖北省新增疑似病例下降到3位数，因为<strong>2月14日发布的第六版《新型冠状病毒肺炎诊疗方案》中，对诊断标准又做了调整，不再分湖北和湖北以外，取消了专门针对湖北的临床诊断病例。所以，核减人数中部分可能是12日临床诊断纳入后，经过观察再核实排除的病人</strong>。而这个核减的病例是在<strong>当日新增</strong>中！！这也造成了武汉新增数据比湖北省还多的现象。</li>
<li>2020.02.13-从今天起，湖北省将临床诊断病例数纳入确诊病例数进行公布，因此今天湖北省一下新增确诊病例14000多人，做预测模型的小伙伴恐怕要哭晕….</li>
</ul>
<blockquote>
<p>We must remember that these are people, not numbers.  —WHO</p>
</blockquote>
<a id="more"></a>

<h2 id="全国新冠肺炎疫情地图"><a href="#全国新冠肺炎疫情地图" class="headerlink" title="全国新冠肺炎疫情地图"></a>全国新冠肺炎疫情地图</h2><p>直观的看下全国疫情实时情况：</p>
<div id="echarts7363" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts7363'));

        // 指定图表的配置项和数据
        var option = {
    "baseOption": {
        "series": [
            {
                "type": "map",
                "label": {
                    "show": true,
                    "position": "top",
                    "margin": 8,
                    "fontSize": 8
                },
                "mapType": "china",
                "data": [
                    {
                        "name": "上海",
                        "value": 334
                    },
                    {
                        "name": "云南",
                        "value": 174
                    },
                    {
                        "name": "内蒙古",
                        "value": 75
                    },
                    {
                        "name": "北京",
                        "value": 396
                    },
                    {
                        "name": "吉林",
                        "value": 91
                    },
                    {
                        "name": "四川",
                        "value": 525
                    },
                    {
                        "name": "天津",
                        "value": 132
                    },
                    {
                        "name": "宁夏",
                        "value": 71
                    },
                    {
                        "name": "安徽",
                        "value": 988
                    },
                    {
                        "name": "山东",
                        "value": 749
                    },
                    {
                        "name": "山西",
                        "value": 132
                    },
                    {
                        "name": "广东",
                        "value": 1333
                    },
                    {
                        "name": "广西",
                        "value": 246
                    },
                    {
                        "name": "江苏",
                        "value": 631
                    },
                    {
                        "name": "江西",
                        "value": 934
                    },
                    {
                        "name": "河北",
                        "value": 308
                    },
                    {
                        "name": "河南",
                        "value": 1267
                    },
                    {
                        "name": "浙江",
                        "value": 1203
                    },
                    {
                        "name": "海南",
                        "value": 168
                    },
                    {
                        "name": "湖北",
                        "value": 62662
                    },
                    {
                        "name": "湖南",
                        "value": 1011
                    },
                    {
                        "name": "福建",
                        "value": 293
                    },
                    {
                        "name": "贵州",
                        "value": 146
                    },
                    {
                        "name": "辽宁",
                        "value": 121
                    },
                    {
                        "name": "重庆",
                        "value": 567
                    },
                    {
                        "name": "陕西",
                        "value": 245
                    },
                    {
                        "name": "青海",
                        "value": 18
                    },
                    {
                        "name": "黑龙江",
                        "value": 479
                    }
                ],
                "roam": true,
                "zoom": 1,
                "showLegendSymbol": true,
                "emphasis": {},
                "rippleEffect": {
                    "show": true,
                    "brushType": "stroke",
                    "scale": 2.5,
                    "period": 4
                }
            }
        ],
        "timeline": {
            "axisType": "category",
            "orient": "horizontal",
            "autoPlay": false,
            "controlPosition": "left",
            "loop": true,
            "rewind": false,
            "show": true,
            "inverse": false,
            "bottom": "-5px",
            "data": [
                "01-24",
                "01-25",
                "01-26",
                "01-27",
                "01-28",
                "01-29",
                "01-30",
                "01-31",
                "02-01",
                "02-02",
                "02-03",
                "02-04",
                "02-05",
                "02-06",
                "02-07",
                "02-08",
                "02-09",
                "02-10",
                "02-11",
                "02-12",
                "02-13",
                "02-14",
                "02-15",
                "02-16",
                "02-17",
                "02-18",
                "02-19",
                "02-20",
                "02-21"
            ]
        },
        "visualMap": {
            "show": true,
            "type": "piecewise",
            "min": 0,
            "max": 100,
            "inRange": {
                "color": [
                    "#50a3ba",
                    "#eac763",
                    "#d94e5d"
                ]
            },
            "calculable": true,
            "inverse": false,
            "splitNumber": 5,
            "orient": "vertical",
            "showLabel": true,
            "itemWidth": 20,
            "itemHeight": 14,
            "borderWidth": 0,
            "pieces": [
                {
                    "min": 10000,
                    "color": "#4F060d"
                },
                {
                    "max": 9999,
                    "min": 1000,
                    "color": "#811C24"
                },
                {
                    "max": 999,
                    "min": 500,
                    "color": "#CA2B2F"
                },
                {
                    "max": 499,
                    "min": 100,
                    "color": "#CA5446"
                },
                {
                    "max": 99,
                    "min": 10,
                    "color": "#F09082"
                },
                {
                    "max": 9,
                    "min": 1,
                    "color": "#FCEBCF"
                },
                {
                    "max": 0,
                    "color": "#FFFEE7"
                }
            ]
        }
    },
    "options": [
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "云南",
                            "value": 5
                        },
                        {
                            "name": "内蒙古",
                            "value": 2
                        },
                        {
                            "name": "北京",
                            "value": 36
                        },
                        {
                            "name": "吉林",
                            "value": 3
                        },
                        {
                            "name": "四川",
                            "value": 15
                        },
                        {
                            "name": "宁夏",
                            "value": 2
                        },
                        {
                            "name": "安徽",
                            "value": 15
                        },
                        {
                            "name": "山东",
                            "value": 15
                        },
                        {
                            "name": "山西",
                            "value": 1
                        },
                        {
                            "name": "广东",
                            "value": 53
                        },
                        {
                            "name": "广西",
                            "value": 13
                        },
                        {
                            "name": "江苏",
                            "value": 9
                        },
                        {
                            "name": "江西",
                            "value": 7
                        },
                        {
                            "name": "河北",
                            "value": 2
                        },
                        {
                            "name": "河南",
                            "value": 9
                        },
                        {
                            "name": "浙江",
                            "value": 43
                        },
                        {
                            "name": "海南",
                            "value": 8
                        },
                        {
                            "name": "湖北",
                            "value": 549
                        },
                        {
                            "name": "湖南",
                            "value": 24
                        },
                        {
                            "name": "甘肃",
                            "value": 2
                        },
                        {
                            "name": "福建",
                            "value": 10
                        },
                        {
                            "name": "贵州",
                            "value": 3
                        },
                        {
                            "name": "辽宁",
                            "value": 4
                        },
                        {
                            "name": "重庆",
                            "value": 27
                        },
                        {
                            "name": "陕西",
                            "value": 5
                        },
                        {
                            "name": "黑龙江",
                            "value": 4
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "云南",
                            "value": 11
                        },
                        {
                            "name": "内蒙古",
                            "value": 7
                        },
                        {
                            "name": "北京",
                            "value": 41
                        },
                        {
                            "name": "吉林",
                            "value": 4
                        },
                        {
                            "name": "四川",
                            "value": 28
                        },
                        {
                            "name": "宁夏",
                            "value": 3
                        },
                        {
                            "name": "安徽",
                            "value": 39
                        },
                        {
                            "name": "山东",
                            "value": 27
                        },
                        {
                            "name": "山西",
                            "value": 6
                        },
                        {
                            "name": "广东",
                            "value": 78
                        },
                        {
                            "name": "广西",
                            "value": 23
                        },
                        {
                            "name": "新疆",
                            "value": 3
                        },
                        {
                            "name": "江苏",
                            "value": 18
                        },
                        {
                            "name": "江西",
                            "value": 18
                        },
                        {
                            "name": "河北",
                            "value": 8
                        },
                        {
                            "name": "河南",
                            "value": 32
                        },
                        {
                            "name": "浙江",
                            "value": 62
                        },
                        {
                            "name": "海南",
                            "value": 19
                        },
                        {
                            "name": "湖北",
                            "value": 730
                        },
                        {
                            "name": "湖南",
                            "value": 43
                        },
                        {
                            "name": "甘肃",
                            "value": 4
                        },
                        {
                            "name": "福建",
                            "value": 18
                        },
                        {
                            "name": "贵州",
                            "value": 4
                        },
                        {
                            "name": "辽宁",
                            "value": 16
                        },
                        {
                            "name": "重庆",
                            "value": 57
                        },
                        {
                            "name": "陕西",
                            "value": 15
                        },
                        {
                            "name": "青海",
                            "value": 1
                        },
                        {
                            "name": "黑龙江",
                            "value": 9
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "云南",
                            "value": 16
                        },
                        {
                            "name": "内蒙古",
                            "value": 7
                        },
                        {
                            "name": "北京",
                            "value": 68
                        },
                        {
                            "name": "四川",
                            "value": 44
                        },
                        {
                            "name": "天津",
                            "value": 14
                        },
                        {
                            "name": "宁夏",
                            "value": 4
                        },
                        {
                            "name": "安徽",
                            "value": 60
                        },
                        {
                            "name": "山东",
                            "value": 46
                        },
                        {
                            "name": "山西",
                            "value": 9
                        },
                        {
                            "name": "广东",
                            "value": 111
                        },
                        {
                            "name": "广西",
                            "value": 36
                        },
                        {
                            "name": "新疆",
                            "value": 4
                        },
                        {
                            "name": "江苏",
                            "value": 33
                        },
                        {
                            "name": "江西",
                            "value": 36
                        },
                        {
                            "name": "河北",
                            "value": 13
                        },
                        {
                            "name": "河南",
                            "value": 83
                        },
                        {
                            "name": "浙江",
                            "value": 104
                        },
                        {
                            "name": "海南",
                            "value": 22
                        },
                        {
                            "name": "湖北",
                            "value": 1058
                        },
                        {
                            "name": "湖南",
                            "value": 69
                        },
                        {
                            "name": "澳门",
                            "value": 2
                        },
                        {
                            "name": "甘肃",
                            "value": 7
                        },
                        {
                            "name": "福建",
                            "value": 35
                        },
                        {
                            "name": "贵州",
                            "value": 5
                        },
                        {
                            "name": "辽宁",
                            "value": 21
                        },
                        {
                            "name": "重庆",
                            "value": 75
                        },
                        {
                            "name": "陕西",
                            "value": 22
                        },
                        {
                            "name": "黑龙江",
                            "value": 15
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 53
                        },
                        {
                            "name": "云南",
                            "value": 26
                        },
                        {
                            "name": "内蒙古",
                            "value": 11
                        },
                        {
                            "name": "北京",
                            "value": 80
                        },
                        {
                            "name": "吉林",
                            "value": 6
                        },
                        {
                            "name": "四川",
                            "value": 69
                        },
                        {
                            "name": "天津",
                            "value": 22
                        },
                        {
                            "name": "宁夏",
                            "value": 7
                        },
                        {
                            "name": "安徽",
                            "value": 70
                        },
                        {
                            "name": "山东",
                            "value": 75
                        },
                        {
                            "name": "山西",
                            "value": 13
                        },
                        {
                            "name": "广东",
                            "value": 151
                        },
                        {
                            "name": "广西",
                            "value": 46
                        },
                        {
                            "name": "新疆",
                            "value": 5
                        },
                        {
                            "name": "江苏",
                            "value": 47
                        },
                        {
                            "name": "江西",
                            "value": 48
                        },
                        {
                            "name": "河北",
                            "value": 18
                        },
                        {
                            "name": "河南",
                            "value": 128
                        },
                        {
                            "name": "浙江",
                            "value": 128
                        },
                        {
                            "name": "海南",
                            "value": 33
                        },
                        {
                            "name": "湖北",
                            "value": 1423
                        },
                        {
                            "name": "湖南",
                            "value": 100
                        },
                        {
                            "name": "甘肃",
                            "value": 14
                        },
                        {
                            "name": "福建",
                            "value": 59
                        },
                        {
                            "name": "贵州",
                            "value": 7
                        },
                        {
                            "name": "辽宁",
                            "value": 27
                        },
                        {
                            "name": "重庆",
                            "value": 110
                        },
                        {
                            "name": "陕西",
                            "value": 35
                        },
                        {
                            "name": "青海",
                            "value": 6
                        },
                        {
                            "name": "黑龙江",
                            "value": 21
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 66
                        },
                        {
                            "name": "云南",
                            "value": 44
                        },
                        {
                            "name": "内蒙古",
                            "value": 15
                        },
                        {
                            "name": "北京",
                            "value": 91
                        },
                        {
                            "name": "吉林",
                            "value": 8
                        },
                        {
                            "name": "四川",
                            "value": 90
                        },
                        {
                            "name": "天津",
                            "value": 24
                        },
                        {
                            "name": "宁夏",
                            "value": 11
                        },
                        {
                            "name": "安徽",
                            "value": 106
                        },
                        {
                            "name": "山东",
                            "value": 95
                        },
                        {
                            "name": "山西",
                            "value": 20
                        },
                        {
                            "name": "广东",
                            "value": 207
                        },
                        {
                            "name": "广西",
                            "value": 51
                        },
                        {
                            "name": "新疆",
                            "value": 10
                        },
                        {
                            "name": "江苏",
                            "value": 70
                        },
                        {
                            "name": "江西",
                            "value": 72
                        },
                        {
                            "name": "河北",
                            "value": 33
                        },
                        {
                            "name": "河南",
                            "value": 168
                        },
                        {
                            "name": "浙江",
                            "value": 173
                        },
                        {
                            "name": "海南",
                            "value": 40
                        },
                        {
                            "name": "湖北",
                            "value": 2714
                        },
                        {
                            "name": "湖南",
                            "value": 143
                        },
                        {
                            "name": "甘肃",
                            "value": 19
                        },
                        {
                            "name": "福建",
                            "value": 80
                        },
                        {
                            "name": "贵州",
                            "value": 9
                        },
                        {
                            "name": "辽宁",
                            "value": 34
                        },
                        {
                            "name": "重庆",
                            "value": 132
                        },
                        {
                            "name": "陕西",
                            "value": 46
                        },
                        {
                            "name": "黑龙江",
                            "value": 30
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 96
                        },
                        {
                            "name": "云南",
                            "value": 55
                        },
                        {
                            "name": "内蒙古",
                            "value": 16
                        },
                        {
                            "name": "北京",
                            "value": 111
                        },
                        {
                            "name": "吉林",
                            "value": 9
                        },
                        {
                            "name": "四川",
                            "value": 108
                        },
                        {
                            "name": "天津",
                            "value": 27
                        },
                        {
                            "name": "宁夏",
                            "value": 12
                        },
                        {
                            "name": "安徽",
                            "value": 155
                        },
                        {
                            "name": "山东",
                            "value": 130
                        },
                        {
                            "name": "山西",
                            "value": 27
                        },
                        {
                            "name": "广东",
                            "value": 277
                        },
                        {
                            "name": "广西",
                            "value": 58
                        },
                        {
                            "name": "新疆",
                            "value": 13
                        },
                        {
                            "name": "江苏",
                            "value": 99
                        },
                        {
                            "name": "江西",
                            "value": 109
                        },
                        {
                            "name": "河北",
                            "value": 48
                        },
                        {
                            "name": "河南",
                            "value": 206
                        },
                        {
                            "name": "浙江",
                            "value": 296
                        },
                        {
                            "name": "海南",
                            "value": 43
                        },
                        {
                            "name": "湖北",
                            "value": 3554
                        },
                        {
                            "name": "湖南",
                            "value": 221
                        },
                        {
                            "name": "甘肃",
                            "value": 24
                        },
                        {
                            "name": "福建",
                            "value": 84
                        },
                        {
                            "name": "贵州",
                            "value": 9
                        },
                        {
                            "name": "辽宁",
                            "value": 39
                        },
                        {
                            "name": "重庆",
                            "value": 147
                        },
                        {
                            "name": "陕西",
                            "value": 56
                        },
                        {
                            "name": "黑龙江",
                            "value": 38
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 112
                        },
                        {
                            "name": "云南",
                            "value": 70
                        },
                        {
                            "name": "内蒙古",
                            "value": 18
                        },
                        {
                            "name": "北京",
                            "value": 114
                        },
                        {
                            "name": "吉林",
                            "value": 14
                        },
                        {
                            "name": "四川",
                            "value": 142
                        },
                        {
                            "name": "天津",
                            "value": 31
                        },
                        {
                            "name": "宁夏",
                            "value": 17
                        },
                        {
                            "name": "安徽",
                            "value": 200
                        },
                        {
                            "name": "山东",
                            "value": 158
                        },
                        {
                            "name": "山西",
                            "value": 35
                        },
                        {
                            "name": "广东",
                            "value": 354
                        },
                        {
                            "name": "广西",
                            "value": 78
                        },
                        {
                            "name": "新疆",
                            "value": 14
                        },
                        {
                            "name": "江苏",
                            "value": 129
                        },
                        {
                            "name": "江西",
                            "value": 162
                        },
                        {
                            "name": "河北",
                            "value": 65
                        },
                        {
                            "name": "河南",
                            "value": 278
                        },
                        {
                            "name": "浙江",
                            "value": 428
                        },
                        {
                            "name": "海南",
                            "value": 46
                        },
                        {
                            "name": "湖北",
                            "value": 4903
                        },
                        {
                            "name": "湖南",
                            "value": 277
                        },
                        {
                            "name": "甘肃",
                            "value": 26
                        },
                        {
                            "name": "福建",
                            "value": 101
                        },
                        {
                            "name": "贵州",
                            "value": 12
                        },
                        {
                            "name": "辽宁",
                            "value": 41
                        },
                        {
                            "name": "重庆",
                            "value": 182
                        },
                        {
                            "name": "陕西",
                            "value": 63
                        },
                        {
                            "name": "青海",
                            "value": 8
                        },
                        {
                            "name": "黑龙江",
                            "value": 44
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 135
                        },
                        {
                            "name": "云南",
                            "value": 83
                        },
                        {
                            "name": "内蒙古",
                            "value": 20
                        },
                        {
                            "name": "北京",
                            "value": 139
                        },
                        {
                            "name": "吉林",
                            "value": 14
                        },
                        {
                            "name": "四川",
                            "value": 177
                        },
                        {
                            "name": "天津",
                            "value": 32
                        },
                        {
                            "name": "宁夏",
                            "value": 21
                        },
                        {
                            "name": "安徽",
                            "value": 237
                        },
                        {
                            "name": "山东",
                            "value": 184
                        },
                        {
                            "name": "山西",
                            "value": 39
                        },
                        {
                            "name": "广东",
                            "value": 436
                        },
                        {
                            "name": "广西",
                            "value": 87
                        },
                        {
                            "name": "新疆",
                            "value": 17
                        },
                        {
                            "name": "江苏",
                            "value": 168
                        },
                        {
                            "name": "江西",
                            "value": 240
                        },
                        {
                            "name": "河北",
                            "value": 82
                        },
                        {
                            "name": "河南",
                            "value": 352
                        },
                        {
                            "name": "浙江",
                            "value": 538
                        },
                        {
                            "name": "海南",
                            "value": 52
                        },
                        {
                            "name": "湖北",
                            "value": 5806
                        },
                        {
                            "name": "湖南",
                            "value": 332
                        },
                        {
                            "name": "甘肃",
                            "value": 29
                        },
                        {
                            "name": "福建",
                            "value": 120
                        },
                        {
                            "name": "贵州",
                            "value": 29
                        },
                        {
                            "name": "辽宁",
                            "value": 48
                        },
                        {
                            "name": "重庆",
                            "value": 211
                        },
                        {
                            "name": "陕西",
                            "value": 87
                        },
                        {
                            "name": "青海",
                            "value": 8
                        },
                        {
                            "name": "黑龙江",
                            "value": 59
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 169
                        },
                        {
                            "name": "云南",
                            "value": 93
                        },
                        {
                            "name": "内蒙古",
                            "value": 23
                        },
                        {
                            "name": "北京",
                            "value": 168
                        },
                        {
                            "name": "吉林",
                            "value": 17
                        },
                        {
                            "name": "四川",
                            "value": 207
                        },
                        {
                            "name": "天津",
                            "value": 41
                        },
                        {
                            "name": "宁夏",
                            "value": 26
                        },
                        {
                            "name": "安徽",
                            "value": 297
                        },
                        {
                            "name": "山东",
                            "value": 206
                        },
                        {
                            "name": "山西",
                            "value": 47
                        },
                        {
                            "name": "广东",
                            "value": 535
                        },
                        {
                            "name": "广西",
                            "value": 100
                        },
                        {
                            "name": "新疆",
                            "value": 18
                        },
                        {
                            "name": "江苏",
                            "value": 202
                        },
                        {
                            "name": "江西",
                            "value": 286
                        },
                        {
                            "name": "河北",
                            "value": 96
                        },
                        {
                            "name": "河南",
                            "value": 422
                        },
                        {
                            "name": "浙江",
                            "value": 599
                        },
                        {
                            "name": "海南",
                            "value": 62
                        },
                        {
                            "name": "湖北",
                            "value": 7153
                        },
                        {
                            "name": "湖南",
                            "value": 389
                        },
                        {
                            "name": "甘肃",
                            "value": 40
                        },
                        {
                            "name": "福建",
                            "value": 144
                        },
                        {
                            "name": "辽宁",
                            "value": 64
                        },
                        {
                            "name": "重庆",
                            "value": 247
                        },
                        {
                            "name": "陕西",
                            "value": 101
                        },
                        {
                            "name": "青海",
                            "value": 9
                        },
                        {
                            "name": "黑龙江",
                            "value": 80
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 182
                        },
                        {
                            "name": "云南",
                            "value": 105
                        },
                        {
                            "name": "内蒙古",
                            "value": 27
                        },
                        {
                            "name": "北京",
                            "value": 191
                        },
                        {
                            "name": "吉林",
                            "value": 23
                        },
                        {
                            "name": "四川",
                            "value": 231
                        },
                        {
                            "name": "天津",
                            "value": 48
                        },
                        {
                            "name": "宁夏",
                            "value": 28
                        },
                        {
                            "name": "安徽",
                            "value": 340
                        },
                        {
                            "name": "山东",
                            "value": 230
                        },
                        {
                            "name": "山西",
                            "value": 56
                        },
                        {
                            "name": "广东",
                            "value": 632
                        },
                        {
                            "name": "广西",
                            "value": 111
                        },
                        {
                            "name": "新疆",
                            "value": 21
                        },
                        {
                            "name": "江苏",
                            "value": 236
                        },
                        {
                            "name": "江西",
                            "value": 333
                        },
                        {
                            "name": "河北",
                            "value": 104
                        },
                        {
                            "name": "河南",
                            "value": 493
                        },
                        {
                            "name": "浙江",
                            "value": 661
                        },
                        {
                            "name": "海南",
                            "value": 64
                        },
                        {
                            "name": "湖北",
                            "value": 9074
                        },
                        {
                            "name": "湖南",
                            "value": 463
                        },
                        {
                            "name": "甘肃",
                            "value": 40
                        },
                        {
                            "name": "福建",
                            "value": 159
                        },
                        {
                            "name": "西藏",
                            "value": 1
                        },
                        {
                            "name": "贵州",
                            "value": 38
                        },
                        {
                            "name": "辽宁",
                            "value": 70
                        },
                        {
                            "name": "重庆",
                            "value": 275
                        },
                        {
                            "name": "陕西",
                            "value": 116
                        },
                        {
                            "name": "青海",
                            "value": 11
                        },
                        {
                            "name": "黑龙江",
                            "value": 95
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 203
                        },
                        {
                            "name": "云南",
                            "value": 114
                        },
                        {
                            "name": "内蒙古",
                            "value": 34
                        },
                        {
                            "name": "北京",
                            "value": 212
                        },
                        {
                            "name": "吉林",
                            "value": 31
                        },
                        {
                            "name": "四川",
                            "value": 254
                        },
                        {
                            "name": "天津",
                            "value": 60
                        },
                        {
                            "name": "宁夏",
                            "value": 31
                        },
                        {
                            "name": "安徽",
                            "value": 408
                        },
                        {
                            "name": "山东",
                            "value": 259
                        },
                        {
                            "name": "山西",
                            "value": 66
                        },
                        {
                            "name": "广东",
                            "value": 725
                        },
                        {
                            "name": "广西",
                            "value": 127
                        },
                        {
                            "name": "新疆",
                            "value": 24
                        },
                        {
                            "name": "江苏",
                            "value": 271
                        },
                        {
                            "name": "江西",
                            "value": 391
                        },
                        {
                            "name": "河北",
                            "value": 113
                        },
                        {
                            "name": "河南",
                            "value": 566
                        },
                        {
                            "name": "浙江",
                            "value": 724
                        },
                        {
                            "name": "海南",
                            "value": 72
                        },
                        {
                            "name": "湖北",
                            "value": 11177
                        },
                        {
                            "name": "湖南",
                            "value": 521
                        },
                        {
                            "name": "甘肃",
                            "value": 51
                        },
                        {
                            "name": "福建",
                            "value": 179
                        },
                        {
                            "name": "贵州",
                            "value": 46
                        },
                        {
                            "name": "辽宁",
                            "value": 74
                        },
                        {
                            "name": "重庆",
                            "value": 312
                        },
                        {
                            "name": "陕西",
                            "value": 128
                        },
                        {
                            "name": "青海",
                            "value": 13
                        },
                        {
                            "name": "黑龙江",
                            "value": 121
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 219
                        },
                        {
                            "name": "云南",
                            "value": 119
                        },
                        {
                            "name": "内蒙古",
                            "value": 35
                        },
                        {
                            "name": "北京",
                            "value": 228
                        },
                        {
                            "name": "吉林",
                            "value": 42
                        },
                        {
                            "name": "四川",
                            "value": 282
                        },
                        {
                            "name": "天津",
                            "value": 67
                        },
                        {
                            "name": "宁夏",
                            "value": 34
                        },
                        {
                            "name": "安徽",
                            "value": 480
                        },
                        {
                            "name": "山东",
                            "value": 275
                        },
                        {
                            "name": "山西",
                            "value": 74
                        },
                        {
                            "name": "广东",
                            "value": 813
                        },
                        {
                            "name": "广西",
                            "value": 139
                        },
                        {
                            "name": "新疆",
                            "value": 29
                        },
                        {
                            "name": "江苏",
                            "value": 308
                        },
                        {
                            "name": "江西",
                            "value": 476
                        },
                        {
                            "name": "河北",
                            "value": 126
                        },
                        {
                            "name": "河南",
                            "value": 675
                        },
                        {
                            "name": "浙江",
                            "value": 829
                        },
                        {
                            "name": "海南",
                            "value": 80
                        },
                        {
                            "name": "湖北",
                            "value": 13522
                        },
                        {
                            "name": "湖南",
                            "value": 593
                        },
                        {
                            "name": "甘肃",
                            "value": 57
                        },
                        {
                            "name": "福建",
                            "value": 194
                        },
                        {
                            "name": "西藏",
                            "value": 1
                        },
                        {
                            "name": "贵州",
                            "value": 58
                        },
                        {
                            "name": "辽宁",
                            "value": 81
                        },
                        {
                            "name": "重庆",
                            "value": 344
                        },
                        {
                            "name": "陕西",
                            "value": 142
                        },
                        {
                            "name": "青海",
                            "value": 15
                        },
                        {
                            "name": "黑龙江",
                            "value": 155
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 243
                        },
                        {
                            "name": "云南",
                            "value": 124
                        },
                        {
                            "name": "内蒙古",
                            "value": 42
                        },
                        {
                            "name": "北京",
                            "value": 253
                        },
                        {
                            "name": "吉林",
                            "value": 54
                        },
                        {
                            "name": "四川",
                            "value": 301
                        },
                        {
                            "name": "天津",
                            "value": 69
                        },
                        {
                            "name": "安徽",
                            "value": 530
                        },
                        {
                            "name": "山东",
                            "value": 307
                        },
                        {
                            "name": "山西",
                            "value": 81
                        },
                        {
                            "name": "广东",
                            "value": 895
                        },
                        {
                            "name": "广西",
                            "value": 150
                        },
                        {
                            "name": "新疆",
                            "value": 32
                        },
                        {
                            "name": "江苏",
                            "value": 341
                        },
                        {
                            "name": "江西",
                            "value": 548
                        },
                        {
                            "name": "河北",
                            "value": 136
                        },
                        {
                            "name": "河南",
                            "value": 764
                        },
                        {
                            "name": "浙江",
                            "value": 895
                        },
                        {
                            "name": "海南",
                            "value": 91
                        },
                        {
                            "name": "湖北",
                            "value": 16678
                        },
                        {
                            "name": "湖南",
                            "value": 661
                        },
                        {
                            "name": "甘肃",
                            "value": 57
                        },
                        {
                            "name": "福建",
                            "value": 205
                        },
                        {
                            "name": "贵州",
                            "value": 64
                        },
                        {
                            "name": "辽宁",
                            "value": 89
                        },
                        {
                            "name": "重庆",
                            "value": 376
                        },
                        {
                            "name": "陕西",
                            "value": 165
                        },
                        {
                            "name": "青海",
                            "value": 17
                        },
                        {
                            "name": "黑龙江",
                            "value": 190
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 257
                        },
                        {
                            "name": "云南",
                            "value": 133
                        },
                        {
                            "name": "内蒙古",
                            "value": 46
                        },
                        {
                            "name": "北京",
                            "value": 274
                        },
                        {
                            "name": "吉林",
                            "value": 59
                        },
                        {
                            "name": "四川",
                            "value": 321
                        },
                        {
                            "name": "天津",
                            "value": 78
                        },
                        {
                            "name": "宁夏",
                            "value": 40
                        },
                        {
                            "name": "安徽",
                            "value": 591
                        },
                        {
                            "name": "山东",
                            "value": 347
                        },
                        {
                            "name": "山西",
                            "value": 90
                        },
                        {
                            "name": "广东",
                            "value": 970
                        },
                        {
                            "name": "广西",
                            "value": 168
                        },
                        {
                            "name": "新疆",
                            "value": 36
                        },
                        {
                            "name": "江苏",
                            "value": 373
                        },
                        {
                            "name": "江西",
                            "value": 600
                        },
                        {
                            "name": "河北",
                            "value": 157
                        },
                        {
                            "name": "河南",
                            "value": 851
                        },
                        {
                            "name": "浙江",
                            "value": 954
                        },
                        {
                            "name": "海南",
                            "value": 106
                        },
                        {
                            "name": "湖北",
                            "value": 19665
                        },
                        {
                            "name": "湖南",
                            "value": 711
                        },
                        {
                            "name": "甘肃",
                            "value": 62
                        },
                        {
                            "name": "福建",
                            "value": 215
                        },
                        {
                            "name": "贵州",
                            "value": 71
                        },
                        {
                            "name": "辽宁",
                            "value": 94
                        },
                        {
                            "name": "重庆",
                            "value": 400
                        },
                        {
                            "name": "陕西",
                            "value": 173
                        },
                        {
                            "name": "青海",
                            "value": 18
                        },
                        {
                            "name": "黑龙江",
                            "value": 227
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 277
                        },
                        {
                            "name": "云南",
                            "value": 136
                        },
                        {
                            "name": "内蒙古",
                            "value": 50
                        },
                        {
                            "name": "北京",
                            "value": 297
                        },
                        {
                            "name": "吉林",
                            "value": 65
                        },
                        {
                            "name": "四川",
                            "value": 344
                        },
                        {
                            "name": "天津",
                            "value": 81
                        },
                        {
                            "name": "宁夏",
                            "value": 43
                        },
                        {
                            "name": "安徽",
                            "value": 665
                        },
                        {
                            "name": "山东",
                            "value": 386
                        },
                        {
                            "name": "山西",
                            "value": 96
                        },
                        {
                            "name": "广东",
                            "value": 1034
                        },
                        {
                            "name": "广西",
                            "value": 172
                        },
                        {
                            "name": "新疆",
                            "value": 39
                        },
                        {
                            "name": "江苏",
                            "value": 408
                        },
                        {
                            "name": "江西",
                            "value": 661
                        },
                        {
                            "name": "河北",
                            "value": 172
                        },
                        {
                            "name": "河南",
                            "value": 914
                        },
                        {
                            "name": "浙江",
                            "value": 1006
                        },
                        {
                            "name": "海南",
                            "value": 117
                        },
                        {
                            "name": "湖北",
                            "value": 22112
                        },
                        {
                            "name": "湖南",
                            "value": 772
                        },
                        {
                            "name": "甘肃",
                            "value": 67
                        },
                        {
                            "name": "福建",
                            "value": 224
                        },
                        {
                            "name": "贵州",
                            "value": 81
                        },
                        {
                            "name": "辽宁",
                            "value": 99
                        },
                        {
                            "name": "重庆",
                            "value": 415
                        },
                        {
                            "name": "陕西",
                            "value": 184
                        },
                        {
                            "name": "黑龙江",
                            "value": 277
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 286
                        },
                        {
                            "name": "云南",
                            "value": 138
                        },
                        {
                            "name": "内蒙古",
                            "value": 52
                        },
                        {
                            "name": "北京",
                            "value": 315
                        },
                        {
                            "name": "吉林",
                            "value": 69
                        },
                        {
                            "name": "四川",
                            "value": 364
                        },
                        {
                            "name": "天津",
                            "value": 88
                        },
                        {
                            "name": "宁夏",
                            "value": 45
                        },
                        {
                            "name": "安徽",
                            "value": 733
                        },
                        {
                            "name": "山东",
                            "value": 416
                        },
                        {
                            "name": "山西",
                            "value": 104
                        },
                        {
                            "name": "广东",
                            "value": 1095
                        },
                        {
                            "name": "广西",
                            "value": 183
                        },
                        {
                            "name": "新疆",
                            "value": 42
                        },
                        {
                            "name": "江苏",
                            "value": 439
                        },
                        {
                            "name": "江西",
                            "value": 698
                        },
                        {
                            "name": "河北",
                            "value": 195
                        },
                        {
                            "name": "河南",
                            "value": 981
                        },
                        {
                            "name": "浙江",
                            "value": 1048
                        },
                        {
                            "name": "海南",
                            "value": 124
                        },
                        {
                            "name": "湖北",
                            "value": 24953
                        },
                        {
                            "name": "湖南",
                            "value": 803
                        },
                        {
                            "name": "甘肃",
                            "value": 79
                        },
                        {
                            "name": "福建",
                            "value": 239
                        },
                        {
                            "name": "贵州",
                            "value": 89
                        },
                        {
                            "name": "辽宁",
                            "value": 105
                        },
                        {
                            "name": "重庆",
                            "value": 428
                        },
                        {
                            "name": "陕西",
                            "value": 195
                        },
                        {
                            "name": "黑龙江",
                            "value": 296
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 293
                        },
                        {
                            "name": "云南",
                            "value": 141
                        },
                        {
                            "name": "内蒙古",
                            "value": 54
                        },
                        {
                            "name": "北京",
                            "value": 326
                        },
                        {
                            "name": "吉林",
                            "value": 78
                        },
                        {
                            "name": "四川",
                            "value": 386
                        },
                        {
                            "name": "天津",
                            "value": 90
                        },
                        {
                            "name": "宁夏",
                            "value": 45
                        },
                        {
                            "name": "安徽",
                            "value": 779
                        },
                        {
                            "name": "山东",
                            "value": 444
                        },
                        {
                            "name": "山西",
                            "value": 115
                        },
                        {
                            "name": "广东",
                            "value": 1131
                        },
                        {
                            "name": "广西",
                            "value": 195
                        },
                        {
                            "name": "新疆",
                            "value": 45
                        },
                        {
                            "name": "江苏",
                            "value": 468
                        },
                        {
                            "name": "江西",
                            "value": 740
                        },
                        {
                            "name": "河北",
                            "value": 206
                        },
                        {
                            "name": "河南",
                            "value": 1033
                        },
                        {
                            "name": "浙江",
                            "value": 1075
                        },
                        {
                            "name": "海南",
                            "value": 131
                        },
                        {
                            "name": "湖北",
                            "value": 27100
                        },
                        {
                            "name": "湖南",
                            "value": 838
                        },
                        {
                            "name": "甘肃",
                            "value": 79
                        },
                        {
                            "name": "福建",
                            "value": 250
                        },
                        {
                            "name": "贵州",
                            "value": 99
                        },
                        {
                            "name": "辽宁",
                            "value": 107
                        },
                        {
                            "name": "重庆",
                            "value": 450
                        },
                        {
                            "name": "陕西",
                            "value": 208
                        },
                        {
                            "name": "黑龙江",
                            "value": 307
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 299
                        },
                        {
                            "name": "云南",
                            "value": 149
                        },
                        {
                            "name": "内蒙古",
                            "value": 58
                        },
                        {
                            "name": "北京",
                            "value": 337
                        },
                        {
                            "name": "吉林",
                            "value": 80
                        },
                        {
                            "name": "四川",
                            "value": 405
                        },
                        {
                            "name": "天津",
                            "value": 95
                        },
                        {
                            "name": "宁夏",
                            "value": 49
                        },
                        {
                            "name": "安徽",
                            "value": 830
                        },
                        {
                            "name": "山东",
                            "value": 466
                        },
                        {
                            "name": "山西",
                            "value": 119
                        },
                        {
                            "name": "广东",
                            "value": 1159
                        },
                        {
                            "name": "广西",
                            "value": 210
                        },
                        {
                            "name": "新疆",
                            "value": 49
                        },
                        {
                            "name": "江苏",
                            "value": 492
                        },
                        {
                            "name": "江西",
                            "value": 771
                        },
                        {
                            "name": "河北",
                            "value": 218
                        },
                        {
                            "name": "河南",
                            "value": 1073
                        },
                        {
                            "name": "浙江",
                            "value": 1092
                        },
                        {
                            "name": "海南",
                            "value": 138
                        },
                        {
                            "name": "湖北",
                            "value": 29631
                        },
                        {
                            "name": "湖南",
                            "value": 879
                        },
                        {
                            "name": "甘肃",
                            "value": 83
                        },
                        {
                            "name": "福建",
                            "value": 261
                        },
                        {
                            "name": "贵州",
                            "value": 109
                        },
                        {
                            "name": "辽宁",
                            "value": 108
                        },
                        {
                            "name": "重庆",
                            "value": 473
                        },
                        {
                            "name": "陕西",
                            "value": 213
                        },
                        {
                            "name": "黑龙江",
                            "value": 331
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 303
                        },
                        {
                            "name": "云南",
                            "value": 153
                        },
                        {
                            "name": "北京",
                            "value": 342
                        },
                        {
                            "name": "吉林",
                            "value": 81
                        },
                        {
                            "name": "四川",
                            "value": 417
                        },
                        {
                            "name": "天津",
                            "value": 105
                        },
                        {
                            "name": "宁夏",
                            "value": 53
                        },
                        {
                            "name": "安徽",
                            "value": 860
                        },
                        {
                            "name": "山东",
                            "value": 487
                        },
                        {
                            "name": "山西",
                            "value": 122
                        },
                        {
                            "name": "广东",
                            "value": 1177
                        },
                        {
                            "name": "广西",
                            "value": 215
                        },
                        {
                            "name": "新疆",
                            "value": 55
                        },
                        {
                            "name": "江苏",
                            "value": 515
                        },
                        {
                            "name": "江西",
                            "value": 804
                        },
                        {
                            "name": "河北",
                            "value": 239
                        },
                        {
                            "name": "河南",
                            "value": 1105
                        },
                        {
                            "name": "浙江",
                            "value": 1117
                        },
                        {
                            "name": "海南",
                            "value": 144
                        },
                        {
                            "name": "湖北",
                            "value": 31728
                        },
                        {
                            "name": "湖南",
                            "value": 912
                        },
                        {
                            "name": "甘肃",
                            "value": 86
                        },
                        {
                            "name": "福建",
                            "value": 267
                        },
                        {
                            "name": "贵州",
                            "value": 127
                        },
                        {
                            "name": "辽宁",
                            "value": 111
                        },
                        {
                            "name": "重庆",
                            "value": 489
                        },
                        {
                            "name": "陕西",
                            "value": 219
                        },
                        {
                            "name": "青海",
                            "value": 18
                        },
                        {
                            "name": "黑龙江",
                            "value": 360
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 311
                        },
                        {
                            "name": "云南",
                            "value": 154
                        },
                        {
                            "name": "内蒙古",
                            "value": 60
                        },
                        {
                            "name": "北京",
                            "value": 352
                        },
                        {
                            "name": "吉林",
                            "value": 83
                        },
                        {
                            "name": "四川",
                            "value": 436
                        },
                        {
                            "name": "天津",
                            "value": 112
                        },
                        {
                            "name": "宁夏",
                            "value": 58
                        },
                        {
                            "name": "安徽",
                            "value": 889
                        },
                        {
                            "name": "山东",
                            "value": 498
                        },
                        {
                            "name": "山西",
                            "value": 124
                        },
                        {
                            "name": "广东",
                            "value": 1219
                        },
                        {
                            "name": "广西",
                            "value": 222
                        },
                        {
                            "name": "新疆",
                            "value": 59
                        },
                        {
                            "name": "江苏",
                            "value": 543
                        },
                        {
                            "name": "江西",
                            "value": 844
                        },
                        {
                            "name": "河北",
                            "value": 251
                        },
                        {
                            "name": "河南",
                            "value": 1135
                        },
                        {
                            "name": "浙江",
                            "value": 1131
                        },
                        {
                            "name": "海南",
                            "value": 157
                        },
                        {
                            "name": "湖北",
                            "value": 33366
                        },
                        {
                            "name": "湖南",
                            "value": 946
                        },
                        {
                            "name": "甘肃",
                            "value": 86
                        },
                        {
                            "name": "福建",
                            "value": 272
                        },
                        {
                            "name": "西藏",
                            "value": 1
                        },
                        {
                            "name": "贵州",
                            "value": 133
                        },
                        {
                            "name": "辽宁",
                            "value": 116
                        },
                        {
                            "name": "重庆",
                            "value": 509
                        },
                        {
                            "name": "陕西",
                            "value": 225
                        },
                        {
                            "name": "青海",
                            "value": 18
                        },
                        {
                            "name": "黑龙江",
                            "value": 378
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 315
                        },
                        {
                            "name": "云南",
                            "value": 156
                        },
                        {
                            "name": "内蒙古",
                            "value": 61
                        },
                        {
                            "name": "北京",
                            "value": 366
                        },
                        {
                            "name": "吉林",
                            "value": 84
                        },
                        {
                            "name": "四川",
                            "value": 451
                        },
                        {
                            "name": "天津",
                            "value": 117
                        },
                        {
                            "name": "宁夏",
                            "value": 64
                        },
                        {
                            "name": "安徽",
                            "value": 910
                        },
                        {
                            "name": "山东",
                            "value": 509
                        },
                        {
                            "name": "山西",
                            "value": 126
                        },
                        {
                            "name": "广东",
                            "value": 1241
                        },
                        {
                            "name": "广西",
                            "value": 222
                        },
                        {
                            "name": "新疆",
                            "value": 63
                        },
                        {
                            "name": "江苏",
                            "value": 570
                        },
                        {
                            "name": "江西",
                            "value": 872
                        },
                        {
                            "name": "河北",
                            "value": 265
                        },
                        {
                            "name": "河南",
                            "value": 1169
                        },
                        {
                            "name": "浙江",
                            "value": 1145
                        },
                        {
                            "name": "海南",
                            "value": 157
                        },
                        {
                            "name": "湖北",
                            "value": 48206
                        },
                        {
                            "name": "湖南",
                            "value": 968
                        },
                        {
                            "name": "甘肃",
                            "value": 90
                        },
                        {
                            "name": "福建",
                            "value": 279
                        },
                        {
                            "name": "西藏",
                            "value": 1
                        },
                        {
                            "name": "贵州",
                            "value": 135
                        },
                        {
                            "name": "辽宁",
                            "value": 117
                        },
                        {
                            "name": "重庆",
                            "value": 525
                        },
                        {
                            "name": "陕西",
                            "value": 229
                        },
                        {
                            "name": "青海",
                            "value": 18
                        },
                        {
                            "name": "黑龙江",
                            "value": 395
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 318
                        },
                        {
                            "name": "云南",
                            "value": 162
                        },
                        {
                            "name": "内蒙古",
                            "value": 65
                        },
                        {
                            "name": "北京",
                            "value": 372
                        },
                        {
                            "name": "吉林",
                            "value": 86
                        },
                        {
                            "name": "四川",
                            "value": 463
                        },
                        {
                            "name": "天津",
                            "value": 120
                        },
                        {
                            "name": "宁夏",
                            "value": 67
                        },
                        {
                            "name": "安徽",
                            "value": 934
                        },
                        {
                            "name": "山东",
                            "value": 523
                        },
                        {
                            "name": "山西",
                            "value": 126
                        },
                        {
                            "name": "广东",
                            "value": 1261
                        },
                        {
                            "name": "广西",
                            "value": 226
                        },
                        {
                            "name": "新疆",
                            "value": 65
                        },
                        {
                            "name": "江苏",
                            "value": 593
                        },
                        {
                            "name": "江西",
                            "value": 900
                        },
                        {
                            "name": "河北",
                            "value": 283
                        },
                        {
                            "name": "河南",
                            "value": 1184
                        },
                        {
                            "name": "浙江",
                            "value": 1155
                        },
                        {
                            "name": "海南",
                            "value": 159
                        },
                        {
                            "name": "湖北",
                            "value": 51986
                        },
                        {
                            "name": "湖南",
                            "value": 988
                        },
                        {
                            "name": "福建",
                            "value": 281
                        },
                        {
                            "name": "贵州",
                            "value": 140
                        },
                        {
                            "name": "辽宁",
                            "value": 119
                        },
                        {
                            "name": "重庆",
                            "value": 532
                        },
                        {
                            "name": "陕西",
                            "value": 230
                        },
                        {
                            "name": "黑龙江",
                            "value": 419
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 326
                        },
                        {
                            "name": "云南",
                            "value": 168
                        },
                        {
                            "name": "内蒙古",
                            "value": 68
                        },
                        {
                            "name": "北京",
                            "value": 375
                        },
                        {
                            "name": "吉林",
                            "value": 88
                        },
                        {
                            "name": "四川",
                            "value": 470
                        },
                        {
                            "name": "天津",
                            "value": 122
                        },
                        {
                            "name": "宁夏",
                            "value": 70
                        },
                        {
                            "name": "安徽",
                            "value": 950
                        },
                        {
                            "name": "山东",
                            "value": 532
                        },
                        {
                            "name": "山西",
                            "value": 127
                        },
                        {
                            "name": "广东",
                            "value": 1294
                        },
                        {
                            "name": "广西",
                            "value": 235
                        },
                        {
                            "name": "新疆",
                            "value": 70
                        },
                        {
                            "name": "江苏",
                            "value": 604
                        },
                        {
                            "name": "江西",
                            "value": 913
                        },
                        {
                            "name": "河北",
                            "value": 291
                        },
                        {
                            "name": "河南",
                            "value": 1212
                        },
                        {
                            "name": "浙江",
                            "value": 1162
                        },
                        {
                            "name": "海南",
                            "value": 162
                        },
                        {
                            "name": "湖北",
                            "value": 54406
                        },
                        {
                            "name": "湖南",
                            "value": 1001
                        },
                        {
                            "name": "甘肃",
                            "value": 90
                        },
                        {
                            "name": "福建",
                            "value": 285
                        },
                        {
                            "name": "贵州",
                            "value": 143
                        },
                        {
                            "name": "辽宁",
                            "value": 119
                        },
                        {
                            "name": "重庆",
                            "value": 538
                        },
                        {
                            "name": "陕西",
                            "value": 232
                        },
                        {
                            "name": "青海",
                            "value": 18
                        },
                        {
                            "name": "黑龙江",
                            "value": 425
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 328
                        },
                        {
                            "name": "云南",
                            "value": 171
                        },
                        {
                            "name": "内蒙古",
                            "value": 70
                        },
                        {
                            "name": "北京",
                            "value": 380
                        },
                        {
                            "name": "吉林",
                            "value": 89
                        },
                        {
                            "name": "四川",
                            "value": 481
                        },
                        {
                            "name": "天津",
                            "value": 124
                        },
                        {
                            "name": "安徽",
                            "value": 962
                        },
                        {
                            "name": "山东",
                            "value": 537
                        },
                        {
                            "name": "山西",
                            "value": 128
                        },
                        {
                            "name": "广东",
                            "value": 1316
                        },
                        {
                            "name": "广西",
                            "value": 237
                        },
                        {
                            "name": "新疆",
                            "value": 71
                        },
                        {
                            "name": "江苏",
                            "value": 617
                        },
                        {
                            "name": "江西",
                            "value": 925
                        },
                        {
                            "name": "河北",
                            "value": 300
                        },
                        {
                            "name": "河南",
                            "value": 1231
                        },
                        {
                            "name": "浙江",
                            "value": 1167
                        },
                        {
                            "name": "海南",
                            "value": 162
                        },
                        {
                            "name": "湖北",
                            "value": 56249
                        },
                        {
                            "name": "湖南",
                            "value": 1004
                        },
                        {
                            "name": "甘肃",
                            "value": 90
                        },
                        {
                            "name": "福建",
                            "value": 287
                        },
                        {
                            "name": "贵州",
                            "value": 144
                        },
                        {
                            "name": "辽宁",
                            "value": 121
                        },
                        {
                            "name": "重庆",
                            "value": 547
                        },
                        {
                            "name": "陕西",
                            "value": 236
                        },
                        {
                            "name": "黑龙江",
                            "value": 445
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 332
                        },
                        {
                            "name": "云南",
                            "value": 171
                        },
                        {
                            "name": "内蒙古",
                            "value": 72
                        },
                        {
                            "name": "北京",
                            "value": 381
                        },
                        {
                            "name": "吉林",
                            "value": 89
                        },
                        {
                            "name": "四川",
                            "value": 495
                        },
                        {
                            "name": "天津",
                            "value": 125
                        },
                        {
                            "name": "宁夏",
                            "value": 70
                        },
                        {
                            "name": "安徽",
                            "value": 973
                        },
                        {
                            "name": "山东",
                            "value": 541
                        },
                        {
                            "name": "山西",
                            "value": 129
                        },
                        {
                            "name": "广东",
                            "value": 1322
                        },
                        {
                            "name": "广西",
                            "value": 238
                        },
                        {
                            "name": "新疆",
                            "value": 75
                        },
                        {
                            "name": "江苏",
                            "value": 626
                        },
                        {
                            "name": "江西",
                            "value": 930
                        },
                        {
                            "name": "河北",
                            "value": 301
                        },
                        {
                            "name": "河南",
                            "value": 1246
                        },
                        {
                            "name": "浙江",
                            "value": 1171
                        },
                        {
                            "name": "海南",
                            "value": 163
                        },
                        {
                            "name": "湖北",
                            "value": 58182
                        },
                        {
                            "name": "湖南",
                            "value": 1006
                        },
                        {
                            "name": "甘肃",
                            "value": 91
                        },
                        {
                            "name": "福建",
                            "value": 290
                        },
                        {
                            "name": "贵州",
                            "value": 146
                        },
                        {
                            "name": "辽宁",
                            "value": 121
                        },
                        {
                            "name": "重庆",
                            "value": 553
                        },
                        {
                            "name": "陕西",
                            "value": 240
                        },
                        {
                            "name": "黑龙江",
                            "value": 457
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 333
                        },
                        {
                            "name": "云南",
                            "value": 172
                        },
                        {
                            "name": "内蒙古",
                            "value": 73
                        },
                        {
                            "name": "北京",
                            "value": 387
                        },
                        {
                            "name": "吉林",
                            "value": 89
                        },
                        {
                            "name": "四川",
                            "value": 508
                        },
                        {
                            "name": "天津",
                            "value": 128
                        },
                        {
                            "name": "宁夏",
                            "value": 70
                        },
                        {
                            "name": "安徽",
                            "value": 982
                        },
                        {
                            "name": "山东",
                            "value": 543
                        },
                        {
                            "name": "山西",
                            "value": 130
                        },
                        {
                            "name": "广东",
                            "value": 1328
                        },
                        {
                            "name": "广西",
                            "value": 242
                        },
                        {
                            "name": "新疆",
                            "value": 76
                        },
                        {
                            "name": "江苏",
                            "value": 629
                        },
                        {
                            "name": "江西",
                            "value": 933
                        },
                        {
                            "name": "河北",
                            "value": 302
                        },
                        {
                            "name": "河南",
                            "value": 1257
                        },
                        {
                            "name": "浙江",
                            "value": 1172
                        },
                        {
                            "name": "海南",
                            "value": 163
                        },
                        {
                            "name": "湖北",
                            "value": 59989
                        },
                        {
                            "name": "湖南",
                            "value": 1007
                        },
                        {
                            "name": "甘肃",
                            "value": 91
                        },
                        {
                            "name": "福建",
                            "value": 292
                        },
                        {
                            "name": "贵州",
                            "value": 146
                        },
                        {
                            "name": "辽宁",
                            "value": 121
                        },
                        {
                            "name": "重庆",
                            "value": 553
                        },
                        {
                            "name": "陕西",
                            "value": 240
                        },
                        {
                            "name": "青海",
                            "value": 18
                        },
                        {
                            "name": "黑龙江",
                            "value": 464
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 333
                        },
                        {
                            "name": "云南",
                            "value": 173
                        },
                        {
                            "name": "内蒙古",
                            "value": 75
                        },
                        {
                            "name": "北京",
                            "value": 393
                        },
                        {
                            "name": "吉林",
                            "value": 90
                        },
                        {
                            "name": "四川",
                            "value": 514
                        },
                        {
                            "name": "天津",
                            "value": 130
                        },
                        {
                            "name": "宁夏",
                            "value": 71
                        },
                        {
                            "name": "安徽",
                            "value": 986
                        },
                        {
                            "name": "山东",
                            "value": 544
                        },
                        {
                            "name": "山西",
                            "value": 131
                        },
                        {
                            "name": "广东",
                            "value": 1331
                        },
                        {
                            "name": "广西",
                            "value": 244
                        },
                        {
                            "name": "新疆",
                            "value": 76
                        },
                        {
                            "name": "江苏",
                            "value": 631
                        },
                        {
                            "name": "江西",
                            "value": 934
                        },
                        {
                            "name": "河北",
                            "value": 306
                        },
                        {
                            "name": "河南",
                            "value": 1262
                        },
                        {
                            "name": "浙江",
                            "value": 1174
                        },
                        {
                            "name": "海南",
                            "value": 163
                        },
                        {
                            "name": "湖北",
                            "value": 61682
                        },
                        {
                            "name": "湖南",
                            "value": 1008
                        },
                        {
                            "name": "甘肃",
                            "value": 91
                        },
                        {
                            "name": "福建",
                            "value": 293
                        },
                        {
                            "name": "贵州",
                            "value": 146
                        },
                        {
                            "name": "辽宁",
                            "value": 121
                        },
                        {
                            "name": "重庆",
                            "value": 555
                        },
                        {
                            "name": "陕西",
                            "value": 242
                        },
                        {
                            "name": "青海",
                            "value": 18
                        },
                        {
                            "name": "黑龙江",
                            "value": 470
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 334
                        },
                        {
                            "name": "云南",
                            "value": 173
                        },
                        {
                            "name": "内蒙古",
                            "value": 75
                        },
                        {
                            "name": "北京",
                            "value": 395
                        },
                        {
                            "name": "吉林",
                            "value": 91
                        },
                        {
                            "name": "四川",
                            "value": 520
                        },
                        {
                            "name": "天津",
                            "value": 131
                        },
                        {
                            "name": "宁夏",
                            "value": 71
                        },
                        {
                            "name": "安徽",
                            "value": 987
                        },
                        {
                            "name": "山东",
                            "value": 546
                        },
                        {
                            "name": "山西",
                            "value": 131
                        },
                        {
                            "name": "广东",
                            "value": 1332
                        },
                        {
                            "name": "广西",
                            "value": 245
                        },
                        {
                            "name": "新疆",
                            "value": 76
                        },
                        {
                            "name": "江苏",
                            "value": 631
                        },
                        {
                            "name": "江西",
                            "value": 934
                        },
                        {
                            "name": "河北",
                            "value": 307
                        },
                        {
                            "name": "河南",
                            "value": 1265
                        },
                        {
                            "name": "浙江",
                            "value": 1175
                        },
                        {
                            "name": "海南",
                            "value": 168
                        },
                        {
                            "name": "湖北",
                            "value": 62031
                        },
                        {
                            "name": "湖南",
                            "value": 1010
                        },
                        {
                            "name": "甘肃",
                            "value": 91
                        },
                        {
                            "name": "福建",
                            "value": 293
                        },
                        {
                            "name": "贵州",
                            "value": 146
                        },
                        {
                            "name": "辽宁",
                            "value": 121
                        },
                        {
                            "name": "重庆",
                            "value": 560
                        },
                        {
                            "name": "陕西",
                            "value": 245
                        },
                        {
                            "name": "黑龙江",
                            "value": 476
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        },
        {
            "legend": [
                {
                    "data": [
                        ""
                    ],
                    "selected": {
                        "": true
                    },
                    "show": false,
                    "padding": 5,
                    "itemGap": 10,
                    "itemWidth": 25,
                    "itemHeight": 14
                }
            ],
            "series": [
                {
                    "type": "map",
                    "label": {
                        "show": true,
                        "position": "top",
                        "margin": 8,
                        "fontSize": 8
                    },
                    "mapType": "china",
                    "data": [
                        {
                            "name": "上海",
                            "value": 334
                        },
                        {
                            "name": "云南",
                            "value": 174
                        },
                        {
                            "name": "内蒙古",
                            "value": 75
                        },
                        {
                            "name": "北京",
                            "value": 396
                        },
                        {
                            "name": "吉林",
                            "value": 91
                        },
                        {
                            "name": "四川",
                            "value": 525
                        },
                        {
                            "name": "天津",
                            "value": 132
                        },
                        {
                            "name": "宁夏",
                            "value": 71
                        },
                        {
                            "name": "安徽",
                            "value": 988
                        },
                        {
                            "name": "山东",
                            "value": 749
                        },
                        {
                            "name": "山西",
                            "value": 132
                        },
                        {
                            "name": "广东",
                            "value": 1333
                        },
                        {
                            "name": "广西",
                            "value": 246
                        },
                        {
                            "name": "江苏",
                            "value": 631
                        },
                        {
                            "name": "江西",
                            "value": 934
                        },
                        {
                            "name": "河北",
                            "value": 308
                        },
                        {
                            "name": "河南",
                            "value": 1267
                        },
                        {
                            "name": "浙江",
                            "value": 1203
                        },
                        {
                            "name": "海南",
                            "value": 168
                        },
                        {
                            "name": "湖北",
                            "value": 62662
                        },
                        {
                            "name": "湖南",
                            "value": 1011
                        },
                        {
                            "name": "福建",
                            "value": 293
                        },
                        {
                            "name": "贵州",
                            "value": 146
                        },
                        {
                            "name": "辽宁",
                            "value": 121
                        },
                        {
                            "name": "重庆",
                            "value": 567
                        },
                        {
                            "name": "陕西",
                            "value": 245
                        },
                        {
                            "name": "青海",
                            "value": 18
                        },
                        {
                            "name": "黑龙江",
                            "value": 479
                        }
                    ],
                    "roam": true,
                    "zoom": 1,
                    "showLegendSymbol": true,
                    "emphasis": {},
                    "rippleEffect": {
                        "show": true,
                        "brushType": "stroke",
                        "scale": 2.5,
                        "period": 4
                    }
                }
            ],
            "title": [
                {
                    "text": "全国-75469例",
                    "padding": 5,
                    "itemGap": 10
                }
            ],
            "tooltip": {
                "show": true,
                "trigger": "item",
                "triggerOn": "mousemove|click",
                "axisPointer": {
                    "type": "line"
                },
                "textStyle": {
                    "fontSize": 14
                },
                "borderWidth": 0
            },
            "visualMap": {
                "show": true,
                "type": "piecewise",
                "min": 0,
                "max": 100,
                "inRange": {
                    "color": [
                        "#50a3ba",
                        "#eac763",
                        "#d94e5d"
                    ]
                },
                "calculable": true,
                "inverse": false,
                "splitNumber": 5,
                "orient": "vertical",
                "showLabel": true,
                "itemWidth": 20,
                "itemHeight": 14,
                "borderWidth": 0,
                "pieces": [
                    {
                        "min": 10000,
                        "color": "#4F060d"
                    },
                    {
                        "max": 9999,
                        "min": 1000,
                        "color": "#811C24"
                    },
                    {
                        "max": 999,
                        "min": 500,
                        "color": "#CA2B2F"
                    },
                    {
                        "max": 499,
                        "min": 100,
                        "color": "#CA5446"
                    },
                    {
                        "max": 99,
                        "min": 10,
                        "color": "#F09082"
                    },
                    {
                        "max": 9,
                        "min": 1,
                        "color": "#FCEBCF"
                    },
                    {
                        "max": 0,
                        "color": "#FFFEE7"
                    }
                ]
            },
            "color": [
                "#c23531",
                "#2f4554",
                "#61a0a8",
                "#d48265",
                "#749f83",
                "#ca8622",
                "#bda29a",
                "#6e7074",
                "#546570",
                "#c4ccd3",
                "#f05b72",
                "#ef5b9c",
                "#f47920",
                "#905a3d",
                "#fab27b",
                "#2a5caa",
                "#444693",
                "#726930",
                "#b2d235",
                "#6d8346",
                "#ac6767",
                "#1d953f",
                "#6950a1",
                "#918597"
            ]
        }
    ]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>


<h2 id="全国每日疫情变化趋势"><a href="#全国每日疫情变化趋势" class="headerlink" title="全国每日疫情变化趋势"></a>全国每日疫情变化趋势</h2><p>主要关注全国每日<strong>确诊、治愈、死亡</strong>人数的变化，实时跟踪疫情：</p>
<div id="echarts2939" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts2939'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "line",
            "name": "确诊",
            "connectNulls": false,
            "yAxisIndex": 0,
            "symbol": "diamond",
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-24",
                    866
                ],
                [
                    "01-25",
                    1324
                ],
                [
                    "01-26",
                    2019
                ],
                [
                    "01-27",
                    2838
                ],
                [
                    "01-28",
                    4601
                ],
                [
                    "01-29",
                    6067
                ],
                [
                    "01-30",
                    8122
                ],
                [
                    "01-31",
                    9782
                ],
                [
                    "02-01",
                    11841
                ],
                [
                    "02-02",
                    14458
                ],
                [
                    "02-03",
                    17307
                ],
                [
                    "02-04",
                    20492
                ],
                [
                    "02-05",
                    24358
                ],
                [
                    "02-06",
                    28087
                ],
                [
                    "02-07",
                    31194
                ],
                [
                    "02-08",
                    34602
                ],
                [
                    "02-09",
                    37213
                ],
                [
                    "02-10",
                    40177
                ],
                [
                    "02-11",
                    42611
                ],
                [
                    "02-12",
                    44688
                ],
                [
                    "02-13",
                    59826
                ],
                [
                    "02-14",
                    63757
                ],
                [
                    "02-15",
                    66496
                ],
                [
                    "02-16",
                    68419
                ],
                [
                    "02-17",
                    70536
                ],
                [
                    "02-18",
                    72438
                ],
                [
                    "02-19",
                    74187
                ],
                [
                    "02-20",
                    74560
                ],
                [
                    "02-21",
                    75299
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        },
        {
            "type": "line",
            "name": "治愈",
            "connectNulls": false,
            "yAxisIndex": 0,
            "symbol": "roundRect",
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-24",
                    35
                ],
                [
                    "01-25",
                    40
                ],
                [
                    "01-26",
                    49
                ],
                [
                    "01-27",
                    59
                ],
                [
                    "01-28",
                    73
                ],
                [
                    "01-29",
                    119
                ],
                [
                    "01-30",
                    141
                ],
                [
                    "01-31",
                    223
                ],
                [
                    "02-01",
                    275
                ],
                [
                    "02-02",
                    442
                ],
                [
                    "02-03",
                    528
                ],
                [
                    "02-04",
                    719
                ],
                [
                    "02-05",
                    1024
                ],
                [
                    "02-06",
                    1371
                ],
                [
                    "02-07",
                    1748
                ],
                [
                    "02-08",
                    2377
                ],
                [
                    "02-09",
                    2897
                ],
                [
                    "02-10",
                    3546
                ],
                [
                    "02-11",
                    4294
                ],
                [
                    "02-12",
                    5067
                ],
                [
                    "02-13",
                    6219
                ],
                [
                    "02-14",
                    7266
                ],
                [
                    "02-15",
                    8487
                ],
                [
                    "02-16",
                    9707
                ],
                [
                    "02-17",
                    11264
                ],
                [
                    "02-18",
                    12995
                ],
                [
                    "02-19",
                    14927
                ],
                [
                    "02-20",
                    16700
                ],
                [
                    "02-21",
                    18291
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        },
        {
            "type": "line",
            "name": "死亡",
            "connectNulls": false,
            "yAxisIndex": 0,
            "symbol": "circle",
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-24",
                    26
                ],
                [
                    "01-25",
                    41
                ],
                [
                    "01-26",
                    55
                ],
                [
                    "01-27",
                    82
                ],
                [
                    "01-28",
                    107
                ],
                [
                    "01-29",
                    133
                ],
                [
                    "01-30",
                    171
                ],
                [
                    "01-31",
                    213
                ],
                [
                    "02-01",
                    260
                ],
                [
                    "02-02",
                    305
                ],
                [
                    "02-03",
                    361
                ],
                [
                    "02-04",
                    425
                ],
                [
                    "02-05",
                    492
                ],
                [
                    "02-06",
                    563
                ],
                [
                    "02-07",
                    636
                ],
                [
                    "02-08",
                    724
                ],
                [
                    "02-09",
                    812
                ],
                [
                    "02-10",
                    908
                ],
                [
                    "02-11",
                    1016
                ],
                [
                    "02-12",
                    1115
                ],
                [
                    "02-13",
                    1367
                ],
                [
                    "02-14",
                    1487
                ],
                [
                    "02-15",
                    1523
                ],
                [
                    "02-16",
                    1665
                ],
                [
                    "02-17",
                    1771
                ],
                [
                    "02-18",
                    1870
                ],
                [
                    "02-19",
                    2006
                ],
                [
                    "02-20",
                    2119
                ],
                [
                    "02-21",
                    2233
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        },
        {
            "type": "line",
            "name": "死亡率",
            "connectNulls": false,
            "yAxisIndex": 1,
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-24",
                    3.0
                ],
                [
                    "01-25",
                    3.1
                ],
                [
                    "01-26",
                    2.72
                ],
                [
                    "01-27",
                    2.89
                ],
                [
                    "01-28",
                    2.33
                ],
                [
                    "01-29",
                    2.19
                ],
                [
                    "01-30",
                    2.11
                ],
                [
                    "01-31",
                    2.18
                ],
                [
                    "02-01",
                    2.2
                ],
                [
                    "02-02",
                    2.11
                ],
                [
                    "02-03",
                    2.09
                ],
                [
                    "02-04",
                    2.07
                ],
                [
                    "02-05",
                    2.02
                ],
                [
                    "02-06",
                    2.0
                ],
                [
                    "02-07",
                    2.04
                ],
                [
                    "02-08",
                    2.09
                ],
                [
                    "02-09",
                    2.18
                ],
                [
                    "02-10",
                    2.26
                ],
                [
                    "02-11",
                    2.38
                ],
                [
                    "02-12",
                    2.5
                ],
                [
                    "02-13",
                    2.28
                ],
                [
                    "02-14",
                    2.33
                ],
                [
                    "02-15",
                    2.29
                ],
                [
                    "02-16",
                    2.43
                ],
                [
                    "02-17",
                    2.51
                ],
                [
                    "02-18",
                    2.58
                ],
                [
                    "02-19",
                    2.7
                ],
                [
                    "02-20",
                    2.84
                ],
                [
                    "02-21",
                    2.97
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": false,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid",
                "color": "#675bba"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        }
    ],
    "legend": [
        {
            "data": [
                "确诊",
                "治愈",
                "死亡",
                "死亡率"
            ],
            "selected": {
                "确诊": true,
                "治愈": true,
                "死亡": true
            },
            "show": true,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "xAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            },
            "data": [
                "01-24",
                "01-25",
                "01-26",
                "01-27",
                "01-28",
                "01-29",
                "01-30",
                "01-31",
                "02-01",
                "02-02",
                "02-03",
                "02-04",
                "02-05",
                "02-06",
                "02-07",
                "02-08",
                "02-09",
                "02-10",
                "02-11",
                "02-12",
                "02-13",
                "02-14",
                "02-15",
                "02-16",
                "02-17",
                "02-18",
                "02-19",
                "02-20",
                "02-21"
            ]
        }
    ],
    "yAxis": [
        {
            "name": "人数",
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            }
        },
        {
            "name": "死亡率",
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "axisLine": {
                "show": true,
                "onZero": true,
                "onZeroAxisIndex": 0,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid",
                    "color": "#675bba"
                }
            },
            "axisLabel": {
                "show": true,
                "position": "top",
                "margin": 8,
                "formatter": "{value} %"
            },
            "inverse": false,
            "position": "right",
            "offset": 0,
            "splitNumber": 5,
            "min": 0,
            "max": 10,
            "minInterval": 0,
            "splitLine": {
                "show": true,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            }
        }
    ],
    "title": [
        {
            "text": "全国每日疫情变化趋势",
            "padding": 5,
            "itemGap": 10
        }
    ],
    "grid": [
        {
            "left": "5%",
            "right": "5%",
            "containLabel": false
        }
    ]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<p>上面的累计的病例，很难看出疫情处于什么阶段，因此，下面我关注的是每日新增的确诊病例数，由于湖北处于封城状态，因此，我分别看一下全国、湖北地区、全国（除湖北地区）的每日新增确诊病例变化趋势：</p>
<div id="echarts2011" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts2011'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "line",
            "name": "全国每日新增",
            "connectNulls": false,
            "symbol": "diamond",
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-25",
                    458
                ],
                [
                    "01-26",
                    695
                ],
                [
                    "01-27",
                    819
                ],
                [
                    "01-28",
                    1763
                ],
                [
                    "01-29",
                    1466
                ],
                [
                    "01-30",
                    2055
                ],
                [
                    "01-31",
                    1660
                ],
                [
                    "02-01",
                    2059
                ],
                [
                    "02-02",
                    2617
                ],
                [
                    "02-03",
                    2849
                ],
                [
                    "02-04",
                    3185
                ],
                [
                    "02-05",
                    3866
                ],
                [
                    "02-06",
                    3729
                ],
                [
                    "02-07",
                    3107
                ],
                [
                    "02-08",
                    3408
                ],
                [
                    "02-09",
                    2611
                ],
                [
                    "02-10",
                    2964
                ],
                [
                    "02-11",
                    2434
                ],
                [
                    "02-12",
                    2077
                ],
                [
                    "02-13",
                    15138
                ],
                [
                    "02-14",
                    3931
                ],
                [
                    "02-15",
                    2739
                ],
                [
                    "02-16",
                    1923
                ],
                [
                    "02-17",
                    2117
                ],
                [
                    "02-18",
                    1902
                ],
                [
                    "02-19",
                    1749
                ],
                [
                    "02-20",
                    373
                ],
                [
                    "02-21",
                    739
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        },
        {
            "type": "line",
            "name": "湖北每日新增",
            "connectNulls": false,
            "symbol": "roundRect",
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-25",
                    181
                ],
                [
                    "01-26",
                    328
                ],
                [
                    "01-27",
                    365
                ],
                [
                    "01-28",
                    1291
                ],
                [
                    "01-29",
                    840
                ],
                [
                    "01-30",
                    1349
                ],
                [
                    "01-31",
                    903
                ],
                [
                    "02-01",
                    1347
                ],
                [
                    "02-02",
                    1921
                ],
                [
                    "02-03",
                    2103
                ],
                [
                    "02-04",
                    2345
                ],
                [
                    "02-05",
                    3156
                ],
                [
                    "02-06",
                    2987
                ],
                [
                    "02-07",
                    2447
                ],
                [
                    "02-08",
                    2841
                ],
                [
                    "02-09",
                    2147
                ],
                [
                    "02-10",
                    2531
                ],
                [
                    "02-11",
                    2097
                ],
                [
                    "02-12",
                    1638
                ],
                [
                    "02-13",
                    14840
                ],
                [
                    "02-14",
                    3780
                ],
                [
                    "02-15",
                    2420
                ],
                [
                    "02-16",
                    1843
                ],
                [
                    "02-17",
                    1933
                ],
                [
                    "02-18",
                    1807
                ],
                [
                    "02-19",
                    1693
                ],
                [
                    "02-20",
                    349
                ],
                [
                    "02-21",
                    631
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        },
        {
            "type": "line",
            "name": "除湖北每日新增",
            "connectNulls": false,
            "symbol": "circle",
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-25",
                    277
                ],
                [
                    "01-26",
                    367
                ],
                [
                    "01-27",
                    454
                ],
                [
                    "01-28",
                    472
                ],
                [
                    "01-29",
                    626
                ],
                [
                    "01-30",
                    706
                ],
                [
                    "01-31",
                    757
                ],
                [
                    "02-01",
                    712
                ],
                [
                    "02-02",
                    696
                ],
                [
                    "02-03",
                    746
                ],
                [
                    "02-04",
                    840
                ],
                [
                    "02-05",
                    710
                ],
                [
                    "02-06",
                    742
                ],
                [
                    "02-07",
                    660
                ],
                [
                    "02-08",
                    567
                ],
                [
                    "02-09",
                    464
                ],
                [
                    "02-10",
                    433
                ],
                [
                    "02-11",
                    337
                ],
                [
                    "02-12",
                    439
                ],
                [
                    "02-13",
                    298
                ],
                [
                    "02-14",
                    151
                ],
                [
                    "02-15",
                    319
                ],
                [
                    "02-16",
                    80
                ],
                [
                    "02-17",
                    184
                ],
                [
                    "02-18",
                    95
                ],
                [
                    "02-19",
                    56
                ],
                [
                    "02-20",
                    24
                ],
                [
                    "02-21",
                    108
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        }
    ],
    "legend": [
        {
            "data": [
                "全国每日新增",
                "湖北每日新增",
                "除湖北每日新增"
            ],
            "selected": {
                "全国每日新增": true,
                "湖北每日新增": true,
                "除湖北每日新增": true
            },
            "show": true,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "xAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            },
            "data": [
                "01-25",
                "01-26",
                "01-27",
                "01-28",
                "01-29",
                "01-30",
                "01-31",
                "02-01",
                "02-02",
                "02-03",
                "02-04",
                "02-05",
                "02-06",
                "02-07",
                "02-08",
                "02-09",
                "02-10",
                "02-11",
                "02-12",
                "02-13",
                "02-14",
                "02-15",
                "02-16",
                "02-17",
                "02-18",
                "02-19",
                "02-20",
                "02-21"
            ]
        }
    ],
    "yAxis": [
        {
            "name": "人数",
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            }
        }
    ],
    "title": [
        {
            "text": "全国每日新增确诊",
            "padding": 5,
            "itemGap": 10
        }
    ]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>



<h2 id="每日死亡率变化趋势"><a href="#每日死亡率变化趋势" class="headerlink" title="每日死亡率变化趋势"></a>每日死亡率变化趋势</h2><p>死亡率是一个非常重要的数据，下面我看下全国除湖北地区、湖北地区、武汉地区的死亡率：</p>
<div id="echarts5792" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts5792'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "line",
            "name": "除湖北每日死亡率",
            "connectNulls": false,
            "xAxisIndex": 0,
            "yAxisIndex": 0,
            "symbol": "diamond",
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-24",
                    0.63
                ],
                [
                    "01-25",
                    0.34
                ],
                [
                    "01-26",
                    0.31
                ],
                [
                    "01-27",
                    0.42
                ],
                [
                    "01-28",
                    0.37
                ],
                [
                    "01-29",
                    0.32
                ],
                [
                    "01-30",
                    0.28
                ],
                [
                    "01-31",
                    0.23
                ],
                [
                    "02-01",
                    0.23
                ],
                [
                    "02-02",
                    0.2
                ],
                [
                    "02-03",
                    0.18
                ],
                [
                    "02-04",
                    0.16
                ],
                [
                    "02-05",
                    0.17
                ],
                [
                    "02-06",
                    0.17
                ],
                [
                    "02-07",
                    0.2
                ],
                [
                    "02-08",
                    0.26
                ],
                [
                    "02-09",
                    0.32
                ],
                [
                    "02-10",
                    0.35
                ],
                [
                    "02-11",
                    0.39
                ],
                [
                    "02-12",
                    0.42
                ],
                [
                    "02-13",
                    0.49
                ],
                [
                    "02-14",
                    0.52
                ],
                [
                    "02-15",
                    0.55
                ],
                [
                    "02-16",
                    0.57
                ],
                [
                    "02-17",
                    0.61
                ],
                [
                    "02-18",
                    0.65
                ],
                [
                    "02-19",
                    0.68
                ],
                [
                    "02-20",
                    0.72
                ],
                [
                    "02-21",
                    0.7
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        },
        {
            "type": "line",
            "name": "湖北每日死亡率",
            "connectNulls": false,
            "xAxisIndex": 0,
            "yAxisIndex": 0,
            "symbol": "roundRect",
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-24",
                    4.37
                ],
                [
                    "01-25",
                    5.34
                ],
                [
                    "01-26",
                    4.91
                ],
                [
                    "01-27",
                    5.34
                ],
                [
                    "01-28",
                    3.68
                ],
                [
                    "01-29",
                    3.52
                ],
                [
                    "01-30",
                    3.3
                ],
                [
                    "01-31",
                    3.51
                ],
                [
                    "02-01",
                    3.48
                ],
                [
                    "02-02",
                    3.24
                ],
                [
                    "02-03",
                    3.13
                ],
                [
                    "02-04",
                    3.06
                ],
                [
                    "02-05",
                    2.87
                ],
                [
                    "02-06",
                    2.79
                ],
                [
                    "02-07",
                    2.79
                ],
                [
                    "02-08",
                    2.8
                ],
                [
                    "02-09",
                    2.88
                ],
                [
                    "02-10",
                    2.94
                ],
                [
                    "02-11",
                    3.07
                ],
                [
                    "02-12",
                    3.2
                ],
                [
                    "02-13",
                    2.72
                ],
                [
                    "02-14",
                    2.74
                ],
                [
                    "02-15",
                    2.68
                ],
                [
                    "02-16",
                    2.84
                ],
                [
                    "02-17",
                    2.91
                ],
                [
                    "02-18",
                    2.98
                ],
                [
                    "02-19",
                    3.11
                ],
                [
                    "02-20",
                    3.27
                ],
                [
                    "02-21",
                    3.42
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        },
        {
            "type": "line",
            "name": "武汉每日死亡率",
            "connectNulls": false,
            "xAxisIndex": 0,
            "yAxisIndex": 0,
            "symbol": "circle",
            "symbolSize": 6,
            "showSymbol": true,
            "smooth": true,
            "step": false,
            "data": [
                [
                    "01-24",
                    4.65
                ],
                [
                    "01-25",
                    6.64
                ],
                [
                    "01-26",
                    7.28
                ],
                [
                    "01-27",
                    9.03
                ],
                [
                    "01-28",
                    5.35
                ],
                [
                    "01-29",
                    5.46
                ],
                [
                    "01-30",
                    5.71
                ],
                [
                    "01-31",
                    6.03
                ],
                [
                    "02-01",
                    5.97
                ],
                [
                    "02-02",
                    5.45
                ],
                [
                    "02-03",
                    5.15
                ],
                [
                    "02-04",
                    4.9
                ],
                [
                    "02-05",
                    4.33
                ],
                [
                    "02-06",
                    4.09
                ],
                [
                    "02-07",
                    4.11
                ],
                [
                    "02-08",
                    4.01
                ],
                [
                    "02-09",
                    4.06
                ],
                [
                    "02-10",
                    4.03
                ],
                [
                    "02-11",
                    4.05
                ],
                [
                    "02-12",
                    4.19
                ],
                [
                    "02-13",
                    3.14
                ],
                [
                    "02-14",
                    3.12
                ],
                [
                    "02-15",
                    2.96
                ],
                [
                    "02-16",
                    3.12
                ],
                [
                    "02-17",
                    3.18
                ],
                [
                    "02-18",
                    3.23
                ],
                [
                    "02-19",
                    3.37
                ],
                [
                    "02-20",
                    3.52
                ],
                [
                    "02-21",
                    3.71
                ]
            ],
            "hoverAnimation": true,
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            },
            "lineStyle": {
                "width": 2,
                "opacity": 1,
                "curveness": 0,
                "type": "solid"
            },
            "areaStyle": {
                "opacity": 0
            },
            "zlevel": 0,
            "z": 0
        },
        {
            "type": "bar",
            "name": "除湖北累计死亡人数",
            "xAxisIndex": 1,
            "yAxisIndex": 1,
            "data": [
                2,
                2,
                3,
                6,
                7,
                8,
                9,
                9,
                11,
                11,
                11,
                11,
                13,
                14,
                18,
                25,
                32,
                37,
                42,
                47,
                57,
                61,
                66,
                69,
                75,
                81,
                85,
                90,
                89
            ],
            "barCategoryGap": "20%",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            }
        },
        {
            "type": "bar",
            "name": "湖北累计死亡人数",
            "xAxisIndex": 1,
            "yAxisIndex": 1,
            "data": [
                24,
                39,
                52,
                76,
                100,
                125,
                162,
                204,
                249,
                294,
                350,
                414,
                479,
                549,
                618,
                699,
                780,
                871,
                974,
                1068,
                1310,
                1426,
                1457,
                1596,
                1696,
                1789,
                1921,
                2029,
                2144
            ],
            "barCategoryGap": "20%",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            }
        },
        {
            "type": "bar",
            "name": "武汉累计死亡人数",
            "xAxisIndex": 1,
            "yAxisIndex": 1,
            "data": [
                23,
                38,
                45,
                63,
                85,
                104,
                129,
                159,
                192,
                224,
                265,
                313,
                362,
                414,
                478,
                545,
                608,
                681,
                748,
                820,
                1036,
                1124,
                1123,
                1233,
                1309,
                1381,
                1497,
                1585,
                1684
            ],
            "barCategoryGap": "20%",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            }
        }
    ],
    "legend": [
        {
            "data": [
                "除湖北每日死亡率",
                "湖北每日死亡率",
                "武汉每日死亡率"
            ],
            "selected": {
                "除湖北每日死亡率": true,
                "湖北每日死亡率": true,
                "武汉每日死亡率": true
            },
            "show": true,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        },
        {
            "data": [
                "除湖北累计死亡人数",
                "湖北累计死亡人数",
                "武汉累计死亡人数"
            ],
            "selected": {
                "除湖北累计死亡人数": true,
                "湖北累计死亡人数": true,
                "武汉累计死亡人数": true
            },
            "show": true,
            "top": "48%",
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "xAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            },
            "data": [
                "01-24",
                "01-25",
                "01-26",
                "01-27",
                "01-28",
                "01-29",
                "01-30",
                "01-31",
                "02-01",
                "02-02",
                "02-03",
                "02-04",
                "02-05",
                "02-06",
                "02-07",
                "02-08",
                "02-09",
                "02-10",
                "02-11",
                "02-12",
                "02-13",
                "02-14",
                "02-15",
                "02-16",
                "02-17",
                "02-18",
                "02-19",
                "02-20",
                "02-21"
            ]
        },
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 1,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            },
            "data": [
                "01-24",
                "01-25",
                "01-26",
                "01-27",
                "01-28",
                "01-29",
                "01-30",
                "01-31",
                "02-01",
                "02-02",
                "02-03",
                "02-04",
                "02-05",
                "02-06",
                "02-07",
                "02-08",
                "02-09",
                "02-10",
                "02-11",
                "02-12",
                "02-13",
                "02-14",
                "02-15",
                "02-16",
                "02-17",
                "02-18",
                "02-19",
                "02-20",
                "02-21"
            ]
        }
    ],
    "yAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "axisLabel": {
                "show": true,
                "position": "top",
                "margin": 8,
                "formatter": "{value} %"
            },
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            }
        },
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 1,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            }
        }
    ],
    "title": [
        {
            "text": "累计死亡率变化趋势",
            "padding": 5,
            "itemGap": 10
        },
        {
            "text": "累计死亡人数",
            "top": "240",
            "padding": 5,
            "itemGap": 10
        }
    ],
    "grid": [
        {
            "bottom": "60%",
            "containLabel": false
        },
        {
            "top": "60%",
            "containLabel": false
        }
    ]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<p>从这里可以发现，全国除湖北地区的致死率一直小于1%，而湖北地区的致死率接近3%，其中武汉地区的致死率高达4%，这里我认为有几个因素：</p>
<ul>
<li>由于武汉地区病人太多，医疗资源跟不上，武汉地区的感染病例并没有全部被确诊，只有病情比较严重的病人被确诊了，因而从数据上看，致死率非常的高。</li>
<li>由于武汉地区是病毒最初发现的地方，不少病人已经被感染了比较久的时间，处于病程的后期，而其他地区的病人处于发病的初期，因此其他省份现在的致死率暂时不能说明问题（这个比较可怕）。</li>
</ul>
<h2 id="各省份疫情情况"><a href="#各省份疫情情况" class="headerlink" title="各省份疫情情况"></a>各省份疫情情况</h2><p>下面主要看一下各个省份的疫情情况。</p>
<h3 id="各省份累计确诊病例变化趋势"><a href="#各省份累计确诊病例变化趋势" class="headerlink" title="各省份累计确诊病例变化趋势"></a>各省份累计确诊病例变化趋势</h3><p>这里我选取了在2月7日感染人数超过100人的省份（一共20个省份），看下他们从1月27日-现在的累计确诊病例变化趋势：</p>
<div id="echarts6893" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts6893'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "heatmap",
            "data": [
                [
                    0,
                    0,
                    53
                ],
                [
                    0,
                    1,
                    26
                ],
                [
                    0,
                    2,
                    80
                ],
                [
                    0,
                    3,
                    69
                ],
                [
                    0,
                    4,
                    70
                ],
                [
                    0,
                    5,
                    75
                ],
                [
                    0,
                    6,
                    151
                ],
                [
                    0,
                    7,
                    46
                ],
                [
                    0,
                    8,
                    47
                ],
                [
                    0,
                    9,
                    48
                ],
                [
                    0,
                    10,
                    18
                ],
                [
                    0,
                    11,
                    128
                ],
                [
                    0,
                    12,
                    128
                ],
                [
                    0,
                    13,
                    33
                ],
                [
                    0,
                    14,
                    1423
                ],
                [
                    0,
                    15,
                    100
                ],
                [
                    0,
                    16,
                    59
                ],
                [
                    0,
                    17,
                    110
                ],
                [
                    0,
                    18,
                    35
                ],
                [
                    0,
                    19,
                    21
                ],
                [
                    1,
                    0,
                    66
                ],
                [
                    1,
                    1,
                    44
                ],
                [
                    1,
                    2,
                    91
                ],
                [
                    1,
                    3,
                    90
                ],
                [
                    1,
                    4,
                    106
                ],
                [
                    1,
                    5,
                    95
                ],
                [
                    1,
                    6,
                    207
                ],
                [
                    1,
                    7,
                    51
                ],
                [
                    1,
                    8,
                    70
                ],
                [
                    1,
                    9,
                    72
                ],
                [
                    1,
                    10,
                    33
                ],
                [
                    1,
                    11,
                    168
                ],
                [
                    1,
                    12,
                    173
                ],
                [
                    1,
                    13,
                    40
                ],
                [
                    1,
                    14,
                    2714
                ],
                [
                    1,
                    15,
                    143
                ],
                [
                    1,
                    16,
                    80
                ],
                [
                    1,
                    17,
                    132
                ],
                [
                    1,
                    18,
                    46
                ],
                [
                    1,
                    19,
                    30
                ],
                [
                    2,
                    0,
                    96
                ],
                [
                    2,
                    1,
                    55
                ],
                [
                    2,
                    2,
                    111
                ],
                [
                    2,
                    3,
                    108
                ],
                [
                    2,
                    4,
                    155
                ],
                [
                    2,
                    5,
                    130
                ],
                [
                    2,
                    6,
                    277
                ],
                [
                    2,
                    7,
                    58
                ],
                [
                    2,
                    8,
                    99
                ],
                [
                    2,
                    9,
                    109
                ],
                [
                    2,
                    10,
                    48
                ],
                [
                    2,
                    11,
                    206
                ],
                [
                    2,
                    12,
                    296
                ],
                [
                    2,
                    13,
                    43
                ],
                [
                    2,
                    14,
                    3554
                ],
                [
                    2,
                    15,
                    221
                ],
                [
                    2,
                    16,
                    84
                ],
                [
                    2,
                    17,
                    147
                ],
                [
                    2,
                    18,
                    56
                ],
                [
                    2,
                    19,
                    38
                ],
                [
                    3,
                    0,
                    112
                ],
                [
                    3,
                    1,
                    70
                ],
                [
                    3,
                    2,
                    114
                ],
                [
                    3,
                    3,
                    142
                ],
                [
                    3,
                    4,
                    200
                ],
                [
                    3,
                    5,
                    158
                ],
                [
                    3,
                    6,
                    354
                ],
                [
                    3,
                    7,
                    78
                ],
                [
                    3,
                    8,
                    129
                ],
                [
                    3,
                    9,
                    162
                ],
                [
                    3,
                    10,
                    65
                ],
                [
                    3,
                    11,
                    278
                ],
                [
                    3,
                    12,
                    428
                ],
                [
                    3,
                    13,
                    46
                ],
                [
                    3,
                    14,
                    4903
                ],
                [
                    3,
                    15,
                    277
                ],
                [
                    3,
                    16,
                    101
                ],
                [
                    3,
                    17,
                    182
                ],
                [
                    3,
                    18,
                    63
                ],
                [
                    3,
                    19,
                    44
                ],
                [
                    4,
                    0,
                    135
                ],
                [
                    4,
                    1,
                    83
                ],
                [
                    4,
                    2,
                    139
                ],
                [
                    4,
                    3,
                    177
                ],
                [
                    4,
                    4,
                    237
                ],
                [
                    4,
                    5,
                    184
                ],
                [
                    4,
                    6,
                    436
                ],
                [
                    4,
                    7,
                    87
                ],
                [
                    4,
                    8,
                    168
                ],
                [
                    4,
                    9,
                    240
                ],
                [
                    4,
                    10,
                    82
                ],
                [
                    4,
                    11,
                    352
                ],
                [
                    4,
                    12,
                    538
                ],
                [
                    4,
                    13,
                    52
                ],
                [
                    4,
                    14,
                    5806
                ],
                [
                    4,
                    15,
                    332
                ],
                [
                    4,
                    16,
                    120
                ],
                [
                    4,
                    17,
                    211
                ],
                [
                    4,
                    18,
                    87
                ],
                [
                    4,
                    19,
                    59
                ],
                [
                    5,
                    0,
                    169
                ],
                [
                    5,
                    1,
                    93
                ],
                [
                    5,
                    2,
                    168
                ],
                [
                    5,
                    3,
                    207
                ],
                [
                    5,
                    4,
                    297
                ],
                [
                    5,
                    5,
                    206
                ],
                [
                    5,
                    6,
                    535
                ],
                [
                    5,
                    7,
                    100
                ],
                [
                    5,
                    8,
                    202
                ],
                [
                    5,
                    9,
                    286
                ],
                [
                    5,
                    10,
                    96
                ],
                [
                    5,
                    11,
                    422
                ],
                [
                    5,
                    12,
                    599
                ],
                [
                    5,
                    13,
                    62
                ],
                [
                    5,
                    14,
                    7153
                ],
                [
                    5,
                    15,
                    389
                ],
                [
                    5,
                    16,
                    144
                ],
                [
                    5,
                    17,
                    247
                ],
                [
                    5,
                    18,
                    101
                ],
                [
                    5,
                    19,
                    80
                ],
                [
                    6,
                    0,
                    182
                ],
                [
                    6,
                    1,
                    105
                ],
                [
                    6,
                    2,
                    191
                ],
                [
                    6,
                    3,
                    231
                ],
                [
                    6,
                    4,
                    340
                ],
                [
                    6,
                    5,
                    230
                ],
                [
                    6,
                    6,
                    632
                ],
                [
                    6,
                    7,
                    111
                ],
                [
                    6,
                    8,
                    236
                ],
                [
                    6,
                    9,
                    333
                ],
                [
                    6,
                    10,
                    104
                ],
                [
                    6,
                    11,
                    493
                ],
                [
                    6,
                    12,
                    661
                ],
                [
                    6,
                    13,
                    64
                ],
                [
                    6,
                    14,
                    9074
                ],
                [
                    6,
                    15,
                    463
                ],
                [
                    6,
                    16,
                    159
                ],
                [
                    6,
                    17,
                    275
                ],
                [
                    6,
                    18,
                    116
                ],
                [
                    6,
                    19,
                    95
                ],
                [
                    7,
                    0,
                    203
                ],
                [
                    7,
                    1,
                    114
                ],
                [
                    7,
                    2,
                    212
                ],
                [
                    7,
                    3,
                    254
                ],
                [
                    7,
                    4,
                    408
                ],
                [
                    7,
                    5,
                    259
                ],
                [
                    7,
                    6,
                    725
                ],
                [
                    7,
                    7,
                    127
                ],
                [
                    7,
                    8,
                    271
                ],
                [
                    7,
                    9,
                    391
                ],
                [
                    7,
                    10,
                    113
                ],
                [
                    7,
                    11,
                    566
                ],
                [
                    7,
                    12,
                    724
                ],
                [
                    7,
                    13,
                    72
                ],
                [
                    7,
                    14,
                    11177
                ],
                [
                    7,
                    15,
                    521
                ],
                [
                    7,
                    16,
                    179
                ],
                [
                    7,
                    17,
                    312
                ],
                [
                    7,
                    18,
                    128
                ],
                [
                    7,
                    19,
                    121
                ],
                [
                    8,
                    0,
                    219
                ],
                [
                    8,
                    1,
                    119
                ],
                [
                    8,
                    2,
                    228
                ],
                [
                    8,
                    3,
                    282
                ],
                [
                    8,
                    4,
                    480
                ],
                [
                    8,
                    5,
                    275
                ],
                [
                    8,
                    6,
                    813
                ],
                [
                    8,
                    7,
                    139
                ],
                [
                    8,
                    8,
                    308
                ],
                [
                    8,
                    9,
                    476
                ],
                [
                    8,
                    10,
                    126
                ],
                [
                    8,
                    11,
                    675
                ],
                [
                    8,
                    12,
                    829
                ],
                [
                    8,
                    13,
                    80
                ],
                [
                    8,
                    14,
                    13522
                ],
                [
                    8,
                    15,
                    593
                ],
                [
                    8,
                    16,
                    194
                ],
                [
                    8,
                    17,
                    344
                ],
                [
                    8,
                    18,
                    142
                ],
                [
                    8,
                    19,
                    155
                ],
                [
                    9,
                    0,
                    243
                ],
                [
                    9,
                    1,
                    124
                ],
                [
                    9,
                    2,
                    253
                ],
                [
                    9,
                    3,
                    301
                ],
                [
                    9,
                    4,
                    530
                ],
                [
                    9,
                    5,
                    307
                ],
                [
                    9,
                    6,
                    895
                ],
                [
                    9,
                    7,
                    150
                ],
                [
                    9,
                    8,
                    341
                ],
                [
                    9,
                    9,
                    548
                ],
                [
                    9,
                    10,
                    136
                ],
                [
                    9,
                    11,
                    764
                ],
                [
                    9,
                    12,
                    895
                ],
                [
                    9,
                    13,
                    91
                ],
                [
                    9,
                    14,
                    16678
                ],
                [
                    9,
                    15,
                    661
                ],
                [
                    9,
                    16,
                    205
                ],
                [
                    9,
                    17,
                    376
                ],
                [
                    9,
                    18,
                    165
                ],
                [
                    9,
                    19,
                    190
                ],
                [
                    10,
                    0,
                    257
                ],
                [
                    10,
                    1,
                    133
                ],
                [
                    10,
                    2,
                    274
                ],
                [
                    10,
                    3,
                    321
                ],
                [
                    10,
                    4,
                    591
                ],
                [
                    10,
                    5,
                    347
                ],
                [
                    10,
                    6,
                    970
                ],
                [
                    10,
                    7,
                    168
                ],
                [
                    10,
                    8,
                    373
                ],
                [
                    10,
                    9,
                    600
                ],
                [
                    10,
                    10,
                    157
                ],
                [
                    10,
                    11,
                    851
                ],
                [
                    10,
                    12,
                    954
                ],
                [
                    10,
                    13,
                    106
                ],
                [
                    10,
                    14,
                    19665
                ],
                [
                    10,
                    15,
                    711
                ],
                [
                    10,
                    16,
                    215
                ],
                [
                    10,
                    17,
                    400
                ],
                [
                    10,
                    18,
                    173
                ],
                [
                    10,
                    19,
                    227
                ],
                [
                    11,
                    0,
                    277
                ],
                [
                    11,
                    1,
                    136
                ],
                [
                    11,
                    2,
                    297
                ],
                [
                    11,
                    3,
                    344
                ],
                [
                    11,
                    4,
                    665
                ],
                [
                    11,
                    5,
                    386
                ],
                [
                    11,
                    6,
                    1034
                ],
                [
                    11,
                    7,
                    172
                ],
                [
                    11,
                    8,
                    408
                ],
                [
                    11,
                    9,
                    661
                ],
                [
                    11,
                    10,
                    172
                ],
                [
                    11,
                    11,
                    914
                ],
                [
                    11,
                    12,
                    1006
                ],
                [
                    11,
                    13,
                    117
                ],
                [
                    11,
                    14,
                    22112
                ],
                [
                    11,
                    15,
                    772
                ],
                [
                    11,
                    16,
                    224
                ],
                [
                    11,
                    17,
                    415
                ],
                [
                    11,
                    18,
                    184
                ],
                [
                    11,
                    19,
                    277
                ],
                [
                    12,
                    0,
                    286
                ],
                [
                    12,
                    1,
                    138
                ],
                [
                    12,
                    2,
                    315
                ],
                [
                    12,
                    3,
                    364
                ],
                [
                    12,
                    4,
                    733
                ],
                [
                    12,
                    5,
                    416
                ],
                [
                    12,
                    6,
                    1095
                ],
                [
                    12,
                    7,
                    183
                ],
                [
                    12,
                    8,
                    439
                ],
                [
                    12,
                    9,
                    698
                ],
                [
                    12,
                    10,
                    195
                ],
                [
                    12,
                    11,
                    981
                ],
                [
                    12,
                    12,
                    1048
                ],
                [
                    12,
                    13,
                    124
                ],
                [
                    12,
                    14,
                    24953
                ],
                [
                    12,
                    15,
                    803
                ],
                [
                    12,
                    16,
                    239
                ],
                [
                    12,
                    17,
                    428
                ],
                [
                    12,
                    18,
                    195
                ],
                [
                    12,
                    19,
                    296
                ],
                [
                    13,
                    0,
                    293
                ],
                [
                    13,
                    1,
                    141
                ],
                [
                    13,
                    2,
                    326
                ],
                [
                    13,
                    3,
                    386
                ],
                [
                    13,
                    4,
                    779
                ],
                [
                    13,
                    5,
                    444
                ],
                [
                    13,
                    6,
                    1131
                ],
                [
                    13,
                    7,
                    195
                ],
                [
                    13,
                    8,
                    468
                ],
                [
                    13,
                    9,
                    740
                ],
                [
                    13,
                    10,
                    206
                ],
                [
                    13,
                    11,
                    1033
                ],
                [
                    13,
                    12,
                    1075
                ],
                [
                    13,
                    13,
                    131
                ],
                [
                    13,
                    14,
                    27100
                ],
                [
                    13,
                    15,
                    838
                ],
                [
                    13,
                    16,
                    250
                ],
                [
                    13,
                    17,
                    450
                ],
                [
                    13,
                    18,
                    208
                ],
                [
                    13,
                    19,
                    307
                ],
                [
                    14,
                    0,
                    299
                ],
                [
                    14,
                    1,
                    149
                ],
                [
                    14,
                    2,
                    337
                ],
                [
                    14,
                    3,
                    405
                ],
                [
                    14,
                    4,
                    830
                ],
                [
                    14,
                    5,
                    466
                ],
                [
                    14,
                    6,
                    1159
                ],
                [
                    14,
                    7,
                    210
                ],
                [
                    14,
                    8,
                    492
                ],
                [
                    14,
                    9,
                    771
                ],
                [
                    14,
                    10,
                    218
                ],
                [
                    14,
                    11,
                    1073
                ],
                [
                    14,
                    12,
                    1092
                ],
                [
                    14,
                    13,
                    138
                ],
                [
                    14,
                    14,
                    29631
                ],
                [
                    14,
                    15,
                    879
                ],
                [
                    14,
                    16,
                    261
                ],
                [
                    14,
                    17,
                    473
                ],
                [
                    14,
                    18,
                    213
                ],
                [
                    14,
                    19,
                    331
                ],
                [
                    15,
                    0,
                    303
                ],
                [
                    15,
                    1,
                    153
                ],
                [
                    15,
                    2,
                    342
                ],
                [
                    15,
                    3,
                    417
                ],
                [
                    15,
                    4,
                    860
                ],
                [
                    15,
                    5,
                    487
                ],
                [
                    15,
                    6,
                    1177
                ],
                [
                    15,
                    7,
                    215
                ],
                [
                    15,
                    8,
                    515
                ],
                [
                    15,
                    9,
                    804
                ],
                [
                    15,
                    10,
                    239
                ],
                [
                    15,
                    11,
                    1105
                ],
                [
                    15,
                    12,
                    1117
                ],
                [
                    15,
                    13,
                    144
                ],
                [
                    15,
                    14,
                    31728
                ],
                [
                    15,
                    15,
                    912
                ],
                [
                    15,
                    16,
                    267
                ],
                [
                    15,
                    17,
                    489
                ],
                [
                    15,
                    18,
                    219
                ],
                [
                    15,
                    19,
                    360
                ],
                [
                    16,
                    0,
                    311
                ],
                [
                    16,
                    1,
                    154
                ],
                [
                    16,
                    2,
                    352
                ],
                [
                    16,
                    3,
                    436
                ],
                [
                    16,
                    4,
                    889
                ],
                [
                    16,
                    5,
                    498
                ],
                [
                    16,
                    6,
                    1219
                ],
                [
                    16,
                    7,
                    222
                ],
                [
                    16,
                    8,
                    543
                ],
                [
                    16,
                    9,
                    844
                ],
                [
                    16,
                    10,
                    251
                ],
                [
                    16,
                    11,
                    1135
                ],
                [
                    16,
                    12,
                    1131
                ],
                [
                    16,
                    13,
                    157
                ],
                [
                    16,
                    14,
                    33366
                ],
                [
                    16,
                    15,
                    946
                ],
                [
                    16,
                    16,
                    272
                ],
                [
                    16,
                    17,
                    509
                ],
                [
                    16,
                    18,
                    225
                ],
                [
                    16,
                    19,
                    378
                ],
                [
                    17,
                    0,
                    315
                ],
                [
                    17,
                    1,
                    156
                ],
                [
                    17,
                    2,
                    366
                ],
                [
                    17,
                    3,
                    451
                ],
                [
                    17,
                    4,
                    910
                ],
                [
                    17,
                    5,
                    509
                ],
                [
                    17,
                    6,
                    1241
                ],
                [
                    17,
                    7,
                    222
                ],
                [
                    17,
                    8,
                    570
                ],
                [
                    17,
                    9,
                    872
                ],
                [
                    17,
                    10,
                    265
                ],
                [
                    17,
                    11,
                    1169
                ],
                [
                    17,
                    12,
                    1145
                ],
                [
                    17,
                    13,
                    157
                ],
                [
                    17,
                    14,
                    48206
                ],
                [
                    17,
                    15,
                    968
                ],
                [
                    17,
                    16,
                    279
                ],
                [
                    17,
                    17,
                    525
                ],
                [
                    17,
                    18,
                    229
                ],
                [
                    17,
                    19,
                    395
                ],
                [
                    18,
                    0,
                    318
                ],
                [
                    18,
                    1,
                    162
                ],
                [
                    18,
                    2,
                    372
                ],
                [
                    18,
                    3,
                    463
                ],
                [
                    18,
                    4,
                    934
                ],
                [
                    18,
                    5,
                    523
                ],
                [
                    18,
                    6,
                    1261
                ],
                [
                    18,
                    7,
                    226
                ],
                [
                    18,
                    8,
                    593
                ],
                [
                    18,
                    9,
                    900
                ],
                [
                    18,
                    10,
                    283
                ],
                [
                    18,
                    11,
                    1184
                ],
                [
                    18,
                    12,
                    1155
                ],
                [
                    18,
                    13,
                    159
                ],
                [
                    18,
                    14,
                    51986
                ],
                [
                    18,
                    15,
                    988
                ],
                [
                    18,
                    16,
                    281
                ],
                [
                    18,
                    17,
                    532
                ],
                [
                    18,
                    18,
                    230
                ],
                [
                    18,
                    19,
                    419
                ],
                [
                    19,
                    0,
                    326
                ],
                [
                    19,
                    1,
                    168
                ],
                [
                    19,
                    2,
                    375
                ],
                [
                    19,
                    3,
                    470
                ],
                [
                    19,
                    4,
                    950
                ],
                [
                    19,
                    5,
                    532
                ],
                [
                    19,
                    6,
                    1294
                ],
                [
                    19,
                    7,
                    235
                ],
                [
                    19,
                    8,
                    604
                ],
                [
                    19,
                    9,
                    913
                ],
                [
                    19,
                    10,
                    291
                ],
                [
                    19,
                    11,
                    1212
                ],
                [
                    19,
                    12,
                    1162
                ],
                [
                    19,
                    13,
                    162
                ],
                [
                    19,
                    14,
                    54406
                ],
                [
                    19,
                    15,
                    1001
                ],
                [
                    19,
                    16,
                    285
                ],
                [
                    19,
                    17,
                    538
                ],
                [
                    19,
                    18,
                    232
                ],
                [
                    19,
                    19,
                    425
                ],
                [
                    20,
                    0,
                    328
                ],
                [
                    20,
                    1,
                    171
                ],
                [
                    20,
                    2,
                    380
                ],
                [
                    20,
                    3,
                    481
                ],
                [
                    20,
                    4,
                    962
                ],
                [
                    20,
                    5,
                    537
                ],
                [
                    20,
                    6,
                    1316
                ],
                [
                    20,
                    7,
                    237
                ],
                [
                    20,
                    8,
                    617
                ],
                [
                    20,
                    9,
                    925
                ],
                [
                    20,
                    10,
                    300
                ],
                [
                    20,
                    11,
                    1231
                ],
                [
                    20,
                    12,
                    1167
                ],
                [
                    20,
                    13,
                    162
                ],
                [
                    20,
                    14,
                    56249
                ],
                [
                    20,
                    15,
                    1004
                ],
                [
                    20,
                    16,
                    287
                ],
                [
                    20,
                    17,
                    547
                ],
                [
                    20,
                    18,
                    236
                ],
                [
                    20,
                    19,
                    445
                ],
                [
                    21,
                    0,
                    332
                ],
                [
                    21,
                    1,
                    171
                ],
                [
                    21,
                    2,
                    381
                ],
                [
                    21,
                    3,
                    495
                ],
                [
                    21,
                    4,
                    973
                ],
                [
                    21,
                    5,
                    541
                ],
                [
                    21,
                    6,
                    1322
                ],
                [
                    21,
                    7,
                    238
                ],
                [
                    21,
                    8,
                    626
                ],
                [
                    21,
                    9,
                    930
                ],
                [
                    21,
                    10,
                    301
                ],
                [
                    21,
                    11,
                    1246
                ],
                [
                    21,
                    12,
                    1171
                ],
                [
                    21,
                    13,
                    163
                ],
                [
                    21,
                    14,
                    58182
                ],
                [
                    21,
                    15,
                    1006
                ],
                [
                    21,
                    16,
                    290
                ],
                [
                    21,
                    17,
                    553
                ],
                [
                    21,
                    18,
                    240
                ],
                [
                    21,
                    19,
                    457
                ],
                [
                    22,
                    0,
                    333
                ],
                [
                    22,
                    1,
                    172
                ],
                [
                    22,
                    2,
                    387
                ],
                [
                    22,
                    3,
                    508
                ],
                [
                    22,
                    4,
                    982
                ],
                [
                    22,
                    5,
                    543
                ],
                [
                    22,
                    6,
                    1328
                ],
                [
                    22,
                    7,
                    242
                ],
                [
                    22,
                    8,
                    629
                ],
                [
                    22,
                    9,
                    933
                ],
                [
                    22,
                    10,
                    302
                ],
                [
                    22,
                    11,
                    1257
                ],
                [
                    22,
                    12,
                    1172
                ],
                [
                    22,
                    13,
                    163
                ],
                [
                    22,
                    14,
                    59989
                ],
                [
                    22,
                    15,
                    1007
                ],
                [
                    22,
                    16,
                    292
                ],
                [
                    22,
                    17,
                    553
                ],
                [
                    22,
                    18,
                    240
                ],
                [
                    22,
                    19,
                    464
                ],
                [
                    23,
                    0,
                    333
                ],
                [
                    23,
                    1,
                    173
                ],
                [
                    23,
                    2,
                    393
                ],
                [
                    23,
                    3,
                    514
                ],
                [
                    23,
                    4,
                    986
                ],
                [
                    23,
                    5,
                    544
                ],
                [
                    23,
                    6,
                    1331
                ],
                [
                    23,
                    7,
                    244
                ],
                [
                    23,
                    8,
                    631
                ],
                [
                    23,
                    9,
                    934
                ],
                [
                    23,
                    10,
                    306
                ],
                [
                    23,
                    11,
                    1262
                ],
                [
                    23,
                    12,
                    1174
                ],
                [
                    23,
                    13,
                    163
                ],
                [
                    23,
                    14,
                    61682
                ],
                [
                    23,
                    15,
                    1008
                ],
                [
                    23,
                    16,
                    293
                ],
                [
                    23,
                    17,
                    555
                ],
                [
                    23,
                    18,
                    242
                ],
                [
                    23,
                    19,
                    470
                ],
                [
                    24,
                    0,
                    334
                ],
                [
                    24,
                    1,
                    173
                ],
                [
                    24,
                    2,
                    395
                ],
                [
                    24,
                    3,
                    520
                ],
                [
                    24,
                    4,
                    987
                ],
                [
                    24,
                    5,
                    546
                ],
                [
                    24,
                    6,
                    1332
                ],
                [
                    24,
                    7,
                    245
                ],
                [
                    24,
                    8,
                    631
                ],
                [
                    24,
                    9,
                    934
                ],
                [
                    24,
                    10,
                    307
                ],
                [
                    24,
                    11,
                    1265
                ],
                [
                    24,
                    12,
                    1175
                ],
                [
                    24,
                    13,
                    168
                ],
                [
                    24,
                    14,
                    62031
                ],
                [
                    24,
                    15,
                    1010
                ],
                [
                    24,
                    16,
                    293
                ],
                [
                    24,
                    17,
                    560
                ],
                [
                    24,
                    18,
                    245
                ],
                [
                    24,
                    19,
                    476
                ],
                [
                    25,
                    0,
                    334
                ],
                [
                    25,
                    1,
                    174
                ],
                [
                    25,
                    2,
                    396
                ],
                [
                    25,
                    3,
                    525
                ],
                [
                    25,
                    4,
                    988
                ],
                [
                    25,
                    5,
                    749
                ],
                [
                    25,
                    6,
                    1333
                ],
                [
                    25,
                    7,
                    246
                ],
                [
                    25,
                    8,
                    631
                ],
                [
                    25,
                    9,
                    934
                ],
                [
                    25,
                    10,
                    308
                ],
                [
                    25,
                    11,
                    1267
                ],
                [
                    25,
                    12,
                    1203
                ],
                [
                    25,
                    13,
                    168
                ],
                [
                    25,
                    14,
                    62662
                ],
                [
                    25,
                    15,
                    1011
                ],
                [
                    25,
                    16,
                    293
                ],
                [
                    25,
                    17,
                    567
                ],
                [
                    25,
                    18,
                    245
                ],
                [
                    25,
                    19,
                    479
                ]
            ],
            "label": {
                "show": true,
                "position": "inside",
                "margin": 8
            }
        }
    ],
    "legend": [
        {
            "data": [
                ""
            ],
            "selected": {
                "": true
            },
            "show": true,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "xAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            },
            "data": [
                "01-27",
                "01-28",
                "01-29",
                "01-30",
                "01-31",
                "02-01",
                "02-02",
                "02-03",
                "02-04",
                "02-05",
                "02-06",
                "02-07",
                "02-08",
                "02-09",
                "02-10",
                "02-11",
                "02-12",
                "02-13",
                "02-14",
                "02-15",
                "02-16",
                "02-17",
                "02-18",
                "02-19",
                "02-20",
                "02-21"
            ]
        }
    ],
    "yAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            },
            "data": [
                "上海",
                "云南",
                "北京",
                "四川",
                "安徽",
                "山东",
                "广东",
                "广西",
                "江苏",
                "江西",
                "河北",
                "河南",
                "浙江",
                "海南",
                "湖北",
                "湖南",
                "福建",
                "重庆",
                "陕西",
                "黑龙江"
            ]
        }
    ],
    "title": [
        {
            "text": "各省份累计确诊数",
            "padding": 5,
            "itemGap": 10
        }
    ],
    "visualMap": {
        "show": true,
        "type": "continuous",
        "min": 0,
        "max": 1000,
        "inRange": {
            "color": [
                "#50a3ba",
                "#eac763",
                "#d94e5d"
            ]
        },
        "calculable": true,
        "inverse": false,
        "splitNumber": 5,
        "orient": "horizontal",
        "top": "0%",
        "right": "15%",
        "showLabel": true,
        "itemWidth": 20,
        "itemHeight": 140,
        "borderWidth": 0
    }
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<h3 id="各省份新增确诊病例变化趋势"><a href="#各省份新增确诊病例变化趋势" class="headerlink" title="各省份新增确诊病例变化趋势"></a>各省份新增确诊病例变化趋势</h3><p>这里我选取了在2月8日感染人数超过100人的省份（一共21个省份），看下他们从1月27日-现在的新增确诊病例变化趋势：</p>
<div id="echarts7906" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts7906'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "heatmap",
            "data": [
                [
                    0,
                    0,
                    13
                ],
                [
                    0,
                    1,
                    18
                ],
                [
                    0,
                    2,
                    11
                ],
                [
                    0,
                    3,
                    21
                ],
                [
                    0,
                    4,
                    36
                ],
                [
                    0,
                    5,
                    20
                ],
                [
                    0,
                    6,
                    56
                ],
                [
                    0,
                    7,
                    5
                ],
                [
                    0,
                    8,
                    23
                ],
                [
                    0,
                    9,
                    24
                ],
                [
                    0,
                    10,
                    15
                ],
                [
                    0,
                    11,
                    40
                ],
                [
                    0,
                    12,
                    45
                ],
                [
                    0,
                    13,
                    7
                ],
                [
                    0,
                    14,
                    1291
                ],
                [
                    0,
                    15,
                    43
                ],
                [
                    0,
                    16,
                    21
                ],
                [
                    0,
                    17,
                    22
                ],
                [
                    0,
                    18,
                    11
                ],
                [
                    0,
                    19,
                    9
                ],
                [
                    1,
                    0,
                    30
                ],
                [
                    1,
                    1,
                    11
                ],
                [
                    1,
                    2,
                    20
                ],
                [
                    1,
                    3,
                    18
                ],
                [
                    1,
                    4,
                    49
                ],
                [
                    1,
                    5,
                    35
                ],
                [
                    1,
                    6,
                    70
                ],
                [
                    1,
                    7,
                    7
                ],
                [
                    1,
                    8,
                    29
                ],
                [
                    1,
                    9,
                    37
                ],
                [
                    1,
                    10,
                    15
                ],
                [
                    1,
                    11,
                    38
                ],
                [
                    1,
                    12,
                    123
                ],
                [
                    1,
                    13,
                    3
                ],
                [
                    1,
                    14,
                    840
                ],
                [
                    1,
                    15,
                    78
                ],
                [
                    1,
                    16,
                    4
                ],
                [
                    1,
                    17,
                    15
                ],
                [
                    1,
                    18,
                    10
                ],
                [
                    1,
                    19,
                    8
                ],
                [
                    2,
                    0,
                    16
                ],
                [
                    2,
                    1,
                    15
                ],
                [
                    2,
                    2,
                    3
                ],
                [
                    2,
                    3,
                    34
                ],
                [
                    2,
                    4,
                    45
                ],
                [
                    2,
                    5,
                    28
                ],
                [
                    2,
                    6,
                    77
                ],
                [
                    2,
                    7,
                    20
                ],
                [
                    2,
                    8,
                    30
                ],
                [
                    2,
                    9,
                    53
                ],
                [
                    2,
                    10,
                    17
                ],
                [
                    2,
                    11,
                    72
                ],
                [
                    2,
                    12,
                    132
                ],
                [
                    2,
                    13,
                    3
                ],
                [
                    2,
                    14,
                    1349
                ],
                [
                    2,
                    15,
                    56
                ],
                [
                    2,
                    16,
                    17
                ],
                [
                    2,
                    17,
                    35
                ],
                [
                    2,
                    18,
                    7
                ],
                [
                    2,
                    19,
                    6
                ],
                [
                    3,
                    0,
                    23
                ],
                [
                    3,
                    1,
                    13
                ],
                [
                    3,
                    2,
                    25
                ],
                [
                    3,
                    3,
                    35
                ],
                [
                    3,
                    4,
                    37
                ],
                [
                    3,
                    5,
                    26
                ],
                [
                    3,
                    6,
                    82
                ],
                [
                    3,
                    7,
                    9
                ],
                [
                    3,
                    8,
                    39
                ],
                [
                    3,
                    9,
                    78
                ],
                [
                    3,
                    10,
                    17
                ],
                [
                    3,
                    11,
                    74
                ],
                [
                    3,
                    12,
                    110
                ],
                [
                    3,
                    13,
                    6
                ],
                [
                    3,
                    14,
                    903
                ],
                [
                    3,
                    15,
                    55
                ],
                [
                    3,
                    16,
                    19
                ],
                [
                    3,
                    17,
                    29
                ],
                [
                    3,
                    18,
                    24
                ],
                [
                    3,
                    19,
                    15
                ],
                [
                    4,
                    0,
                    34
                ],
                [
                    4,
                    1,
                    10
                ],
                [
                    4,
                    2,
                    29
                ],
                [
                    4,
                    3,
                    30
                ],
                [
                    4,
                    4,
                    60
                ],
                [
                    4,
                    5,
                    22
                ],
                [
                    4,
                    6,
                    99
                ],
                [
                    4,
                    7,
                    13
                ],
                [
                    4,
                    8,
                    34
                ],
                [
                    4,
                    9,
                    46
                ],
                [
                    4,
                    10,
                    14
                ],
                [
                    4,
                    11,
                    70
                ],
                [
                    4,
                    12,
                    61
                ],
                [
                    4,
                    13,
                    10
                ],
                [
                    4,
                    14,
                    1347
                ],
                [
                    4,
                    15,
                    57
                ],
                [
                    4,
                    16,
                    24
                ],
                [
                    4,
                    17,
                    36
                ],
                [
                    4,
                    18,
                    14
                ],
                [
                    4,
                    19,
                    21
                ],
                [
                    5,
                    0,
                    13
                ],
                [
                    5,
                    1,
                    12
                ],
                [
                    5,
                    2,
                    23
                ],
                [
                    5,
                    3,
                    24
                ],
                [
                    5,
                    4,
                    43
                ],
                [
                    5,
                    5,
                    24
                ],
                [
                    5,
                    6,
                    97
                ],
                [
                    5,
                    7,
                    11
                ],
                [
                    5,
                    8,
                    34
                ],
                [
                    5,
                    9,
                    47
                ],
                [
                    5,
                    10,
                    8
                ],
                [
                    5,
                    11,
                    71
                ],
                [
                    5,
                    12,
                    62
                ],
                [
                    5,
                    13,
                    2
                ],
                [
                    5,
                    14,
                    1921
                ],
                [
                    5,
                    15,
                    74
                ],
                [
                    5,
                    16,
                    15
                ],
                [
                    5,
                    17,
                    28
                ],
                [
                    5,
                    18,
                    15
                ],
                [
                    5,
                    19,
                    15
                ],
                [
                    6,
                    0,
                    21
                ],
                [
                    6,
                    1,
                    9
                ],
                [
                    6,
                    2,
                    21
                ],
                [
                    6,
                    3,
                    23
                ],
                [
                    6,
                    4,
                    68
                ],
                [
                    6,
                    5,
                    29
                ],
                [
                    6,
                    6,
                    93
                ],
                [
                    6,
                    7,
                    16
                ],
                [
                    6,
                    8,
                    35
                ],
                [
                    6,
                    9,
                    58
                ],
                [
                    6,
                    10,
                    9
                ],
                [
                    6,
                    11,
                    73
                ],
                [
                    6,
                    12,
                    63
                ],
                [
                    6,
                    13,
                    8
                ],
                [
                    6,
                    14,
                    2103
                ],
                [
                    6,
                    15,
                    58
                ],
                [
                    6,
                    16,
                    20
                ],
                [
                    6,
                    17,
                    37
                ],
                [
                    6,
                    18,
                    12
                ],
                [
                    6,
                    19,
                    26
                ],
                [
                    7,
                    0,
                    16
                ],
                [
                    7,
                    1,
                    5
                ],
                [
                    7,
                    2,
                    16
                ],
                [
                    7,
                    3,
                    28
                ],
                [
                    7,
                    4,
                    72
                ],
                [
                    7,
                    5,
                    16
                ],
                [
                    7,
                    6,
                    88
                ],
                [
                    7,
                    7,
                    12
                ],
                [
                    7,
                    8,
                    37
                ],
                [
                    7,
                    9,
                    85
                ],
                [
                    7,
                    10,
                    13
                ],
                [
                    7,
                    11,
                    109
                ],
                [
                    7,
                    12,
                    105
                ],
                [
                    7,
                    13,
                    8
                ],
                [
                    7,
                    14,
                    2345
                ],
                [
                    7,
                    15,
                    72
                ],
                [
                    7,
                    16,
                    15
                ],
                [
                    7,
                    17,
                    32
                ],
                [
                    7,
                    18,
                    14
                ],
                [
                    7,
                    19,
                    34
                ],
                [
                    8,
                    0,
                    24
                ],
                [
                    8,
                    1,
                    5
                ],
                [
                    8,
                    2,
                    25
                ],
                [
                    8,
                    3,
                    19
                ],
                [
                    8,
                    4,
                    50
                ],
                [
                    8,
                    5,
                    32
                ],
                [
                    8,
                    6,
                    82
                ],
                [
                    8,
                    7,
                    11
                ],
                [
                    8,
                    8,
                    33
                ],
                [
                    8,
                    9,
                    72
                ],
                [
                    8,
                    10,
                    10
                ],
                [
                    8,
                    11,
                    89
                ],
                [
                    8,
                    12,
                    66
                ],
                [
                    8,
                    13,
                    11
                ],
                [
                    8,
                    14,
                    3156
                ],
                [
                    8,
                    15,
                    68
                ],
                [
                    8,
                    16,
                    11
                ],
                [
                    8,
                    17,
                    32
                ],
                [
                    8,
                    18,
                    23
                ],
                [
                    8,
                    19,
                    35
                ],
                [
                    9,
                    0,
                    14
                ],
                [
                    9,
                    1,
                    9
                ],
                [
                    9,
                    2,
                    21
                ],
                [
                    9,
                    3,
                    20
                ],
                [
                    9,
                    4,
                    61
                ],
                [
                    9,
                    5,
                    40
                ],
                [
                    9,
                    6,
                    75
                ],
                [
                    9,
                    7,
                    18
                ],
                [
                    9,
                    8,
                    32
                ],
                [
                    9,
                    9,
                    52
                ],
                [
                    9,
                    10,
                    21
                ],
                [
                    9,
                    11,
                    87
                ],
                [
                    9,
                    12,
                    59
                ],
                [
                    9,
                    13,
                    15
                ],
                [
                    9,
                    14,
                    2987
                ],
                [
                    9,
                    15,
                    50
                ],
                [
                    9,
                    16,
                    10
                ],
                [
                    9,
                    17,
                    24
                ],
                [
                    9,
                    18,
                    8
                ],
                [
                    9,
                    19,
                    37
                ],
                [
                    10,
                    0,
                    20
                ],
                [
                    10,
                    1,
                    3
                ],
                [
                    10,
                    2,
                    23
                ],
                [
                    10,
                    3,
                    23
                ],
                [
                    10,
                    4,
                    74
                ],
                [
                    10,
                    5,
                    39
                ],
                [
                    10,
                    6,
                    64
                ],
                [
                    10,
                    7,
                    4
                ],
                [
                    10,
                    8,
                    35
                ],
                [
                    10,
                    9,
                    61
                ],
                [
                    10,
                    10,
                    15
                ],
                [
                    10,
                    11,
                    63
                ],
                [
                    10,
                    12,
                    52
                ],
                [
                    10,
                    13,
                    11
                ],
                [
                    10,
                    14,
                    2447
                ],
                [
                    10,
                    15,
                    61
                ],
                [
                    10,
                    16,
                    9
                ],
                [
                    10,
                    17,
                    15
                ],
                [
                    10,
                    18,
                    11
                ],
                [
                    10,
                    19,
                    50
                ],
                [
                    11,
                    0,
                    9
                ],
                [
                    11,
                    1,
                    2
                ],
                [
                    11,
                    2,
                    18
                ],
                [
                    11,
                    3,
                    20
                ],
                [
                    11,
                    4,
                    68
                ],
                [
                    11,
                    5,
                    30
                ],
                [
                    11,
                    6,
                    61
                ],
                [
                    11,
                    7,
                    11
                ],
                [
                    11,
                    8,
                    31
                ],
                [
                    11,
                    9,
                    37
                ],
                [
                    11,
                    10,
                    23
                ],
                [
                    11,
                    11,
                    67
                ],
                [
                    11,
                    12,
                    42
                ],
                [
                    11,
                    13,
                    7
                ],
                [
                    11,
                    14,
                    2841
                ],
                [
                    11,
                    15,
                    31
                ],
                [
                    11,
                    16,
                    15
                ],
                [
                    11,
                    17,
                    13
                ],
                [
                    11,
                    18,
                    11
                ],
                [
                    11,
                    19,
                    19
                ],
                [
                    12,
                    0,
                    7
                ],
                [
                    12,
                    1,
                    3
                ],
                [
                    12,
                    2,
                    11
                ],
                [
                    12,
                    3,
                    22
                ],
                [
                    12,
                    4,
                    46
                ],
                [
                    12,
                    5,
                    28
                ],
                [
                    12,
                    6,
                    36
                ],
                [
                    12,
                    7,
                    12
                ],
                [
                    12,
                    8,
                    29
                ],
                [
                    12,
                    9,
                    42
                ],
                [
                    12,
                    10,
                    11
                ],
                [
                    12,
                    11,
                    52
                ],
                [
                    12,
                    12,
                    27
                ],
                [
                    12,
                    13,
                    7
                ],
                [
                    12,
                    14,
                    2147
                ],
                [
                    12,
                    15,
                    35
                ],
                [
                    12,
                    16,
                    11
                ],
                [
                    12,
                    17,
                    22
                ],
                [
                    12,
                    18,
                    13
                ],
                [
                    12,
                    19,
                    11
                ],
                [
                    13,
                    0,
                    6
                ],
                [
                    13,
                    1,
                    8
                ],
                [
                    13,
                    2,
                    11
                ],
                [
                    13,
                    3,
                    19
                ],
                [
                    13,
                    4,
                    51
                ],
                [
                    13,
                    5,
                    22
                ],
                [
                    13,
                    6,
                    28
                ],
                [
                    13,
                    7,
                    15
                ],
                [
                    13,
                    8,
                    24
                ],
                [
                    13,
                    9,
                    31
                ],
                [
                    13,
                    10,
                    12
                ],
                [
                    13,
                    11,
                    40
                ],
                [
                    13,
                    12,
                    17
                ],
                [
                    13,
                    13,
                    7
                ],
                [
                    13,
                    14,
                    2531
                ],
                [
                    13,
                    15,
                    41
                ],
                [
                    13,
                    16,
                    11
                ],
                [
                    13,
                    17,
                    23
                ],
                [
                    13,
                    18,
                    5
                ],
                [
                    13,
                    19,
                    24
                ],
                [
                    14,
                    0,
                    4
                ],
                [
                    14,
                    1,
                    4
                ],
                [
                    14,
                    2,
                    5
                ],
                [
                    14,
                    3,
                    12
                ],
                [
                    14,
                    4,
                    30
                ],
                [
                    14,
                    5,
                    21
                ],
                [
                    14,
                    6,
                    18
                ],
                [
                    14,
                    7,
                    5
                ],
                [
                    14,
                    8,
                    23
                ],
                [
                    14,
                    9,
                    33
                ],
                [
                    14,
                    10,
                    21
                ],
                [
                    14,
                    11,
                    32
                ],
                [
                    14,
                    12,
                    25
                ],
                [
                    14,
                    13,
                    6
                ],
                [
                    14,
                    14,
                    2097
                ],
                [
                    14,
                    15,
                    33
                ],
                [
                    14,
                    16,
                    6
                ],
                [
                    14,
                    17,
                    16
                ],
                [
                    14,
                    18,
                    6
                ],
                [
                    14,
                    19,
                    29
                ],
                [
                    15,
                    0,
                    8
                ],
                [
                    15,
                    1,
                    1
                ],
                [
                    15,
                    2,
                    10
                ],
                [
                    15,
                    3,
                    19
                ],
                [
                    15,
                    4,
                    29
                ],
                [
                    15,
                    5,
                    11
                ],
                [
                    15,
                    6,
                    42
                ],
                [
                    15,
                    7,
                    7
                ],
                [
                    15,
                    8,
                    28
                ],
                [
                    15,
                    9,
                    40
                ],
                [
                    15,
                    10,
                    12
                ],
                [
                    15,
                    11,
                    30
                ],
                [
                    15,
                    12,
                    14
                ],
                [
                    15,
                    13,
                    13
                ],
                [
                    15,
                    14,
                    1638
                ],
                [
                    15,
                    15,
                    34
                ],
                [
                    15,
                    16,
                    5
                ],
                [
                    15,
                    17,
                    20
                ],
                [
                    15,
                    18,
                    6
                ],
                [
                    15,
                    19,
                    18
                ],
                [
                    16,
                    0,
                    4
                ],
                [
                    16,
                    1,
                    2
                ],
                [
                    16,
                    2,
                    14
                ],
                [
                    16,
                    3,
                    15
                ],
                [
                    16,
                    4,
                    21
                ],
                [
                    16,
                    5,
                    11
                ],
                [
                    16,
                    6,
                    22
                ],
                [
                    16,
                    7,
                    0
                ],
                [
                    16,
                    8,
                    27
                ],
                [
                    16,
                    9,
                    28
                ],
                [
                    16,
                    10,
                    14
                ],
                [
                    16,
                    11,
                    34
                ],
                [
                    16,
                    12,
                    14
                ],
                [
                    16,
                    13,
                    0
                ],
                [
                    16,
                    14,
                    14840
                ],
                [
                    16,
                    15,
                    22
                ],
                [
                    16,
                    16,
                    7
                ],
                [
                    16,
                    17,
                    16
                ],
                [
                    16,
                    18,
                    4
                ],
                [
                    16,
                    19,
                    17
                ],
                [
                    17,
                    0,
                    3
                ],
                [
                    17,
                    1,
                    6
                ],
                [
                    17,
                    2,
                    6
                ],
                [
                    17,
                    3,
                    12
                ],
                [
                    17,
                    4,
                    24
                ],
                [
                    17,
                    5,
                    14
                ],
                [
                    17,
                    6,
                    20
                ],
                [
                    17,
                    7,
                    4
                ],
                [
                    17,
                    8,
                    23
                ],
                [
                    17,
                    9,
                    28
                ],
                [
                    17,
                    10,
                    18
                ],
                [
                    17,
                    11,
                    15
                ],
                [
                    17,
                    12,
                    10
                ],
                [
                    17,
                    13,
                    2
                ],
                [
                    17,
                    14,
                    3780
                ],
                [
                    17,
                    15,
                    20
                ],
                [
                    17,
                    16,
                    2
                ],
                [
                    17,
                    17,
                    7
                ],
                [
                    17,
                    18,
                    1
                ],
                [
                    17,
                    19,
                    24
                ],
                [
                    18,
                    0,
                    8
                ],
                [
                    18,
                    1,
                    6
                ],
                [
                    18,
                    2,
                    3
                ],
                [
                    18,
                    3,
                    7
                ],
                [
                    18,
                    4,
                    16
                ],
                [
                    18,
                    5,
                    9
                ],
                [
                    18,
                    6,
                    33
                ],
                [
                    18,
                    7,
                    9
                ],
                [
                    18,
                    8,
                    11
                ],
                [
                    18,
                    9,
                    13
                ],
                [
                    18,
                    10,
                    8
                ],
                [
                    18,
                    11,
                    28
                ],
                [
                    18,
                    12,
                    7
                ],
                [
                    18,
                    13,
                    3
                ],
                [
                    18,
                    14,
                    2420
                ],
                [
                    18,
                    15,
                    13
                ],
                [
                    18,
                    16,
                    4
                ],
                [
                    18,
                    17,
                    6
                ],
                [
                    18,
                    18,
                    2
                ],
                [
                    18,
                    19,
                    6
                ],
                [
                    19,
                    0,
                    2
                ],
                [
                    19,
                    1,
                    3
                ],
                [
                    19,
                    2,
                    5
                ],
                [
                    19,
                    3,
                    11
                ],
                [
                    19,
                    4,
                    12
                ],
                [
                    19,
                    5,
                    5
                ],
                [
                    19,
                    6,
                    22
                ],
                [
                    19,
                    7,
                    2
                ],
                [
                    19,
                    8,
                    13
                ],
                [
                    19,
                    9,
                    12
                ],
                [
                    19,
                    10,
                    9
                ],
                [
                    19,
                    11,
                    19
                ],
                [
                    19,
                    12,
                    5
                ],
                [
                    19,
                    13,
                    0
                ],
                [
                    19,
                    14,
                    1843
                ],
                [
                    19,
                    15,
                    3
                ],
                [
                    19,
                    16,
                    2
                ],
                [
                    19,
                    17,
                    9
                ],
                [
                    19,
                    18,
                    4
                ],
                [
                    19,
                    19,
                    20
                ],
                [
                    20,
                    0,
                    4
                ],
                [
                    20,
                    1,
                    0
                ],
                [
                    20,
                    2,
                    1
                ],
                [
                    20,
                    3,
                    14
                ],
                [
                    20,
                    4,
                    11
                ],
                [
                    20,
                    5,
                    4
                ],
                [
                    20,
                    6,
                    6
                ],
                [
                    20,
                    7,
                    1
                ],
                [
                    20,
                    8,
                    9
                ],
                [
                    20,
                    9,
                    5
                ],
                [
                    20,
                    10,
                    1
                ],
                [
                    20,
                    11,
                    15
                ],
                [
                    20,
                    12,
                    4
                ],
                [
                    20,
                    13,
                    1
                ],
                [
                    20,
                    14,
                    1933
                ],
                [
                    20,
                    15,
                    2
                ],
                [
                    20,
                    16,
                    3
                ],
                [
                    20,
                    17,
                    6
                ],
                [
                    20,
                    18,
                    4
                ],
                [
                    20,
                    19,
                    12
                ],
                [
                    21,
                    0,
                    1
                ],
                [
                    21,
                    1,
                    1
                ],
                [
                    21,
                    2,
                    6
                ],
                [
                    21,
                    3,
                    13
                ],
                [
                    21,
                    4,
                    9
                ],
                [
                    21,
                    5,
                    2
                ],
                [
                    21,
                    6,
                    6
                ],
                [
                    21,
                    7,
                    4
                ],
                [
                    21,
                    8,
                    3
                ],
                [
                    21,
                    9,
                    3
                ],
                [
                    21,
                    10,
                    1
                ],
                [
                    21,
                    11,
                    11
                ],
                [
                    21,
                    12,
                    1
                ],
                [
                    21,
                    13,
                    0
                ],
                [
                    21,
                    14,
                    1807
                ],
                [
                    21,
                    15,
                    1
                ],
                [
                    21,
                    16,
                    2
                ],
                [
                    21,
                    17,
                    0
                ],
                [
                    21,
                    18,
                    0
                ],
                [
                    21,
                    19,
                    7
                ],
                [
                    22,
                    0,
                    0
                ],
                [
                    22,
                    1,
                    1
                ],
                [
                    22,
                    2,
                    6
                ],
                [
                    22,
                    3,
                    6
                ],
                [
                    22,
                    4,
                    4
                ],
                [
                    22,
                    5,
                    1
                ],
                [
                    22,
                    6,
                    3
                ],
                [
                    22,
                    7,
                    2
                ],
                [
                    22,
                    8,
                    2
                ],
                [
                    22,
                    9,
                    1
                ],
                [
                    22,
                    10,
                    4
                ],
                [
                    22,
                    11,
                    5
                ],
                [
                    22,
                    12,
                    2
                ],
                [
                    22,
                    13,
                    0
                ],
                [
                    22,
                    14,
                    1693
                ],
                [
                    22,
                    15,
                    1
                ],
                [
                    22,
                    16,
                    1
                ],
                [
                    22,
                    17,
                    2
                ],
                [
                    22,
                    18,
                    2
                ],
                [
                    22,
                    19,
                    6
                ],
                [
                    23,
                    0,
                    1
                ],
                [
                    23,
                    1,
                    0
                ],
                [
                    23,
                    2,
                    2
                ],
                [
                    23,
                    3,
                    6
                ],
                [
                    23,
                    4,
                    1
                ],
                [
                    23,
                    5,
                    2
                ],
                [
                    23,
                    6,
                    1
                ],
                [
                    23,
                    7,
                    1
                ],
                [
                    23,
                    8,
                    0
                ],
                [
                    23,
                    9,
                    0
                ],
                [
                    23,
                    10,
                    1
                ],
                [
                    23,
                    11,
                    3
                ],
                [
                    23,
                    12,
                    1
                ],
                [
                    23,
                    13,
                    5
                ],
                [
                    23,
                    14,
                    349
                ],
                [
                    23,
                    15,
                    2
                ],
                [
                    23,
                    16,
                    0
                ],
                [
                    23,
                    17,
                    5
                ],
                [
                    23,
                    18,
                    3
                ],
                [
                    23,
                    19,
                    6
                ],
                [
                    24,
                    0,
                    0
                ],
                [
                    24,
                    1,
                    1
                ],
                [
                    24,
                    2,
                    1
                ],
                [
                    24,
                    3,
                    5
                ],
                [
                    24,
                    4,
                    1
                ],
                [
                    24,
                    5,
                    203
                ],
                [
                    24,
                    6,
                    1
                ],
                [
                    24,
                    7,
                    1
                ],
                [
                    24,
                    8,
                    0
                ],
                [
                    24,
                    9,
                    0
                ],
                [
                    24,
                    10,
                    1
                ],
                [
                    24,
                    11,
                    2
                ],
                [
                    24,
                    12,
                    28
                ],
                [
                    24,
                    13,
                    0
                ],
                [
                    24,
                    14,
                    631
                ],
                [
                    24,
                    15,
                    1
                ],
                [
                    24,
                    16,
                    0
                ],
                [
                    24,
                    17,
                    7
                ],
                [
                    24,
                    18,
                    0
                ],
                [
                    24,
                    19,
                    3
                ]
            ],
            "label": {
                "show": true,
                "position": "inside",
                "margin": 8
            }
        }
    ],
    "legend": [
        {
            "data": [
                ""
            ],
            "selected": {
                "": true
            },
            "show": true,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "xAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            },
            "data": [
                "01-28",
                "01-29",
                "01-30",
                "01-31",
                "02-01",
                "02-02",
                "02-03",
                "02-04",
                "02-05",
                "02-06",
                "02-07",
                "02-08",
                "02-09",
                "02-10",
                "02-11",
                "02-12",
                "02-13",
                "02-14",
                "02-15",
                "02-16",
                "02-17",
                "02-18",
                "02-19",
                "02-20",
                "02-21"
            ]
        }
    ],
    "yAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": false,
                "lineStyle": {
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            },
            "data": [
                "上海",
                "云南",
                "北京",
                "四川",
                "安徽",
                "山东",
                "广东",
                "广西",
                "江苏",
                "江西",
                "河北",
                "河南",
                "浙江",
                "海南",
                "湖北",
                "湖南",
                "福建",
                "重庆",
                "陕西",
                "黑龙江"
            ]
        }
    ],
    "title": [
        {
            "text": "各省份新增确诊数",
            "padding": 5,
            "itemGap": 10
        }
    ],
    "visualMap": {
        "show": true,
        "type": "continuous",
        "min": 0,
        "max": 100,
        "inRange": {
            "color": [
                "#50a3ba",
                "#eac763",
                "#d94e5d"
            ]
        },
        "calculable": true,
        "inverse": false,
        "splitNumber": 5,
        "orient": "horizontal",
        "top": "0%",
        "right": "15%",
        "showLabel": true,
        "itemWidth": 20,
        "itemHeight": 140,
        "borderWidth": 0
    }
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<ul>
<li>2020-02-09：近两天大部分省份新增确诊病例呈下降态势。但受返工影响，这个态势是否会延续仍待观察。</li>
<li>2020-02-21：全国除湖北地区的新增病例有所增加，20日（45人）、21日（258人），这是因为山东、浙江两地的监狱确诊了200多人。</li>
</ul>
<h3 id="疫情严重地区情况"><a href="#疫情严重地区情况" class="headerlink" title="疫情严重地区情况"></a>疫情严重地区情况</h3><p>下面看一下几个疫情比较严重的省份的具体疫情情况：</p>
<h4 id="湖北省"><a href="#湖北省" class="headerlink" title="湖北省"></a>湖北省</h4><p>疫情地图：</p>
<div id="echarts6370" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts6370'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "map",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8,
                "fontSize": 12
            },
            "mapType": "湖北",
            "data": [
                {
                    "name": "仙桃市",
                    "value": 568
                },
                {
                    "name": "十堰市",
                    "value": 654
                },
                {
                    "name": "咸宁市",
                    "value": 868
                },
                {
                    "name": "天门市",
                    "value": 500
                },
                {
                    "name": "孝感市",
                    "value": 3346
                },
                {
                    "name": "宜昌市",
                    "value": 907
                },
                {
                    "name": "待明确地区",
                    "value": 312
                },
                {
                    "name": "恩施州市",
                    "value": 250
                },
                {
                    "name": "未知地区",
                    "value": 0
                },
                {
                    "name": "武汉市",
                    "value": 45346
                },
                {
                    "name": "潜江市",
                    "value": 188
                },
                {
                    "name": "神农架林区",
                    "value": 10
                },
                {
                    "name": "荆州市",
                    "value": 1541
                },
                {
                    "name": "荆门市",
                    "value": 927
                },
                {
                    "name": "襄阳市",
                    "value": 1170
                },
                {
                    "name": "鄂州市",
                    "value": 1343
                },
                {
                    "name": "随州市",
                    "value": 1287
                },
                {
                    "name": "黄冈市",
                    "value": 2856
                },
                {
                    "name": "黄石市",
                    "value": 988
                }
            ],
            "roam": true,
            "zoom": 1,
            "showLegendSymbol": true,
            "emphasis": {},
            "rippleEffect": {
                "show": true,
                "brushType": "stroke",
                "scale": 2.5,
                "period": 4
            }
        }
    ],
    "legend": [
        {
            "data": [
                ""
            ],
            "selected": {
                "": true
            },
            "show": false,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "title": [
        {
            "text": "湖北疫情分布图",
            "padding": 5,
            "itemGap": 10
        }
    ],
    "visualMap": {
        "show": true,
        "type": "piecewise",
        "min": 0,
        "max": 100,
        "inRange": {
            "color": [
                "#50a3ba",
                "#eac763",
                "#d94e5d"
            ]
        },
        "calculable": true,
        "inverse": false,
        "splitNumber": 5,
        "orient": "vertical",
        "showLabel": true,
        "itemWidth": 20,
        "itemHeight": 14,
        "borderWidth": 0,
        "pieces": [
            {
                "min": 10000,
                "color": "#4F060d"
            },
            {
                "max": 9999,
                "min": 1000,
                "color": "#811C24"
            },
            {
                "max": 999,
                "min": 500,
                "color": "#CA2B2F"
            },
            {
                "max": 499,
                "min": 100,
                "color": "#CA5446"
            },
            {
                "max": 99,
                "min": 10,
                "color": "#F09082"
            },
            {
                "max": 9,
                "min": 1,
                "color": "#FCEBCF"
            },
            {
                "max": 0,
                "color": "#FFFEE7"
            }
        ]
    }
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<p>饼图：</p>
<div id="echarts1005" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts1005'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "pie",
            "clockwise": true,
            "data": [
                {
                    "name": "仙桃",
                    "value": 568
                },
                {
                    "name": "十堰",
                    "value": 654
                },
                {
                    "name": "咸宁",
                    "value": 868
                },
                {
                    "name": "天门",
                    "value": 500
                },
                {
                    "name": "孝感",
                    "value": 3346
                },
                {
                    "name": "宜昌",
                    "value": 907
                },
                {
                    "name": "武汉",
                    "value": 45346
                },
                {
                    "name": "潜江",
                    "value": 188
                },
                {
                    "name": "神农架林区",
                    "value": 10
                },
                {
                    "name": "荆州",
                    "value": 1541
                },
                {
                    "name": "荆门",
                    "value": 927
                },
                {
                    "name": "襄阳",
                    "value": 1170
                },
                {
                    "name": "鄂州",
                    "value": 1343
                },
                {
                    "name": "随州",
                    "value": 1287
                },
                {
                    "name": "黄冈",
                    "value": 2856
                },
                {
                    "name": "黄石",
                    "value": 988
                }
            ],
            "radius": [
                "30%",
                "75%"
            ],
            "center": [
                "50%",
                "50%"
            ],
            "roseType": "radius",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            }
        }
    ],
    "legend": [
        {
            "data": [
                "仙桃",
                "十堰",
                "咸宁",
                "天门",
                "孝感",
                "宜昌",
                "武汉",
                "潜江",
                "神农架林区",
                "荆州",
                "荆门",
                "襄阳",
                "鄂州",
                "随州",
                "黄冈",
                "黄石"
            ],
            "selected": {},
            "show": true,
            "left": "80%",
            "top": "center",
            "orient": "vertical",
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "title": [
        {
            "text": "湖北疫情分布图",
            "padding": 5,
            "itemGap": 10
        }
    ]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>


<h4 id="广东省"><a href="#广东省" class="headerlink" title="广东省"></a>广东省</h4><p>疫情地图：</p>
<div id="echarts2047" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts2047'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "map",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8,
                "fontSize": 12
            },
            "mapType": "广东",
            "data": [
                {
                    "name": "东莞市",
                    "value": 93
                },
                {
                    "name": "中山市",
                    "value": 66
                },
                {
                    "name": "佛山市",
                    "value": 84
                },
                {
                    "name": "外地来穗人员市",
                    "value": 5
                },
                {
                    "name": "外地来粤人员市",
                    "value": 5
                },
                {
                    "name": "广州市",
                    "value": 339
                },
                {
                    "name": "待明确地区",
                    "value": 0
                },
                {
                    "name": "惠州市",
                    "value": 62
                },
                {
                    "name": "揭阳市",
                    "value": 8
                },
                {
                    "name": "未明确地区",
                    "value": 0
                },
                {
                    "name": "未知市",
                    "value": 0
                },
                {
                    "name": "未知地区",
                    "value": 0
                },
                {
                    "name": "梅州市",
                    "value": 16
                },
                {
                    "name": "汕头市",
                    "value": 25
                },
                {
                    "name": "汕尾市",
                    "value": 5
                },
                {
                    "name": "江门市",
                    "value": 23
                },
                {
                    "name": "河源市",
                    "value": 4
                },
                {
                    "name": "河源市市",
                    "value": 1
                },
                {
                    "name": "深圳市",
                    "value": 416
                },
                {
                    "name": "清远市",
                    "value": 12
                },
                {
                    "name": "湛江市",
                    "value": 22
                },
                {
                    "name": "潮州市",
                    "value": 5
                },
                {
                    "name": "珠海市",
                    "value": 98
                },
                {
                    "name": "肇庆市",
                    "value": 18
                },
                {
                    "name": "茂名市",
                    "value": 14
                },
                {
                    "name": "阳江市",
                    "value": 13
                },
                {
                    "name": "韶关市",
                    "value": 10
                }
            ],
            "roam": true,
            "zoom": 1,
            "showLegendSymbol": true,
            "emphasis": {},
            "rippleEffect": {
                "show": true,
                "brushType": "stroke",
                "scale": 2.5,
                "period": 4
            }
        }
    ],
    "legend": [
        {
            "data": [
                ""
            ],
            "selected": {
                "": true
            },
            "show": false,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "title": [
        {
            "text": "广东疫情分布图",
            "padding": 5,
            "itemGap": 10
        }
    ],
    "visualMap": {
        "show": true,
        "type": "piecewise",
        "min": 0,
        "max": 100,
        "inRange": {
            "color": [
                "#50a3ba",
                "#eac763",
                "#d94e5d"
            ]
        },
        "calculable": true,
        "inverse": false,
        "splitNumber": 5,
        "orient": "vertical",
        "showLabel": true,
        "itemWidth": 20,
        "itemHeight": 14,
        "borderWidth": 0,
        "pieces": [
            {
                "min": 10000,
                "color": "#4F060d"
            },
            {
                "max": 9999,
                "min": 1000,
                "color": "#811C24"
            },
            {
                "max": 999,
                "min": 500,
                "color": "#CA2B2F"
            },
            {
                "max": 499,
                "min": 100,
                "color": "#CA5446"
            },
            {
                "max": 99,
                "min": 10,
                "color": "#F09082"
            },
            {
                "max": 9,
                "min": 1,
                "color": "#FCEBCF"
            },
            {
                "max": 0,
                "color": "#FFFEE7"
            }
        ]
    }
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<p>饼图：</p>
<div id="echarts8478" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts8478'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "pie",
            "clockwise": true,
            "data": [
                {
                    "name": "东莞",
                    "value": 93
                },
                {
                    "name": "中山",
                    "value": 66
                },
                {
                    "name": "佛山",
                    "value": 84
                },
                {
                    "name": "广州",
                    "value": 339
                },
                {
                    "name": "惠州",
                    "value": 62
                },
                {
                    "name": "揭阳",
                    "value": 8
                },
                {
                    "name": "梅州",
                    "value": 16
                },
                {
                    "name": "汕头",
                    "value": 25
                },
                {
                    "name": "汕尾",
                    "value": 5
                },
                {
                    "name": "江门",
                    "value": 23
                },
                {
                    "name": "河源",
                    "value": 4
                },
                {
                    "name": "深圳",
                    "value": 416
                },
                {
                    "name": "清远",
                    "value": 12
                },
                {
                    "name": "湛江",
                    "value": 22
                },
                {
                    "name": "潮州",
                    "value": 5
                },
                {
                    "name": "珠海",
                    "value": 98
                },
                {
                    "name": "肇庆",
                    "value": 18
                },
                {
                    "name": "茂名",
                    "value": 14
                },
                {
                    "name": "阳江",
                    "value": 13
                },
                {
                    "name": "韶关",
                    "value": 10
                }
            ],
            "radius": [
                "30%",
                "75%"
            ],
            "center": [
                "50%",
                "50%"
            ],
            "roseType": "radius",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            }
        }
    ],
    "legend": [
        {
            "data": [
                "东莞",
                "中山",
                "佛山",
                "广州",
                "惠州",
                "揭阳",
                "梅州",
                "汕头",
                "汕尾",
                "江门",
                "河源",
                "深圳",
                "清远",
                "湛江",
                "潮州",
                "珠海",
                "肇庆",
                "茂名",
                "阳江",
                "韶关"
            ],
            "selected": {},
            "show": true,
            "left": "80%",
            "top": "center",
            "orient": "vertical",
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "title": [
        {
            "text": "广东疫情分布图",
            "padding": 5,
            "itemGap": 10
        }
    ]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<h4 id="浙江省"><a href="#浙江省" class="headerlink" title="浙江省"></a>浙江省</h4><p>疫情地图：</p>
<div id="echarts4529" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts4529'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "map",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8,
                "fontSize": 12
            },
            "mapType": "浙江",
            "data": [
                {
                    "name": "丽水市",
                    "value": 17
                },
                {
                    "name": "台州市",
                    "value": 146
                },
                {
                    "name": "嘉兴市",
                    "value": 45
                },
                {
                    "name": "宁波市",
                    "value": 157
                },
                {
                    "name": "待明确地区",
                    "value": 0
                },
                {
                    "name": "杭州市",
                    "value": 169
                },
                {
                    "name": "温州市",
                    "value": 504
                },
                {
                    "name": "湖州市",
                    "value": 10
                },
                {
                    "name": "省十里丰监狱市",
                    "value": 34
                },
                {
                    "name": "绍兴市",
                    "value": 42
                },
                {
                    "name": "舟山市",
                    "value": 10
                },
                {
                    "name": "衢州市",
                    "value": 21
                },
                {
                    "name": "金华市",
                    "value": 55
                }
            ],
            "roam": true,
            "zoom": 1,
            "showLegendSymbol": true,
            "emphasis": {},
            "rippleEffect": {
                "show": true,
                "brushType": "stroke",
                "scale": 2.5,
                "period": 4
            }
        }
    ],
    "legend": [
        {
            "data": [
                ""
            ],
            "selected": {
                "": true
            },
            "show": false,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "title": [
        {
            "text": "浙江疫情分布图",
            "padding": 5,
            "itemGap": 10
        }
    ],
    "visualMap": {
        "show": true,
        "type": "piecewise",
        "min": 0,
        "max": 100,
        "inRange": {
            "color": [
                "#50a3ba",
                "#eac763",
                "#d94e5d"
            ]
        },
        "calculable": true,
        "inverse": false,
        "splitNumber": 5,
        "orient": "vertical",
        "showLabel": true,
        "itemWidth": 20,
        "itemHeight": 14,
        "borderWidth": 0,
        "pieces": [
            {
                "min": 10000,
                "color": "#4F060d"
            },
            {
                "max": 9999,
                "min": 1000,
                "color": "#811C24"
            },
            {
                "max": 999,
                "min": 500,
                "color": "#CA2B2F"
            },
            {
                "max": 499,
                "min": 100,
                "color": "#CA5446"
            },
            {
                "max": 99,
                "min": 10,
                "color": "#F09082"
            },
            {
                "max": 9,
                "min": 1,
                "color": "#FCEBCF"
            },
            {
                "max": 0,
                "color": "#FFFEE7"
            }
        ]
    }
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<p>饼图：</p>
<div id="echarts4096" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts4096'));

        // 指定图表的配置项和数据
        var option = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "pie",
            "clockwise": true,
            "data": [
                {
                    "name": "丽水",
                    "value": 17
                },
                {
                    "name": "台州",
                    "value": 146
                },
                {
                    "name": "嘉兴",
                    "value": 45
                },
                {
                    "name": "宁波",
                    "value": 157
                },
                {
                    "name": "杭州",
                    "value": 169
                },
                {
                    "name": "温州",
                    "value": 504
                },
                {
                    "name": "湖州",
                    "value": 10
                },
                {
                    "name": "绍兴",
                    "value": 42
                },
                {
                    "name": "舟山",
                    "value": 10
                },
                {
                    "name": "衢州",
                    "value": 21
                },
                {
                    "name": "金华",
                    "value": 55
                }
            ],
            "radius": [
                "30%",
                "75%"
            ],
            "center": [
                "50%",
                "50%"
            ],
            "roseType": "radius",
            "label": {
                "show": true,
                "position": "top",
                "margin": 8
            }
        }
    ],
    "legend": [
        {
            "data": [
                "丽水",
                "台州",
                "嘉兴",
                "宁波",
                "杭州",
                "温州",
                "湖州",
                "绍兴",
                "舟山",
                "衢州",
                "金华"
            ],
            "selected": {},
            "show": true,
            "left": "80%",
            "top": "center",
            "orient": "vertical",
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "title": [
        {
            "text": "浙江疫情分布图",
            "padding": 5,
            "itemGap": 10
        }
    ]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>


<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><ul>
<li><strong>丁香园</strong>提供的<strong>实时数据</strong></li>
<li><strong>BlankerL</strong>提供的<strong>爬虫</strong>与<strong>数据仓库</strong></li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
        <category>社会事件</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>新冠肺炎</tag>
        <tag>2020</tag>
      </tags>
  </entry>
  <entry>
    <title>【R语言】readr笔记</title>
    <url>/archives/a61fec0e.html</url>
    <content><![CDATA[<p>readr包提供了一些在R中读写文本数据的函数。</p>
<a id="more"></a>

<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><ul>
<li><code>read_csv()</code>读取逗号分隔文件</li>
<li><code>read_csv2()</code>读取分号分隔文件</li>
<li><code>read_tsv()</code>读取制表符分隔文件</li>
<li><code>read_delim()</code>读取使用任意分隔符的文件</li>
<li><code>read_fwf()</code>读取固定宽度的文件</li>
</ul>
<p>由于这些函数具有类似的语法，这里以<code>read_csv()</code>为例做介绍。</p>
<h3 id="读取外部文件"><a href="#读取外部文件" class="headerlink" title="读取外部文件"></a>读取外部文件</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">heights &lt;- read_csv(<span class="string">"data/heights.csv"</span>)</span><br></pre></td></tr></table></figure>

<p>当运行<code>read_csv()</code>时，它会打印一份数据列说明，给出每个列的名称和类型。</p>
<h3 id="读取行内文件"><a href="#读取行内文件" class="headerlink" title="读取行内文件"></a>读取行内文件</h3><p><code>read_csv()</code>函数都使用数据的第一行作为列名称。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">read_csv(<span class="string">"a,b,c</span></span><br><span class="line"><span class="string">    1,2,3</span></span><br><span class="line"><span class="string">    4,5,6"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># A tibble: 2 x 3</span><br><span class="line">      a     b     c</span><br><span class="line">  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">1     1     2     3</span><br><span class="line">2     4     5     6</span><br></pre></td></tr></table></figure>

<h3 id="开头元数据处理"><a href="#开头元数据处理" class="headerlink" title="开头元数据处理"></a>开头元数据处理</h3><p>有时文件开头会有好几行元数据。你可以使用<code>skip = n</code>来跳过前n行；或者使用<code>comment = &quot;#&quot;</code>来丢弃所有以<code>#</code>开头的行：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">read_csv(<span class="string">"The first line of metadata</span></span><br><span class="line"><span class="string">    The second line of metadata</span></span><br><span class="line"><span class="string">    x,y,z</span></span><br><span class="line"><span class="string">    1,2,3"</span>, skip = <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># A tibble: 1 x 3</span><br><span class="line">      x     y     z</span><br><span class="line">  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">1     1     2     3</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">read_csv(<span class="string">"# A comment I want to skip</span></span><br><span class="line"><span class="string">    x,y,z</span></span><br><span class="line"><span class="string">    1,2,3"</span>, comment = <span class="string">"#"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># A tibble: 1 x 3</span><br><span class="line">      x     y     z</span><br><span class="line">  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">1     1     2     3</span><br></pre></td></tr></table></figure>

<h3 id="数据没有列名称"><a href="#数据没有列名称" class="headerlink" title="数据没有列名称"></a>数据没有列名称</h3><p>我们可以使用<code>col_names = FALSE</code>来使得<code>read_csv()</code>不要将第一行作为列标题，而是将各列依次标注为X1至Xn：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">read_csv(<span class="string">"1,2,3\n4,5,6"</span>, col_names = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># A tibble: 2 x 3</span><br><span class="line">     X1    X2    X3</span><br><span class="line">  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">1     1     2     3</span><br><span class="line">2     4     5     6</span><br></pre></td></tr></table></figure>

<p>我们也可以向<code>col_names</code>传递一个字符向量，以用作列名称：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">read_csv(<span class="string">"1,2,3\n4,5,6"</span>, col_names = c(<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># A tibble: 2 x 3</span><br><span class="line">      x     y     z</span><br><span class="line">  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">1     1     2     3</span><br><span class="line">2     4     5     6</span><br></pre></td></tr></table></figure>

<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><ul>
<li><code>write_csv()</code>：写入csv文件</li>
<li><code>write_tsv()</code>：写入tsv文件</li>
</ul>
<p>这两个函数输出的文件能够顺利读取的概率更高，因为：</p>
<ul>
<li>它们总是使用UTF-8对字符串进行编码；</li>
<li>它们使用ISO 8601格式来保存日期和日期时间数据，以便这些数据不论在何种环境下都更容易解析。</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">write_csv(challenge, <span class="string">"challenge-2.csv"</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>《R数据科学》学习笔记</p>
</blockquote>
]]></content>
      <categories>
        <category>R</category>
        <category>数据处理</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>tidyverse</tag>
      </tags>
  </entry>
  <entry>
    <title>【R语言】tibble笔记</title>
    <url>/archives/80be9be7.html</url>
    <content><![CDATA[<p>tibble是一种简单数据框，它对传统数据框的功能进行了一些修改，以便更易于使用。tibble包是tidyverse中的核心R包。</p>
<a id="more"></a>

<h2 id="创建tibble"><a href="#创建tibble" class="headerlink" title="创建tibble"></a>创建tibble</h2><h3 id="标准数据框转换为tibble"><a href="#标准数据框转换为tibble" class="headerlink" title="标准数据框转换为tibble"></a>标准数据框转换为tibble</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(tidyverse)</span><br><span class="line"></span><br><span class="line">as_tibble(iris)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># A tibble: 150 x 5</span><br><span class="line">   Sepal.Length Sepal.Width Petal.Length Petal.Width Species</span><br><span class="line">          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  </span><br><span class="line"> 1          5.1         3.5          1.4         0.2 setosa </span><br><span class="line"> 2          4.9         3            1.4         0.2 setosa </span><br><span class="line"> 3          4.7         3.2          1.3         0.2 setosa </span><br><span class="line"> 4          4.6         3.1          1.5         0.2 setosa </span><br><span class="line"> 5          5           3.6          1.4         0.2 setosa </span><br><span class="line"> 6          5.4         3.9          1.7         0.4 setosa </span><br><span class="line"> 7          4.6         3.4          1.4         0.3 setosa </span><br><span class="line"> 8          5           3.4          1.5         0.2 setosa </span><br><span class="line"> 9          4.4         2.9          1.4         0.2 setosa </span><br><span class="line">10          4.9         3.1          1.5         0.1 setosa </span><br><span class="line"># ... with 140 more rows</span><br></pre></td></tr></table></figure>

<h3 id="创建新tibble"><a href="#创建新tibble" class="headerlink" title="创建新tibble"></a>创建新tibble</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">tibble(</span><br><span class="line">    x = <span class="number">1</span>:<span class="number">5</span>,</span><br><span class="line">    y = <span class="number">1</span>,</span><br><span class="line">    z = x ^ <span class="number">2</span> + y</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># A tibble: 5 x 3</span><br><span class="line">      x     y     z</span><br><span class="line">  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">1     1     1     2</span><br><span class="line">2     2     1     5</span><br><span class="line">3     3     1    10</span><br><span class="line">4     4     1    17</span><br><span class="line">5     5     1    26</span><br></pre></td></tr></table></figure>

<h3 id="tribble-函数"><a href="#tribble-函数" class="headerlink" title="tribble()函数"></a>tribble()函数</h3><p>tribble是transposed tibble（转置tibble）的缩写。<code>tribble()</code>是定制化的，可以对数据按行进行编码：<strong>列标题由公式（以<code>~</code>开头）定义</strong>，<strong>数据条目以逗号分隔</strong>，这样就可以用易读的方式对少量数据进行布局。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">tribble(</span><br><span class="line">    ~x, ~y, ~z,</span><br><span class="line">    <span class="comment">#--/--/----</span></span><br><span class="line">    <span class="string">"a"</span>, <span class="number">2</span>, <span class="number">3.6</span>,</span><br><span class="line">    <span class="string">"b"</span>, <span class="number">1</span>, <span class="number">8.5</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># A tibble: 2 x 3</span><br><span class="line">  x         y     z</span><br><span class="line">  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">1 a         2   3.6</span><br><span class="line">2 b         1   8.5</span><br></pre></td></tr></table></figure>

<h2 id="tibble与data-frame对比"><a href="#tibble与data-frame对比" class="headerlink" title="tibble与data.frame对比"></a>tibble与data.frame对比</h2><p>tibble和传统data.frame的使用方法主要有两处不同：打印和取子集。</p>
<h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>tibble 的打印方法进行了优化，只显示前10 行结果，并且列也是适合屏幕的。除了打印列名，<strong>tibble还会打印出列的类型</strong>。</p>
<p>我们可以使用<code>print()</code>函数来控制打印的行数（n）和显示的宽度（width），<code>width = Inf</code>可以显示所有列：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">nycflights13::flights %&gt;%</span><br><span class="line">    print(n = <span class="number">10</span>, width = <span class="literal">Inf</span>)</span><br></pre></td></tr></table></figure>

<h3 id="取子集"><a href="#取子集" class="headerlink" title="取子集"></a>取子集</h3><p><code>[[</code>可以按名称或位置提取变量：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df[[<span class="string">"x"</span>]]</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df[[<span class="number">1</span>]]</span><br></pre></td></tr></table></figure>

<p><code>$</code>只能按名称提取变量，但可以减少一些输入：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df$x</span><br></pre></td></tr></table></figure>

<h2 id="tibble转换回传统数据框"><a href="#tibble转换回传统数据框" class="headerlink" title="tibble转换回传统数据框"></a>tibble转换回传统数据框</h2><p>我们可以使用<code>as.data.frame()</code>函数将tibble转换回<code>data.frame</code>。</p>
<blockquote>
<p>《R数据科学》学习笔记</p>
</blockquote>
]]></content>
      <categories>
        <category>R</category>
        <category>数据处理</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>tidyverse</tag>
      </tags>
  </entry>
  <entry>
    <title>【R语言】dplyr笔记</title>
    <url>/archives/372a6b87.html</url>
    <content><![CDATA[<p>dplyr包是tidyverse中的核心R包。</p>
<a id="more"></a>

<h2 id="本文用到的数据集"><a href="#本文用到的数据集" class="headerlink" title="本文用到的数据集"></a>本文用到的数据集</h2><p>本文用到的是<code>nycflights13::flights</code>这个数据集，这个数据框包含了2013 年从纽约市出发的所有336776次航班的信息。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">flights</span><br><span class="line"><span class="comment">#&gt; # A tibble: 336,776 × 19</span></span><br><span class="line"><span class="comment">#&gt; year month day dep_time sched_dep_time dep_delay</span></span><br><span class="line"><span class="comment">#&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;</span></span><br><span class="line"><span class="comment">#&gt; 1 2013 1 1 517 515 2</span></span><br><span class="line"><span class="comment">#&gt; 2 2013 1 1 533 529 4</span></span><br><span class="line"><span class="comment">#&gt; 3 2013 1 1 542 540 2</span></span><br><span class="line"><span class="comment">#&gt; 4 2013 1 1 544 545 -1</span></span><br><span class="line"><span class="comment">#&gt; 5 2013 1 1 554 600 -6</span></span><br><span class="line"><span class="comment">#&gt; 6 2013 1 1 554 558 -4</span></span><br><span class="line"><span class="comment">#&gt; # ... with 336,776 more rows, and 13 more variables:</span></span><br><span class="line"><span class="comment">#&gt; # arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;,</span></span><br><span class="line"><span class="comment">#&gt; # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;,</span></span><br><span class="line"><span class="comment">#&gt; # dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,</span></span><br><span class="line"><span class="comment">#&gt; # minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="dplyr基础"><a href="#dplyr基础" class="headerlink" title="dplyr基础"></a>dplyr基础</h2><p>下面主要介绍5分dplyr核心函数：</p>
<ul>
<li>按值筛选观测（filter()）。</li>
<li>对行进行重新排序（arrange()）。</li>
<li>按名称选取变量（select()）。</li>
<li>使用现有变量的函数创建新变量（mutate()）。</li>
<li>将多个值总结为一个摘要统计量（summarize()）。</li>
</ul>
<p>以上5个函数的工作方式都是相同的。</p>
<ul>
<li>第一个参数是一个数据框。</li>
<li>随后的参数使用变量名称（不带引号）描述了在数据框上进行的操作。</li>
<li>输出结果是一个新数据框。</li>
</ul>
<h3 id="fliter-函数"><a href="#fliter-函数" class="headerlink" title="fliter()函数"></a>fliter()函数</h3><p><code>filter()</code>函数可以基于观测的值筛选出一个观测子集。第一个参数是数据框名称，第二个参数以及随后的参数是用来筛选数据框的表达式。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">filter(flights, month == <span class="number">1</span>, day == <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="arrange-函数"><a href="#arrange-函数" class="headerlink" title="arrange()函数"></a>arrange()函数</h3><p><code>arrange()</code>函数用来改变行的顺序。它接受一个数据框和一组作为排序依据的列名（或者更复杂的表达式）作为参数。如果列名不只一个，那么就使用后面的列在前面排序的基础上继续排序。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arrange(flights, year, month, day)</span><br></pre></td></tr></table></figure>

<p>我们可以采用<code>desc()</code>按列进行降序排序</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arrange(flights, desc(arr_delay))</span><br></pre></td></tr></table></figure>

<h3 id="select-函数"><a href="#select-函数" class="headerlink" title="select()函数"></a>select()函数</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><code>select()</code>函数可以用来快速生成一个有用的变量子集。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按名称选择列</span></span><br><span class="line">select(flights, year, month, day)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择“year”和“day”之间的所有列（包括“year”和“day”）</span></span><br><span class="line">select(flights, year:day)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择不在“year”和“day”之间的所有列（不包括“year”和“day”）</span></span><br><span class="line">select(flights, -(year:day))</span><br></pre></td></tr></table></figure>

<h4 id="select-函数中的辅助函数"><a href="#select-函数中的辅助函数" class="headerlink" title="select()函数中的辅助函数"></a>select()函数中的辅助函数</h4><p><code>select()</code>函数中的辅助函数：</p>
<ul>
<li><code>starts_with(&quot;abc&quot;)</code>：匹配以“abc”开头的名称。</li>
<li><code>ends_with(&quot;xyz&quot;)</code>：匹配以“xyz”结尾的名称。</li>
<li><code>contains(&quot;ijk&quot;)</code>：匹配包含“ijk”的名称。</li>
<li><code>matches(&quot;(.)\\1&quot;)</code>：选择匹配正则表达式的那些变量。这个正则表达式会匹配名称中有重复字符的变量。</li>
<li><code>num_range(&quot;x&quot;, 1:3)</code>：匹配x1、x2和x3。</li>
</ul>
<p>我们可以通过<code>everything()</code>辅助函数将几个变量移到数据框开头：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">select(flights, time_hour, air_time, everything())</span><br></pre></td></tr></table></figure>

<h4 id="重命名变量"><a href="#重命名变量" class="headerlink" title="重命名变量"></a>重命名变量</h4><p><code>select()</code>可以重命名变量，但我们很少这样使用它，<strong>因为这样会丢掉所有未明确提及的变量</strong>。我们应该使用<code>select()</code>函数的变体<code>rename()</code>函数来重命名变量，以保留所有未明确提及的变量：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rename(flights, tail_num = tailnum)</span><br></pre></td></tr></table></figure>

<h3 id="mutate-函数"><a href="#mutate-函数" class="headerlink" title="mutate()函数"></a>mutate()函数</h3><p>我们可以通过<code>mutate()</code>函数根据需要添加新列，新列是现有列的函数。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mutate(flights, </span><br><span class="line">    gain = arr_delay - dep_delay, </span><br><span class="line">    speed = distance / air_time * <span class="number">60</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>如果只想保留新变量，可以使用<code>transmute()</code>函数：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">transmute(flights,</span><br><span class="line">    gain = arr_delay - dep_delay,</span><br><span class="line">    hours = air_time / <span class="number">60</span>,</span><br><span class="line">    gain_per_hour = gain / hours</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>注意：一旦创建后，新列就可以立即使用，比如后面的<code>gain_per_hour</code>可以直接用到刚刚创建的<code>gain</code>以及<code>hours</code>。</p>
<h4 id="常用的创建函数"><a href="#常用的创建函数" class="headerlink" title="常用的创建函数"></a>常用的创建函数</h4><p>创建函数必须是向量化的：它必须接受一个向量作为输入，并返回一个向量作为输出，而且输入向量与输出向量具有同样数目的分量。</p>
<p>下面介绍下常见的创建函数：</p>
<ul>
<li>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>^</code></li>
<li>模运算符：<code>%/%</code> 和 <code>%%</code></li>
<li>对数函数：<code>log()</code>、<code>log2()</code> 和 <code>log10()</code></li>
<li>偏移函数：<code>lead()</code> 和 <code>lag()</code>函数可以返回一个序列的领先值和滞后值</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">(x &lt;- <span class="number">1</span>:<span class="number">10</span>)</span><br><span class="line"><span class="comment">#&gt; [1] 1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line">lag(x)</span><br><span class="line"><span class="comment">#&gt; [1] NA 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">lead(x)</span><br><span class="line"><span class="comment">#&gt; [1] 2 3 4 5 6 7 8 9 10 NA</span></span><br></pre></td></tr></table></figure>

<ul>
<li>累加和滚动聚合：累加和<code>cumsum()</code>、累加积<code>cumprod()</code>、累加最小值<code>commin()</code>和累加最大值<code>cummax()</code>、累加均值<code>cummean()</code></li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x</span><br><span class="line"><span class="comment">#&gt; [1] 1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line">cumsum(x)</span><br><span class="line"><span class="comment">#&gt; [1] 1 3 6 10 15 21 28 36 45 55</span></span><br><span class="line">cummean(x)</span><br><span class="line"><span class="comment">#&gt; [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑比较：<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code> 和 <code>!=</code></li>
<li>排秩：<ul>
<li><code>min_rank()</code></li>
<li><code>row_number()</code></li>
<li><code>dense_rank()</code></li>
<li><code>percent_rank()</code></li>
<li><code>cume_dist()</code></li>
<li><code>ntile()</code></li>
</ul>
</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">y &lt;- c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="literal">NA</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">min_rank(y)</span><br><span class="line"><span class="comment">#&gt; [1] 1 2 2 NA 4 5</span></span><br><span class="line">min_rank(desc(y))</span><br><span class="line"><span class="comment">#&gt; [1] 5 3 3 NA 2 1</span></span><br><span class="line">row_number(y)</span><br><span class="line"><span class="comment">#&gt; [1] 1 2 3 NA 4 5</span></span><br><span class="line">dense_rank(y)</span><br><span class="line"><span class="comment">#&gt; [1] 1 2 2 NA 3 4</span></span><br><span class="line">percent_rank(y)</span><br><span class="line"><span class="comment">#&gt; [1] 0.00 0.25 0.25 NA 0.75 1.00</span></span><br><span class="line">cume_dist(y)</span><br><span class="line"><span class="comment">#&gt; [1] 0.2 0.6 0.6 NA 0.8 1.0</span></span><br></pre></td></tr></table></figure>

<h3 id="summarize-函数"><a href="#summarize-函数" class="headerlink" title="summarize()函数"></a>summarize()函数</h3><p><code>summarize()</code>函数可以将数据框折叠成一行。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">summarize(flights, delay = mean(dep_delay, na.rm = <span class="literal">TRUE</span>))</span><br><span class="line"><span class="comment">#&gt; # A tibble: 1 × 1</span></span><br><span class="line"><span class="comment">#&gt; delay</span></span><br><span class="line"><span class="comment">#&gt; &lt;dbl&gt;</span></span><br><span class="line"><span class="comment">#&gt; 1 12.6</span></span><br></pre></td></tr></table></figure>

<p>这个函数一般和<code>group_by()</code>一起使用。</p>
<p>每日平均延误时间的计算：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">by_day &lt;- group_by(flights, year, month, day)</span><br><span class="line">summarize(by_day, delay = mean(dep_delay, na.rm = <span class="literal">TRUE</span>))</span><br></pre></td></tr></table></figure>

<h4 id="管道组合多种操作"><a href="#管道组合多种操作" class="headerlink" title="管道组合多种操作"></a>管道组合多种操作</h4><p>如果不使用管道，我们不得不对每个中间数据框命名。管道可以显著提高代码的可读性。</p>
<p>下面是用管道来实现每日平均延误时间的计算：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">flights %&gt;%</span><br><span class="line">    group_by(year, month, day) %&gt;%</span><br><span class="line">        summarize(mean = mean(dep_delay), na.rm = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>

<h4 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><p>聚合函数中也是遵循缺失值的一般规则：<strong>如果输入中有缺失值，那么输出也会是缺失值</strong>。因此，我们可以通过聚合函数的<code>na.rm</code>参数，在计算前除去缺失值。</p>
<h4 id="常见的摘要函数"><a href="#常见的摘要函数" class="headerlink" title="常见的摘要函数"></a>常见的摘要函数</h4><ul>
<li>位置度量：平均值<code>mean(x)</code>、中位数<code>median(x)</code></li>
<li>分散程度度量：均方误差<code>sd(x)</code>、四分位距<code>IQR(x)</code>、绝对中位数<code>mad(x)</code></li>
<li>秩的度量：<ul>
<li>最小值<code>min(x)</code></li>
<li>最大值<code>max(x)</code></li>
<li>分位数<code>quantile(x, 0.25)</code>：分位数是中位数的扩展。例如，<code>quantile(x, 0.25)</code> 会找出x中按从小到大顺序大于前25%而小于后75%的值</li>
</ul>
</li>
<li>定位度量：<code>first(x)</code>、<code>last(x)</code>、<code>nth(x, 2)</code></li>
<li>计数：<ul>
<li><code>n()</code>：无需任何参数，返回当前分组的大小</li>
<li><code>sum(!is.na(x))</code>：计算<strong>非缺失值</strong>的数量</li>
<li><code>n_distinct(x)</code>：计算出唯一值的数量</li>
</ul>
</li>
<li><strong>逻辑值的计数和比例：当与数值型函数一同使用时，TRUE会转换为1，FALSE会转换为0，这使得<code>sum()</code>和<code>mean()</code>非常适用于逻辑值</strong><ul>
<li><code>sum(x &gt; 10)</code>：找出x中TRUE的数量</li>
<li><code>mean(y == 0)</code>：找出比例</li>
</ul>
</li>
</ul>
<h2 id="dplyr处理关系数据"><a href="#dplyr处理关系数据" class="headerlink" title="dplyr处理关系数据"></a>dplyr处理关系数据</h2><p>存在于多个表中的这种数据统称为关系数据，因为重要的是数据间的关系，而不是单个数据集。</p>
<h3 id="键"><a href="#键" class="headerlink" title="键"></a>键</h3><ul>
<li>主键：唯一标识其所在数据表中的观测。</li>
<li>外键：唯一标识另一个数据表中的观测。</li>
</ul>
<p>当数据表没有明确的主键（即每行都是一个观测，但没有一个变量组合能够明确地标识<br>它）时。我们可以使用<code>mutate()</code>函数和<code>row_number()</code>函数为表加上一个主键。这种主键称为<strong>代理键</strong>。</p>
<h3 id="合并连接"><a href="#合并连接" class="headerlink" title="合并连接"></a>合并连接</h3><p>合并连接可以将两个表格中的变量组合起来，它先通过两个表格的键匹配观测，然后将一个表格中的变量复制到另一个表格中。</p>
<p>举例：我们可以通过<code>left_join()</code>函数组合<code>airlines</code>和<code>flights2</code>数据框，把航空公司的全名加入数据集：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">flights2 &lt;- flights %&gt;%</span><br><span class="line">    select(year:day, hour, tailnum, carrier)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>year</th>
<th>month</th>
<th>day</th>
<th>hour</th>
<th>tailnum</th>
<th>carrier</th>
</tr>
</thead>
<tbody><tr>
<td><int></td>
<td><int></td>
<td><int></td>
<td><dbl></td>
<td><chr></td>
<td><chr></td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N14228</td>
<td>UA</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N24211</td>
<td>UA</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N619AA</td>
<td>AA</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N804JB</td>
<td>B6</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>6</td>
<td>N668DN</td>
<td>DL</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N39463</td>
<td>UA</td>
</tr>
</tbody></table>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">flights2 %&gt;%</span><br><span class="line">    left_join(airlines, by = <span class="string">"carrier"</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>year</th>
<th>month</th>
<th>day</th>
<th>hour</th>
<th>tailnum</th>
<th>carrier</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td><int></td>
<td><int></td>
<td><int></td>
<td><dbl></td>
<td><chr></td>
<td><chr></td>
<td><chr></td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N14228</td>
<td>UA</td>
<td>United Air Lines Inc.</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N24211</td>
<td>UA</td>
<td>United Air Lines Inc.</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N619AA</td>
<td>AA</td>
<td>American Airlines Inc.</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N804JB</td>
<td>B6</td>
<td>JetBlue Airways</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>6</td>
<td>N668DN</td>
<td>DL</td>
<td>Delta Air Lines Inc.</td>
</tr>
<tr>
<td>2013</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>N39463</td>
<td>UA</td>
<td>United Air Lines Inc.</td>
</tr>
</tbody></table>
<h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><ul>
<li>内连接<code>inner_join()</code>：只要两个观测的键是相等的，内连接就可以匹配它们。<strong>没有匹配的行不会包含在结果中。</strong></li>
<li>外连接：保留至少存在于一个表中的观测。<ul>
<li>左连接<code>left_join()</code>：保留x中的所有观测。</li>
<li>右连接<code>right_join()</code>：保留y中的所有观测</li>
<li>全连接<code>full_join()</code>：保留x和y中的所有观测。</li>
</ul>
</li>
</ul>
<h4 id="两表中的匹配向量名不同"><a href="#两表中的匹配向量名不同" class="headerlink" title="两表中的匹配向量名不同"></a>两表中的匹配向量名不同</h4><p>命名字符向量<code>by = c(&quot;a&quot; = &quot;b&quot;)</code>。这种方式会匹配x表中的a变量和y表中的b变量。输出结果中使用的是x表中的变量。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">flights2 %&gt;%</span><br><span class="line">    left_join(airlines, by = d(<span class="string">"dest"</span> = <span class="string">"faa"</span>))</span><br></pre></td></tr></table></figure>

<h4 id="其他实现方式"><a href="#其他实现方式" class="headerlink" title="其他实现方式"></a>其他实现方式</h4><p><code>base::merge()</code>函数可以实现所有4种合并连接操作。</p>
<table>
<thead>
<tr>
<th>dplyr</th>
<th>merge</th>
</tr>
</thead>
<tbody><tr>
<td>inner_join(x, y)</td>
<td>merge(x, y)</td>
</tr>
<tr>
<td>left_join(x, y)</td>
<td>merge(x, y, all.x = TRUE)</td>
</tr>
<tr>
<td>right_join(x, y)</td>
<td>merge(x, y, all.y = TRUE)</td>
</tr>
</tbody></table>
<p>dplyr连接操作的优点是，可以更加清晰地表达出代码的意图：不同连接间的区别确实非常重要，但隐藏在<code>merge()</code>函数的参数中了。dplyr连接操作的速度明显更快，而且不会弄乱行的顺序。</p>
<h3 id="筛选连接"><a href="#筛选连接" class="headerlink" title="筛选连接"></a>筛选连接</h3><p>筛选连接匹配观测的方式与合并连接相同，但前者影响的是观测，而不是变量。筛选连接有两种类型。</p>
<ul>
<li><code>semi_join(x, y)</code>：保留x表中与y表中的观测相匹配的所有观测。</li>
<li><code>anti_join(x, y)</code>：丢弃x表中与y表中的观测相匹配的所有观测。</li>
</ul>
<p>举例：找出飞往<strong>最受欢迎的前10个目的地</strong>的所有航班：</p>
<ul>
<li>自己构造筛选器</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">top_dest &lt;- flights %&gt;%</span><br><span class="line">    count(dest, sort = <span class="literal">TRUE</span>) %&gt;%</span><br><span class="line">    head(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">flights %&gt;%</span><br><span class="line">    filter(dest %<span class="keyword">in</span>% top_dest$dest)</span><br></pre></td></tr></table></figure>

<ul>
<li>利用筛选连接：</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">top_dest &lt;- flights %&gt;%</span><br><span class="line">    count(dest, sort = <span class="literal">TRUE</span>) %&gt;%</span><br><span class="line">    head(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">flights %&gt;%</span><br><span class="line">    semi_join(top_dest)</span><br></pre></td></tr></table></figure>


<blockquote>
<p>《R数据科学》学习笔记</p>
</blockquote>
]]></content>
      <categories>
        <category>R</category>
        <category>数据处理</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>tidyverse</tag>
        <tag>dplyr</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib系列之标注</title>
    <url>/archives/b6c1b732.html</url>
    <content><![CDATA[<p>我们经常需要在绘图中添加一些箭头、文字之类的标注，让图片更易懂。</p>
<a id="more"></a>

<h2 id="基本标注"><a href="#基本标注" class="headerlink" title="基本标注"></a>基本标注</h2><p>我们通过<code>annotate()</code>这个函数来进行快速标注。其中几个比较重要的参数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.annotate(s, xy, xytext, xycoords, textcoords, arrowprops, annotation_clip)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>s</code>：标注的文字（字符串）</p>
</li>
<li><p><code>xy</code>：标注点的坐标（长度为2的序列），以<code>xycoords</code>为坐标系，标注点就是箭头指向的点</p>
</li>
<li><p><code>xytext</code>：注释的坐标（长度为2的序列），以<code>textcoords</code>为坐标系</p>
</li>
<li><p><code>xycoords</code>：<code>coords</code>是<code>coordinates</code>之意，箭头（<code>arrowprops</code>）的坐标系（字符串类型）</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>坐标系</th>
</tr>
</thead>
<tbody><tr>
<td><code>figure points</code></td>
<td>以figure的左下角为原点，以point为单位</td>
</tr>
<tr>
<td><code>figure pixels</code></td>
<td>以figure的左下角为原点，以pixel为单位</td>
</tr>
<tr>
<td><code>figure fraction</code></td>
<td>figure左下角为原点，以fraction（分数）为单位；0,0左下角;1,1右上角</td>
</tr>
<tr>
<td><code>axes points</code></td>
<td>以axes的左下角为原点，以point为单位</td>
</tr>
<tr>
<td><code>axes pixels</code></td>
<td>以axes的左下角为原点，以pixel为单位</td>
</tr>
<tr>
<td><code>axes fraction</code></td>
<td>以axes左下角为原点，以fraction（分数）为单位；0,0左下角;1,1右上角</td>
</tr>
<tr>
<td><code>data</code></td>
<td>使用数据的坐标系，以数据坐标系的单位为单位</td>
</tr>
<tr>
<td><code>polar</code></td>
<td><code>(theta,r)</code> 极坐标系；例如 <code>(np.pi/2,3)</code></td>
</tr>
</tbody></table>
</li>
<li><p><code>textcoords</code>：指定注释的坐标体系，默认为<code>xycoords</code>。<code>xycoords</code>的参数都可以用在<code>textcoords</code>中。另外<code>textcoords</code>还多出两个参数，当且仅当<code>textcoords</code>默认使用<code>xycoords</code>的坐标系时使用</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>坐标系</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>offset points</code></td>
<td>偏移<code>xy</code>的量（以point为单位）</td>
<td>此时注释的坐标系取决于<code>xycoords</code></td>
</tr>
<tr>
<td><code>offset pixels</code></td>
<td>偏移<code>xy</code>的量（以pixels为单位）</td>
<td>此时注释的坐标系取决于<code>xycoords</code></td>
</tr>
</tbody></table>
</li>
<li><p><code>arrowprops</code>：设置箭头形状<code>xy</code>与<code>xytext</code>之间的箭头，箭头的类型是<code>~matplotlib.patches.FancyArrowPatch</code>，字典类型，不同的箭头形状有不同的属性</p>
<ol>
<li><p>若<code>arrowwprops = None</code>，则没有箭头</p>
</li>
<li><p>如果<code>arrowprops</code>不包含<code>arrowstyle</code>这个key，那么<code>arrowprops</code>允许存在的key包括：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>箭头（箭头线）的宽度，以point为单位</td>
</tr>
<tr>
<td>shrink</td>
<td>从非箭头端向箭头段收缩（shrink）的fraction（分数比：length of contraction / total length）；收缩的部分不显示</td>
</tr>
<tr>
<td>headwidth</td>
<td>箭头底部（也就是箭头）的宽度以point为单位</td>
</tr>
<tr>
<td>headlength</td>
<td>箭头底部（也就是箭头）的长度以point为单位</td>
</tr>
<tr>
<td>?</td>
<td>any key to <code>matplotlib.patches.FancyArrowPatch</code></td>
</tr>
</tbody></table>
</li>
<li><p>如果<code>arrowprops</code>包含<code>arrowstyle</code>这个key，那么以面的key会被禁止，允许存在的key包括：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>arrowstyle</td>
<td>箭头的样式</td>
</tr>
<tr>
<td>connectionstyle</td>
<td>两个点之间的连接路径的样式</td>
</tr>
<tr>
<td>relpos</td>
<td>default is (0.5, 0.5)</td>
</tr>
<tr>
<td>patchA</td>
<td>default is bounding box of the text</td>
</tr>
<tr>
<td>patchB</td>
<td>default is None</td>
</tr>
<tr>
<td>shrinkA</td>
<td>default is 2 points</td>
</tr>
<tr>
<td>shrinkB</td>
<td>default is 2 points</td>
</tr>
<tr>
<td>mutation_scale</td>
<td>default is text size (in points)</td>
</tr>
<tr>
<td>mutation_aspect</td>
<td>default is 1.</td>
</tr>
<tr>
<td>?</td>
<td>any key for <code>matplotlib.patches.PathPatch</code></td>
</tr>
</tbody></table>
</li>
<li><p><code>arrowstyle</code>的设置如下，其中name为箭头形状，attrs为可设置的属性：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Attrs</th>
</tr>
</thead>
<tbody><tr>
<td><code>-</code></td>
<td>None</td>
</tr>
<tr>
<td><code>-&gt;</code></td>
<td>head_length=0.4,head_width=0.2</td>
</tr>
<tr>
<td><code>-[</code></td>
<td>widthB=1.0,lengthB=0.2,angleB=None</td>
</tr>
<tr>
<td><code>&#124;-&#124;</code></td>
<td>widthA=1.0,widthB=1.0</td>
</tr>
<tr>
<td><code>-&#124;></code></td>
<td>head_length=0.4,head_width=0.2</td>
</tr>
<tr>
<td><code>&lt;-</code></td>
<td>head_length=0.4,head_width=0.2</td>
</tr>
<tr>
<td><code>&lt;-&gt;</code></td>
<td>head_length=0.4,head_width=0.2</td>
</tr>
<tr>
<td><code><&#124;-</code></td>
<td>head_length=0.4,head_width=0.2</td>
</tr>
<tr>
<td><code><&#124;-&#124;></code></td>
<td>head_length=0.4,head_width=0.2</td>
</tr>
<tr>
<td><code>fancy</code></td>
<td>head_length=0.4,head_width=0.4,tail_width=0.4</td>
</tr>
<tr>
<td><code>simple</code></td>
<td>head_length=0.5,head_width=0.5,tail_width=0.2</td>
</tr>
<tr>
<td><code>wedge</code></td>
<td>tail_width=0.3,shrink_factor=0.5</td>
</tr>
</tbody></table>
<p> 一些箭头（<code>fancy</code>、<code>simple</code>、<code>wedge</code>）仅适用于生成二次样条线段的连接样式。对于这些箭头样式，必须使用<code>angle3</code>或<code>arc3</code>连接样式。</p>
 <img src="/archives/b6c1b732/fancyarrow.png" class="" title="fancyarrow">
</li>
<li><p><code>connectionstyle</code>的设置如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>属性</th>
</tr>
</thead>
<tbody><tr>
<td>angle</td>
<td>angleA=90,angleB=0,rad=0.0</td>
</tr>
<tr>
<td>angle3</td>
<td>angleA=90,angleB=0</td>
</tr>
<tr>
<td>arc</td>
<td>angleA=0,angleB=0,armA=None,armB=None,rad=0.0</td>
</tr>
<tr>
<td>arc3</td>
<td>rad=0.0</td>
</tr>
<tr>
<td>bar</td>
<td>armA=0.0,armB=0.0,fraction=0.3,angle=None</td>
</tr>
</tbody></table>
<p> 注意：<code>angle3</code>和<code>arc3</code>中的3意味着所得到的路径是二次样条段（三个控制点）。当连接路径是二次样条时，可以使用一些箭头样式选项。</p>
 <img src="/archives/b6c1b732/connectionstyle.png" class="" title="connectionstyle">
</li>
</ol>
</li>
<li><p><code>annotation_clip</code>：（bool型参数），当注释超出轴区域时，控制注释的可见性。如果为<code>True</code>，则只有当<code>xy</code>位于轴内时才会绘制注释。如果为<code>False</code>，则无论其位置如何，都将始终绘制注释。默认值为<code>None</code>，仅当<code>xycoords</code>为<code>data</code>时才表现为<code>True</code></p>
</li>
</ul>
<h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><p>下面是一个例子的绘图部分代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">axes = fig.add_axes([<span class="number">0.15</span>, <span class="number">0.15</span>, <span class="number">0.75</span>, <span class="number">0.75</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据曲线</span></span><br><span class="line">l1, = axes.plot(df_pn0[<span class="string">'freq'</span>],df_pn0[<span class="string">'pn'</span>],color = <span class="string">'r'</span>,label=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标注</span></span><br><span class="line">m1 = df_pn0[df_pn0[<span class="string">'freq'</span>] == <span class="number">1e5</span>][<span class="string">'pn'</span>].values[<span class="number">0</span>]</span><br><span class="line">x1 = <span class="number">1e5</span></span><br><span class="line">text1 = str(round(m1,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 箭头</span></span><br><span class="line">arrowprops=dict(arrowstyle=<span class="string">'-|&gt;'</span>,mutation_scale=<span class="number">5</span>)</span><br><span class="line">axes.annotate(s=text1, xy=(x1,m1), xytext=(x1<span class="number">-10000</span>, m1+<span class="number">8</span>),arrowprops=arrowprops,color = <span class="string">'r'</span>,fontsize = <span class="number">12</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴设置</span></span><br><span class="line">axes.set_xscale(<span class="string">'log'</span>)</span><br><span class="line"><span class="comment"># 设置x、y轴范围</span></span><br><span class="line">axes.set_xlim([<span class="number">1e4</span>,<span class="number">1e7</span>])</span><br><span class="line">axes.set_ylim([<span class="number">-140</span>,<span class="number">-40</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标轴标签</span></span><br><span class="line">axes.set_xlabel(<span class="string">"X轴标签"</span>,fontsize = <span class="number">12</span>)</span><br><span class="line">axes.set_ylabel(<span class="string">"Y轴标签"</span>,fontsize = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度字体大小</span></span><br><span class="line">plt.xticks(fontsize = <span class="number">12</span>)</span><br><span class="line">plt.yticks(fontsize = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格线</span></span><br><span class="line">axes.grid(color=<span class="string">'black'</span>, alpha=<span class="number">0.5</span>, linestyle=<span class="string">'dashed'</span>, linewidth=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/b6c1b732/%E6%A0%87%E6%B3%A8%E5%B0%8F%E4%BE%8B%E5%AD%90.svg" class="" title="标注小例子">

<p>其中标注部分的关键代码为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m1 = df_pn0[df_pn0[<span class="string">'freq'</span>] == <span class="number">1e5</span>][<span class="string">'pn'</span>].values[<span class="number">0</span>]</span><br><span class="line">x1 = <span class="number">1e5</span></span><br><span class="line">text1 = str(round(m1,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">arrowprops=dict(arrowstyle=<span class="string">'-|&gt;'</span>,mutation_scale=<span class="number">5</span>)</span><br><span class="line">axes.annotate(s=text1, xy=(x1,m1), xytext=(x1<span class="number">-10000</span>, m1+<span class="number">8</span>),arrowprops=arrowprops,color = <span class="string">'r'</span>,fontsize = <span class="number">12</span>)</span><br></pre></td></tr></table></figure>


<h2 id="文本标注"><a href="#文本标注" class="headerlink" title="文本标注"></a>文本标注</h2><p>我们可以使用<code>text()</code>函数进行快速文本标注，其参数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text(x, y, s, fontdict=<span class="literal">None</span>, withdash=<span class="literal">False</span>, **kwargs)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>x</code>, <code>y</code>：（标量scalars），放置文本的坐标位置，默认是<code>data coordinates</code>。<code>coordinate system</code>可以通过<code>transform</code>参数改变</li>
<li><code>s</code>：（字符串str），标注的文本</li>
<li><code>fontdict</code>：（字典dict），设置文本属性（字体大小、字体颜色等），例子：<code>fontdict={&#39;size&#39;: 16, &#39;color&#39;: &#39;r&#39;}</code></li>
<li><code>withdash</code>：（布尔类型bool）、（可选参数）、默认为<code>False</code>，创建一个<code>~matplotlib.text.TextWithDash</code>实例而不是<code>~matplotlib.text.Text</code>实例</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib系列之LineStyles及Markers</title>
    <url>/archives/1439dcd2.html</url>
    <content><![CDATA[<p>本文主要记录Matplotlib中的曲线、点号的样式，便于后续查询。</p>
<a id="more"></a>

<h2 id="Line-Styles"><a href="#Line-Styles" class="headerlink" title="Line Styles"></a>Line Styles</h2><p>下面列举了曲线的样式：</p>
<table>
<thead>
<tr>
<th>标记</th>
<th>描述</th>
<th>显示</th>
</tr>
</thead>
<tbody><tr>
<td><code>-</code></td>
<td>solid line</td>
<td><img src="/archives/1439dcd2/linestyle--.png" class="" title="linestyle--"></td>
</tr>
<tr>
<td><code>--</code></td>
<td>dashed line</td>
<td><img src="/archives/1439dcd2/linestyle---.png" class="" title="linestyle---"></td>
</tr>
<tr>
<td><code>-.</code></td>
<td>dash-dot line</td>
<td><img src="/archives/1439dcd2/linestyle--dot.png" class="" title="linestyle--dot"></td>
</tr>
<tr>
<td><code>:</code></td>
<td>dotted line</td>
<td><img src="/archives/1439dcd2/linestyle-3A.png" class="" title="linestyle-3A"></td>
</tr>
<tr>
<td><code>.</code></td>
<td>points</td>
<td><img src="/archives/1439dcd2/linestyle-dot.png" class="" title="linestyle-dot"></td>
</tr>
<tr>
<td><code>o</code></td>
<td>circle</td>
<td><img src="/archives/1439dcd2/linestyle-o.png" class="" title="linestyle-o"></td>
</tr>
<tr>
<td><code>^</code></td>
<td>triangle up</td>
<td><img src="/archives/1439dcd2/linestyle-%5E.png" class="" title="linestyle-^"></td>
</tr>
<tr>
<td><code>v</code></td>
<td>triangle down</td>
<td><img src="/archives/1439dcd2/linestyle-v.png" class="" title="linestyle-v"></td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>triangle left</td>
<td><img src="/archives/1439dcd2/linestyle-3C.png" class="" title="linestyle-3C"></td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>triangle right</td>
<td><img src="/archives/1439dcd2/linestyle-3E.png" class="" title="linestyle-3E"></td>
</tr>
<tr>
<td><code>s</code></td>
<td>square</td>
<td><img src="/archives/1439dcd2/linestyle-s.png" class="" title="linestyle-s"></td>
</tr>
<tr>
<td><code>+</code></td>
<td>plus</td>
<td><img src="/archives/1439dcd2/linestyle-+.png" class="" title="linestyle-+"></td>
</tr>
<tr>
<td><code>x</code></td>
<td>cross</td>
<td><img src="/archives/1439dcd2/linestyle-x.png" class="" title="linestyle-x"></td>
</tr>
<tr>
<td><code>D</code></td>
<td>diamond</td>
<td><img src="/archives/1439dcd2/linestyle-dd.png" class="" title="linestyle-dd"></td>
</tr>
<tr>
<td><code>d</code></td>
<td>thin diamond</td>
<td><img src="/archives/1439dcd2/linestyle-d.png" class="" title="linestyle-d"></td>
</tr>
<tr>
<td><code>1</code></td>
<td>tripod down</td>
<td><img src="/archives/1439dcd2/linestyle-1.png" class="" title="linestyle-1"></td>
</tr>
<tr>
<td><code>2</code></td>
<td>tripod up</td>
<td><img src="/archives/1439dcd2/linestyle-2.png" class="" title="linestyle-2"></td>
</tr>
<tr>
<td><code>3</code></td>
<td>tripod left</td>
<td><img src="/archives/1439dcd2/linestyle-3.png" class="" title="linestyle-3"></td>
</tr>
<tr>
<td><code>4</code></td>
<td>tripod right</td>
<td><img src="/archives/1439dcd2/linestyle-4.png" class="" title="linestyle-4"></td>
</tr>
<tr>
<td><code>h</code></td>
<td>hexagon</td>
<td><img src="/archives/1439dcd2/linestyle-h.png" class="" title="linestyle-h"></td>
</tr>
<tr>
<td><code>H</code></td>
<td>rotated hexagon</td>
<td><img src="/archives/1439dcd2/linestyle-hh.png" class="" title="linestyle-hh"></td>
</tr>
<tr>
<td><code>p</code></td>
<td>pentagon</td>
<td><img src="/archives/1439dcd2/linestyle-p.png" class="" title="linestyle-p"></td>
</tr>
<tr>
<td><code>&#124;</code></td>
<td>vertical line</td>
<td><img src="/archives/1439dcd2/linestyle-7C.png" class="" title="linestyle-7C"></td>
</tr>
<tr>
<td><code>_</code></td>
<td>horizontal line</td>
<td><img src="/archives/1439dcd2/linestyle-5F.png" class="" title="linestyle-5F"></td>
</tr>
</tbody></table>
<h2 id="Markers"><a href="#Markers" class="headerlink" title="Markers"></a>Markers</h2><p>下面列举了点号的样式：</p>
<table>
<thead>
<tr>
<th>标记</th>
<th>描述</th>
<th>显示</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>tick left</td>
<td><img src="/archives/1439dcd2/marker-i0.png" class="" title="marker-i0"></td>
</tr>
<tr>
<td>1</td>
<td>tick right</td>
<td><img src="/archives/1439dcd2/marker-i1.png" class="" title="marker-i1"></td>
</tr>
<tr>
<td>2</td>
<td>tick up</td>
<td><img src="/archives/1439dcd2/marker-i2.png" class="" title="marker-i2"></td>
</tr>
<tr>
<td>3</td>
<td>tick down</td>
<td><img src="/archives/1439dcd2/marker-i3.png" class="" title="marker-i3"></td>
</tr>
<tr>
<td>4</td>
<td>caret left</td>
<td><img src="/archives/1439dcd2/marker-i4.png" class="" title="marker-i4"></td>
</tr>
<tr>
<td>5</td>
<td>caret right</td>
<td><img src="/archives/1439dcd2/marker-i5.png" class="" title="marker-i5"></td>
</tr>
<tr>
<td>6</td>
<td>caret up</td>
<td><img src="/archives/1439dcd2/marker-i6.png" class="" title="marker-i6"></td>
</tr>
<tr>
<td>7</td>
<td>caret down</td>
<td><img src="/archives/1439dcd2/marker-i7.png" class="" title="marker-i7"></td>
</tr>
<tr>
<td><code>o</code></td>
<td>circle</td>
<td><img src="/archives/1439dcd2/marker-o.png" class="" title="marker-o"></td>
</tr>
<tr>
<td><code>D</code></td>
<td>diamond</td>
<td><img src="/archives/1439dcd2/marker-dd.png" class="" title="marker-dd"></td>
</tr>
<tr>
<td><code>h</code></td>
<td>hexagon 1</td>
<td><img src="/archives/1439dcd2/marker-h.png" class="" title="marker-h"></td>
</tr>
<tr>
<td><code>H</code></td>
<td>hexagon 2</td>
<td><img src="/archives/1439dcd2/marker-hh.png" class="" title="marker-hh"></td>
</tr>
<tr>
<td><code>_</code></td>
<td>horizontal line</td>
<td><img src="/archives/1439dcd2/marker-5F.png" class="" title="marker-5F"></td>
</tr>
<tr>
<td><code>1</code></td>
<td>tripod down</td>
<td><img src="/archives/1439dcd2/marker-1.png" class="" title="marker-1"></td>
</tr>
<tr>
<td><code>2</code></td>
<td>tripod up</td>
<td><img src="/archives/1439dcd2/marker-2.png" class="" title="marker-2"></td>
</tr>
<tr>
<td><code>3</code></td>
<td>tripod left</td>
<td><img src="/archives/1439dcd2/marker-3.png" class="" title="marker-3"></td>
</tr>
<tr>
<td><code>4</code></td>
<td>tripod right</td>
<td><img src="/archives/1439dcd2/marker-4.png" class="" title="marker-4"></td>
</tr>
<tr>
<td><code>8</code></td>
<td>octagon</td>
<td><img src="/archives/1439dcd2/marker-8.png" class="" title="marker-8"></td>
</tr>
<tr>
<td><code>p</code></td>
<td>pentagon</td>
<td><img src="/archives/1439dcd2/marker-p.png" class="" title="marker-p"></td>
</tr>
<tr>
<td><code>^</code></td>
<td>triangle up</td>
<td><img src="/archives/1439dcd2/marker-5E.png" class="" title="marker-5E"></td>
</tr>
<tr>
<td><code>v</code></td>
<td>triangle down</td>
<td><img src="/archives/1439dcd2/marker-v.png" class="" title="marker-v"></td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>triangle left</td>
<td><img src="/archives/1439dcd2/marker-3C.png" class="" title="marker-3C"></td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>triangle right</td>
<td><img src="/archives/1439dcd2/marker-3E.png" class="" title="marker-3E"></td>
</tr>
<tr>
<td><code>d</code></td>
<td>thin diamond</td>
<td><img src="/archives/1439dcd2/marker-d.png" class="" title="marker-d"></td>
</tr>
<tr>
<td><code>,</code></td>
<td>pixel</td>
<td><img src="/archives/1439dcd2/marker-2C.png" class="" title="marker-2C"></td>
</tr>
<tr>
<td><code>+</code></td>
<td>plus</td>
<td><img src="/archives/1439dcd2/marker-+.png" class="" title="marker-+)"></td>
</tr>
<tr>
<td><code>.</code></td>
<td>point</td>
<td><img src="/archives/1439dcd2/marker-dot.png" class="" title="marker-dot"></td>
</tr>
<tr>
<td><code>s</code></td>
<td>square</td>
<td><img src="/archives/1439dcd2/marker-s.png" class="" title="marker-s"></td>
</tr>
<tr>
<td><code>*</code></td>
<td>star</td>
<td><img src="/archives/1439dcd2/marker-2A.png" class="" title="marker-2A"></td>
</tr>
<tr>
<td><code>&#124;</code></td>
<td>vertical line</td>
<td><img src="/archives/1439dcd2/marker-7C.png" class="" title="marker-7C"></td>
</tr>
<tr>
<td><code>x</code></td>
<td>cross</td>
<td><img src="/archives/1439dcd2/marker-x.png" class="" title="marker-x"></td>
</tr>
<tr>
<td><code>r&#39;$\sqrt{2}$&#39;</code></td>
<td>any latex expression</td>
<td><img src="/archives/1439dcd2/marker-latex.png" class="" title="marker-latex"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib系列之画布与坐标轴设置</title>
    <url>/archives/21d3feb6.html</url>
    <content><![CDATA[<p>通过<a href="https://tding.top/archives/ea3d181f.html">Matplotlib系列之简述</a>这篇文章，我们已经从宏观上大致了解了Matplotlib图像的组成部分。今天，我们主要介绍画布与坐标轴这两个概念，并详细介绍一下坐标轴属性设置以及脊柱设置。</p>
<a id="more"></a>

<h2 id="画布与坐标轴对象"><a href="#画布与坐标轴对象" class="headerlink" title="画布与坐标轴对象"></a>画布与坐标轴对象</h2><p>我们可以使用<code>plt.figure()</code>创建一个Figure对象，然后在这个画布对象上进行绘图，因此我们需要再创建一个坐标轴对象，这里可以调用Figure实例的<code>add_axes()</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">axes = fig.add_axes([<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.7</span>,<span class="number">0.7</span>])</span><br></pre></td></tr></table></figure>

<p>其中<code>[0.2,0.2,0.7,0.7]</code>表示的是在画布中，坐标轴距离画布左边0.2倍的位置，距离下边0.2倍的位置，然后<strong>坐标轴的整体宽度和高度</strong>占0.7倍的大小，换句话说，距离右边和上边0.9（0.2+0.7）倍。</p>
<p>这个方法的好处在于我们可以根据自己的需要自由的控制画布以及坐标轴对象，灵活的实现各种需求，比如可以绘制一个图中图（即在一张画布上创建两个坐标轴对象）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_axes([<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.7</span>,<span class="number">0.7</span>])</span><br><span class="line">ax2 = fig.add_axes([<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.2</span>,<span class="number">0.2</span>])</span><br><span class="line"></span><br><span class="line">ax1.plot(x,y1,c = <span class="string">"r"</span>)</span><br><span class="line">ax2.plot(x,y2,c = <span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/21d3feb6/%E5%9B%BE%E4%B8%AD%E5%9B%BE.png" class="" title="图中图">


<h2 id="坐标轴属性设置"><a href="#坐标轴属性设置" class="headerlink" title="坐标轴属性设置"></a>坐标轴属性设置</h2><h3 id="对数坐标轴设置"><a href="#对数坐标轴设置" class="headerlink" title="对数坐标轴设置"></a>对数坐标轴设置</h3><p>设置X/Y轴为“对数轴”：</p>
<ul>
<li><code>axes.set_xscale(&#39;log&#39;)</code></li>
<li><code>axes.set_yscale(&#39;log&#39;)</code></li>
</ul>
<h3 id="坐标轴标签"><a href="#坐标轴标签" class="headerlink" title="坐标轴标签"></a>坐标轴标签</h3><p>设置X/Y轴标签以及标签字体大小：</p>
<ul>
<li><code>axes.set_xlabel(&#39;X轴标签&#39;,fontsize=12)</code>  </li>
<li><code>axes.set_ylabel(&#39;Y轴标签&#39;,fontsize=12)</code>  </li>
</ul>
<h3 id="坐标轴刻度范围"><a href="#坐标轴刻度范围" class="headerlink" title="坐标轴刻度范围"></a>坐标轴刻度范围</h3><p>设置X/Y轴刻度范围：</p>
<ul>
<li><code>axes.set_xlim(xmin,xmax)</code></li>
<li><code>axes.set_ylim(ymin,ymax)</code></li>
</ul>
<h3 id="坐标轴刻度"><a href="#坐标轴刻度" class="headerlink" title="坐标轴刻度"></a>坐标轴刻度</h3><p>设置X/Y轴要显示的刻度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Axes.set_xticks(self, ticks, minor=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>ticks：一个刻度位置列表</li>
<li>minor（可选）：bool型变量，如果设置为<code>False</code>，那么设置的是主刻度，否则为次刻度</li>
</ul>
<p>下面是例子：</p>
<ul>
<li><code>axes.set_xticks([-2,-1,0,1,2])</code></li>
<li><code>axes.set_yticks([0,1,2,3,4])</code></li>
</ul>
<h3 id="坐标轴刻度标签"><a href="#坐标轴刻度标签" class="headerlink" title="坐标轴刻度标签"></a>坐标轴刻度标签</h3><p>设置X/Y轴刻度标签：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Axes.set_xticklabels(self, labels, fontdict=<span class="literal">None</span>, minor=<span class="literal">False</span>, **kwargs)</span><br></pre></td></tr></table></figure>

<ul>
<li>labels：一个标签列表</li>
<li>fontdict（可选）：字典变量，控制刻度标签的显示，默认为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">'fontsize'</span>: rcParams[<span class="string">'axes.titlesize'</span>],</span><br><span class="line">    <span class="string">'fontweight'</span>: rcParams[<span class="string">'axes.titleweight'</span>],</span><br><span class="line">    <span class="string">'verticalalignment'</span>: <span class="string">'baseline'</span>,</span><br><span class="line">    <span class="string">'horizontalalignment'</span>: loc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>minor（可选）：bool型变量，如果设置为<code>False</code>，那么设置的是主刻度，否则为次刻度</li>
</ul>
<p>下面是一个例子：</p>
<ul>
<li><code>axes.set_xticklabels([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;])</code></li>
<li><code>axes.set_yticklabels([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;])</code></li>
</ul>
<h3 id="坐标轴刻度文字方向"><a href="#坐标轴刻度文字方向" class="headerlink" title="坐标轴刻度文字方向"></a>坐标轴刻度文字方向</h3><p>我们可以通过下面的代码来旋转轴刻度上文字方向：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">axes.set_xticklabels(axes.get_xticklabels(),rotation = <span class="number">90</span>)</span><br></pre></td></tr></table></figure>


<h2 id="脊柱-Spines-设置"><a href="#脊柱-Spines-设置" class="headerlink" title="脊柱(Spines)设置"></a>脊柱(Spines)设置</h2><p><code>axes.spines</code>属于<code>collections.OrderedDict</code>类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OrderedDict([(<span class="string">'left'</span>, &lt;matplotlib.spines.Spine at <span class="number">0x28accd1a710</span>&gt;),</span><br><span class="line">             (<span class="string">'right'</span>, &lt;matplotlib.spines.Spine at <span class="number">0x28accd1a550</span>&gt;),</span><br><span class="line">             (<span class="string">'bottom'</span>, &lt;matplotlib.spines.Spine at <span class="number">0x28accd1af98</span>&gt;),</span><br><span class="line">             (<span class="string">'top'</span>, &lt;matplotlib.spines.Spine at <span class="number">0x28accd1a9b0</span>&gt;)])</span><br></pre></td></tr></table></figure>

<p>我们可以通过<code>axes.spines</code>得到axis对象，即4个边框，使用<code>[&#39;right&#39;]、[&#39;left&#39;]、[&#39;top&#39;]、[&#39;bottom&#39;]</code>可以分别提取出四个边框。</p>
<h3 id="去掉脊柱"><a href="#去掉脊柱" class="headerlink" title="去掉脊柱"></a>去掉脊柱</h3><p>我们可以通过如下代码去掉脊柱：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">axes.spines[<span class="string">'top'</span>].set_visible(<span class="literal">False</span>)    <span class="comment"># 去掉上边框  </span></span><br><span class="line">axes.spines[<span class="string">'bottom'</span>].set_visible(<span class="literal">False</span>) <span class="comment"># 去掉下边框  </span></span><br><span class="line">axes.spines[<span class="string">'left'</span>].set_visible(<span class="literal">False</span>)   <span class="comment"># 去掉左边框  </span></span><br><span class="line">axes.spines[<span class="string">'right'</span>].set_visible(<span class="literal">False</span>)  <span class="comment"># 去掉右边框</span></span><br></pre></td></tr></table></figure>

<h3 id="脊柱颜色设置"><a href="#脊柱颜色设置" class="headerlink" title="脊柱颜色设置"></a>脊柱颜色设置</h3><p>设置边框（坐标轴）颜色：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">axes.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)  <span class="comment"># 设置右边框为无色，默认为黑色</span></span><br><span class="line">axes.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)    <span class="comment"># 设置上边框为无色，默认为黑色</span></span><br><span class="line">axes.spines[<span class="string">'left'</span>].set_color(<span class="string">'r'</span>)      <span class="comment"># 设置左边框为红色，默认为黑色</span></span><br><span class="line">axes.spines[<span class="string">'bottom'</span>].set_color(<span class="string">'r'</span>)    <span class="comment"># 设置下边框为红色，默认为黑色</span></span><br></pre></td></tr></table></figure>

<h3 id="脊柱位置设置"><a href="#脊柱位置设置" class="headerlink" title="脊柱位置设置"></a>脊柱位置设置</h3><p>我们可以使用<code>axes.spines[].set_position()</code>来设置脊柱位置，位置的属性包括：<code>outward</code>、<code>axes</code>、<code>data</code>。</p>
<ul>
<li>outward：将spine从数据区域中移出指定的点数。（正值指定向外移动，负值表示向内移动）<ul>
<li>向内、向外视具体的spine而定，例如<code>axes.spines[&#39;left&#39;]</code>的向外是向左，而<code>axes.spines[&#39;right&#39;]</code>的向外是向右。</li>
</ul>
</li>
<li>axes：X/Y轴的比例（从0.0-1.0）</li>
<li>data：X/Y轴具体的数值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把bottom坐标轴的位置设定在y刻度为0的位置</span></span><br><span class="line">axes.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 把bottom坐标轴的位置设定在y刻度为20%的位置</span></span><br><span class="line">axes.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'axes'</span>, <span class="number">0.2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把left坐标轴的位置向左移动100个点</span></span><br><span class="line">axes.spines[<span class="string">'left'</span>].set_position((<span class="string">'outward'</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib系列之简述</title>
    <url>/archives/ea3d181f.html</url>
    <content><![CDATA[<p>在学习Matplotlib之前，我们可以先大致了解一下Matplotlib图像的组成部分，后面再详细学习其中的各个对象。</p>
<a id="more"></a>

<h2 id="Matplotlib图像组成部分"><a href="#Matplotlib图像组成部分" class="headerlink" title="Matplotlib图像组成部分"></a>Matplotlib图像组成部分</h2><p>在Matplotlib中，整个图像为一个<code>Figure</code>对象，可以把<code>Figure</code>当成一张画布。在<code>Figure</code>对象中可以包含多个<code>Axes</code>对象，<code>Axes</code>对象是制图区域，每个<code>Axes</code>对象都是一个拥有自己坐标系统的绘图区域。</p>
<img src="/archives/ea3d181f/%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png" class="" title="组成部分">

<ul>
<li>Figure：画布</li>
<li>Axes：坐标轴对象</li>
<li>spine：坐标轴对象的4个边框</li>
<li>axis label：坐标轴标签</li>
<li>Tick：刻度线，包括主刻度线、次刻度线</li>
<li>Tick label：刻度线的标签</li>
</ul>
<p>下面是各个对象的从属关系，我们可以从上层对象出发，访问下层对象：</p>
<img src="/archives/ea3d181f/%E4%BB%8E%E5%B1%9E%E5%85%B3%E7%B3%BB.png" class="" title="从属关系">


<h2 id="两种接口"><a href="#两种接口" class="headerlink" title="两种接口"></a>两种接口</h2><p>在Matplotlib库提供了两种风格的API供开发者使用：一种是Pyplot编程接口（<code>state-based</code>），一种是面向对象对象的编程接口（<code>object-based</code>）。</p>
<h3 id="Pyplot编程接口"><a href="#Pyplot编程接口" class="headerlink" title="Pyplot编程接口"></a>Pyplot编程接口</h3><p>pyplot编程接口是一个MATLAB风格的接口。众多绘图对象所构成的复杂结构隐藏在这套API内部，我们只需要调用pyplot模块所提供的函数就可以实现快速绘图以及设置图表的各种细节。</p>
<p>这种接口最重要的特征就是“有状态”：他表征当前所位于的子图状态，并持续跟踪当前的图形和坐标轴。同时，我们可以通过<code>plt.gcf()</code>（”Get Current Figure”）获取当前的活动Figure对象，通过<code>plt.gca()</code>（”Get Current Axes”）获取当前活动的axes坐标轴对象。</p>
<p>在pyplot模块中，许多函数都是对当前的Figure或Axes对象进行处理，例如：<code>plt.plot()</code>实际上会通过<code>plt.gca()</code>获得当前的Axes对象ax，然后再调用<code>ax.plot()</code>方法实现真正的绘图。</p>
<p>下面是一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">x = np.linspace(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用plt绘制第一个子图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)     </span><br><span class="line">plt.plot(x, y1)   </span><br><span class="line"><span class="comment"># 采用plt绘制第二个子图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)       </span><br><span class="line">plt.plot(x, y2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="面向对象接口"><a href="#面向对象接口" class="headerlink" title="面向对象接口"></a>面向对象接口</h3><p>在使用面向对象的编程接口时，我们需要自己创建画布（FigureCanvas），自己创建图对象（Figure），自己创建Axes（一个Figure可以包含一个或者多个Axes，一个Axes可以理解为一个子图，使用一次<code>plot()</code>绘图函数便会创建一个Axes），所有对象一起才能完成一次完整的绘图。使用面向对象编程接口有利于我们对于图形绘制的完整控制，但是代码比较繁琐。</p>
<p>下面是一个例子，绘图的过程之中不再受到当前所谓“活动”图形及坐标轴的限制，因为一次性就从<code>subplots</code>函数中获取了表征所有坐标轴的<code>ax</code>数组和<code>Figure</code>对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">x = np.linspace(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 采用对应的坐标轴对象绘制第一个子图</span></span><br><span class="line">ax[<span class="number">0</span>].plot(x, y1)</span><br><span class="line"><span class="comment"># 采用对应的坐标轴对象绘制第二个子图</span></span><br><span class="line">ax[<span class="number">1</span>].plot(x, y2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<h3 id="两种接口用法对比"><a href="#两种接口用法对比" class="headerlink" title="两种接口用法对比"></a>两种接口用法对比</h3><p>下面是几个比较常用的方法的对比：</p>
<ul>
<li><code>plt.plot() = ax.plot()</code></li>
<li><code>plt.legend() = ax.legend()</code></li>
<li><code>plt.xlabel()/ylabel()/xlim()/ylim()/title() = ax.set_xlabel()/set_ylabel()/set_xlim()/set_ylim()/set_title()</code></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Win7开机蓝屏报出STOP 0X0000007B错误的解决办法</title>
    <url>/archives/9f1322c6.html</url>
    <content><![CDATA[<p>Win7电脑，开机直接蓝屏，报出如下错误：</p>
<blockquote>
<p>A problem has been detected and windows has been shut down to prevent damage to your computer.</p>
<p>If this is the first time you’ve seen this stop error screen, restart your computer. If this screen appears again, follow these steps:</p>
<p>Check for viruses on your computer. Remove any newly installed hard drives or hard drive controllers. Check your hard drive to make sure it is properly configured and terminated. Run CHKDSK /F to check for hard drive corruption and then restart your computer.</p>
<p>Technical information:</p>
<p>*** STOP: 0x0000007B (0xFFFFF880009A98E8, 0xFFFFFFFFC0000034, 0x0000000000000000, 0x0000000000000000)</p>
</blockquote>
<a id="more"></a>

<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>一般来说蓝屏代码<code>STOP:0X0000007B</code>报错与BIOS设置有关，只需要修改下硬盘设置即可。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>我们可以通过下面的办法解决蓝屏代码<code>STOP:0X0000007B</code>问题：</p>
<ol>
<li><p>重启电脑，不停的按下F2或者DEL进入BIOS(不同品牌的电脑进入方式会不一样，大家可以去搜自己品牌的电脑如何进入bios)</p>
</li>
<li><p>进入BIOS后，找到的<code>SATA Mode</code> 或 <code>Serial ATA Mode</code> ，选中按下回车，选择<code>combinated</code>模式，如果没有<code>combinated</code>模式，就设置为<code>IDE</code>模式 然后按下<code>F10--Y--Enter</code>保存设置，然后重启</p>
</li>
<li><p>通过上述方法进行设置即可解决蓝屏的故障，但是这样以来则会降低电脑的性能，在进入系统后按下<code>Win + R</code>快捷键打开运行，输入<code>regedit</code>然后按下enter键打开注册表，然后依次进入<code>HKEY_LOCAL_MACHINE/System/CurrentControlSet/Services/Msahci</code>，在右侧双击打开<code>Start</code>，然后将“数值数据”修改为<code>0</code>，点击确定保存关闭注册表编辑器，重启电脑，重启后等待系统自动安装AHCI的驱动，安装完成后重启计算机即可</p>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/53040011" target="_blank" rel="noopener external nofollow noreferrer">win7开机蓝屏提示STOP:0X0000007B的解决方法</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>思源宋体与思源黑体</title>
    <url>/archives/160f8560.html</url>
    <content><![CDATA[<ul>
<li>2014年，Google联合Adobe发布了非衬线<strong>思源黑体</strong></li>
<li>2017年，Google联合Adobe发布了衬线<strong>思源宋体</strong></li>
</ul>
<p>思源系列字体支持四种不同的东亚语言（简体中文、繁体中文、日语和朝鲜语），7种粗细类型中的每一种都有 65535 个字形，可共同呈现一致的视觉美感。该字体还包含多个西方字形，支持拉丁语、希腊语和西里尔文脚本，这些字形均来源于<code>Source Serif</code>。</p>
<p>思源系列字体是<strong>迄今为止唯一一款可以免费用于任何场合的“泛中日韩”字体</strong>。</p>
<p>注：关于衬线、非衬线的介绍见<a href="https://tding.top/archives/7026a363.html">衬线（Serif）与非衬线（Sans-serif）字体</a>。</p>
<a id="more"></a>

<h2 id="思源字体的名称"><a href="#思源字体的名称" class="headerlink" title="思源字体的名称"></a>思源字体的名称</h2><p>由于思源字体由 Google 和 Adobe 联合开发并发行，虽说中文名称相同，但是并没有统一的英文名称。</p>
<ul>
<li>Google 将思源字体归入旗下 <code>Noto</code> 字体家族，因此思源黑体的名字为 <code>Noto Sans CJK</code>，思源宋体的名字为 <code>Noto Serif CJK</code></li>
<li>Adobe 将思源字体归入旗下 <code>Source</code> 字体家族，因此思源黑体的名字为 <code>Source Han Sans</code>，思源宋体的名字为 <code>Source Han Serif</code></li>
</ul>
<table>
<thead>
<tr>
<th>字体</th>
<th>Adobe命名</th>
<th>Google命名</th>
</tr>
</thead>
<tbody><tr>
<td>思源黑体</td>
<td>Source Han Sans</td>
<td>Noto Sans CJK</td>
</tr>
<tr>
<td>思源宋体</td>
<td>Source Han Serif</td>
<td>Noto Serif CJK</td>
</tr>
</tbody></table>
<h2 id="思源字体的字重"><a href="#思源字体的字重" class="headerlink" title="思源字体的字重"></a>思源字体的字重</h2><p>思源字体有7种不同字重，可以满足各种各样的字体排印需求。</p>
<img src="/archives/160f8560/%E5%AD%97%E9%87%8D-%E6%80%9D%E6%BA%90%E9%BB%91%E4%BD%93.png" class="" title="字重-思源黑体">

<img src="/archives/160f8560/%E5%AD%97%E9%87%8D-%E6%80%9D%E6%BA%90%E5%AE%8B%E4%BD%93.png" class="" title="字重-思源宋体">

<h2 id="字体下载"><a href="#字体下载" class="headerlink" title="字体下载"></a>字体下载</h2><p>字体开源在Github上：</p>
<ul>
<li>思源黑体：<a href="https://github.com/adobe-fonts/source-han-sans/tree/master" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/adobe-fonts/source-han-sans/tree/master</a></li>
<li>思源宋体：<a href="https://github.com/adobe-fonts/source-han-serif/tree/master" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/adobe-fonts/source-han-serif/tree/master</a></li>
</ul>
<p>下面我以思源宋体为例介绍一下如何下载这个系列字体。</p>
<p>注意：<strong>下载链接是在<code>release</code>分支上</strong>，所以我们需要在 Branch 里切换到 <code>release</code> 分支，不要在 <code>master</code> 分支。</p>
<p>根据Adobe官方提供的文档，我们可以通过以下流程图确定要下载的字体类型：</p>
<img src="/archives/160f8560/%E5%AD%97%E4%BD%93%E4%B8%8B%E8%BD%BD.png" class="" title="字体下载">

<p>字体类型：</p>
<ul>
<li><strong>Super OTC（1个文件、扩展名<code>.ttc</code>）</strong>：在单个字体文件中包含所有字体。建议您使用图2中的链接进行下载，以减少下载所需的时间。</li>
<li><strong>OTC（7个文件、扩展名<code>.ttc</code>）</strong>：按粗细分为7个文件，每个文件里包含所有语言的字形。</li>
<li><strong>OTF（28个文件、扩展名<code>.otf</code>）</strong>：总共包含28种字体，分为4个特定于语言的子目录，每个子目录都包含7种粗细。对于非日语字体，文件名包含以语言标识（K、SC、TC）为后缀的系列名称。名称以 HW为后缀的目录包含带有单字节字母和数字的字体。</li>
<li><strong>Subset OTF（28个文件、扩展名<code>.otf</code>）</strong>：总共包含28种字体，分为4个子目录，即JP（日本）、CN（中国）、KR（韩国）和 TW（台湾），每个子目录都包含7种粗细。文件名包含以国家/地区标识为后缀的系列名称。</li>
</ul>
<p>根据需求，我下载了<code>Subset OTF</code>中的简体中文的7个<code>.otf</code>文件。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>思源黑体一开始使用的是Apache的License，后来修改为 OFL了，思源宋体一出来就是 OFL。</p>
<p>OFL是由SIL发起的一种开源License（全称<code>Open Font License</code>），比Apache更加开放一些，只要不拿来赚钱就可以随便使用、分发。</p>
<p>最后，为什么叫思源，本意是Google和Adobe的几位设计师想感恩东亚的祖先们创造出了完全不同于西方的文字，但使用者何尝不需要饮水思源，感恩这些设计师们。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://source.typekit.com/source-han-serif/cn/" target="_blank" rel="noopener external nofollow noreferrer">Source Han Serif 思源宋体</a></li>
<li><a href="https://frankseptillion.com/2017/05/12/%e6%80%9d%e6%ba%90%e7%b3%bb%e5%88%97%e5%ad%97%e4%bd%93%ef%bc%9a%e6%8a%80%e6%9c%af%e4%bb%b7%e5%80%bc%e9%ab%98%e4%ba%8e%e8%89%ba%e6%9c%af%e4%bb%b7%e5%80%bc/" target="_blank" rel="noopener external nofollow noreferrer">思源系列字体：技术价值高于艺术价值</a></li>
<li><a href="https://wkevin.gitee.io/it/Fonts-source-han/" target="_blank" rel="noopener external nofollow noreferrer">思源黑体 and 思源宋体</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>衬线（Serif）与非衬线（Sans-serif）字体</title>
    <url>/archives/7026a363.html</url>
    <content><![CDATA[<p>在西方国家罗马字母阵营中，字体分为两大种类：<code>Sans Serif</code>和<code>Serif</code>，打字机体虽然也属于<code>Sans Serif</code>，但由于是等宽字体，所以另外独立出<code>Monospace</code>这一种类，例如在Web中，表示代码时常常要使用等宽字体。 </p>
<p>Serif的意思是，在<strong>字的笔划开始及结束的地方有额外的装饰</strong>，而且笔划的粗细会因直横的不同而有不同。相反的，<code>Sans Serif</code>则没有这些额外的装饰，笔划粗细大致差不多。如下图： </p>
<img src="/archives/7026a363/%E6%AF%94%E8%BE%83.jpg" class="" title="比较">

<p>常用字体的分类：</p>
<ul>
<li><code>Serif</code>字体：<code>Times New Roman</code>、宋体、细明体</li>
<li><code>Sans Serif</code>字体：<code>Arial</code>、<code>Tahoma</code>、黑体、幼圆</li>
</ul>
<a id="more"></a>


<h2 id="衬线体（Serif）的起源"><a href="#衬线体（Serif）的起源" class="headerlink" title="衬线体（Serif）的起源"></a>衬线体（Serif）的起源</h2><p>一般认为衬线体起源于古罗马的石刻碑文，爱德华 · 卡提池（Edward Catich）神父的《衬线的起源》（The Origin of the Serif）认为罗马字母最初被雕刻到石碑上之前，要先用方头笔刷写好样子，由于用方头笔刷书写，导致笔画的起始和结尾出现参差的笔触，所以在笔画开始、结束和转角处增加了收尾的动作，也就自然形成了<code>衬线</code>。雕刻匠人参照写好的字样雕刻，就形成了<code>Serif</code>。</p>
<p>而在汉字当中，我们所熟悉的宋体/明体，起源于中国历史上的宋朝和明朝。宋体在笔画交接、竖笔开始和横笔末端的地方，形成特有的三角形结构，即<code>衬线</code>。关于三角形结构的起源，一般认为始于书法运笔时的回锋和顿笔，雕刻匠人因雕刻刀的工具特性，无法制作出书法中的回锋和顿笔，进而简化形成三角形结构。</p>
<p>还有另外一说是，用于制造活字的木纹多为水平方向，因此造成在刻字时横画细，竖画粗；而且为了防止边缘破损，横画在两端也被加粗，进而形成三角形结构。</p>
<p>所以无论是西文的衬线还是汉字的<code>三角形结构</code>，皆来源于书写习惯形成的装饰，进而随时间演变成减缓印刷字体的磨损、提高识别性的功能。</p>
<h2 id="Serif和Sans-Serif比较"><a href="#Serif和Sans-Serif比较" class="headerlink" title="Serif和Sans Serif比较"></a>Serif和Sans Serif比较</h2><ul>
<li><code>Serif</code>的字体容易辨认，因此易读性较高。反之<code>Sans Serif</code>则较醒目，但在行文阅读的情况下，<code>Sans Serif</code>容易造成字母辨认的困扰，常会有来回重读及上下行错乱的情形。</li>
<li><code>Serif</code>强调了字母笔划的开始及结束，因此较易前后连续性的辨识。 </li>
<li><code>Serif</code>强调一个Word，而非单一的字母，反之<code>Sans Serif</code>则强调个别字母。</li>
<li>在小字体的场合，通常<code>Sans Serif</code>比<code>Serif</code>更清晰。</li>
</ul>
<h2 id="适用用途"><a href="#适用用途" class="headerlink" title="适用用途"></a>适用用途</h2><p>通常文章的正文使用的是易读性较佳的<code>Serif</code>字体，长时间阅读下因为会以Word为单位来阅读，较不容易疲倦。而标题、表格则采用较醒目的<code>Sans Serif</code>字体，它需要醒目，但不必长时间盯着这些字来阅读。</p>
<ul>
<li>宣传品、海报等，为了更加醒目，会采用<code>Sans Serif</code>字体。</li>
<li>书籍、报刊杂志等，由于正文有相当篇幅的情形下，则会采用<code>Serif</code>字体来减轻读者阅读上的负担。 </li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://kb.cnblogs.com/page/192018/" target="_blank" rel="noopener external nofollow noreferrer">Serif和Sans-serif字体的区别</a></li>
<li><a href="https://www.zhihu.com/question/24769323/answer/39957127" target="_blank" rel="noopener external nofollow noreferrer">屏幕解析率 (PPI) 越来越高，衬线体是否会成为电子设备的主要界面字体？</a></li>
<li><a href="https://www.jianshu.com/p/07f3bc94f9be" target="_blank" rel="noopener external nofollow noreferrer">衬线（Serif）字体与非衬线（Sans－Serif）字体的区别</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>Word插入矢量图</title>
    <url>/archives/7a65918e.html</url>
    <content><![CDATA[<p>写论文的时候经常需要放上一些仿真、测试的数据图，一般审论文的时候，首先关注的就是图片，因此，图片的质量十分重要。本文主要介绍如何在Word中插入矢量图。</p>
<a id="more"></a>

<h2 id="什么是矢量图？"><a href="#什么是矢量图？" class="headerlink" title="什么是矢量图？"></a>什么是矢量图？</h2><p>矢量图形是计算机图形学中用点、直线或者多边形等基于数学方程的几何图元表示图像。矢量图形与使用像素表示图像的位图不同。</p>
<p>这种绘制图比位图的优越之处有：</p>
<ul>
<li>保存最少的信息，文件大小比位图要小，并且文件大小与物体的大小无关</li>
<li>在图像处理软件中，任意放大矢量图形，不会丢失细节或影响清晰度，<strong>因为矢量图形中保存的是线条和图块的信息，与分辨率无关</strong>。</li>
</ul>
<h2 id="Word插入矢量图"><a href="#Word插入矢量图" class="headerlink" title="Word插入矢量图"></a>Word插入矢量图</h2><p>我一般是用Python进行数据处理、绘图，然后保存成<code>svg</code>格式的矢量图，关键代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line">%config InlineBackend.figure_format = <span class="string">'svg'</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">'xxx.svg'</span>)</span><br></pre></td></tr></table></figure>

<p>然后，最关键的一步，也就是插入到Word中。</p>
<h3 id="方法1-直接插入"><a href="#方法1-直接插入" class="headerlink" title="方法1-直接插入"></a>方法1-直接插入</h3><p>这个取决于Word的版本，从2016开始，Word支持插入<code>svg</code>格式的矢量图，因此我们只需要直接插入即可。</p>
<p>注意：当Word文件另存为pdf时，需要在<strong>PDF选项</strong>中选择<strong>优化图像质量</strong>，不然图片会被转换成位图。</p>
<img src="/archives/7a65918e/%E4%BC%98%E5%8C%96%E5%9B%BE%E5%83%8F%E8%B4%A8%E9%87%8F.png" class="" title="优化图像质量">

<h3 id="方法2-通过PPT转换成emf格式"><a href="#方法2-通过PPT转换成emf格式" class="headerlink" title="方法2-通过PPT转换成emf格式"></a>方法2-通过PPT转换成emf格式</h3><p>我们也可以将<code>svg</code>图片插入到PPT中，然后复制，并按快捷键 <code>Ctrl + Alt + V</code> 来选择性粘贴，粘贴转换为 <strong>图片(增强性图元文件)</strong>，也就是<code>emf</code>格式文件，最后再将<code>emf</code>格式图片复制到Word中。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%BD%A2" target="_blank" rel="noopener external nofollow noreferrer">矢量图形</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Word</tag>
        <tag>矢量图</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT版本更新记录</title>
    <url>/archives/2bd6d82.html</url>
    <content><![CDATA[<p>本博客之前的主题版本是NexT-7.1.2，如今最新的版本已经是7.7.0了，为了能用上最新的特性，前几天对主题进行了升级，也踩了不少坑。本文主要记录升级过程。</p>
<ul>
<li>更新前的版本：Hexo-3.8.0、NexT-7.1.2</li>
<li>更新后的版本：Hexo-4.2.0、NexT-7.7.0</li>
</ul>
<p><strong>说明：本文升级过程中没有修改主题源代码，同时保留了除主页轮播图外基本所有自定义布局、样式</strong>。</p>
<a id="more"></a>

<h2 id="为什么要更新？"><a href="#为什么要更新？" class="headerlink" title="为什么要更新？"></a>为什么要更新？</h2><p>当时选择NexT主题就是看中它的维护者多、用户量大，基本一个月左右的时间就会有一个版本更新，直接跟着官方就可以用到最新的特性。</p>
<p>但由于我之前对NexT主题做了不少自定义修改，这也使得更新主题变得比较麻烦，没有办法通过<code>git pull</code>平滑更新，这也违背了我选择NexT主题的初衷。同时，现在可以通过数据文件（Data File）将配置与主题分离，同时也可以把自定义布局、样式放到数据文件中，不用再修改主题源码，便于后续主题更新。</p>
<p>因此，为了以后可以方便的更新，我准备花点时间把NexT升级一下。</p>
<h2 id="插件更新"><a href="#插件更新" class="headerlink" title="插件更新"></a>插件更新</h2><p>插件更新见：<a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a></p>
<h2 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h2><p>自从NexT-7.3.0开始，官方推荐采用数据文件将配置与主题分离，这样我们可以在不修改主题源码的同时完成选项配置、自定义布局、自定义样式，便于后续NexT版本更新。</p>
<h3 id="next-yml"><a href="#next-yml" class="headerlink" title="next.yml"></a><code>next.yml</code></h3><p>我们可以将所有主题配置放在一个位置（<code>hexo/source/_data/next.yml</code>）。这样就无需编辑主题配置文件（<code>next/_config.yml</code>）。</p>
<p>具体步骤：</p>
<ol>
<li>在 <code>hexo/source/_data</code> 目录中创建 <code>next.yml</code>（如果<code>_data</code>不存在，则创建目录）。</li>
<li>在 <code>next.yml</code> 设置 <code>override</code> 选项为 true。</li>
<li>将<strong>所有 NexT 主题选项</strong>从主题配置文件复制到<code>hexo/source/_data/next.yml</code>中。</li>
</ol>
<p>然后我们只需要根据自己的需求配置<code>next.yml</code>即可。</p>
<ul>
<li>数据文件的介绍详见：<a href="https://tding.top/docs/getting-started/data-files.html">NexT中文文档-快速入门-数据文件</a></li>
</ul>
<h3 id="languages-yml"><a href="#languages-yml" class="headerlink" title="languages.yml"></a><code>languages.yml</code></h3><p>我们原来是通过配置主题下的<code>languages</code>目录中的<code>zh-CN.yml</code>文件来对菜单等进行中文翻译的，现在我们可以通过在<code>hexo/source/_data/</code>下新建数据文件<code>languages.yml</code>，配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zh-CN:</span> </span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">    <span class="attr">top:</span> <span class="string">热榜</span></span><br><span class="line">    <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">    <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">    <span class="attr">links:</span> <span class="string">友情链接</span></span><br><span class="line">    <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">    <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">    <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">    <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br><span class="line">    <span class="attr">movies:</span> <span class="string">观影</span></span><br><span class="line">    <span class="attr">books:</span> <span class="string">阅读</span></span><br><span class="line">    <span class="attr">gallery:</span> <span class="string">画廊</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">reward:</span></span><br><span class="line">    <span class="attr">donate:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-qrcode</span> <span class="string">fa-2x"</span> <span class="string">style="line-height:35px;"&gt;&lt;/i&gt;</span></span><br><span class="line">    <span class="attr">wechatpay:</span> <span class="string">微信支付</span></span><br><span class="line">    <span class="attr">alipay:</span> <span class="string">支付宝</span></span><br><span class="line">    <span class="attr">bitcoin:</span> <span class="string">比特币</span></span><br></pre></td></tr></table></figure>


<h3 id="styles-styl"><a href="#styles-styl" class="headerlink" title="styles.styl"></a><code>styles.styl</code></h3><p>我们只需要把原来的<code>hexo/next/source/css/_custom/_custom.styl</code>中的全部自定义样式放到<code>hexo/source/_data/styles.styl</code>即可。</p>
<p>然后在NexT的配置文件<code>next.yml</code>中取消<code>styles.styl</code>的注释：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line"></span><br><span class="line"><span class="deletion">-  #style: source/_data/styles.styl</span></span><br><span class="line"><span class="addition">+  style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>


<h3 id="variables-styl"><a href="#variables-styl" class="headerlink" title="variables.styl"></a><code>variables.styl</code></h3><h4 id="圆角设置"><a href="#圆角设置" class="headerlink" title="圆角设置"></a>圆角设置</h4><p>在自定义样式文件<code>variables.styl</code>中添加：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">// 圆角设置</span><br><span class="line">$border-radius-inner     = 20px 20px 20px 20px;</span><br><span class="line">$border-radius           = 20px;</span><br></pre></td></tr></table></figure>

<p>然后在NexT的配置文件<code>next.yml</code>中取消<code>variables.styl</code>的注释：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line"></span><br><span class="line"><span class="deletion">-  #variables: source/_data/variables.styl</span></span><br><span class="line"><span class="addition">+  variables: source/_data/variables.styl</span></span><br></pre></td></tr></table></figure>

<h4 id="中文字体设置"><a href="#中文字体设置" class="headerlink" title="中文字体设置"></a>中文字体设置</h4><p>首先修改主题配置文件<code>next.yml</code>：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line"><span class="deletion">- enable: false</span></span><br><span class="line"><span class="addition">+ enable: true</span></span><br><span class="line"></span><br><span class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default).</span><br><span class="line"><span class="deletion">- host:</span></span><br><span class="line"><span class="addition">+ host: https://fonts.loli.net</span></span><br><span class="line"></span><br><span class="line">  # Font options:</span><br><span class="line">  # `external: true` will load this font family from `host` above.</span><br><span class="line">  # `family: Times New Roman`. Without any quotes.</span><br><span class="line">  # `size: xx`. Use `px` as unit.</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements in &lt;body&gt;.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line"><span class="deletion">-   family:</span></span><br><span class="line"><span class="addition">+   family: Noto Serif SC</span></span><br><span class="line">    size:</span><br></pre></td></tr></table></figure>

<p>修改配置文件<code>variables.styl</code>，增加如下代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">// 中文字体</span><br><span class="line">$font-family-monospace    = consolas, Menlo, monospace, $font-family-base;</span><br><span class="line">$font-family-monospace    = get_font_family('codes'), consolas, Menlo, monospace, $font-family-base if get_font_family('codes');</span><br></pre></td></tr></table></figure>


<h3 id="body-end-swig"><a href="#body-end-swig" class="headerlink" title="body-end.swig"></a><code>body-end.swig</code></h3><h4 id="打字特效、鼠标点击特效"><a href="#打字特效、鼠标点击特效" class="headerlink" title="打字特效、鼠标点击特效"></a>打字特效、鼠标点击特效</h4><p>之前版本：<a href="https://tding.top/archives/58cff12b.html">Hexo-NexT 添加打字特效、鼠标点击特效</a>中，以下代码是放在<code>hexo/next/_layout/_custom/custom.swig</code>文件中的，现在这部分代码需要放到<code>hexo/source/_data/body-end.swig</code>文件中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect == "fireworks" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/fireworks.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "explosion" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"fireworks"</span> <span class="attr">style</span>=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/explosion.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "love" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/love.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "text" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/text.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 打字特效 #&#125;</span><br><span class="line">&#123;% if theme.typing_effect %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/activate-power-mode.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    POWERMODE.colorful = </span><span class="template-variable">&#123;&#123; theme.typing_effect.colorful &#125;&#125;</span><span class="xml">;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    POWERMODE.shake = </span><span class="template-variable">&#123;&#123; theme.typing_effect.shake &#125;&#125;</span><span class="xml">;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.addEventListener(<span class="string">'input'</span>, POWERMODE);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后在NexT的配置文件<code>next.yml</code>中取消<code>body-end.swig</code>的注释：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line"></span><br><span class="line"><span class="deletion">-  #bodyEnd: source/_data/body-end.swig</span></span><br><span class="line"><span class="addition">+  bodyEnd: source/_data/body-end.swig</span></span><br></pre></td></tr></table></figure>

<p>然后我们在<code>next.yml</code>中增加如下配置项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鼠标点击特效</span></span><br><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love | text</span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打字特效</span></span><br><span class="line"><span class="comment"># typing effect</span></span><br><span class="line"><span class="attr">typing_effect:</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span>  <span class="comment"># 礼花特效</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">false</span>    <span class="comment"># 震动特效</span></span><br></pre></td></tr></table></figure>

<p>注意：上面所有特效的JS代码文件都放在站点的source目录下（即<code>hexo/source/js/</code>）而不是主题目录下，如果没有js目录，则新建一个。</p>
<h4 id="友链添加"><a href="#友链添加" class="headerlink" title="友链添加"></a>友链添加</h4><ul>
<li>详见：<a href="https://tding.top/archives/73ce4e7.html">Hexo-NexT 新增友链</a></li>
</ul>
<p>从第一种友链方式改用第二种友链方式，因为第二种瀑布流友链样式是不用修改NexT主题源文件的。</p>
<h4 id="代码块折叠"><a href="#代码块折叠" class="headerlink" title="代码块折叠"></a>代码块折叠</h4><ul>
<li>NexT-7.1.2下的配置方法见：<a href="https://tding.top/archives/bd4d996d.html">Hexo-NexT 代码块折叠</a></li>
</ul>
<p>而在当前的NexT-7.7.0主题版本下，为了实现代码块折叠，做出如下更改：</p>
<ol>
<li><p>新建内建标签fold：我们可以在主题的根目录下新建<code>scripts/tags</code>文件夹（即<code>hexo/scripts/tags/</code>），然后把原本放在<code>hexo/next/scripts/custom/fold_tag.js</code>路径下的文件放在其中。</p>
</li>
<li><p>添加折叠代码块js：我们把原本放在<code>hexo/next/source/custom/fold_action.js</code>路径下的这个文件放到<code>hexo/source/js</code>下。</p>
</li>
<li><p>最后我们在<code>hexo/source/_data/body-end.swig</code>文件中添加如下代码：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# 代码压缩 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/fold_action.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>代码块折叠的实际效果可以看：<a href="https://tding.top/archives/384ceeb9.html">24 点解题技巧</a></li>
</ul>
<h3 id="sidebar-swig"><a href="#sidebar-swig" class="headerlink" title="sidebar.swig"></a><code>sidebar.swig</code></h3><h4 id="近期文章"><a href="#近期文章" class="headerlink" title="近期文章"></a>近期文章</h4><p>在之前的版本中（NexT-7.1.2），我们只需要将以下代码贴在<code>next/layout/_macro/sidebar.swig</code>中的<code>if theme.links</code>对应的<code>endif</code>后面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.recent_posts %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll motion-element &#123;&#123; "</span><span class="attr">links-of-blogroll-</span>" + <span class="attr">theme.recent_posts_layout</span>  &#125;&#125;"&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- modify icon to fire by szw --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-list"</span>&gt;</span></span><br><span class="line">        &#123;% set posts = site.posts.sort('-date') %&#125;</span><br><span class="line">        &#123;% for post in posts.slice('0', '5') %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>为了配置方便，在主题的<code>_config.yml</code>中添加了几个变量，如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">recent_posts_title:</span> <span class="string">近期文章</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>现在我们把上面的代码放到<code>hexo/source/_data/sidebar.swig</code>文件中，并且做以下更改：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.recent_posts %&#125;</span><br><span class="line">    &lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.recent_posts_layout  &#125;&#125;"&gt;</span><br><span class="line">      &lt;div class="links-of-blogroll-title"&gt;</span><br><span class="line">        &lt;!-- modify icon to fire by szw --&gt;</span><br><span class="line">        &lt;i class="fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;" aria-hidden="true"&gt;&lt;/i&gt;</span><br><span class="line">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;ul class="links-of-blogroll-list"&gt;</span><br><span class="line"><span class="deletion">-        &#123;% set posts = site.posts.sort('-date') %&#125;</span></span><br><span class="line"><span class="addition">+        &#123;% set posts = site.posts.sort('-date').toArray() %&#125;</span></span><br><span class="line">        &#123;% for post in posts.slice('0', '5') %&#125;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;" title="&#123;&#123; post.title &#125;&#125;" target="_blank"&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>这是因为 NexT 已经更换 Nunjucks 作为模板引擎。</p>
<p>然后在NexT的配置文件<code>next.yml</code>中取消<code>sidebar.swig</code>的注释：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line"></span><br><span class="line"><span class="deletion">-  #sidebar: source/_data/sidebar.swig</span></span><br><span class="line"><span class="addition">+  sidebar: source/_data/sidebar.swig</span></span><br></pre></td></tr></table></figure>


<h4 id="粒子时钟特效"><a href="#粒子时钟特效" class="headerlink" title="粒子时钟特效"></a>粒子时钟特效</h4><p>之前版本设置方法见：<a href="https://tding.top/archives/dd68b70.html">Hexo-NexT 增加 canvas 粒子时钟</a></p>
<p>现在我们只需要把粒子时钟的js代码直接放入到<code>hexo/source/_data/sidebar.swig</code>文件即可。</p>
<h3 id="post-meta-swig"><a href="#post-meta-swig" class="headerlink" title="post-meta.swig"></a><code>post-meta.swig</code></h3><h4 id="置顶文章标志"><a href="#置顶文章标志" class="headerlink" title="置顶文章标志"></a>置顶文章标志</h4><p>首先我们需要安装<code>hexo-generator-index-pin-top</code>这个插件，具体过程详见：<a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a>。</p>
<p>然后将以下代码放入<code>hexo/source/_data/post-meta.swig</code>文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后在NexT的配置文件<code>next.yml</code>中取消<code>post-meta.swig</code>的注释：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line"></span><br><span class="line"><span class="deletion">-  #post-meta: source/_data/post-meta.swig</span></span><br><span class="line"><span class="addition">+  post-meta: source/_data/post-meta.swig</span></span><br></pre></td></tr></table></figure>


<h3 id="footer-swig"><a href="#footer-swig" class="headerlink" title="footer.swig"></a><code>footer.swig</code></h3><h4 id="简体-繁体一键切换"><a href="#简体-繁体一键切换" class="headerlink" title="简体/繁体一键切换"></a>简体/繁体一键切换</h4><p>之前版本设置方法见：<a href="https://tding.top/archives/3cdfe265.html">Hexo-NexT 支持简体繁体一键切换</a></p>
<p>现在我们只需要把<strong>显示简繁转换按钮</strong>的swig代码直接放入到<code>hexo/source/_data/footer.swig</code>文件即可。</p>
<p>注意：简体/繁体一键切换的JS代码文件放在站点的source目录下（即<code>hexo/source/js/</code>）而不是主题目录下，如果没有js目录，则新建一个。</p>
<p>至此，主题升级完成。</p>
<h2 id="新启用的功能"><a href="#新启用的功能" class="headerlink" title="新启用的功能"></a>新启用的功能</h2><ul>
<li>NexT主题支持多评论系统，现在我同时开启了Valine、Disqus两个评论系统</li>
<li>NexT主题增加了Mac风格代码块样式，非常漂亮，果断切换</li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT新增友链</title>
    <url>/archives/73ce4e7.html</url>
    <content><![CDATA[<p>NexT主题自带的友链模块放在侧边栏下面，视觉上比较臃肿。</p>
<p>本文介绍两种修改友链样式的方法以及具体的步骤。其中第一种方法需要修改 NexT 主题文件，第二种则不需要。</p>
<ul>
<li>本博客的友链见：<a href="https://tding.top/about/links.html">友链</a>。</li>
</ul>
<a id="more"></a>

<h2 id="第一种友链样式"><a href="#第一种友链样式" class="headerlink" title="第一种友链样式"></a>第一种友链样式</h2><ul>
<li>本博客在NexT-7.1.2版本时采用的样式。</li>
</ul>
<h3 id="新建links-swig文件"><a href="#新建links-swig文件" class="headerlink" title="新建links.swig文件"></a>新建<code>links.swig</code>文件</h3><p>在<code>themes/Next/layout/</code>新建一个文件<code>links.swig</code>，添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &#123;######################&#125;</span><br><span class="line">  &#123;### LINKS BLOCK ###&#125;</span><br><span class="line">  &#123;######################&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"links"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.links-content</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">margin-top</span><span class="selector-pseudo">:1rem</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.link-navigation</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">                content: " ";</span><br><span class="line">                display: block;</span><br><span class="line">                clear: both;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.card</span> &#123;</span></span><br><span class="line">                width: 300px;</span><br><span class="line">                font-size: 1rem;</span><br><span class="line">                padding: 10px 20px;</span><br><span class="line">                border-radius: 4px;</span><br><span class="line"><span class="css">                <span class="selector-tag">transition-duration</span>: 0<span class="selector-class">.15s</span>;</span></span><br><span class="line">                margin-bottom: 1rem;</span><br><span class="line"><span class="css">                <span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child(odd)</span> &#123;</span></span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child(even)</span> &#123;</span></span><br><span class="line">                float: right;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.1</span>);</span></span><br><span class="line"><span class="css">                <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.12</span>), 0 0 6<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.04</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">border</span><span class="selector-pseudo">:none</span>; </span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span> <span class="selector-class">.ava</span> &#123;</span></span><br><span class="line">                width: 3rem!important;</span><br><span class="line">                height: 3rem!important;</span><br><span class="line"><span class="css">                <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>!<span class="selector-tag">important</span>;</span></span><br><span class="line">                margin-right: 1em!important;</span><br><span class="line"><span class="css">                <span class="selector-tag">border-radius</span><span class="selector-pseudo">:4px</span>;</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> &#123;</span></span><br><span class="line">                font-style: italic;</span><br><span class="line">                overflow: hidden;</span><br><span class="line">                width: 236px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">                font-style: normal;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#2bbc8a</span>;</span></span><br><span class="line">                font-weight: bold;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#d480aa</span>;</span></span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">font-style</span><span class="selector-pseudo">:normal</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>:<span class="selector-id">#a3a3a3</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">font-size</span><span class="selector-pseudo">:14px</span>;</span></span><br><span class="line">                min-width: 0;</span><br><span class="line">                text-overflow: ellipsis;</span><br><span class="line">                overflow: hidden;</span><br><span class="line">                white-space: nowrap;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link-navigation"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                &#123;% for link in theme.mylinks %&#125;</span><br><span class="line">                </span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"ava"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; link.avatar &#125;&#125;"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-header"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; link.site &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>@ &#123;&#123; link.nickname &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>&#123;&#123; link.info &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;&#123; page.content &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  &#123;##########################&#125;</span><br><span class="line">  &#123;### END LINKS BLOCK ###&#125;</span><br><span class="line">  &#123;##########################&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改page-swig文件"><a href="#修改page-swig文件" class="headerlink" title="修改page.swig文件"></a>修改<code>page.swig</code>文件</h3><p>然后我们修改<code>themes/next/layout/page.swig</code>，在下面这个位置添加两行代码：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  #&#125;&#123;% if page.type <span class="comment">=== 'categories' and not page.title %&#125;&#123;#</span></span><br><span class="line">    #&#125;&#123;&#123; __('title.category') + page_title_suffix &#125;&#125;&#123;#</span><br><span class="line">  #&#125;&#123;% elif page.type <span class="comment">=== 'tags' and not page.title %&#125;&#123;#</span></span><br><span class="line">    #&#125;&#123;&#123; __('title.tag') + page_title_suffix &#125;&#125;&#123;#</span><br><span class="line">  #&#125;&#123;% elif page.type <span class="comment">=== 'schedule' and not page.title %&#125;&#123;#</span></span><br><span class="line">    #&#125;&#123;&#123; __('title.schedule') + page_title_suffix &#125;&#125;&#123;#</span><br><span class="line"><span class="addition">+ #&#125;&#123;% elif page.type === 'links' and not page.title %&#125;&#123;#</span></span><br><span class="line"><span class="addition">+   #&#125;&#123;&#123; __('title.links') + page_title_suffix &#125;&#125;&#123;#</span></span><br><span class="line">  #&#125;&#123;% else %&#125;&#123;#</span><br><span class="line">    #&#125;&#123;&#123; page.title + page_title_suffix &#125;&#125;&#123;#</span><br><span class="line">  #&#125;&#123;% endif %&#125;&#123;#</span><br></pre></td></tr></table></figure>

<p>然后在如下位置添加两行代码：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">        &#123;% elif page.type <span class="comment">=== 'schedule' %&#125;</span></span><br><span class="line">          &#123;% include 'schedule.swig' %&#125;</span><br><span class="line"><span class="addition">+       &#123;% elif page.type === 'links' %&#125;</span></span><br><span class="line"><span class="addition">+         &#123;% include 'links.swig' %&#125;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          &#123;&#123; page.content &#125;&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改主题配置文件-config-yml"><a href="#修改主题配置文件-config-yml" class="headerlink" title="修改主题配置文件_config.yml"></a>修改主题配置文件<code>_config.yml</code></h3><p>在主题配置文件<code>themes/_config.yml</code>末尾处添加友链：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mylinks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">nickname:</span> <span class="string">小丁的个人博客</span>                           <span class="comment">#友链名称</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://tding.top/images/avatar.webp</span>       <span class="comment">#友链头像</span></span><br><span class="line">    <span class="attr">site:</span> <span class="string">https://tding.top</span>                            <span class="comment">#友链地址</span></span><br><span class="line">    <span class="attr">info:</span> <span class="string">世间所有的相遇，都是久别重逢</span>                   <span class="comment">#友链说明</span></span><br></pre></td></tr></table></figure>


<h2 id="第二种友链样式——瀑布流友链实现"><a href="#第二种友链样式——瀑布流友链实现" class="headerlink" title="第二种友链样式——瀑布流友链实现"></a>第二种友链样式——瀑布流友链实现</h2><p>基本原理：新建md页面，渲染出一个html页面，其中包含一个class是<code>.link-navigation</code>的网页元素。同时加载<code>links.js</code>，下载json文件，渲染到这个网页元素中。</p>
<ul>
<li>本博客当前采用的样式。</li>
</ul>
<h3 id="新建links页面"><a href="#新建links页面" class="headerlink" title="新建links页面"></a>新建links页面</h3><p>新建 links 页面，输入放置友链的 html 元素：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page links</span><br></pre></td></tr></table></figure>

<p>这样会在 <code>/source/</code> 下创建 <code>links/index.md</code>。在文档的 <code>front matter</code> 添加 <code>type: links</code>，编辑好自己需要的友链页面内容，然后输入放置友链的 html 元素。示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友链</span><br><span class="line">type: links</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>.links-content&#123;margin-top:1rem&#125;.link-navigation::after&#123;content:" ";display:block;clear:both&#125;.card&#123;width:130px;font-size:1rem;padding:0;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:block;float:left;box-shadow:0 2px 6px 0 rgba(0,0,0,.12);background:#f5f5f5&#125;.card&#123;margin-left:16px&#125;@media(max-width:567px)&#123;.card&#123;margin-left:16px;width:calc((100% - 16px)/2)&#125;.card:nth-child(2n+1)&#123;margin-left:0&#125;.card:not(:nth-child(2n+1))&#123;margin-left:16px&#125;&#125;@media(min-width:567px)&#123;.card&#123;margin-left:16px;width:calc((100% - 32px)/3)&#125;.card:nth-child(3n+1)&#123;margin-left:0&#125;.card:not(:nth-child(3n+1))&#123;margin-left:16px&#125;&#125;@media(min-width:768px)&#123;.card&#123;margin-left:16px;width:calc((100% - 48px)/4)&#125;.card:nth-child(4n+1)&#123;margin-left:0&#125;.card:not(:nth-child(4n+1))&#123;margin-left:16px&#125;&#125;@media(min-width:1200px)&#123;.card&#123;margin-left:16px;width:calc((100% - 64px)/5)&#125;.card:nth-child(5n+1)&#123;margin-left:0&#125;.card:not(:nth-child(5n+1))&#123;margin-left:16px&#125;&#125;.card:hover&#123;transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)&#125;.card .thumb&#123;width:100%;height:0;padding-bottom:100%;background-size:100% 100%!important&#125;.posts-expand .post-body img&#123;margin:0;padding:0;border:0&#125;.card .card-header&#123;display:block;text-align:center;padding:1rem .25rem;font-weight:500;color:#333;white-space:normal&#125;.card .card-header a&#123;font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none;border:0&#125;.card .card-header a:hover&#123;color:#d480aa;text-decoration:none;border:0&#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-content"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link-navigation"</span> <span class="attr">id</span>=<span class="string">"links1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"with-love"</span> <span class="attr">id</span>=<span class="string">"animate1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span>留言添加友链<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"with-love"</span> <span class="attr">id</span>=<span class="string">"animate2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line"></span><br><span class="line">## 友链格式</span><br><span class="line"></span><br><span class="line">- 网站名称：小丁的个人博客</span><br><span class="line">- 网站地址：[https://tding.top](https://tding.top)</span><br><span class="line">- 网站描述：世间所有的相遇，都是久别重逢</span><br><span class="line">- 网站Logo/头像：[https://tding.top/images/avatar.webp](https://tding.top/images/avatar.webp)</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="侧边栏添加友链页面链接"><a href="#侧边栏添加友链页面链接" class="headerlink" title="侧边栏添加友链页面链接"></a>侧边栏添加友链页面链接</h3><p>主题配置文件<code>_config.yml</code>中添加：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  tags: /tags/ || tags  </span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line"><span class="addition">+  links: /links || link</span></span><br></pre></td></tr></table></figure>

<h3 id="添加友链的-json-文件"><a href="#添加友链的-json-文件" class="headerlink" title="添加友链的 json 文件"></a>添加友链的 json 文件</h3><p>在页面目录 <code>/source/links/</code> 中添加 <code>linklist.json</code>，示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">		<span class="attr">"nickname"</span>: <span class="string">"三水非冰博客"</span>,</span><br><span class="line">		<span class="attr">"avatar"</span>: <span class="string">"https://www.sanshuifeibing.com/usr/images/avatar2.jpg"</span>,</span><br><span class="line">		<span class="attr">"site"</span>: <span class="string">"https://www.sanshuifeibing.com"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">"nickname"</span>: <span class="string">"北宸"</span>,</span><br><span class="line">		<span class="attr">"avatar"</span>: <span class="string">"https://leafjame.github.io/images/beichen.png"</span>,</span><br><span class="line">		<span class="attr">"site"</span>: <span class="string">"https://leafjame.github.io"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">"nickname"</span>: <span class="string">"千灵夙赋"</span>,</span><br><span class="line">		<span class="attr">"avatar"</span>: <span class="string">"https://qianling.pw/images/avatar.png"</span>,</span><br><span class="line">		<span class="attr">"site"</span>: <span class="string">"https://qianling.pw/"</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="加载-link-js"><a href="#加载-link-js" class="headerlink" title="加载 link.js"></a>加载 link.js</h3><p>在自定义文件<code>body-end.swig</code>中添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# 友链设置 #&#125;</span><br><span class="line">&#123;% if page.type === 'links' %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/link.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><code>link.js</code>内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">link = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">      <span class="comment">//这里设置的是刚才的 linklist.json 文件路径</span></span><br><span class="line">      $.getJSON(<span class="string">"/links/linklist.json"</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">          that.render(data);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> html, nickname, avatar, site, li = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">          nickname = data[i].nickname;</span><br><span class="line">          avatar = data[i].avatar;</span><br><span class="line">          site = data[i].site;</span><br><span class="line">          li += <span class="string">'&lt;div class="card"&gt;'</span> + <span class="string">'&lt;a href="'</span> + site + <span class="string">'" target="_blank"&gt;'</span> + <span class="string">'&lt;div class="thumb" style="background: url( '</span> + avatar + <span class="string">');"&gt;'</span> + <span class="string">'&lt;/div&gt;'</span> + <span class="string">'&lt;/a&gt;'</span> + <span class="string">'&lt;div class="card-header"&gt;'</span> + <span class="string">'&lt;div&gt;&lt;a href="'</span> + site + <span class="string">'" target="_blank"&gt;'</span> + nickname + <span class="string">'&lt;/a&gt;&lt;/div&gt;'</span> + <span class="string">'&lt;/div&gt;'</span> + <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      $(<span class="string">".link-navigation"</span>).append(li);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">link.init();</span><br></pre></td></tr></table></figure>

<h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><ol>
<li>浏览器F12查看页面源码，是否有一个class是<code>.link-navigation</code>的网页元素。</li>
<li>查看<code>link.js</code>是否正常加载了，json文件是否正常加载了。</li>
</ol>
<p>如果加载js文件的<code>/source/_data/body-end.swig</code>不起作用，我们也可以把<code>link.js</code>内容放到<code>/source/links/index.md</code>中，效果是一样的。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.sanshuifeibing.cn/posts/16e3649f.html" target="_blank" rel="noopener external nofollow noreferrer">Hexo修改友链样式</a></li>
<li><a href="https://blog.maplesugar.space/hexo/hexo-next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2/" target="_blank" rel="noopener external nofollow noreferrer">Next 主题自定义友链页面</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>本博客当前使用的插件总结</title>
    <url>/archives/567debe0.html</url>
    <content><![CDATA[<p>这几天将博客主题从NexT-7.1.2升级到了7.7.0，在重新安装插件的时候顺便记录了本博客当前使用的插件，便于后续修改：</p>
<table>
<thead>
<tr>
<th>插件</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td><code>babel-runtime</code></td>
<td>6.26.0</td>
</tr>
<tr>
<td><code>hexo</code></td>
<td>4.2.0</td>
</tr>
<tr>
<td><code>hexo-abbrlink</code></td>
<td>2.0.5</td>
</tr>
<tr>
<td><code>hexo-baidu-url-submit</code></td>
<td>0.0.6</td>
</tr>
<tr>
<td><code>hexo-blog-encrypt</code></td>
<td>3.0.9</td>
</tr>
<tr>
<td><code>hexo-cake-moon-menu</code></td>
<td>1.1.3</td>
</tr>
<tr>
<td><code>hexo-deployer-git</code></td>
<td>2.1.0</td>
</tr>
<tr>
<td><code>hexo-douban</code></td>
<td>1.1.3</td>
</tr>
<tr>
<td><code>hexo-filter-nofollow</code></td>
<td>2.0.2</td>
</tr>
<tr>
<td><code>hexo-generator-archive</code></td>
<td>1.0.0</td>
</tr>
<tr>
<td><code>hexo-generator-baidu-sitemap</code></td>
<td>0.1.6</td>
</tr>
<tr>
<td><code>hexo-generator-category</code></td>
<td>1.0.0</td>
</tr>
<tr>
<td><code>hexo-generator-feed</code></td>
<td>2.2.0</td>
</tr>
<tr>
<td><code>hexo-generator-index-pin-top</code></td>
<td>0.2.2</td>
</tr>
<tr>
<td><code>hexo-generator-searchdb</code></td>
<td>1.2.0</td>
</tr>
<tr>
<td><code>hexo-generator-sitemap</code></td>
<td>2.0.0</td>
</tr>
<tr>
<td><code>hexo-generator-tag</code></td>
<td>1.0.0</td>
</tr>
<tr>
<td><code>hexo-leancloud-counter-security</code></td>
<td>1.4.1</td>
</tr>
<tr>
<td><code>hexo-neat</code></td>
<td>1.0.4</td>
</tr>
<tr>
<td><code>hexo-related-popular-posts</code></td>
<td>4.0.0</td>
</tr>
<tr>
<td><code>hexo-renderer-ejs</code></td>
<td>1.0.0</td>
</tr>
<tr>
<td><code>hexo-renderer-marked</code></td>
<td>2.0.0</td>
</tr>
<tr>
<td><code>hexo-renderer-stylus</code></td>
<td>1.1.0</td>
</tr>
<tr>
<td><code>hexo-server</code></td>
<td>1.0.0</td>
</tr>
<tr>
<td><code>hexo-symbols-count-time</code></td>
<td>0.7.0</td>
</tr>
<tr>
<td><code>hexo-tag-echarts4</code></td>
<td>1.0.1</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="Hexo一键部署插件"><a href="#Hexo一键部署插件" class="headerlink" title="Hexo一键部署插件"></a>Hexo一键部署插件</h2><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener external nofollow noreferrer">hexo-deployer-git</a></li>
</ul>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后修改站点配置文件<code>_config.yml</code>中的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:dta0502/dta0502.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>


<h2 id="Hexo文章永久链接插件"><a href="#Hexo文章永久链接插件" class="headerlink" title="Hexo文章永久链接插件"></a>Hexo文章永久链接插件</h2><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener external nofollow noreferrer">hexo-abbrlink</a></li>
</ul>
<h3 id="安装配置-1"><a href="#安装配置-1" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>然后我们可以在站点配置文件<code>_config.yml</code>中修改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://tding.top/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure>


<h2 id="Hexo推荐文章插件"><a href="#Hexo推荐文章插件" class="headerlink" title="Hexo推荐文章插件"></a>Hexo推荐文章插件</h2><p>这个可以帮助我们根据标签推荐相关文章，原版插件的使用要求编辑主题文件的，但是 NexT 主题集成了这个插件的配置，因此配置起来非常方便。</p>
<h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="noopener external nofollow noreferrer">hexo-related-popular-posts</a></li>
</ul>
<h3 id="安装配置-2"><a href="#安装配置-2" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>

<p>我们只需要在主题配置文件<code>_config.yml</code>中修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">推荐文章</span> <span class="comment"># Custom header, leave empty to use the default one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">PPMixingRate:</span> <span class="number">0.25</span></span><br><span class="line">    <span class="attr">isDate:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">isImage:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">isExcerpt:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


<h2 id="Hexo豆瓣读书、豆瓣电影插件"><a href="#Hexo豆瓣读书、豆瓣电影插件" class="headerlink" title="Hexo豆瓣读书、豆瓣电影插件"></a>Hexo豆瓣读书、豆瓣电影插件</h2><h3 id="安装配置-3"><a href="#安装配置-3" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure>

<ul>
<li>具体配置教程见：<a href="https://tding.top/archives/c7ba3a41.html">Hexo 加入豆瓣读书页面</a></li>
</ul>
<h2 id="Hexo站点地图sitemap生成"><a href="#Hexo站点地图sitemap生成" class="headerlink" title="Hexo站点地图sitemap生成"></a>Hexo站点地图sitemap生成</h2><h3 id="通用站点地图"><a href="#通用站点地图" class="headerlink" title="通用站点地图"></a>通用站点地图</h3><ul>
<li>地址：<a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener external nofollow noreferrer">hexo-generator-sitemap</a></li>
</ul>
<p>安装配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>然后我们需要在Hexo站点配置文件<code>_config.yml</code>中加入sitemap插件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通用站点地图</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>

<h3 id="百度站点地图"><a href="#百度站点地图" class="headerlink" title="百度站点地图"></a>百度站点地图</h3><ul>
<li>地址：<a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="noopener external nofollow noreferrer">Sitemap generator</a></li>
</ul>
<p>安装配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<p>具体配置类似通用站点地图，当然也可以看官方提供的教程，下面是一个简单的配置，我们在Hexo站点配置文件<code>_config.yml</code>中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 百度站点地图</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>


<h2 id="Hexo百度主动推送"><a href="#Hexo百度主动推送" class="headerlink" title="Hexo百度主动推送"></a>Hexo百度主动推送</h2><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener external nofollow noreferrer">Hexo Baidu URL Submit</a></li>
</ul>
<h3 id="安装配置-4"><a href="#安装配置-4" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件<code>_config.yml</code>中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">5</span> 				     <span class="comment">## 提交最新的1个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">tding.top</span> 	     <span class="comment">## 百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> 	 <span class="comment">## 准入秘钥</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> 		 <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>


<h2 id="Hexo字数和阅读时间统计插件"><a href="#Hexo字数和阅读时间统计插件" class="headerlink" title="Hexo字数和阅读时间统计插件"></a>Hexo字数和阅读时间统计插件</h2><h3 id="地址-4"><a href="#地址-4" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener external nofollow noreferrer">hexo-symbols-count-time</a></li>
</ul>
<h3 id="安装配置-5"><a href="#安装配置-5" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件<code>_config.yml</code>中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>然后由于此插件集成在NexT中，然后修改主题配置文件<code>_config.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure>


<h2 id="Hexo-RSS生成插件"><a href="#Hexo-RSS生成插件" class="headerlink" title="Hexo RSS生成插件"></a>Hexo RSS生成插件</h2><h3 id="地址-5"><a href="#地址-5" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener external nofollow noreferrer">hexo-generator-feed</a></li>
</ul>
<h3 id="安装配置-6"><a href="#安装配置-6" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件<code>_config.yml</code>中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure>


<h2 id="Hexo本地搜索功能"><a href="#Hexo本地搜索功能" class="headerlink" title="Hexo本地搜索功能"></a>Hexo本地搜索功能</h2><h3 id="本地搜索的原理"><a href="#本地搜索的原理" class="headerlink" title="本地搜索的原理"></a>本地搜索的原理</h3><p>对于动态网站来说，可以通过php实现。但是，Hexo博客是静态网站，用不了php。</p>
<p>NexT主题已经实现这个功能，它用了Hexo的拓展包 <code>hexo-generator-searchdb</code>，预先生成了一个文本库 <code>search.xml</code>，然后传到了网站里面。在本地搜索的时候，NexT直接用javascript调用了这个文件，从而实现了静态网站的本地搜索。</p>
<h3 id="插件地址"><a href="#插件地址" class="headerlink" title="插件地址"></a>插件地址</h3><ul>
<li><a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener external nofollow noreferrer">hexo-generator-searchdb</a></li>
</ul>
<h3 id="安装配置-7"><a href="#安装配置-7" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>然后我们修改站点配置<code>_config.yml</code>文件，添加如下内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<ul>
<li>path：索引文件的路径，相对于站点根目录</li>
<li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li>
<li>limit：限制搜索的条目数</li>
</ul>
<p>然后修改主题配置文件<code>_config.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


<h2 id="Hexo文章置顶插件"><a href="#Hexo文章置顶插件" class="headerlink" title="Hexo文章置顶插件"></a>Hexo文章置顶插件</h2><h3 id="地址-6"><a href="#地址-6" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener external nofollow noreferrer">hexo-generator-index-pin-top</a></li>
</ul>
<h3 id="安装配置-8"><a href="#安装配置-8" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code> 或者<code>top: 任意数字</code>，比如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">TMDb电影数据分析</span></span><br><span class="line"><span class="attr">declare:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">数据分析</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">数据分析</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">实战</span></span><br><span class="line"><span class="attr">abbrlink:</span> <span class="string">7e380af2</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-11</span><span class="number">-23</span> <span class="number">13</span><span class="string">:20:03</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">100</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：top中数字越大，文章越靠前</strong>。</p>
<h3 id="设置置顶图标"><a href="#设置置顶图标" class="headerlink" title="设置置顶图标"></a>设置置顶图标</h3><p>打开<code>/themes/next/layout/_macro/</code> 目录下的<code>post.swig</code>文件，在<code>&lt;div class=&quot;post-meta&quot;&gt;</code>的第一个<code>&lt;span&gt;</code>标签下，插入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;font color&#x3D;7D26CD&gt;置顶&lt;&#x2F;font&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Hexo文章加密插件"><a href="#Hexo文章加密插件" class="headerlink" title="Hexo文章加密插件"></a>Hexo文章加密插件</h2><h3 id="地址-7"><a href="#地址-7" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener external nofollow noreferrer">hexo-blog-encrypt</a></li>
</ul>
<h3 id="安装配置-9"><a href="#安装配置-9" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>

<h4 id="快速使用："><a href="#快速使用：" class="headerlink" title="快速使用："></a>快速使用：</h4><p>我们需要在文章开头添加：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line">title: 射频微波基础知识（二）</span><br><span class="line">declare: true</span><br><span class="line">toc: true</span><br><span class="line">tags:</span><br><span class="line">  - 射频电路</span><br><span class="line">categories:</span><br><span class="line">  - RF</span><br><span class="line">  - 射频电路</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="addition">+password: </span></span><br><span class="line"><span class="addition">+abstract: 有东西被加密了，请输入密码查看</span></span><br><span class="line"><span class="addition">+message: 请输入密码</span></span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure>

<h4 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h4><p>详见GitHub说明文档。</p>
<h2 id="Hexo减少出站链接"><a href="#Hexo减少出站链接" class="headerlink" title="Hexo减少出站链接"></a>Hexo减少出站链接</h2><p>减少出站链接能够有效防止权重分散，Hexo 有很方便的自动为出站链接添加 <code>nofollow</code> 的插件。</p>
<h3 id="地址-8"><a href="#地址-8" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://blog.skk.moe/post/hexo-filter-nofollow-joined-hexo-official-plugin/" target="_blank" rel="noopener external nofollow noreferrer">hexo-filter-nofollow</a></li>
</ul>
<h3 id="安装配置-10"><a href="#安装配置-10" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure>

<p>再在站点的<code>_config.yml</code> 中添加配置，将 <code>nofollow</code> 设置为 <code>true</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'exclude1.com'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'exclude2.com'</span></span><br></pre></td></tr></table></figure>

<p>这样，例外的链接将不会被加上 <code>nofollow</code> 属性。</p>
<h2 id="Hexo页面静态资源压缩插件"><a href="#Hexo页面静态资源压缩插件" class="headerlink" title="Hexo页面静态资源压缩插件"></a>Hexo页面静态资源压缩插件</h2><p>我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说是没有用的，甚至还会降低渲染页面的速度。同时，由于Markdown转成html的bug，会导致页面存在大量的空白，我们可以通过查看页面源代码发现这些大量的空白符，这也会造成页面渲染的性能问题。</p>
<p>因此，我们需要对页面的静态资源进行压缩，包括css、js和html等文件。</p>
<p>我们可以使用<code>hexo-neat</code>插件进行压缩。<code>hexo-neat</code>配置简单，无需额外命令，我们只需使用原本的调试、部署命令就可以自动完成静态资源的压缩。</p>
<h3 id="地址-9"><a href="#地址-9" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/rozbo/hexo-neat" target="_blank" rel="noopener external nofollow noreferrer">hexo-neat</a></li>
</ul>
<h3 id="安装配置-11"><a href="#安装配置-11" class="headerlink" title="安装配置"></a>安装配置</h3><h4 id="安装hexo-neat插件"><a href="#安装hexo-neat插件" class="headerlink" title="安装hexo-neat插件"></a>安装hexo-neat插件</h4><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure>

<h4 id="站点配置文件添加相关配置"><a href="#站点配置文件添加相关配置" class="headerlink" title="站点配置文件添加相关配置"></a>站点配置文件添加相关配置</h4><p>然后我们需要在<strong>站点</strong>配置文件<code>_config.yml</code>中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/*.min.css'</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/*.min.js'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/index.js'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/fireworks.js'</span></span><br></pre></td></tr></table></figure>


<h2 id="Hexo-LeanCloud安全设置插件"><a href="#Hexo-LeanCloud安全设置插件" class="headerlink" title="Hexo LeanCloud安全设置插件"></a>Hexo LeanCloud安全设置插件</h2><h3 id="地址-10"><a href="#地址-10" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/theme-next/hexo-leancloud-counter-security" target="_blank" rel="noopener external nofollow noreferrer">hexo-leancloud-counter-security</a></li>
</ul>
<h3 id="安装配置-12"><a href="#安装配置-12" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br></pre></td></tr></table></figure>

<p>打开NexT主题配置文件<code>_config.yml</code>，将<code>leancloud_visitors</code>下的security设置为true（如没有则新增）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;&gt;</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">betterPerformance:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>对betterPerformance选项的说明：由于Leancloud免费版的云引擎存在请求线程数和运行时间限制以及休眠机制，很多时候访客数量加载会很慢。如果设置betterPerformance为true，则网页则会在提交请求之前直接显示访客人数为查询到的人数+1，以增加用户体验</strong>。</p>
<p>打开博客配置文件<code>_config.yml</code>，新增以下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;</span></span><br><span class="line">  <span class="attr">username:</span> </span><br><span class="line">  <span class="attr">password:</span></span><br></pre></td></tr></table></figure>

<p>然后输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo lc-counter register &lt;&lt;username&gt;&gt; &lt;&lt;password&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo lc-counter r &lt;&lt;username&gt;&gt; &lt;&lt;password&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>将<code>&lt;&lt;username&gt;&gt;</code>和<code>&lt;&lt;password&gt;&gt;</code>替换为你自己的用户名和密码（不必与leancloud的账号）相同。此用户名和密码将在hexo部署时使用。</p>
<p>打开博客配置文件<code>_config.yml</code>，将<code>&lt;&lt;username&gt;&gt;</code>和<code>&lt;&lt;password&gt;&gt;</code>替换为你刚刚设置的用户名和密码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&lt;&lt;your</span> <span class="string">username&gt;&gt;</span> <span class="comment">#如留空则将在部署时询问</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&lt;&lt;your</span> <span class="string">password&gt;&gt;</span> <span class="comment">#建议留空以保证安全性，如留空则将在部署时询问</span></span><br></pre></td></tr></table></figure>

<p>在博客配置文件<code>_config.yml</code>的deploy下添加项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="comment"># other deployer</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">leancloud_counter_security_sync</span></span><br></pre></td></tr></table></figure>

<p>最后为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:dta0502/dta0502.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="comment"># other deployer</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">leancloud_counter_security_sync</span></span><br></pre></td></tr></table></figure>

<h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><p>安装完这个插件后，我生成博客的时候出现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-leancloud-counter-security</span><br><span class="line">Error: Cannot find module &#39;babel-runtime&#x2F;regenerator&#39;</span><br><span class="line">    at Function.Module._resolveFilename (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:636:15)</span><br><span class="line">    at Function.Module._load (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:562:25)</span><br><span class="line">    at Module.require (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:690:17)</span><br><span class="line">    at require (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:219:21)</span><br><span class="line">    at &#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;hexo-leancloud-counter-security&#x2F;index.js:3:20</span><br><span class="line">    at fs.readFile.then.script (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:232:12)</span><br><span class="line">    at tryCatcher (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:517:31)</span><br><span class="line">    at Promise._settlePromise (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:574:18)</span><br><span class="line">    at Promise._settlePromise0 (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:619:10)</span><br><span class="line">    at Promise._settlePromises (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:699:18)</span><br><span class="line">    at Promise._fulfill (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:643:18)</span><br><span class="line">    at Promise._resolveCallback (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:437:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:529:17)</span><br><span class="line">    at Promise._settlePromise (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:574:18)</span><br><span class="line">    at Promise._settlePromise0 (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:619:10)</span><br><span class="line">    at Promise._settlePromises (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:699:18)</span><br><span class="line">    at Promise._fulfill (&#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:643:18)</span><br><span class="line">    at &#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;nodeback.js:42:21</span><br><span class="line">    at &#x2F;Users&#x2F;anran&#x2F;Desktop&#x2F;MyProject&#x2F;blog&#x2F;node_modules&#x2F;graceful-fs&#x2F;graceful-fs.js:115:16</span><br><span class="line">    at FSReqWrap.readFileAfterClose [as oncomplete] (internal&#x2F;fs&#x2F;read_file_context.js:53:3)</span><br><span class="line">Usage: hexo &lt;command&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>hexo-leancloud-counter-security版本：1.4.0</li>
</ul>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-runtime</span><br></pre></td></tr></table></figure>


<h2 id="Hexo支持Echarts"><a href="#Hexo支持Echarts" class="headerlink" title="Hexo支持Echarts"></a>Hexo支持Echarts</h2><h3 id="地址-11"><a href="#地址-11" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/kchen0x/hexo-tag-echarts3" target="_blank" rel="noopener external nofollow noreferrer">hexo-tag-echarts3</a></li>
</ul>
<h3 id="安装配置-13"><a href="#安装配置-13" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-echarts --save</span><br></pre></td></tr></table></figure>

<p>该插件依赖的ECharts版本为<code>https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js</code>, 比较老了, 有些新的特性不支持, 需要手动修改ECharts版本, 修改博客目录下的<code>node_modules/hexo-tag-echarts3/template.html</code>文件, 将其中的ECharts引用url改为<code>https://cdn.bootcss.com/echarts/4.1.0-release/echarts.min.js</code>。</p>
<p>已经有人在上面的基础上更新了一下插件：</p>
<ul>
<li><a href="https://github.com/gyx138/hexo-tag-echarts4" target="_blank" rel="noopener external nofollow noreferrer">hexo-tag-echarts4</a></li>
</ul>
<p>我们可以使用这个插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-echarts4 --save</span><br></pre></td></tr></table></figure>

<p>这样就无需手动修改文件了。</p>
<h2 id="Hexo修改back2top标签"><a href="#Hexo修改back2top标签" class="headerlink" title="Hexo修改back2top标签"></a>Hexo修改back2top标签</h2><h3 id="地址-12"><a href="#地址-12" class="headerlink" title="地址"></a>地址</h3><ul>
<li><a href="https://github.com/jiangtj-lab/hexo-cake-moon-menu" target="_blank" rel="noopener external nofollow noreferrer">hexo-cake-moon-menu</a></li>
</ul>
<h3 id="安装配置-14"><a href="#安装配置-14" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cake-moon-menu --save</span><br></pre></td></tr></table></figure>

<p>然后在站点配置文件<code>_config.yml</code>中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">moon_menu:</span></span><br><span class="line">  <span class="attr">back2top:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-chevron-up</span></span><br><span class="line">    <span class="attr">func:</span> <span class="string">back2top</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">back2bottom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-chevron-down</span></span><br><span class="line">    <span class="attr">func:</span> <span class="string">back2bottom</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-2</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT加载性能优化</title>
    <url>/archives/7e5b094d.html</url>
    <content><![CDATA[<p>本文主要介绍Hexo-NexT主题加载性能优化。</p>
<ul>
<li>主题版本：NexT-7.1.2</li>
</ul>
<p>注意：本文主要关注加载速度优化，不考虑因为网络问题导致的访问慢问题，由于国内访问GitHub Pages速度不佳，我们可以将博客部署到国内的VPS、Coding Pages，或者采用CDN加速，具体可以参考：</p>
<ul>
<li><a href="https://tding.top/archives/12a4e7e6.html">Hexo 博客部署到 VPS</a></li>
<li><a href="https://tding.top/archives/e09249d2.html">Hexo 博客部署到 Coding</a></li>
<li><a href="https://tding.top/archives/12c6c559.html">Hexo 配置 Cloudflare 免费 CDN</a></li>
</ul>
<a id="more"></a>

<h2 id="启用FastClick"><a href="#启用FastClick" class="headerlink" title="启用FastClick"></a>启用FastClick</h2><p>FastClick是一个简单易用的库，用于消除物理点击和click在移动浏览器上触发事件之间300毫秒的延迟。目的是使您的应用程序感觉不那么迟钝和响应更快，同时避免干扰您当前的逻辑。</p>
<blockquote>
<p>注意：截至2015年底，大多数移动浏览器（尤其是Chrome和Safari）不再具有300毫秒的触摸延迟，因此fastclick对新浏览器没有任何好处，并且可能会在您的应用程序中引入错误。仔细考虑您是否真的需要使用它。</p>
</blockquote>
<p>我们可以直接在主题配置文件<code>_config.yml</code>中设置<code>enable: true</code>开启：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fastclick:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>安装依赖：</p>
<ul>
<li>方法1：启用CDN</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">fastclick:</span> <span class="string">https://cdn.jsdelivr.net/npm/fastclick@1/lib/fastclick.min.js</span></span><br></pre></td></tr></table></figure>

<h2 id="启用Quicklink预加载"><a href="#启用Quicklink预加载" class="headerlink" title="启用Quicklink预加载"></a>启用Quicklink预加载</h2><p>近来，Google Chrome Labs 推出了 quicklink，用以实现链接资源的预加载（prefetch）。</p>
<h3 id="Quicklink原理简介"><a href="#Quicklink原理简介" class="headerlink" title="Quicklink原理简介"></a>Quicklink原理简介</h3><p>当我们提到性能优化，往往都会着眼于当前用户访问的这个页面，通过压缩资源大小、删减不必要资源、加快页面解析渲染等方式提升用户的访问速度；而 quicklink 用了另一种思路：我预先帮你加载（获取）接下来最可能要用的资源，这样之后真正使用到该资源（链接）时就会感觉非常顺畅。</p>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>NexT主题已经内置了Quicklink的支持，我们只需要在主题配置文件<code>_config.yml</code>中进行简单配置即可启用：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Quicklink (quicklink.umd.js script) is loaded on demand</span></span><br><span class="line">  <span class="comment"># Add `quicklink: true` in Front-matter of the page or post you need</span></span><br><span class="line">  <span class="comment"># Home page and archive page can be controlled through home and archive options below</span></span><br><span class="line">  <span class="attr">home:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will initialize quicklink after the load event fires</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Custom a time in milliseconds by which the browser must execute prefetching</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># Default (true) will enable fetch() or falls back to XHR</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># For more flexibility you can add some patterns (RegExp, Function, or Array) to ignores</span></span><br><span class="line">  <span class="comment"># See: https://github.com/GoogleChromeLabs/quicklink#custom-ignore-patterns</span></span><br><span class="line">  <span class="comment"># Leave ignores as empty if you don't understand what it means</span></span><br><span class="line">  <span class="comment"># Example:</span></span><br><span class="line">  <span class="comment"># ignores:</span></span><br><span class="line">  <span class="comment">#   - /\/api\/?/</span></span><br><span class="line">  <span class="comment">#   - uri =&gt; uri.includes('.xml')</span></span><br><span class="line">  <span class="comment">#   - (uri, el) =&gt; el.hasAttribute('noopener')</span></span><br><span class="line">  <span class="attr">ignores:</span></span><br></pre></td></tr></table></figure>

<p>注意：<strong>Quicklink需要安装依赖</strong>。</p>
<ul>
<li>方法1：启用CDN</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">quicklink:</span> <span class="string">//cdn.jsdelivr.net/npm/quicklink@1/dist/quicklink.umd.js</span></span><br></pre></td></tr></table></figure>


<h2 id="页面静态资源压缩"><a href="#页面静态资源压缩" class="headerlink" title="页面静态资源压缩"></a>页面静态资源压缩</h2><p>我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说是没有用的，甚至还会降低渲染页面的速度。同时，由于Markdown转成html的bug，会导致页面存在大量的空白，我们可以通过查看页面源代码发现这些大量的空白符，这也会造成页面渲染的性能问题。</p>
<p>因此，我们需要对页面的静态资源进行压缩，包括css、js和html等文件。</p>
<p>我们可以使用<code>hexo-neat</code>插件进行压缩。<code>hexo-neat</code>配置简单，无需额外命令，我们只需使用原本的调试、部署命令就可以自动完成静态资源的压缩。</p>
<h3 id="安装hexo-neat插件"><a href="#安装hexo-neat插件" class="headerlink" title="安装hexo-neat插件"></a>安装hexo-neat插件</h3><p>首先安装<code>hexo-neat</code>插件，在博客根目录输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure>

<h3 id="站点配置文件添加相关配置"><a href="#站点配置文件添加相关配置" class="headerlink" title="站点配置文件添加相关配置"></a>站点配置文件添加相关配置</h3><p>然后我们需要在<strong>站点</strong>配置文件<code>_config.yml</code>中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/*.min.css'</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/*.min.js'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/index.js'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/fireworks.js'</span></span><br></pre></td></tr></table></figure>

<h3 id="几个小问题"><a href="#几个小问题" class="headerlink" title="几个小问题"></a>几个小问题</h3><h4 id="跳过压缩文件的正确配置方式"><a href="#跳过压缩文件的正确配置方式" class="headerlink" title="跳过压缩文件的正确配置方式"></a>跳过压缩文件的正确配置方式</h4><p>如果按照官方插件的文档说明来配置exclude，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'**/*.min.css'</span></span><br></pre></td></tr></table></figure>

<h4 id="压缩html时不要跳过Markdown文件"><a href="#压缩html时不要跳过Markdown文件" class="headerlink" title="压缩html时不要跳过Markdown文件"></a>压缩html时不要跳过Markdown文件</h4><p>如果跳过压缩<code>.md</code>文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当Hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p>
<h4 id="压缩html时不要跳过-swig文件"><a href="#压缩html时不要跳过-swig文件" class="headerlink" title="压缩html时不要跳过.swig文件"></a>压缩html时不要跳过<code>.swig</code>文件</h4><p><code>.swig</code>文件是模板引擎文件，简单的说Hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p>
<h2 id="页面加载性能测试"><a href="#页面加载性能测试" class="headerlink" title="页面加载性能测试"></a>页面加载性能测试</h2><p>现在我们可以测试下页面加载性能。</p>
<p>Google PageSpeed Insights可用于帮助分析网页加载速度瓶颈，该网站将会针对指定域名进行在线测试，并提供一份详细的页面加载分析报告，报告中还会根据页面资源加载情况给出合理的优化建议及预期优化效果，因此用户可以有的放矢的进行性能优化专项整改。</p>
<ul>
<li><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener external nofollow noreferrer">Google PageSpeed Insights</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5c21f8435188256d12597789" target="_blank" rel="noopener external nofollow noreferrer">【性能优化】quicklink：实现原理与给前端的启发</a></li>
<li><a href="http://hexo.dovins.com/post/plugins_for_next/" target="_blank" rel="noopener external nofollow noreferrer">Next主题插件笔记</a></li>
<li><a href="https://blog.csdn.net/lewky_liu/article/details/82432003" target="_blank" rel="noopener external nofollow noreferrer">Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT主题样式美化-动画设置</title>
    <url>/archives/dfac1e9c.html</url>
    <content><![CDATA[<p>本文主要介绍Hexo-NexT主题的几个动画设置：页面动画、页面加载条动画、阅读进度条动画、页面背景动画、图片弹出效果（fancybox）。</p>
<ul>
<li>主题版本：NexT-7.1.2</li>
</ul>
<a id="more"></a>

<h2 id="页面动画"><a href="#页面动画" class="headerlink" title="页面动画"></a>页面动画</h2><p>这里的动画指的是加载页面时，每一部分元素（标题、文章主体等等）加载的效果。NexT提供了多种样式，读者可以自己尝试。</p>
<p>下面是一个参考设置，当<code>enable: true</code>时开启页面动画：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use velocity to animate everything.</span></span><br><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="comment"># Transition variants:</span></span><br><span class="line">    <span class="comment"># fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut</span></span><br><span class="line">    <span class="comment"># swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut</span></span><br><span class="line">    <span class="comment"># bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut</span></span><br><span class="line">    <span class="comment"># slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut</span></span><br><span class="line">    <span class="comment"># slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut</span></span><br><span class="line">    <span class="comment"># perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut</span></span><br><span class="line">    <span class="attr">post_block:</span> <span class="string">fadeIn</span></span><br><span class="line">    <span class="attr">post_header:</span> <span class="string">slideDownIn</span></span><br><span class="line">    <span class="attr">post_body:</span> <span class="string">slideDownIn</span></span><br><span class="line">    <span class="attr">coll_header:</span> <span class="string">slideLeftIn</span></span><br><span class="line">    <span class="comment"># Only for Pisces | Gemini.</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="string">slideUpIn</span></span><br></pre></td></tr></table></figure>


<h2 id="页面加载动画（顶部加载进度条）"><a href="#页面加载动画（顶部加载进度条）" class="headerlink" title="页面加载动画（顶部加载进度条）"></a>页面加载动画（顶部加载进度条）</h2><p>页面加载动画指的是刚访问页面，各元素还没有加载完成时，显示的加载进度动画。NexT提供了多种样式，读者可以自己尝试。</p>
<p>下面是一个参考设置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment"># pace-theme-big-counter | pace-theme-bounce | pace-theme-barber-shop | pace-theme-center-atom</span></span><br><span class="line"><span class="comment"># pace-theme-center-circle | pace-theme-center-radar | pace-theme-center-simple | pace-theme-corner-indicator</span></span><br><span class="line"><span class="comment"># pace-theme-fill-left | pace-theme-flash | pace-theme-loading-bar | pace-theme-mac-osx | pace-theme-minimal</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-minimal</span></span><br></pre></td></tr></table></figure>

<p>注意：<strong>这个加载动画需要安装依赖</strong>，地址：<a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="noopener external nofollow noreferrer">Progress bar for NexT</a>。</p>
<ul>
<li>方法1：安装文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入主题目录</span></span><br><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从GitHub下载依赖文件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>

<ul>
<li>方法2：启用CDN</li>
</ul>
<p>我们可以在主题配置文件<code>_config.yml</code>中修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">pace:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1/pace.min.js</span></span><br><span class="line">  <span class="attr">pace_css:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1/themes/blue/pace-theme-minimal.min.css</span></span><br></pre></td></tr></table></figure>


<h2 id="顶部阅读进度条"><a href="#顶部阅读进度条" class="headerlink" title="顶部阅读进度条"></a>顶部阅读进度条</h2><p>我们可以在主题配置文件<code>_config.yml</code>中进行修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#37c6c0"</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br></pre></td></tr></table></figure>

<p>注意：<strong>这个阅读进度条动画需要安装依赖</strong>，地址：<a href="https://github.com/theme-next/theme-next-reading-progress" target="_blank" rel="noopener external nofollow noreferrer">Reading Progress for NexT</a>。</p>
<ul>
<li>方法1：安装文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入主题目录</span></span><br><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从GitHub下载依赖文件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-reading-progress <span class="built_in">source</span>/lib/reading_progress</span><br></pre></td></tr></table></figure>

<ul>
<li>方法2：启用CDN</li>
</ul>
<p>我们可以在主题配置文件<code>_config.yml</code>中修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">reading_progress:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1/reading_progress.min.js</span></span><br></pre></td></tr></table></figure>


<h2 id="页面背景动画"><a href="#页面背景动画" class="headerlink" title="页面背景动画"></a>页面背景动画</h2><p>NexT 主题提供了多种背景动画配置：</p>
<ul>
<li>three 的动画是线和点的组合，随鼠标位置的移动而变化。</li>
<li>canvas_nest 是自由移动的线条，当你的鼠标移动时，线条汇聚在你的鼠标位置上，形成多边形。</li>
<li>canvas_ribbon 是随鼠标点击而变化颜色的彩带。</li>
</ul>
<p>我们只需要修改主题配置文件<code>_config.yml</code>即可使用，比如我们想用<code>canvas_nest</code>背景动画，只需要设置<code>enable: true</code>即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"0,0,255"</span> <span class="comment"># RGB values, use ',' to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"><span class="comment"># size: The width of the ribbon.</span></span><br><span class="line"><span class="comment"># alpha: The transparency of the ribbon.</span></span><br><span class="line"><span class="comment"># zIndex: The display level of the ribbon.</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p>注意：<strong>这些页面背景动画需要安装依赖</strong>。</p>
<ul>
<li>方法1：安装文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library:</span></span><br><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-three <span class="built_in">source</span>/lib/three</span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas-nest:</span></span><br><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="built_in">source</span>/lib/canvas-nest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas_ribbon:</span></span><br><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-ribbon <span class="built_in">source</span>/lib/canvas-ribbon</span><br></pre></td></tr></table></figure>

<ul>
<li>方法2：启用CDN</li>
</ul>
<p>我们可以在主题配置文件<code>_config.yml</code>中修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># JavaScript 3D library:</span></span><br><span class="line">  <span class="attr">three:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three.min.js</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three-waves.min.js</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_lines.min.js</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_sphere.min.js</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Canvas-nest:</span></span><br><span class="line">  <span class="attr">canvas_nest:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js</span></span><br><span class="line">  <span class="attr">canvas_nest_nomobile:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest-nomobile.min.js</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Canvas_ribbon:</span></span><br><span class="line">  <span class="attr">canvas_ribbon:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-ribbon@1/canvas-ribbon.js</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>个人认为在站点中添加动态背景并没有实际的意义，只会凭空增加页面内存占用及 CPU 消耗</strong>。</p>
</blockquote>
<h2 id="图片弹出效果-fancybox"><a href="#图片弹出效果-fancybox" class="headerlink" title="图片弹出效果-fancybox"></a>图片弹出效果-fancybox</h2><p>fancybox的特性：</p>
<ul>
<li>允许我们用鼠标和键盘上的四个方向键切换图片</li>
<li>可以根据当前窗口大小自动调整弹出框的大小，当我们改变浏览器窗口大小时，将会看到弹出框自动缩放了</li>
<li>支持缩略图和按钮帮助导航</li>
</ul>
<p>NexT主题已经内置了fancybox的支持，我们只需要在主题配置文件<code>_config.yml</code>中进行简单配置即可启用：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>注意：<strong>启用fancybox需要安装依赖</strong>，地址：<a href="https://github.com/theme-next/theme-next-fancybox3" target="_blank" rel="noopener external nofollow noreferrer">fancyBox 3 for NexT</a>。</p>
<ul>
<li>方法1：安装文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入主题目录</span></span><br><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从GitHub下载依赖文件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 <span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure>

<ul>
<li>方法2：启用CDN</li>
</ul>
<p>我们可以在主题配置文件<code>_config.yml</code>中修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">fancybox:</span> <span class="string">//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class="line">  <span class="attr">fancybox_css:</span> <span class="string">//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.wdmcheng.cn/记录一下本博客搭建过程/" target="_blank" rel="noopener external nofollow noreferrer">记录一下本博客搭建过程</a></li>
<li><a href="https://guanqr.com/study/blog/hexo-theme-next-customization/" target="_blank" rel="noopener external nofollow noreferrer">Hexo-NexT 主题个性优化</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>样式美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT支持简体繁体一键切换</title>
    <url>/archives/3cdfe265.html</url>
    <content><![CDATA[<p>本文主要介绍如何在Hexo上实现简体/繁体一键切换。</p>
<p>简体繁体切换的基本原理：首先建立一个简体字与繁体字相对应的映射表，然后遍历整个界面，把相应的简体字或者是繁体字映射为对应的字体即可。</p>
<a id="more"></a>

<h2 id="Hexo实现过程"><a href="#Hexo实现过程" class="headerlink" title="Hexo实现过程"></a>Hexo实现过程</h2><ol>
<li><p>首先，我们可以在<a href="https://tding.top/js/tw_cn.js">这里</a>右键另存下载简繁字体切换所需的<code>tw_cn.js</code>文件，我们把这个文件放到<code>~/themes/next/source/js</code>文件夹下。</p>
</li>
<li><p><strong>修改模板</strong>，在我们想要显示简繁转换按钮的地方添加如下代码。例如，我在NexT主题的布局文件<code>~/themes/next/layout/_partials/footer.swig</code>里添加了如下代码：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"translate-style"</span>&gt;</span></span><br><span class="line">繁/简：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"translateLink"</span> <span class="attr">href</span>=<span class="string">"javascript:translatePage();"</span>&gt;</span>繁体</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/tw_cn.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> defaultEncoding = <span class="number">2</span>; <span class="comment">//网站编写字体是否繁体，1-繁体，2-简体</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> translateDelay = <span class="number">0</span>; <span class="comment">//延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> cookieDomain = <span class="string">"https://tding.top/"</span>; <span class="comment">//Cookie地址, 一定要设定, 通常为你的网址</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> msgToTraditionalChinese = <span class="string">"繁体"</span>; <span class="comment">//此处可以更改为你想要显示的文字</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> msgToSimplifiedChinese = <span class="string">"简体"</span>; <span class="comment">//同上，但两处均不建议更改</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> translateButtonId = <span class="string">"translateLink"</span>; <span class="comment">//默认互换id</span></span></span><br><span class="line">translateInitilization();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>读者可以在<strong>博客底部点击简体/繁体</strong>来看具体的切换字体效果。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.arao.me/website/hexo-support-jian-fan-language.html#more" target="_blank" rel="noopener external nofollow noreferrer">三步让你的网站支持简体繁体切换</a></li>
<li><a href="http://qingbo.site/2016/10/11/how-set-Chinese-Simplified-switch-to-Chinese-Traditional/" target="_blank" rel="noopener external nofollow noreferrer">两步让你的网站支持简体繁体切换</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib系列之绘制双Y轴折线图和柱状图</title>
    <url>/archives/9983dab2.html</url>
    <content><![CDATA[<p>为了有更明显的对比效果，有时候我们需要将两个不同的曲线放在同一张图中，一般来说，这两个曲线值是不太一样的，需要不同的刻度。这时候，我们可以用双Y轴进行表示。</p>
<p>本文主要介绍如何用matplotlib绘制双Y轴折线图和柱状图。</p>
<a id="more"></a>

<h2 id="绘制双Y轴折线图"><a href="#绘制双Y轴折线图" class="headerlink" title="绘制双Y轴折线图"></a>绘制双Y轴折线图</h2><p>这里的关键点在于：<code>ax2 = ax1.twinx()</code></p>
<ul>
<li><code>twinx</code>是添加y轴的坐标轴</li>
<li><code>twiny</code>是添加x轴的坐标轴</li>
</ul>
<p>同时，为了更加清晰，<strong>这里设置Y轴的刻度（tick）与标签（label）的颜色分别与其对应的曲线颜色相同</strong>，关键代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 双Y轴标签颜色设置</span></span><br><span class="line">ax1.yaxis.label.set_color(line1.get_color())</span><br><span class="line">ax2.yaxis.label.set_color(line2.get_color())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双Y轴刻度颜色设置</span></span><br><span class="line">ax1.tick_params(axis = <span class="string">'y'</span>, colors = line1.get_color())</span><br><span class="line">ax2.tick_params(axis = <span class="string">'y'</span>, colors = line2.get_color())</span><br></pre></td></tr></table></figure>

<p>下面是全部的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig, ax1 = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目平均金额折线图</span></span><br><span class="line">line1, = ax1.plot(df_year[<span class="string">'year_'</span>], df_year[<span class="string">'fund_mean'</span>],color = sns.xkcd_rgb[<span class="string">"pale red"</span>],linestyle = <span class="string">'-'</span>,label = <span class="string">'项目平均金额'</span>)</span><br><span class="line">p1 = ax1.scatter(df_year[<span class="string">'year_'</span>], df_year[<span class="string">'fund_mean'</span>],color = sns.xkcd_rgb[<span class="string">"pale red"</span>],marker = <span class="string">'v'</span>,s = <span class="number">30</span>,label = <span class="string">'项目平均金额'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目总金额折线图</span></span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line">line2, = ax2.plot(df_year[<span class="string">'year_'</span>], df_year[<span class="string">'fund_sum'</span>],color = sns.xkcd_rgb[<span class="string">"denim blue"</span>],linestyle = <span class="string">'-'</span>,label = <span class="string">'项目总金额'</span>)</span><br><span class="line">p2 = ax2.scatter(df_year[<span class="string">'year_'</span>], df_year[<span class="string">'fund_sum'</span>],color = sns.xkcd_rgb[<span class="string">"denim blue"</span>],marker = <span class="string">'o'</span>,s = <span class="number">30</span>,label = <span class="string">'项目总金额'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴设置</span></span><br><span class="line">ax1.set_xlim([<span class="number">1985</span>,<span class="number">2020</span>])</span><br><span class="line">ax1.set_ylim([<span class="number">0</span>,<span class="number">75</span>])</span><br><span class="line">ax2.set_ylim([<span class="number">0</span>,<span class="number">2700000</span>])</span><br><span class="line"></span><br><span class="line">ax1.set_xlabel(<span class="string">"年份"</span>,fontsize = <span class="number">12</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">"项目平均金额/(万元)"</span>,fontsize = <span class="number">12</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">"项目总金额/(万元)"</span>,fontsize = <span class="number">12</span>)</span><br><span class="line">ax1.set_title(<span class="string">"资助项目年份统计"</span>,fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双Y轴标签颜色设置</span></span><br><span class="line">ax1.yaxis.label.set_color(line1.get_color())</span><br><span class="line">ax2.yaxis.label.set_color(line2.get_color())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双Y轴刻度颜色设置</span></span><br><span class="line">ax1.tick_params(axis = <span class="string">'y'</span>, colors = line1.get_color())</span><br><span class="line">ax2.tick_params(axis = <span class="string">'y'</span>, colors = line2.get_color())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图例设置</span></span><br><span class="line">plt.legend(handles = [p1,p2])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/9983dab2/%E5%8F%8CY%E8%BD%B4%E6%8A%98%E7%BA%BF%E5%9B%BE.png" class="" title="双Y轴折线图">


<h2 id="绘制双Y轴柱状图"><a href="#绘制双Y轴柱状图" class="headerlink" title="绘制双Y轴柱状图"></a>绘制双Y轴柱状图</h2><p>双Y轴柱状图绘制的关键在于<strong>处理柱形的间隔<code>x1_list</code>(<code>[0,1,2…]</code>)、<code>x2_list</code>(<code>[0.4,1.4,2.4…]</code>)、<code>width</code>(<code>0.4</code>)的关系</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 柱形的宽度</span></span><br><span class="line">width = <span class="number">0.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱形的间隔</span></span><br><span class="line">x1_list = []</span><br><span class="line">x2_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df_nan_plot1)):</span><br><span class="line">    x1_list.append(i)</span><br><span class="line">    x2_list.append(i + width)</span><br></pre></td></tr></table></figure>

<p>双Y轴的其余设置与前面的双Y轴折线基本相同，唯一的不同点在于<strong>选取颜色的函数</strong>从<code>get_color()</code>变为了<code>get_facecolor()</code>。</p>
<p>下面是全部的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig, ax1 = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱形的宽度</span></span><br><span class="line">width = <span class="number">0.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱形的间隔</span></span><br><span class="line">x1_list = []</span><br><span class="line">x2_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df_nan)):</span><br><span class="line">    x1_list.append(i)</span><br><span class="line">    x2_list.append(i + width)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱形图1</span></span><br><span class="line">b1 = ax1.bar(x1_list, df_nan[<span class="string">'项目数'</span>],width=width,label=<span class="string">'缺失项目数'</span>,color = sns.xkcd_rgb[<span class="string">"pale red"</span>],tick_label = df_nan[<span class="string">'学科'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱形图2---双Y轴</span></span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line">b2 = ax2.bar(x2_list, df[<span class="string">'项目数'</span>],width=width,label=<span class="string">'总项目数'</span>,color = sns.xkcd_rgb[<span class="string">"denim blue"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴标签设置</span></span><br><span class="line">ax1.set_title(<span class="string">'资助金额字段缺失分析-学科'</span>,fontsize = <span class="number">14</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">'学科'</span>,fontsize=<span class="number">12</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'缺失项目数'</span>,fontsize=<span class="number">12</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">'总项目数'</span>,fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x轴标签旋转</span></span><br><span class="line">ax1.set_xticklabels(ax1.get_xticklabels(),rotation = <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双Y轴标签颜色设置</span></span><br><span class="line">ax1.yaxis.label.set_color(b1[<span class="number">0</span>].get_facecolor())</span><br><span class="line">ax2.yaxis.label.set_color(b2[<span class="number">0</span>].get_facecolor())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双Y轴刻度颜色设置</span></span><br><span class="line">ax1.tick_params(axis = <span class="string">'y'</span>, colors = b1[<span class="number">0</span>].get_facecolor())</span><br><span class="line">ax2.tick_params(axis = <span class="string">'y'</span>, colors = b2[<span class="number">0</span>].get_facecolor())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图例设置</span></span><br><span class="line">plt.legend(handles = [b1,b2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网格设置</span></span><br><span class="line">plt.grid(<span class="string">'off'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<img src="/archives/9983dab2/%E5%8F%8CY%E8%BD%B4%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" class="" title="双Y轴柱状图">

]]></content>
      <categories>
        <category>Python</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib系列之图例设置</title>
    <url>/archives/f2256842.html</url>
    <content><![CDATA[<p>当一张图中有多根曲线时，我们可以通过图例<code>legend</code>来对曲线进行注释区分。本文主要介绍matplotlib包的图例<code>legend</code>用法。</p>
<a id="more"></a>

<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>本文的示例数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line">l1, = ax.plot(x, y1, color = sns.xkcd_rgb[<span class="string">"pale red"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'2*x+1'</span>)</span><br><span class="line">l2, = ax.plot(x, y2, color = sns.xkcd_rgb[<span class="string">"denim blue"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'x**2'</span>)</span><br><span class="line"></span><br><span class="line">ax.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/f2256842/1.png" class="" title="图1">


<h2 id="图例位置"><a href="#图例位置" class="headerlink" title="图例位置"></a>图例位置</h2><h3 id="loc参数快速调整"><a href="#loc参数快速调整" class="headerlink" title="loc参数快速调整"></a>loc参数快速调整</h3><p>我们可以通过<code>loc</code>参数进行快速放置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.legend(loc = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><code>loc</code>不同的值代表不同的位置，具体对应表如下：</p>
<table>
<thead>
<tr>
<th>Location String</th>
<th>Location Code</th>
</tr>
</thead>
<tbody><tr>
<td>best</td>
<td>0</td>
</tr>
<tr>
<td>upper right</td>
<td>1</td>
</tr>
<tr>
<td>upper left</td>
<td>2</td>
</tr>
<tr>
<td>lower left</td>
<td>3</td>
</tr>
<tr>
<td>lower right</td>
<td>4</td>
</tr>
<tr>
<td>right</td>
<td>5</td>
</tr>
<tr>
<td>center left</td>
<td>6</td>
</tr>
<tr>
<td>center right</td>
<td>7</td>
</tr>
<tr>
<td>lower center</td>
<td>8</td>
</tr>
<tr>
<td>upper center</td>
<td>9</td>
</tr>
<tr>
<td>center</td>
<td>10</td>
</tr>
</tbody></table>
<h3 id="bbox-to-anchor参数手动控制"><a href="#bbox-to-anchor参数手动控制" class="headerlink" title="bbox_to_anchor参数手动控制"></a>bbox_to_anchor参数手动控制</h3><p>不过<code>loc</code>没有选项可以直接将<code>legend</code>放置到坐标轴外侧，这时候，我们可以用<code>bbox_to_anchor</code>参数来手动控制。</p>
<p><strong>注意：直接将图例放置到坐标轴之外也会直接放置到绘图区外了，因而我们需要先调整坐标轴在绘图区的位置</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先调整坐标轴在绘图区的位置  </span></span><br><span class="line">ax.set_position([<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.6</span>,<span class="number">0.9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图例放置 </span></span><br><span class="line">ax.legend(bbox_to_anchor=(<span class="number">1.05</span>,<span class="number">0.8</span>))</span><br></pre></td></tr></table></figure>

<p>全部代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先调整坐标轴在绘图区的位置  </span></span><br><span class="line">ax.set_position([<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.6</span>,<span class="number">0.9</span>])</span><br><span class="line"></span><br><span class="line">l1, = ax.plot(x, y1, color = sns.xkcd_rgb[<span class="string">"pale red"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'2*x+1'</span>)</span><br><span class="line">l2, = ax.plot(x, y2, color = sns.xkcd_rgb[<span class="string">"denim blue"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'x**2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图例放置 </span></span><br><span class="line">ax.legend(bbox_to_anchor=(<span class="number">1.05</span>,<span class="number">0.8</span>))  </span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/f2256842/2.png" class="" title="图2">

<p>我们可以通过<code>ncol</code>这个参数来调整图例的<strong>列数</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.legend(bbox_to_anchor=(<span class="number">0.8</span>,<span class="number">1.2</span>), ncol = <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/f2256842/3.png" class="" title="图3">


<h2 id="实现多个图例"><a href="#实现多个图例" class="headerlink" title="实现多个图例"></a>实现多个图例</h2><p>不带参数调用<code>legend()</code>会自动获取图例句柄及其相关标签。此函数等同于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handles, labels = ax.get_legend_handles_labels()</span><br><span class="line">ax.legend(handles, labels)</span><br></pre></td></tr></table></figure>

<p>因此，如果我们想要实现多个图例，我们可以手动控制<code>handles</code>参数。</p>
<p>首先，我试试直接采用多次调用<code>legend()</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line">l1, = ax.plot(x, y1, color = sns.xkcd_rgb[<span class="string">"pale red"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'2*x+1'</span>)</span><br><span class="line">l2, = ax.plot(x, y2, color = sns.xkcd_rgb[<span class="string">"denim blue"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'x**2'</span>)</span><br><span class="line"></span><br><span class="line">ax.legend(handles = [l1], loc = <span class="number">1</span>)</span><br><span class="line">ax.legend(handles = [l2], loc = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/f2256842/4.png" class="" title="图4">

<p>我们发现轴域上只存在一个图例。这样做是为了可以重复调用<code>legend()</code>，将图例更新为轴域上的最新句柄。因此，如果我们要保留旧的图例实例，必须将它们手动添加到轴域中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line">l1, = ax.plot(x, y1, color = sns.xkcd_rgb[<span class="string">"pale red"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'2*x+1'</span>)</span><br><span class="line">l2, = ax.plot(x, y2, color = sns.xkcd_rgb[<span class="string">"denim blue"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'x**2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个线条创建图例</span></span><br><span class="line">first_legend = plt.legend(handles=[l1], loc=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 手动将图例添加到当前轴域</span></span><br><span class="line">ax = plt.gca().add_artist(first_legend)</span><br><span class="line"><span class="comment"># 第二个线条创建另一个图例</span></span><br><span class="line">plt.legend(handles=[l2], loc=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/f2256842/5.png" class="" title="图5">


<h2 id="图例边框和背景设置"><a href="#图例边框和背景设置" class="headerlink" title="图例边框和背景设置"></a>图例边框和背景设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 去掉图例边框</span></span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>,frameon=<span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图例边框颜色</span></span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>,edgecolor=<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图例背景颜色,若无边框,参数无效  </span></span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>,facecolor=<span class="string">'blue'</span>)</span><br></pre></td></tr></table></figure>

<p>一个去掉图例边框的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line">l1, = ax.plot(x, y1, color = sns.xkcd_rgb[<span class="string">"pale red"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'2*x+1'</span>)</span><br><span class="line">l2, = ax.plot(x, y2, color = sns.xkcd_rgb[<span class="string">"denim blue"</span>], linestyle = <span class="string">'-'</span>, label = <span class="string">'x**2'</span>)</span><br><span class="line"></span><br><span class="line">ax.legend(frameon=<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/f2256842/6.png" class="" title="图6">


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://wizardforcel.gitbooks.io/matplotlib-user-guide/content/3.6.html" target="_blank" rel="noopener external nofollow noreferrer">图例指南</a></li>
<li><a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.legend.html" target="_blank" rel="noopener external nofollow noreferrer">matplotlib.pyplot.legend</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客展示GitHub Chart</title>
    <url>/archives/90b9ba07.html</url>
    <content><![CDATA[<p>本文主要介绍如何在个人博客中展示GitHub Chart。其实GitHub上已经有人开源了一个工具，并且提供了API，我们只需要调用一下就可以了。</p>
<ul>
<li>工具地址：<a href="https://ghchart.rshah.org/" target="_blank" rel="noopener external nofollow noreferrer">Github Chart API</a></li>
</ul>
<a id="more"></a>

<p>这个工具可以实时的将<code>GitHub Chart</code>信息<strong>转化成一张图片</strong>，如下图所示，然后我们就可以把它插入到自己的博客进行展示了。</p>
<p><img src="https://ghchart.rshah.org/dta0502" alt=""></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>我们只需要在<code>https://ghchart.rshah.org/</code>这个地址后加上自己的<strong>GitHub用户名</strong>即可构造GitHub Chart图片的URL。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ghchart.rshah.org&#x2F;dta0502</span><br></pre></td></tr></table></figure>

<h3 id="HTML引入图片"><a href="#HTML引入图片" class="headerlink" title="HTML引入图片"></a>HTML引入图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://ghchart.rshah.org/dta0502"</span> <span class="attr">alt</span>=<span class="string">"dta0502's Github chart"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Markdown引入图片"><a href="#Markdown引入图片" class="headerlink" title="Markdown引入图片"></a>Markdown引入图片</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">dta0502's Github chart</span>](<span class="link">https://ghchart.rshah.org/dta0502</span>)</span><br></pre></td></tr></table></figure>

<h2 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h2><p>这个工具还支持自定义配色方案，我们可以提供任何基本颜色来为图表添加阴影。</p>
<p>我们只需访问<code>https://ghchart.rshah.org/&lt;HEX-COLOR&gt;/2016rshah</code>，然后将<code>&lt;HEX-COLOR&gt;</code>替换为我们想要设置的十六进制颜色代码（不包括开头的标签）就可以了。</p>
<p>例如，如果我们想要一个的蓝色主题图表（<code>＃409ba5</code>），那么我们可以构造链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://ghchart.rshah.org/409ba5/dta0502"</span> <span class="attr">alt</span>=<span class="string">"dta0502's Blue Github Chart"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://ghchart.rshah.org/409ba5/dta0502" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/2016rshah/githubchart-api" target="_blank" rel="noopener external nofollow noreferrer">Github Chart API</a></li>
<li><a href="https://mogeko.me/2019/067/" target="_blank" rel="noopener external nofollow noreferrer">在博客中展示 GitHub Chart</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Chart</tag>
      </tags>
  </entry>
  <entry>
    <title>ggplot2柱状图按数值大小排序</title>
    <url>/archives/c363755b.html</url>
    <content><![CDATA[<p>ggplot2柱状图按照数值大小进行排序是比较困难的。<strong>这是因为ggplot2考虑的是因子级别的顺序，而不是数据框中观察到的顺序</strong>。我们可以使用<code>sort()</code>或<code>arrange()</code>对输入数据框进行排序，但是这不会对ggplot2输出产生任何影响（柱状图依旧按照因子的顺序排列）。</p>
<p>本文主要介绍如何让ggplot2的柱状图按照数值大小排序。</p>
<a id="more"></a>

<h2 id="本文用到的数据集"><a href="#本文用到的数据集" class="headerlink" title="本文用到的数据集"></a>本文用到的数据集</h2><p>数据集1——自己定义的：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">data &lt;- data.frame(</span><br><span class="line">  name = c(<span class="string">"north"</span>,<span class="string">"south"</span>,<span class="string">"south-east"</span>,<span class="string">"north-west"</span>,<span class="string">"south-west"</span>,<span class="string">"north-east"</span>,<span class="string">"west"</span>,<span class="string">"east"</span>),</span><br><span class="line">  val=sample(seq(<span class="number">1</span>,<span class="number">10</span>), <span class="number">8</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>数据集2——ggplot2包自带的mpg数据集。</p>
<h2 id="forecats包实现"><a href="#forecats包实现" class="headerlink" title="forecats包实现"></a>forecats包实现</h2><p><code>forecats</code>库是<code>tidyverse</code>中的一个库，专门用于处理R中的因子，它提供了一组有用的工具来解决因子的常见问题。<strong>其中<code>fact_reorder()</code>函数允许通过另一列<code>data$val</code>的值对因子<code>data$name</code>进行重新排序</strong>。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(dplyr)</span><br><span class="line"><span class="keyword">library</span>(forcats)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过另一列的值来对因子重新排序（升序）</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  mutate(name = fct_reorder(name, val)) %&gt;%</span><br><span class="line">  ggplot(aes(x=name, y=val)) +</span><br><span class="line">    geom_bar(stat=<span class="string">"identity"</span>, fill=<span class="string">"#f68060"</span>, alpha=<span class="number">.6</span>, width=<span class="number">.4</span>) +</span><br><span class="line">    coord_flip() +</span><br><span class="line">    xlab(<span class="string">""</span>) +</span><br><span class="line">    theme_bw()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过另一列的值来对因子重新排序（降序）</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  mutate(name = fct_reorder(name, desc(val))) %&gt;%</span><br><span class="line">  ggplot(aes(x=name, y=val)) +</span><br><span class="line">    geom_bar(stat=<span class="string">"identity"</span>, fill=<span class="string">"#f68060"</span>, alpha=<span class="number">.6</span>, width=<span class="number">.4</span>) +</span><br><span class="line">    coord_flip() +</span><br><span class="line">    xlab(<span class="string">""</span>) +</span><br><span class="line">    theme_bw()</span><br></pre></td></tr></table></figure>

<img src="/archives/c363755b/1.png" class="" title="图1">

<p>我们可以指定用哪个函数<code>.fun</code>来确定顺序。默认值是使用中位数，我们也可以使用每组的数据点数来排序：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中位数（默认）</span></span><br><span class="line">mpg %&gt;%</span><br><span class="line">  mutate(class = fct_reorder(class, hwy, .fun=<span class="string">'median'</span>)) %&gt;%</span><br><span class="line">  ggplot(aes(x=class, y=hwy, fill=class)) + </span><br><span class="line">    geom_boxplot() +</span><br><span class="line">    xlab(<span class="string">"class"</span>) +</span><br><span class="line">    theme(legend.position=<span class="string">"none"</span>) +</span><br><span class="line">    xlab(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据点数</span></span><br><span class="line">mpg %&gt;%</span><br><span class="line">  mutate(class = fct_reorder(class, hwy, .fun=<span class="string">'length'</span>)) %&gt;%</span><br><span class="line">  ggplot(aes(x=class, y=hwy, fill=class)) + </span><br><span class="line">    geom_boxplot() +</span><br><span class="line">    xlab(<span class="string">"class"</span>) +</span><br><span class="line">    theme(legend.position=<span class="string">"none"</span>) +</span><br><span class="line">    xlab(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/c363755b/2.png" class="" title="图2">

<p>当然我们也可以自己指定因子的顺序：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">data %&gt;%</span><br><span class="line">  mutate(name = fct_relevel(name, </span><br><span class="line">            <span class="string">"north"</span>, <span class="string">"north-east"</span>, <span class="string">"east"</span>, </span><br><span class="line">            <span class="string">"south-east"</span>, <span class="string">"south"</span>, <span class="string">"south-west"</span>, </span><br><span class="line">            <span class="string">"west"</span>, <span class="string">"north-west"</span>)) %&gt;%</span><br><span class="line">  ggplot( aes(x=name, y=val)) +</span><br><span class="line">    geom_bar(stat=<span class="string">"identity"</span>) +</span><br><span class="line">    xlab(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/c363755b/3.png" class="" title="图3">


<h2 id="dplyr包实现"><a href="#dplyr包实现" class="headerlink" title="dplyr包实现"></a>dplyr包实现</h2><p><code>dplyr</code>的<code>mutate()</code>函数允许创建新变量或修改现有变量，我们可以用它来重新创建具有特定顺序的因子。下面是两个例子：</p>
<ul>
<li>采用<code>arrange()</code>对数据框进行排序，然后按照这个顺序对因子进行重新排序。</li>
<li>自定义因子顺序。</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用arrange()对数据框排序，然后按照这个顺序对因子进行重新排序</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  <span class="comment"># 按照val进行排序，但是这只对数据框进行了排序而没有对因子进行排序</span></span><br><span class="line">  arrange(val) %&gt;%</span><br><span class="line">  <span class="comment"># 通过下面这个小技巧可以直接更新因子</span></span><br><span class="line">  mutate(name=factor(name, levels=name)) %&gt;%</span><br><span class="line">  ggplot(aes(x=name, y=val)) +</span><br><span class="line">    geom_segment(aes(xend=name, yend=<span class="number">0</span>)) +</span><br><span class="line">    geom_point(size=<span class="number">4</span>, color=<span class="string">"orange"</span>) +</span><br><span class="line">    coord_flip() +</span><br><span class="line">    theme_bw() +</span><br><span class="line">    xlab(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义因子顺序</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  arrange(val) %&gt;%</span><br><span class="line">  mutate(name = factor(name, levels=c(<span class="string">"north"</span>, <span class="string">"north-east"</span>, <span class="string">"east"</span>, <span class="string">"south-east"</span>, <span class="string">"south"</span>, <span class="string">"south-west"</span>, <span class="string">"west"</span>, <span class="string">"north-west"</span>))) %&gt;%</span><br><span class="line">  ggplot(aes(x=name, y=val)) +</span><br><span class="line">    geom_segment(aes(xend=name, yend=<span class="number">0</span>)) +</span><br><span class="line">    geom_point(size=<span class="number">4</span>, color=<span class="string">"orange"</span>) +</span><br><span class="line">    theme_bw() +</span><br><span class="line">    xlab(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/c363755b/4.png" class="" title="图4">


<h2 id="base包的reorder-函数实现"><a href="#base包的reorder-函数实现" class="headerlink" title="base包的reorder()函数实现"></a>base包的reorder()函数实现</h2><p><code>reorder()</code>函数用法：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">reorder(x, X, FUN = mean, <span class="keyword">...</span>, order = is.ordered(x))</span><br></pre></td></tr></table></figure>

<ul>
<li><code>x</code>：因子型向量</li>
<li><code>X</code>：用来排序的数值型向量</li>
<li><code>FUN</code>：汇总数据的函数</li>
<li><code>...</code>：<code>FUN</code>的参数（可选）</li>
<li><code>order</code>：我们可以通过这个参数直接指定因子型向量的顺序</li>
</ul>
<p>按照x对X进行分组，对每一组组成的向量计算后面的函数，最后根据计算结果从小到大指定x中元素的顺序。</p>
<p>下面是一个例子：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mpg$class = with(mpg, reorder(class, hwy, median))</span><br><span class="line"></span><br><span class="line">p &lt;- mpg %&gt;%</span><br><span class="line">  ggplot( aes(x=class, y=hwy, fill=class)) + </span><br><span class="line">    geom_violin() +</span><br><span class="line">    xlab(<span class="string">"class"</span>) +</span><br><span class="line">    theme(legend.position=<span class="string">"none"</span>) +</span><br><span class="line">    xlab(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/c363755b/5.png" class="" title="图5">


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.r-graph-gallery.com/267-reorder-a-variable-in-ggplot2.html" target="_blank" rel="noopener external nofollow noreferrer">Reorder a variable with ggplot2</a></li>
<li><a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/reorder.factor.html" target="_blank" rel="noopener external nofollow noreferrer">Reorder Levels of a Factor</a></li>
</ul>
]]></content>
      <categories>
        <category>R</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>柱状图</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10清理C盘方法</title>
    <url>/archives/df0b3807.html</url>
    <content><![CDATA[<p>本文主要介绍了几个Win10系统C盘空间清理的小技巧。</p>
<a id="more"></a>

<h2 id="清理Windows日志文件"><a href="#清理Windows日志文件" class="headerlink" title="清理Windows日志文件"></a>清理Windows日志文件</h2><p>系统使用时间长的，日志文件甚至会超过数G。</p>
<p>我们可以通过<code>计算机管理—事件查看器—Windows日志—系统（右键）--清除日志</code>。</p>
<h2 id="索引文件转移"><a href="#索引文件转移" class="headerlink" title="索引文件转移"></a>索引文件转移</h2><p>索引文件来加快搜索速度的，电脑硬盘越大，安装的文件越多，索引文件越大。索引文件默认在C盘。</p>
<p>默认的索引文件在<code>C:\ProgramData\Microsoft\Search\Data\Applications\Windows</code>文件夹下的<code>Windows.edb</code>文件。</p>
<p>我们可以通过<code>控制面板—索引选项—高级—索引设置—选择新位置</code>来把索引文件转移到非系统盘：</p>
<ol>
<li>控制面板窗口中，我们需要点击右上角的“大图标”菜单项，这样就会打开Win10的所有控制面板项窗口，然后点击窗口中的“索引选项”图标：</li>
</ol>
<img src="/archives/df0b3807/%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E8%BD%AC%E7%A7%BB-1.png" class="" title="索引文件转移-1">

<img src="/archives/df0b3807/%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E8%BD%AC%E7%A7%BB-2.png" class="" title="索引文件转移-2">

<ol start="2">
<li>选择新位置</li>
</ol>
<img src="/archives/df0b3807/%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E8%BD%AC%E7%A7%BB-3.png" class="" title="索引文件转移-3">


<h2 id="缩小休眠文件"><a href="#缩小休眠文件" class="headerlink" title="缩小休眠文件"></a>缩小休眠文件</h2><p>默认情况下，休眠文件或休眠文件（<code>C:\hiberfil.sys</code>）是Windows 10计算机上安装的RAM总量的75％。快速启动需要启用休眠模式。如果您只想使用快速启动而又不打算使用休眠功能，则可以将<code>hiberfile</code>类型指定为减小的类型，以将休眠文件的大小（<code>hiberfil.sys</code>）减小到其完整大小的一半。</p>
<p>Hibernate文件有两种类型：</p>
<ul>
<li><p><strong>完整-Full</strong>：完整的hiberfile类型可以启用休眠模式并打开快速启动（hiberboot）。它约占可用RAM总量的75％。默认大小是物理内存的40％。它支持休眠，混合睡眠，快速启动。</p>
</li>
<li><p><strong>精简-Reduced</strong>：这种类型的hiberfile无需休眠即可开启快速启动（hiberboot）。减少的文件类型将<code>C:\hiberfil.sys</code>的大小减小到其完整大小的大约50％。此命令将从电源菜单中删除休眠模式。<strong>默认大小是物理内存的20％</strong>。它支持快速启动。</p>
</li>
</ul>
<p>我们可以通过下面的命令（<strong>管理员身份运行cmd</strong>）来将Hiberfile类型指定为“精简”：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">powercfg /h /<span class="built_in">type</span> reduced</span><br></pre></td></tr></table></figure>

<p>注意：如果将休眠文件设置为大于40％的自定义大小，则命令将返回“参数错误”错误。 您必须先使用命令<code>powercfg /h /size 0</code>将文件的大小设置为零，然后重新运行休眠文件类型“ reduced”命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;powercfg /h /size 0</span><br><span class="line">        已将休眠文件大小设置为: 3320750080 字节。</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;powercfg /h /<span class="built_in">type</span> reduced</span><br><span class="line">        已将休眠文件大小设置为: 1660375040 字节。</span><br></pre></td></tr></table></figure>


<h2 id="过期驱动文件清理"><a href="#过期驱动文件清理" class="headerlink" title="过期驱动文件清理"></a>过期驱动文件清理</h2><p>Windows系统对于驱动文件，有这样的一个机制。系统会把第三方的驱动都放入到<code>C:\Windows\System32\DriverStore</code>目录中，当你安装新驱动的时候，新的驱动也会安装到这个目录。然而，用户安装新驱动的同时，系统并不会清理掉之前的老驱动，而是保留老驱动的文件，方便出问题的时候恢复。</p>
<p><strong>注意：直接删DriverStore目录的文件很容易出问题</strong>。</p>
<p>其实Windows一直都有一个自带的命令行工具 <code>pnputil.exe</code> ，用这个可以列出DriverStore中的驱动，还可以删除，但是，命令行的工具比较难用，因而，我们可以用<a href="https://github.com/lostindark/DriverStoreExplorer" target="_blank" rel="noopener external nofollow noreferrer">Driver Store Explorer</a>来删除老驱动。<code>Driver Store Explorer</code>就是给<code>pnputil</code>做了个简单的图形界面。</p>
<p>使用方法：用管理员权限启动后，右键点击不要的选择删除即可。正常情况下在用的驱动是无法删除的，当然，点击<code>Force deletion</code>除外。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/32220500" target="_blank" rel="noopener external nofollow noreferrer">Win10清理系统盘空间实用攻略</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28639474" target="_blank" rel="noopener external nofollow noreferrer">Windows快速启动背后的功臣：休眠</a></li>
<li><a href="http://www.microwin10.com/wenzhang/jiaocheng/2019-10-31/14856.html" target="_blank" rel="noopener external nofollow noreferrer">如何在Win10中将Hiberfile类型指定为完全或精简</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>微信聊天记录解密并导出</title>
    <url>/archives/e872e04.html</url>
    <content><![CDATA[<p>我们知道，微信的聊天记录是加密的，因而我们不能从文件中直接查看、导出。本文主要介绍如何把聊天记录解密、导出成SQL或csv文件。</p>
<a id="more"></a>

<h2 id="手机微信数据库导出"><a href="#手机微信数据库导出" class="headerlink" title="手机微信数据库导出"></a>手机微信数据库导出</h2><h3 id="方法1——某些手机无需root即可备份"><a href="#方法1——某些手机无需root即可备份" class="headerlink" title="方法1——某些手机无需root即可备份"></a>方法1——某些手机无需root即可备份</h3><p>某些手机（比如某米、某为）通过官方的APP（无需root）即可把微信手机端的应用数据备份到电脑或者SD卡上。</p>
<p>但是我在实际操作的时候碰到了困难，我用的是某为手机，在电脑端和手机端均安装了官方提供的手机助手软件以后，正准备备份微信这个应用的数据，<strong>竟然一定要我输入密码进行加密</strong>，备份数据加密后就无法进行后续的操作了。我只好放弃了这个办法。</p>
<h3 id="方法2——root"><a href="#方法2——root" class="headerlink" title="方法2——root"></a>方法2——root</h3><p>如果你的手机已经root，那么你可以直接使用<code>adb</code>将<code>/data/data/com.tencent.mm</code>复制即可。</p>
<blockquote>
<p><code>/data/data/&lt;package_name&gt;</code>目录是app的私有目录，本身可以访问，外部程序没有访问权限，一些不想让用户看到的文件可以放在这里。此目录在程序卸载后将被删除，对应的是设置中的“数据”一项，如果清空数据，这个目录将会被清空。app自身对此目录的读写不需要额外的权限。<strong>注意：没root过的手机是看不到这个目录的</strong>。</p>
</blockquote>
<p>考虑到安全因素，我没有选择这种方法。</p>
<h3 id="方法3——安卓模拟器"><a href="#方法3——安卓模拟器" class="headerlink" title="方法3——安卓模拟器"></a>方法3——安卓模拟器</h3><p>我们可以在电脑上安装一款安卓模拟器，然后里面下载手机微信并登录，<strong>然后将手机端聊天记录备份到电脑端微信，再将电脑端聊天记录恢复到安卓虚拟器里的微信</strong>。现在对安卓虚拟器进行root，然后我就可以进入<code>/data/data/&lt;package_name&gt;</code>目录，从而把数据库复制到电脑上了。</p>
<p>下面我简单讲一下整个步骤：</p>
<ol>
<li>我选择了蓝叠这个安卓模拟器。首先在模拟器上下载了微信APP，然后我把自己手机微信上的聊天数据备份到电脑微信中，然后退出手机微信，在模拟器上登录微信，再把数据恢复到模拟器上的微信中。</li>
<li>在模拟器右上角的设置中打开root权限。</li>
<li>打开文件浏览器，找到数据库文件，它在<code>/data/data/com.tencent.mm/MicroMsg/[weixin_name]/EnMicroMsg.db</code>。<strong>其中文件夹 <code>[weixin_name]</code> 的名字为32位的md5值，如 <code>85794836981744a4472f69d89aeb2152</code>，一个微信号对应一个文件夹</strong>。如果有多个 <code>[weixin_name]</code>，那么此微信肯定登录过多个微信号。</li>
<li>把数据库文件拷贝到<code>/sdcard/windows/BstSharedFolder</code>这个共享文件夹中，这个文件夹在Windows上就是<code>BluestacksCN/Engine/ProgramData/Engine/UserData/SharedFolder</code>，当我们在模拟器中拷贝完数据后，在Windows上就能看到了。注意：数据是互通的。</li>
</ol>
<h2 id="破解数据库密码"><a href="#破解数据库密码" class="headerlink" title="破解数据库密码"></a>破解数据库密码</h2><p>根据前人的分析，微信数据库 <code>EnMicroMsg.db</code> 的密码是由 <code>MD5(IMEI + uin).substring(0, 7)</code> 生成的。因此，我们需要找到<code>IMEI</code>和<code>uin</code>值。</p>
<h3 id="IMEI"><a href="#IMEI" class="headerlink" title="IMEI"></a>IMEI</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>我通过在模拟器上安装这个工具：<a href="https://apkpure.com/find-imei/com.imeino" target="_blank" rel="noopener external nofollow noreferrer">Find IMEI</a>来查看<code>IMEI</code>。</p>
<p>下载apk，然后把apk放入到<code>BluestacksCN/Engine/ProgramData/Engine/UserData/SharedFolder</code>这个文件夹中，我们就可以在模拟器的<code>/sdcard/windows/BstSharedFolder</code>文件夹中找到了，然后直接安装，打开就直接显示出<code>IMEI</code>了。</p>
<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>我们也可以在<code>/data/data/com.tencent.mm/shared_prefs/DENGTA_META.xml</code>中查找名为 <code>IMEI_DENGTA</code> 的值。</p>
<h3 id="uin"><a href="#uin" class="headerlink" title="uin"></a>uin</h3><p><code>uin</code>（<code>unique identifier</code>）是唯一标识符（整数类型），微信分配每个用户的唯一标识符，它具有不可重复性，也就是说这个世界上没有两个 <code>uin</code> 相同的微信号。</p>
<h4 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h4><p>我们可以在<code>/data/data/com.tencent.mm/shared_prefs/system_config_prefs.xml</code>找到<code>default_uin</code>，后面的数字就是我们要找的<code>uin</code>了。</p>
<h4 id="方法2-1"><a href="#方法2-1" class="headerlink" title="方法2"></a>方法2</h4><p>我们也可以登录 web 微信，按 F12 打开网页调试工具，然后 <code>ctrl+F</code> 搜索 <code>uin</code>，可以找到一串长长的 URL，里面的 <code>uin</code> 就是当前登录的微信的 <code>uin</code>。</p>
<h3 id="计算密码"><a href="#计算密码" class="headerlink" title="计算密码"></a>计算密码</h3><p>注意：</p>
<ul>
<li><code>IMEI</code>中的字母必须为<strong>大写</strong></li>
<li><code>MD5</code>中的字母必须为<strong>小写</strong></li>
</ul>
<p>我们可以使用：<a href="http://emn178.github.io/online-tools/md5.html" target="_blank" rel="noopener external nofollow noreferrer">MD5在线计算</a>来计算MD5值，<strong>密码即为32位的前7位（小写）</strong>。</p>
<h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><p>微信使用了<code>sqlcipher</code>加密了数据库，因此，我们也可以使用<code>sqlcipher</code>进行解密。</p>
<blockquote>
<p>SQLCipher是一个在SQLite基础之上进行扩展的开源数据库，它主要是在SQLite的基础之上增加了数据加密功能，如果我们在项目中使用它来存储数据的话，就可以大大提高程序的安全性。</p>
</blockquote>
<h3 id="Windows下打开"><a href="#Windows下打开" class="headerlink" title="Windows下打开"></a>Windows下打开</h3><p>Windows用户可以直接使用 <code>sqlcipher.exe</code> 打开 <code>com.tencent.mm/MicroMsg/[weixin_name]/EnMicroMsg.db</code>，在弹出的窗口输入刚刚生成的7位密码。</p>
<blockquote>
<p><code>sqlcipher.exe</code>其实是SQLite Database Browser软件再嵌套了解密功能。</p>
</blockquote>
<p><strong>注意：sqlcipher不同版本使用的加密方式不同，如果解密用<code>sqlcipher</code>版本和加密用的<code>sqlcipher</code>版本不一样，会提示<code>file is not a database</code>，实际错误是解密失败。目前发现<code>2.1</code>版本的sqlcipher可以正常解密</strong>。</p>
<p>然后我们可以在 <code>Browse Data</code> 菜单栏处查看数据中各个数据表。</p>
<p>我们可以点击菜单栏的<code>File-Export-Table as CSV file</code>，选择message表，导出成<code>csv</code>文件。如果直接用Excel打开这个表格，可能会显示乱码。所以我们新建一个Excel表格，点击数据-来自文本，然后导入这个<code>.csv</code>文件。在弹出的第一个下拉框中选择<code>GB2312</code>，然后载入就不会出现乱码。</p>
<h3 id="Ubuntu下打开"><a href="#Ubuntu下打开" class="headerlink" title="Ubuntu下打开"></a>Ubuntu下打开</h3><p>安装sqlicipher：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sqlcipher</span><br></pre></td></tr></table></figure>

<p>解密数据库文件，这里我们要输入前面得到的密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlcipher EnMicroMsg.db <span class="string">'PRAGMA key = "yourkey"; PRAGMA cipher_use_hmac = off; PRAGMA kdf_iter = 4000; ATTACH DATABASE "decrypted_database.db" AS decrypted_database KEY "";SELECT sqlcipher_export("decrypted_database");DETACH DATABASE decrypted_database;'</span></span><br></pre></td></tr></table></figure>

<p>然后我们就得到了解密的数据库<code>decrypted_database.db</code>，我们可以用自己熟悉的数据库软件打开。</p>
<h3 id="了解数据表"><a href="#了解数据表" class="headerlink" title="了解数据表"></a>了解数据表</h3><p>我们主要使用以下三个表：</p>
<ul>
<li><code>rcontact</code>：通讯录表</li>
<li><code>chatroom</code>：群聊表</li>
<li><code>message</code>：聊天记录表</li>
</ul>
<p>微信文字聊天记录在数据表<code>message</code>中。我们可以根据<code>talker</code>这个字段来筛选出特定用户的聊天记录。如果为群聊，那么<code>message.talker = chatroom.chatroomname</code>。<code>message.content</code>中存储形式为：<code>群成员wxid:\n内容</code>。</p>
<p>比如，我们可以查询与某人的聊天记录，下面是SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> datetime(<span class="keyword">subStr</span>(<span class="keyword">cast</span>(m.createTime <span class="keyword">as</span> <span class="built_in">text</span>),<span class="number">1</span>,<span class="number">10</span>),<span class="string">'unixepoch'</span>, <span class="string">'localtime'</span>) <span class="keyword">as</span> theTime,</span><br><span class="line"><span class="keyword">case</span> m.isSend </span><br><span class="line">    <span class="keyword">when</span> <span class="number">0</span> <span class="keyword">then</span> r.nickname </span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'我'</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">as</span> person, m.content </span><br><span class="line"><span class="keyword">from</span> message m <span class="keyword">inner</span> <span class="keyword">join</span> rcontact r </span><br><span class="line"><span class="keyword">on</span> m.talker = r.username </span><br><span class="line"><span class="keyword">where</span> m.type = <span class="number">1</span> <span class="keyword">and</span> r.nickname = <span class="string">'对方微信昵称'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> theTime;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.imwxz.com/guide/134.html" target="_blank" rel="noopener external nofollow noreferrer">免root提取微信聊天记录数据库</a></li>
<li><a href="https://www.shixuen.com/android/weixin.html" target="_blank" rel="noopener external nofollow noreferrer">手机微信聊天记录的解密与恢复</a></li>
<li><a href="https://godweiyang.com/2019/08/09/wechat-explore/" target="_blank" rel="noopener external nofollow noreferrer">微信聊天记录导出为电脑txt文件教程</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>Android</tag>
        <tag>sqlcipher</tag>
      </tags>
  </entry>
  <entry>
    <title>Python requests在HTTP2.0下的问题</title>
    <url>/archives/9bd92731.html</url>
    <content><![CDATA[<p>今天在用Python中的requests包爬数据时，发现了一个很特殊的请求头，其中有<code>:authority</code>、<code>:method</code>、<code>:path</code>、<code>:scheme</code>这几个参数，这些参数说明这个网站用了HTTP2.0。然后我发现我们不能用requests包直接构造请求头进行爬取了。本文简单分析并解决这个问题。</p>
<a id="more"></a>

<blockquote>
<p>HTTP2.0：请求/响应首部的定义基本没有改变，只是所有首部键必须全部小写，而且请求行要独立为<code>:method</code>、<code>:scheme</code>、<code>:host</code>、<code>:path</code>这些键值对。</p>
</blockquote>
<p>如果我们按照以前的设置构造headers进行爬取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">"https://xxxxxx.com/tag/xxxx/page/1.html"</span></span><br><span class="line">headers = &#123;<span class="string">':authority'</span>: <span class="string">'xxxxxx.com'</span>,</span><br><span class="line">           <span class="string">':method'</span>: <span class="string">'GET'</span>,</span><br><span class="line">           <span class="string">':path'</span>: <span class="string">'/tag/xxxx/page/1'</span>,</span><br><span class="line">           <span class="string">':scheme'</span>: <span class="string">'https'</span>,</span><br><span class="line">           <span class="string">'accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,</span><br><span class="line">           <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">           <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">           <span class="string">'Sec-Fetch-Mode'</span>:<span class="string">'navigate'</span>,</span><br><span class="line">           <span class="string">'Sec-Fetch-Site'</span>:<span class="string">'none'</span>,</span><br><span class="line">           <span class="string">'Sec-Fetch-User'</span>:<span class="string">'?1'</span>,</span><br><span class="line">           <span class="string">'Upgrade-Insecure-Requests'</span>:<span class="string">'1'</span>,</span><br><span class="line">           <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'</span>&#125;</span><br><span class="line"></span><br><span class="line">requests.get(url = url, headers = headers)</span><br></pre></td></tr></table></figure>

<p>会报出以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ValueError: Invalid header name b&#39;:authority&#39;</span><br></pre></td></tr></table></figure>

<p>这是因为HTTP的请求头不能以分号开头。源码不能解析这样的请求头，具体可以见<a href="https://github.com/python/cpython/blob/master/Lib/http/client.py#L1196" target="_blank" rel="noopener external nofollow noreferrer">源码</a>。</p>
<p>我们可以使用hyper这个第三方包来解决这个问题，我们将代码改写为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hyper.contrib <span class="keyword">import</span> HTTP20Adapter</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://xxxxxx.com/tag/xxxx/page/1.html"</span></span><br><span class="line">headers = &#123;<span class="string">':authority'</span>: <span class="string">'xxxxxx.com'</span>,</span><br><span class="line">           <span class="string">':method'</span>: <span class="string">'GET'</span>,</span><br><span class="line">           <span class="string">':path'</span>: <span class="string">'/tag/xxxx/page/1'</span>,</span><br><span class="line">           <span class="string">':scheme'</span>: <span class="string">'https'</span>,</span><br><span class="line">           <span class="string">'accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,</span><br><span class="line">           <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">           <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">           <span class="string">'Sec-Fetch-Mode'</span>:<span class="string">'navigate'</span>,</span><br><span class="line">           <span class="string">'Sec-Fetch-Site'</span>:<span class="string">'none'</span>,</span><br><span class="line">           <span class="string">'Sec-Fetch-User'</span>:<span class="string">'?1'</span>,</span><br><span class="line">           <span class="string">'Upgrade-Insecure-Requests'</span>:<span class="string">'1'</span>,</span><br><span class="line">           <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'</span>&#125;</span><br><span class="line"></span><br><span class="line">sessions = requests.session()</span><br><span class="line">sessions.mount(<span class="string">'https://xxxx.com'</span>, HTTP20Adapter())</span><br><span class="line">response = sessions.get(url = url,headers = headers)</span><br></pre></td></tr></table></figure>

<p>OK，问题解决！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/51630571/http-headers-requests-python" target="_blank" rel="noopener external nofollow noreferrer">HTTP headers - Requests - Python</a></li>
<li><a href="https://www.jianshu.com/p/1335a518151f" target="_blank" rel="noopener external nofollow noreferrer">Python 请求头header在http/http2下的问题</a></li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>问题</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>requests</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu内置的Python3.5安装pip模块</title>
    <url>/archives/399c2726.html</url>
    <content><![CDATA[<p>本文首先介绍了如何给Ubuntu16.04内置的Python3.5安装pip模块，然后扩展介绍了多版本Python安装对应pip以及对pip对应Python版本进行管理的方法。</p>
<a id="more"></a>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当我想通过Ubuntu16.04内置的Python3.5的pip安装第三方包时，出现如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VPS:/home<span class="comment"># python3 -m pip install numpy</span></span><br><span class="line">/usr/bin/python3: No module named pip</span><br></pre></td></tr></table></figure>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>从错误描述来看，pip包不存在。</p>
<p>我们知道：</p>
<ul>
<li>Debian软件管理器（<code>sudo apt-get install</code>）安装的package存放在 <code>/usr/lib/python2.7/dist-packages</code>目录中</li>
<li>Python软件管理器（<code>easy_install</code>和<code>pip</code>）安装的package存放在<code>/usr/local/lib/python2.7/dist-packages</code>目录中</li>
<li>手动从源代码安装的package会直接使用目录<code>site-packages</code></li>
</ul>
<p>然后我进入到以下目录，看下是否存在pip文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VPS:/home<span class="comment"># cd /usr/local/lib/python3.5/dist-packages/</span></span><br><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python3.5/dist-packages<span class="comment"># ll</span></span><br><span class="line">total 8</span><br><span class="line">drwxrwsr-x 2 root staff 4096 Nov 14 08:10 ./</span><br><span class="line">drwxrwsr-x 3 root staff 4096 Nov 14 08:10 ../</span><br></pre></td></tr></table></figure>

<p>发现当前目录是空的，并没有pip，说明并没有装上pip，因此，我们需要<strong>手动安装pip</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">sudo python3.5 get-pip.py</span><br></pre></td></tr></table></figure>

<p><strong>注意：这里的Python3.5根据你Python的版本进行替换</strong>。</p>
<p>然后查看一下是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure>

<p>显示下面说明安装成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip 19.3.1 from &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.5&#x2F;dist-packages&#x2F;pip (python 3.5)</span><br></pre></td></tr></table></figure>

<p>然后我们就可以使用pip来安装别的包了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install XXX</span><br></pre></td></tr></table></figure>

<h2 id="pip版本管理"><a href="#pip版本管理" class="headerlink" title="pip版本管理"></a>pip版本管理</h2><p>首先我通过上面的方法安装了Python2.7的pip，此时查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python2.7/dist-packages<span class="comment"># pip -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python2.7/dist-packages/pip (python 2.7)</span><br><span class="line"></span><br><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python2.7/dist-packages<span class="comment"># pip2 -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python2.7/dist-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure>

<p>然后我用同样的方法安装了Python3.5的pip，此时查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python3.5/dist-packages<span class="comment"># pip -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python3.5/dist-packages/pip (python 3.5)</span><br><span class="line"></span><br><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python3.5/dist-packages<span class="comment"># pip3 -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python3.5/dist-packages/pip (python 3.5)</span><br><span class="line"></span><br><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python3.5/dist-packages<span class="comment"># pip3.5 -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python3.5/dist-packages/pip (python 3.5)</span><br></pre></td></tr></table></figure>

<p>然后我用同样的方法安装了Python3.6的pip，此时查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python3.6/dist-packages<span class="comment"># pip -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/pip (python 3.6)</span><br><span class="line"></span><br><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python3.6/dist-packages<span class="comment"># pip3 -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/pip (python 3.6)</span><br><span class="line"></span><br><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python3.6/dist-packages<span class="comment"># pip3.5 -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python3.5/dist-packages/pip (python 3.5)</span><br><span class="line"></span><br><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python3.6/dist-packages<span class="comment"># pip3.6 -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/pip (python 3.6)</span><br></pre></td></tr></table></figure>


<p>我们发现，<strong>每次安装pip，它都会把默认pip对应的Python修改，导致pip对应版本混乱</strong>。</p>
<p>现在系统中安装了Python2.7、Python3.5、Python3.6。各个pip对应的Python版本如下：</p>
<ul>
<li><code>pip</code>对应<code>Python3.6</code></li>
<li><code>pip2</code>对应<code>Python2.7</code></li>
<li><code>pip3</code>对应<code>Python3.6</code></li>
<li><code>pip3.5</code>对应<code>Python3.5</code></li>
<li><code>pip3.6</code>对应<code>Python3.6</code></li>
</ul>
<p><strong>现在我们想要让<code>pip</code>对应<code>Python2.7</code>，让<code>pip3</code>对应<code>Python3.5</code></strong>。</p>
<p>然后我们进入到<code>/usr/local/bin</code>，发现里面有很多<code>pip</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VPS:/usr/<span class="built_in">local</span>/lib/python3.6/dist-packages<span class="comment"># cd /usr/local/bin/</span></span><br><span class="line">root@VPS:/usr/<span class="built_in">local</span>/bin<span class="comment"># ll</span></span><br><span class="line">total 52</span><br><span class="line">drwxr-xr-x  2 root root 4096 Dec 15 03:37 ./</span><br><span class="line">drwxr-xr-x 10 root root 4096 Nov 14 08:09 ../</span><br><span class="line">-rwxr-xr-x  1 root root  232 Dec 15 03:37 easy_install*</span><br><span class="line">-rwxr-xr-x  1 root root  232 Dec 15 03:19 easy_install-2.7*</span><br><span class="line">-rwxr-xr-x  1 root root  232 Dec 15 03:20 easy_install-3.5*</span><br><span class="line">-rwxr-xr-x  1 root root  232 Dec 15 03:37 easy_install-3.6*</span><br><span class="line">-rwxr-xr-x  1 root root  219 Dec 15 03:37 pip*</span><br><span class="line">-rwxr-xr-x  1 root root  219 Dec 15 03:19 pip2*</span><br><span class="line">-rwxr-xr-x  1 root root  219 Dec 15 03:19 pip2.7*</span><br><span class="line">-rwxr-xr-x  1 root root  219 Dec 15 03:37 pip3*</span><br><span class="line">-rwxr-xr-x  1 root root  219 Dec 15 03:20 pip3.5*</span><br><span class="line">-rwxr-xr-x  1 root root  219 Dec 15 03:37 pip3.6*</span><br><span class="line">-rwxr-xr-x  1 root root  210 Dec 15 03:37 wheel*</span><br></pre></td></tr></table></figure>

<p>这些pip文件其实是Python脚本文件，我们可以用vim打开<code>pip</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.6</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pip._internal.main <span class="keyword">import</span> main</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sys.argv[<span class="number">0</span>] = re.sub(<span class="string">r'(-script\.pyw|\.exe)?$'</span>, <span class="string">''</span>, sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure>

<p><strong>这个文件的第一行指定了这个脚本对应的Python版本，如果想把pip对应的Python版本改为2.7的，只需修改Python3.6为Python2.7即可</strong>。修改保存后执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VPS:/usr/<span class="built_in">local</span>/bin<span class="comment"># pip -V</span></span><br><span class="line">pip 19.3.1 from /usr/<span class="built_in">local</span>/lib/python2.7/dist-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure>

<p>我们已经成功的把pip对应的Python版本改为了2.7，同理也可以修改pip3对应的版本。</p>
<p>注意：<strong>不同版本的pip对应的这个脚本文件的内容不同</strong>，上面显示的是<code>pip 19.3.1</code>版本的，其它版本的脚本文件内容可能与之不同。直接改这个脚本文件来修改pip对应的Python版本的前提是：当前脚本文件对应的Python版本与要修改对应的Python版本的pip包版本最好一致，不一致很可能出错。<strong>最简单的解决办法是都升级为最新的pip版本</strong>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/9387928/whats-the-difference-between-dist-packages-and-site-packages" target="_blank" rel="noopener external nofollow noreferrer">What’s the difference between dist-packages and site-packages?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37473690" target="_blank" rel="noopener external nofollow noreferrer">多版本Python安装pip及pip版本管理终极教程</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>pip</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo配置Cloudflare免费CDN</title>
    <url>/archives/12c6c559.html</url>
    <content><![CDATA[<p>由于 GitHub Pages 的服务器在国外，国内访问速度可能会非常慢。目前有以下几种解决方案：</p>
<ul>
<li>博客双线部署在GitHub Pages和Coding Pages上，其中国内流量解析到Coding Pages，国外流量解析到GitHub Pages<ul>
<li>优势：无需购买VPS、速度比较快、不用备案</li>
<li>劣势：Coding Pages的服务并不是那么稳定，近期出现多次不能正常部署或访问Pages的问题</li>
</ul>
</li>
<li>博客部署到国内的VPS<ul>
<li>优势：速度快</li>
<li>劣势：需要购买VPS、需要备案</li>
</ul>
</li>
<li>博客部署在GitHub Pages上并采用CDN加速<ul>
<li>优势：速度快、无需备案、稳定</li>
<li>劣势：CDN比较贵，hhh</li>
</ul>
</li>
</ul>
<p>本文主要介绍Hexo博客部署在GitHub Pages上并且配置CDN进行加速的方法。</p>
<p>这里我们假设博客已经部署在GitHub Pages并启用了个性域名。如果你还没有绑定个性域名，可以参考这篇教程：<a href="https://tding.top/archives/b48e2719.html">GitHub Pages 绑定域名</a>，其中域名服务器修改到DNSPod这部分可以不看，因为这里我们会用Cloudflare来完成域名解析。</p>
<a id="more"></a>

<h2 id="CDN介绍"><a href="#CDN介绍" class="headerlink" title="CDN介绍"></a>CDN介绍</h2><blockquote>
<p>内容分发网络（Content delivery network或Content distribution network，缩写：CDN）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>
</blockquote>
<p>简单来说，CDN 就是部署在世界各地的缓存服务器，它们会提前缓存网站上的资源，然后当用户想要访问相关资源时，直接从 CDN 服务器上取就可以了。这样不仅可以增加访问速度减少访问延迟，还可以减缓网站服务器上的压力。</p>
<h2 id="为什么选择Cloudflare？"><a href="#为什么选择Cloudflare？" class="headerlink" title="为什么选择Cloudflare？"></a>为什么选择Cloudflare？</h2><p>国内的CDN服务提供商有不少，但是基本都需要备案，因此我转向了Cloudflare这个国外的CDN服务提供商。</p>
<p>Cloudflare 是全球最大的 DNS 服务提供商之一。除此之外他们还提供CDN、SSL证书、DDos保护等服务，并且 Cloudflare 与百度有合作，在国内也部署有大量的节点，还能顺便解决百度爬无法抓取 GitHub Pages 的问题。</p>
<h2 id="CDN配置"><a href="#CDN配置" class="headerlink" title="CDN配置"></a>CDN配置</h2><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><ol>
<li><p>首先要去 Cloudflare 注册一个帐号。<strong>注意：我们需要的是国际版的 CloudFlare，而不是 CloudFlare 与百度合作的百度云加速</strong>。</p>
</li>
<li><p>注册好后点击 <code>Add site</code> 添加你的网站个性化域名。</p>
</li>
<li><p>添加好后选择免费的那个计划（Plan），有钱也可以选择收费的，提供的服务更多。</p>
</li>
<li><p>然后点击 <code>Scan DNS Records</code>，等待扫描完成。即使没有扫到 DNS 记录也没有关系，我们可以在后面自己添加，我们只需要添加下图框起来的那两条：</p>
</li>
</ol>
<img src="/archives/12c6c559/DNS%E8%AE%BE%E7%BD%AE.png" class="" title="DNS设置">

<ol start="5">
<li>然后 Cloudflare 会要你把你的 DNS 服务器替换成他提供的，我们只需要去域名商那里设置一下即可。<strong>CloudFlare 既是一个 CDN 服务商，同样也是一个 DNS 服务商</strong>。DNS修改完成后可以点击 <code>Recheck Nameservers</code> 来复查 NS 记录是否正确设置。</li>
</ol>
<p>然后过个几分钟，显示 <code>Great news! Cloudflare is now protecting your site</code> 就说明设置成功。</p>
<h3 id="Cloudflare设置详解"><a href="#Cloudflare设置详解" class="headerlink" title="Cloudflare设置详解"></a>Cloudflare设置详解</h3><h4 id="Overview菜单设置"><a href="#Overview菜单设置" class="headerlink" title="Overview菜单设置"></a>Overview菜单设置</h4><p>主要关注下面两个快捷设置：</p>
<ul>
<li><code>under attack mode</code>：当你的网站被攻击的时候打开它，这样可以阻止攻击。</li>
<li><code>development mode</code>：由于cloudflare采用了缓存技术，当你更新了网站的内容，不一定能马上在前台看到更新的内容。这个时候你只要打开development mode就可以马上看到网站更新的内容。当然，正常情况下还是关掉比较好。</li>
</ul>
<img src="/archives/12c6c559/Overview%E8%8F%9C%E5%8D%95%E8%AE%BE%E7%BD%AE.png" class="" title="Overview菜单设置">

<h4 id="Analytics菜单设置"><a href="#Analytics菜单设置" class="headerlink" title="Analytics菜单设置"></a>Analytics菜单设置</h4><p>这里主要是看网站使用cloudflare之后的一些分析数据，Analytics下面包含几个子菜单：Traffic、security、Performance、DNS。</p>
<ul>
<li>Traffic子菜单：主要是网站在过去某一个时间段的请求、带宽、访客情况。</li>
<li>Security子菜单：主要是某一段时间内受到的威胁数据，包括威胁次数、来自哪些国家、威胁的类型等等。</li>
<li>Performance子菜单：付费功能。</li>
<li>DNS子菜单：主要是DNS查询的数据。</li>
</ul>
<h4 id="DNS菜单设置"><a href="#DNS菜单设置" class="headerlink" title="DNS菜单设置"></a>DNS菜单设置</h4><p>在DNS菜单里面，你可以随意添加或删除所有DNS记录，也可以选择使用或不使用cloudflare的CDN服务。</p>
<p>注意：只有A记录和CNAME记录才可以设置使用CDN服务，我们只需要点亮<code>Proxy status</code>处的云彩小图标即可切换成使用CDN的状态。</p>
<h4 id="SSL-TLS菜单设置"><a href="#SSL-TLS菜单设置" class="headerlink" title="SSL/TLS菜单设置"></a>SSL/TLS菜单设置</h4><p>这里面主要是网站加密的设置。</p>
<ul>
<li><code>SSL</code>设置：如果你本来的网站有SSL证书，这里选择full即可，即浏览器到Cloudflare和Cloudflare到服务器都是加密的。</li>
<li><strong><code>Always Use HTTPS</code>设置：这个打开，一直使用https链接</strong>。</li>
<li><code>Authenticated Origin Pulls</code> &amp; <code>Opportunistic Encryption</code> &amp; <code>Onion Routing</code>设置：这些设置都打开</li>
<li><code>Minimum TLS Version</code>设置：选择1.1即可，如果选择太高可能导致网站打不开。</li>
</ul>
<h4 id="Firewall菜单设置"><a href="#Firewall菜单设置" class="headerlink" title="Firewall菜单设置"></a>Firewall菜单设置</h4><p>Firewall菜单里面可以对网站安全进一步设置，限制某些IP或地区的用户访问等。</p>
<ul>
<li>Events子菜单：这里面可以查看防火墙的一些小事件，比如屏蔽的一些访问。</li>
<li>Managed Rules子菜单：付费功能。</li>
<li>Firewall Rules子菜单：这里可以设置限制其他人访问你的网站的规则，每个账户只能设置5个限制规则。</li>
<li>TOOLS子菜单：这里的功能是firewall rules功能的补充，都是对用户访问你的网站的一些设置。<ul>
<li><code>IP Access Rules</code>：主要是针对IP、IP范围及国家和ASN设置一些规则。</li>
<li><code>User Agent Blocking</code>：对用户使用的代理设置规则，比如浏览器类型、CPU、操作系统。</li>
</ul>
</li>
<li>Settting子菜单：<ul>
<li><code>Security Level</code>：这个设置low即可，如果设置太高，就会过于敏感，导致很多用户受影响。</li>
<li><code>Challenge Passage</code>：这是验证的有效期，可以设置久一点，比如<code>1 hour</code>。</li>
<li><code>Browser Integrity Check</code> 和 <code>Privacy Pass Support</code>：全部打开。</li>
</ul>
</li>
</ul>
<h4 id="Speed菜单设置"><a href="#Speed菜单设置" class="headerlink" title="Speed菜单设置"></a>Speed菜单设置</h4><ul>
<li><code>Auto Minify</code>：网页最小化处理，把Javascript, css html前面都打勾即可。</li>
<li><code>Brotli</code>：这是一种比gzip更好的网页压缩方式，打开即可。</li>
<li><code>Rocket Loader</code>：这个需要测试决定是否需要打开，没有固定的答案，你可以打开之后，然后在不同的浏览器上面查看网页的效果，如果出现网页排版等问题，那就将它关闭。</li>
</ul>
<h4 id="Caching菜单设置"><a href="#Caching菜单设置" class="headerlink" title="Caching菜单设置"></a>Caching菜单设置</h4><ul>
<li><code>Purge Cache</code>：这个设置是清除缓存，其中：<ul>
<li><code>Custom Purge</code>：清除指定页面的缓存，我们可以点击<code>custom purge</code>, 然后在框里面输入要清除的链接，再点击<code>purge</code>即可。</li>
<li><code>Purge Everything</code>：清除整个网站的缓存。</li>
</ul>
</li>
<li><code>Caching Level</code>：缓存水平设置，决定缓存哪些内容，这里选择standard即可。</li>
<li><code>Browser Cache TTL</code>：即浏览器缓存过期时间，决定浏览器多久向网站获取一次新缓存。</li>
</ul>
<h4 id="Page-Rules菜单设置"><a href="#Page-Rules菜单设置" class="headerlink" title="Page Rules菜单设置"></a>Page Rules菜单设置</h4><p>免费版本可以设置3个页面的规则。</p>
<p>这里我们可以设置forwarding，也就是301跳转，比如我想要让<code>tding.me</code>整个站都跳转到<code>tding.top</code>，具体设置如下图：</p>
<img src="/archives/12c6c559/%E8%B7%B3%E8%BD%AC%E8%AE%BE%E7%BD%AE.png" class="" title="跳转设置">

<p>注意：如果<code>Forwarding URL</code>设置为<code>https://tding.top</code>，当我们访问<code>tding.me/about.html</code>时会跳转到<code>https://tding.top</code>而不是我们期望的<code>https://tding.top/about.html</code>。解决办法就是使用<strong>变量</strong>，每个通配符对应于可在转发地址中引用的变量。变量用 <code>$</code> 后跟一个数字表示，如果要引用第一个通配符，我们可以使用 <code>$1</code>，如果要引用第二个通配符，我们可以使用 <code>$2</code>，依此类推。<strong>因此，<code>Forwarding URL</code>应该设置成<code>https://tding.top/$1</code></strong>。</p>
<h2 id="测速"><a href="#测速" class="headerlink" title="测速"></a>测速</h2><p>下面是Cloudflare CDN加速后（左图）于GitHub Pages本身（右图）的速度对比：</p>
<img src="/archives/12c6c559/%E6%B5%8B%E9%80%9F.png" class="" title="测速">


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://mogeko.me/2019/056/" target="_blank" rel="noopener external nofollow noreferrer">为博客添加免费的 CDN (Cloudflare)</a></li>
<li><a href="https://www.imhunk.com/cloudflare-tutorials/" target="_blank" rel="noopener external nofollow noreferrer">如何用CDN加速你的网站 – Cloudflare免费版详细使用教程</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>CDN</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>R数据可视化-相关矩阵热力图</title>
    <url>/archives/7fa1138e.html</url>
    <content><![CDATA[<p>在数据分析时，我们经常需要看变量之间的相关性，一般采用相关矩阵热力图进行可视化，而ggplot2本身不能直接绘制热图，因此我们需要做数据变换把相关矩阵转换为一个3列的数据框（变量名Var1、变量名Var2、数值value），然后再分别映射给x、y和fill参数，绘制出热力图。</p>
<a id="more"></a>

<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>这里我用的是ggplot2内置的mtcars数据集：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df &lt;- mtcars[, c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)]</span><br><span class="line">head(df)</span><br></pre></td></tr></table></figure>

<p>这个数据前6行为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                   mpg disp  hp drat    wt  qsec</span><br><span class="line">Mazda RX4         21.0  160 110 3.90 2.620 16.46</span><br><span class="line">Mazda RX4 Wag     21.0  160 110 3.90 2.875 17.02</span><br><span class="line">Datsun 710        22.8  108  93 3.85 2.320 18.61</span><br><span class="line">Hornet 4 Drive    21.4  258 110 3.08 3.215 19.44</span><br><span class="line">Hornet Sportabout 18.7  360 175 3.15 3.440 17.02</span><br><span class="line">Valiant           18.1  225 105 2.76 3.460 20.22</span><br></pre></td></tr></table></figure>

<p>然后计算相关矩阵：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">round(cor(df), <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       mpg  disp    hp  drat    wt  qsec</span><br><span class="line">mpg   1.00 -0.85 -0.78  0.68 -0.87  0.42</span><br><span class="line">disp -0.85  1.00  0.79 -0.71  0.89 -0.43</span><br><span class="line">hp   -0.78  0.79  1.00 -0.45  0.66 -0.71</span><br><span class="line">drat  0.68 -0.71 -0.45  1.00 -0.71  0.09</span><br><span class="line">wt   -0.87  0.89  0.66 -0.71  1.00 -0.17</span><br><span class="line">qsec  0.42 -0.43 -0.71  0.09 -0.17  1.00</span><br></pre></td></tr></table></figure>

<p>然后我用reshape2包中的<code>melt()</code>函数将这个相关矩阵转换为3列的数据框格式：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df_cor &lt;- round(cor(df), <span class="number">2</span>)</span><br><span class="line">melt(df_cor)</span><br></pre></td></tr></table></figure>

<p>下面是输出的前6行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  Var1 Var2 value</span><br><span class="line">1  mpg  mpg  1.00</span><br><span class="line">2 disp  mpg -0.85</span><br><span class="line">3   hp  mpg -0.78</span><br><span class="line">4 drat  mpg  0.68</span><br><span class="line">5   wt  mpg -0.87</span><br><span class="line">6 qsec  mpg  0.42</span><br></pre></td></tr></table></figure>

<h2 id="相关矩阵热力图绘制"><a href="#相关矩阵热力图绘制" class="headerlink" title="相关矩阵热力图绘制"></a>相关矩阵热力图绘制</h2><h3 id="基本相关矩阵热力图绘制"><a href="#基本相关矩阵热力图绘制" class="headerlink" title="基本相关矩阵热力图绘制"></a>基本相关矩阵热力图绘制</h3><p>前面我们已经得到了3列的数据框（变量名Var1、变量名Var2、数值value），现在我们只需要将它们分别映射给x、y和fill参数，就能够绘制出热力图。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df_cor &lt;- round(cor(df), <span class="number">2</span>) </span><br><span class="line">df_cor %&gt;%</span><br><span class="line">    melt() %&gt;%</span><br><span class="line">    ggplot(aes(x = Var1, y = Var2, fill = value)) + </span><br><span class="line">    geom_tile()</span><br></pre></td></tr></table></figure>

<img src="/archives/7fa1138e/1.png" class="" title="图1">

<p>默认的绘图样式比较丑，也不太直观。</p>
<h3 id="相关矩阵的下三角绘制热力图"><a href="#相关矩阵的下三角绘制热力图" class="headerlink" title="相关矩阵的下三角绘制热力图"></a>相关矩阵的下三角绘制热力图</h3><p>相关矩阵具有冗余信息，因此，我们可以将其中的上三角部分设置为NA：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df_cor &lt;- round(cor(df), <span class="number">2</span>)</span><br><span class="line">df_cor[upper.tri(df_cor)] &lt;- <span class="literal">NA</span></span><br></pre></td></tr></table></figure>

<p>下面是<code>df_cor</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       mpg  disp    hp  drat    wt  qsec</span><br><span class="line">mpg   1.00    NA    NA    NA    NA    NA</span><br><span class="line">disp -0.85  1.00    NA    NA    NA    NA</span><br><span class="line">hp   -0.78  0.79  1.00    NA    NA    NA</span><br><span class="line">drat  0.68 -0.71 -0.45  1.00    NA    NA</span><br><span class="line">wt   -0.87  0.89  0.66 -0.71  1.00    NA</span><br><span class="line">qsec  0.42 -0.43 -0.71  0.09 -0.17  1.00</span><br></pre></td></tr></table></figure>

<p>下面绘制热力图：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相关矩阵的上三角-左图</span></span><br><span class="line">df_cor %&gt;% </span><br><span class="line">    melt(na.rm = <span class="literal">TRUE</span>) %&gt;%</span><br><span class="line">    ggplot(aes(x = Var1, y = Var2, fill = value)) + </span><br><span class="line">    geom_tile()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关矩阵的上三角+颜色标度+样式美化-右图</span></span><br><span class="line">df_cor %&gt;% </span><br><span class="line">    melt(na.rm = <span class="literal">TRUE</span>) %&gt;%</span><br><span class="line">    ggplot(aes(x = Var1, y = Var2, fill = value)) + </span><br><span class="line">    geom_tile() + </span><br><span class="line">    scale_fill_gradient2(low = <span class="string">"blue"</span>, high = <span class="string">"red"</span>, mid = <span class="string">"white"</span>, midpoint = <span class="number">0</span>, limit = c(-<span class="number">1</span>,<span class="number">1</span>), space = <span class="string">"Lab"</span>, name=<span class="string">"Pearson\nCorrelation"</span>) + </span><br><span class="line">    coord_fixed()</span><br></pre></td></tr></table></figure>

<img src="/archives/7fa1138e/2.png" class="" title="图2">

<ul>
<li><code>coord_fixed()</code>：使得x轴上的一个单位与y轴上的一个单位的长度相同。</li>
</ul>
<h3 id="相关矩阵重新排序"><a href="#相关矩阵重新排序" class="headerlink" title="相关矩阵重新排序"></a>相关矩阵重新排序</h3><p>我们可以根据相关系数对相关矩阵进行重新排序，这样可以更容易地识别矩阵中的隐藏模式。</p>
<p>下面我们用分层聚类<code>hclust()</code>函数对相关矩阵进行重新排序：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df_cor &lt;- round(cor(df), <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 根据距离重新排序</span></span><br><span class="line">dd &lt;- as.dist((<span class="number">1</span> - df_cor)/<span class="number">2</span>)</span><br><span class="line">hc &lt;- hclust(dd)</span><br><span class="line">df_cor &lt;- df_cor[hc$order, hc$order]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上三角部分设置为NA</span></span><br><span class="line">df_cor[upper.tri(df_cor)] &lt;- <span class="literal">NA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热力图绘制</span></span><br><span class="line">heatmap_1 &lt;- df_cor %&gt;% </span><br><span class="line">    melt(na.rm = <span class="literal">TRUE</span>) %&gt;%</span><br><span class="line">    ggplot(aes(x = Var1, y = Var2, fill = value)) + </span><br><span class="line">    geom_tile() + </span><br><span class="line">    scale_fill_gradient2(low = <span class="string">"blue"</span>, high = <span class="string">"red"</span>, mid = <span class="string">"white"</span>, midpoint = <span class="number">0</span>, limit = c(-<span class="number">1</span>,<span class="number">1</span>), space = <span class="string">"Lab"</span>, name=<span class="string">"Pearson\nCorrelation"</span>) + </span><br><span class="line">    coord_fixed()</span><br></pre></td></tr></table></figure>

<p>下面左图是相关矩阵未排序的热力图，右图是相关矩阵排序后的热力图：</p>
<img src="/archives/7fa1138e/3.png" class="" title="图3">

<h3 id="热力图上显示相关系数值"><a href="#热力图上显示相关系数值" class="headerlink" title="热力图上显示相关系数值"></a>热力图上显示相关系数值</h3><p>我们可以用<code>geom_text()</code>函数在热力图上<strong>添加相关系数值</strong>，这样更加直观。然后我可以把主题<code>theme()</code>设置为<strong>空白主题（删除轴标签、轴刻度、面板网格、背景）</strong>，最后改变图例位置。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 热力图上显示相关系数值-左图</span></span><br><span class="line">heatmap_1 + </span><br><span class="line">    geom_text(aes(Var1, Var2, label = value), color = <span class="string">"black"</span>, size = <span class="number">4</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 热力图上显示相关系数值+主题、图例美化-右图</span></span><br><span class="line">heatmap_1 + </span><br><span class="line">    geom_text(aes(Var1, Var2, label = value), color = <span class="string">"black"</span>, size = <span class="number">4</span>)  + </span><br><span class="line">    theme(</span><br><span class="line">        axis.title.x = element_blank(),</span><br><span class="line">        axis.title.y = element_blank(),</span><br><span class="line">        panel.grid.major = element_blank(),</span><br><span class="line">        panel.border = element_blank(),</span><br><span class="line">        panel.background = element_blank(),</span><br><span class="line">        axis.ticks = element_blank(),</span><br><span class="line">        legend.justification = c(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">        legend.position = c(<span class="number">0.6</span>, <span class="number">0.7</span>),</span><br><span class="line">        legend.direction = <span class="string">"horizontal"</span></span><br><span class="line">    ) +</span><br><span class="line">    guides(fill = guide_colorbar(barwidth = <span class="number">7</span>, barheight = <span class="number">1</span>, title.position = <span class="string">"top"</span>, title.hjust = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/7fa1138e/4.png" class="" title="图4">

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/zhouhucheng00/article/details/86143828" target="_blank" rel="noopener external nofollow noreferrer">数据可视化——R语言ggplot2包绘制相关矩阵为热图</a></li>
</ul>
]]></content>
      <categories>
        <category>R</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>热力图</tag>
      </tags>
  </entry>
  <entry>
    <title>ggplot2去除箱型图中的离群点</title>
    <url>/archives/67c7ad2c.html</url>
    <content><![CDATA[<p>我们在用ggplot2的箱型图<code>boxplot()</code>可视化时会发现，部分特别异常的离群点导致箱型图自身被压缩的很扁，而我们一般更关注箱型图本身。因此，我们需要<strong>在不影响箱型图自身的分布的同时去除这些离群点</strong>。</p>
<a id="more"></a>

<h2 id="方法1——通过geom-boxplot-中的参数设置"><a href="#方法1——通过geom-boxplot-中的参数设置" class="headerlink" title="方法1——通过geom_boxplot()中的参数设置"></a>方法1——通过<code>geom_boxplot()</code>中的参数设置</h2><p>我们可以通过箱型图函数<code>geom_boxplot()</code>中的参数设置来不显示这些离群点：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">geom_boxplot(outlier.shape = <span class="literal">NA</span>)</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">geom_boxplot(outlier.colour = <span class="literal">NA</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/67c7ad2c/1.png" class="" title="图1">

<p>但是这个方法不能满足我们的需求，这里虽然离群点都不再显示了，但是箱型图本身却没有被放大，没有达到我们的目的。</p>
<h2 id="方法2——通过位置标度设置"><a href="#方法2——通过位置标度设置" class="headerlink" title="方法2——通过位置标度设置"></a>方法2——通过位置标度设置</h2><p>我们可以通过位置标度函数<code>scale_y_continuous()</code>来改变y轴范围：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">scale_y_continuous(limits = c(<span class="number">0</span>,<span class="number">2e+8</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/67c7ad2c/2.png" class="" title="图2">

<p>这个方法把处于范围外的数据点也删除了，然后在新设置的范围内重新计算绘图，这很可能会改变最后绘制的箱型图。这个方法也不能达到我们的目的。</p>
<h2 id="方法3——笛卡尔坐标系变换"><a href="#方法3——笛卡尔坐标系变换" class="headerlink" title="方法3——笛卡尔坐标系变换"></a>方法3——笛卡尔坐标系变换</h2><p>我们可以用笛卡尔坐标系变换函数<code>coord_trans()</code>对图进行放大：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">coord_trans(x = <span class="string">"identity"</span>, y = <span class="string">"identity"</span>, limx = <span class="literal">NULL</span>, limy = c(<span class="number">0</span>,<span class="number">2e+8</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/67c7ad2c/3.png" class="" title="图3">

<p>这个方法比较完美的解决了我的问题。</p>
]]></content>
      <categories>
        <category>R</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>箱型图</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS上自建临时邮箱</title>
    <url>/archives/73a8979d.html</url>
    <content><![CDATA[<p>当我们不想使用自己的真实邮箱，或者想批量注册账号的时候，就可以用<strong>临时搭建的即用即毁的邮箱系统</strong>。当我们通过IP或者域名访问这个临时邮箱系统时，系统会自动分配随机邮箱，收到新邮件后页面会自动刷新，页面关闭后邮件即丢失。</p>
<p>本文介绍的临时邮箱是<a href="https://github.com/denghongcai/forsaken-mail" target="_blank" rel="noopener external nofollow noreferrer">Forsaken Mail</a>，使用的是node.js。</p>
<a id="more"></a>

<h2 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h2><ul>
<li>系统版本：Ubuntu 16.04</li>
</ul>
<p>nodejs官方推荐安装方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<p>确认nodejs版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="安装Forsaken-Mail"><a href="#安装Forsaken-Mail" class="headerlink" title="安装Forsaken Mail"></a>安装Forsaken Mail</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>从GitHub下载Forsaken Mail源码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/malaohu/forsaken-mail/archive/master.zip</span><br></pre></td></tr></table></figure>

<p>解压：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip master.zip</span><br></pre></td></tr></table></figure>

<p>下面我们用npm安装Forsaken Mail：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> forsaken-mail-master</span><br><span class="line">npm install &amp;&amp; npm start</span><br></pre></td></tr></table></figure>

<p>如果没有报错，服务器已经开启了。我们可以访问<code>VPS IP:3000</code>，看看是否正常工作。</p>
<h3 id="Forsaken-Mail在后台运行"><a href="#Forsaken-Mail在后台运行" class="headerlink" title="Forsaken Mail在后台运行"></a>Forsaken Mail在后台运行</h3><p>当我们关闭ssh窗口后，终端会收到 HUP（hangup）信号从而关闭其所有子进程，导致nodejs进程被关闭。下面我使用screen让nodejs在后台运行：</p>
<ol>
<li>启动一个名字为<code>mail</code>的screen：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -S mail</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动Forsaken Mail</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>回到前一个screen，当时在当前screen运行的程序不会停止</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl + a + d</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>列出所有的screen</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>回到我们建的名为mail的screen</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -r mail</span><br></pre></td></tr></table></figure>

<p>screen的使用教程可以看：</p>
<ul>
<li><a href="https://tding.top/archives/97c310a3.html">Linux screen 使用技巧</a></li>
</ul>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>除了通过IP地址访问，还可以自定义邮箱域名，我们只需要在域名服务商的域名设置里面添加以下两条域名解析记录即可：</p>
<ul>
<li>添加MX记录：MX记录指向到自定义二级域名<code>mail.tding.top.</code>，其中主机记录设置为<code>@</code>，优先级设置10</li>
<li>添加A记录：A记录指向到服务器ip地址，其中主机记录设置为<code>mail</code></li>
</ul>
<p>域名解析设置见下图：</p>
<img src="/archives/73a8979d/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" class="" title="域名解析">

<p>说明：<strong>MX记录的记录值的最后有一个点</strong>，代表主机名结束。在有些域名服务商网站设置的时候不会自动帮您加上，如果漏掉的话 DNS 服务器在解析的时候，会自动并上你的域名，这样会引起解析错误。</p>
<p>这样，我们可以通过<code>http://自定义域名:3000/</code>来访问临时邮箱了。</p>
<blockquote>
<p><strong>最后，欢迎大家用我搭建的临时邮箱来测试：<a href="http://mail.tding.top:3000" target="_blank" rel="noopener external nofollow noreferrer">邮箱地址</a></strong></p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>VPS</tag>
        <tag>临时邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建自己的KMS服务器激活Windows&amp;Office</title>
    <url>/archives/1df8b972.html</url>
    <content><![CDATA[<p>KMS全称Key Management Service ，这个功能是在Windows Vista之后的产品中的一种新型产品激活机制，目的是为了Microsoft更好的遏制非法软件授权行为(盗版)。</p>
<p>我们知道，Windows XP和Server 2003要想避开激活机制的最好办法就是去下载VOL版或者MSDN的操作系统，只要输入正确的序列号，甚至有的根本不需要序列号，安装完以后也根本不用激活，并且只要运行一个脚本程序，一个免费的正版Windows就诞生了。为什么我们能这么容易的下载到MSDN或VOL版的XP和2003？其实Windows XP系列系统的MSDN版是Microsoft内部使用的系统，而VOL版是企业版，所以都不需要激活。然而这些版本最终被泄露，导致XP的盗版风无法停住，即使WGA也无能为力。但是从Windows Vista之后，Microsoft已吸取了这个教训，取消了Windows Vista及之后版本的VOL版，取而代之提供给批量激活的是利用KMS机制的Windows VL版本，遏制了不经微软激活服务器就进行激活的非法授权(盗版)行为。</p>
<p>由于Windows VL都是为批量激活而诞生，所以在一个激活单位中肯定会有很多台配置相等的计算机，并用一个服务器建立起一个局域网（LAN），而KMS正好利用这一点，它要求局域网中必须有一台KMS服务器，KMS服务器的作用是给局域网中的所有计算机的操作系统定周期(一般是180天)提供一个随机的激活ID(不同于产品激活密钥)，然后计算机里面的KMS服务就会自动将系统激活，实现正常的系统软件服务与操作。所以计算机必须保持与KMS服务器的定期连接，以便KMS激活服务的自动检查实现激活的自动续期，这样就实现了限制于公司域内的激活范围，避免了对于外界计算机的非法授权，当非法激活者离开公司域后，由于客户端KMS服务不能连接位于域内的KMS激活服务器，让它提供一个新的序列号，超过180天以后就会因为激活ID过期而重新回到试用版本状态，而合法授权者则能够定期获得ID更新，保持一直正确的激活状态。</p>
<a id="more"></a>

<h2 id="VPS安装KMS服务器"><a href="#VPS安装KMS服务器" class="headerlink" title="VPS安装KMS服务器"></a>VPS安装KMS服务器</h2><p>这里，我使用秋水逸冰开发的适用于三大 Linux 发行版的一键安装 KMS 服务的脚本在VPS上安装KMS服务器。</p>
<h3 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h3><ul>
<li>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+</li>
<li>虚拟技术：任意</li>
<li>内存要求：≥128M</li>
</ul>
<h3 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h3><ol>
<li>本脚本适用于三大 Linux 发行版，其他版本则不支持。</li>
<li>KMS 服务安装完成后会加入开机自启动。</li>
<li>默认记录日志，其日志位于 <code>/var/log/vlmcsd.log</code>。</li>
</ol>
<h3 id="一键脚本安装方法"><a href="#一键脚本安装方法" class="headerlink" title="一键脚本安装方法"></a>一键脚本安装方法</h3><p>使用root用户登录，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/kms.sh &amp;&amp; chmod +x kms.sh &amp;&amp; ./kms.sh</span><br></pre></td></tr></table></figure>

<p>安装完成后，输入以下命令查看端口号 1688 的监听情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -nxtlp | grep 1688</span><br></pre></td></tr></table></figure>

<p>返回值类似于如下这样就表示OK了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:1688                0.0.0.0:*                   LISTEN      3200&#x2F;vlmcsd         </span><br><span class="line">tcp        0      0 :::1688                     :::*                        LISTEN      3200&#x2F;vlmcsd</span><br></pre></td></tr></table></figure>

<h3 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h3><ul>
<li>启动：<code>/etc/init.d/kms start</code></li>
<li>停止：<code>/etc/init.d/kms stop</code></li>
<li>重启：<code>/etc/init.d/kms restart</code></li>
<li>状态：<code>/etc/init.d/kms status</code></li>
</ul>
<h3 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h3><p>使用 root 用户登录，进入到<code>kms.sh</code>所在的目录下，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./kms.sh uninstall</span><br></pre></td></tr></table></figure>


<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><h3 id="激活Windows"><a href="#激活Windows" class="headerlink" title="激活Windows"></a>激活Windows</h3><p>KMS 激活服务只能激活批量授权版 Windows (VOL 版)，无法激活零售版 Windows (Retail 版)。</p>
<p>以 Windows 10 Pro 为例 想要激活 VOL 版 Windows 10 pro，只需要用<strong>管理员权限</strong>打开一个 cmd，然后依次执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slmgr -upk</span><br><span class="line">slmgr -ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">slmgr -skms IP:PORT</span><br><span class="line">slmgr -ato</span><br><span class="line">slmgr -dlv</span><br></pre></td></tr></table></figure>

<p>激活 Windows 8、Windows 7类似，只需要把上面的 KEY 替换一下即可。</p>
<p>注意：VOL 版本的镜像一般内置 GVLK key，用于 KMS 激活。如果你手动输过其他 key，那么这个内置的 key 就会被替换掉，这个时候如果你想用 KMS，那么就需要把 GVLK key 输回去。具体的KEY见后面的附录。</p>
<p>如果不知道自己的系统是什么版本，可以运行以下命令查看系统版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmic os get caption</span><br></pre></td></tr></table></figure>

<p>我们得到对应key之后，使用管理员权限运行cmd执行安装key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slmgr -ipk xxxxx-xxxxx-xxxxx-xxxxx</span><br></pre></td></tr></table></figure>

<h3 id="激活Office"><a href="#激活Office" class="headerlink" title="激活Office"></a>激活Office</h3><p>KMS 激活服务只能激活 VOL 版的 Office，不过零售版的 Office 可以通过脚本转换为 VOL 版。 </p>
<p>如果不知道自己安装的是什么版本的 Office，可以使用这个方法查看：</p>
<blockquote>
<p><strong>判断你安装的 Office 是哪个版本</strong>：</p>
<p>以<strong>管理员权限</strong>打开一个 cmd，<strong>进入Office的安装目录</strong>，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cscript ospp.vbs /dstatus</span><br></pre></td></tr></table></figure>

<p>如果输出的信息中包含下面这句话说明你安装的是零售版：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LICENSE DESCRIPTION: Office 15, RETAIL(Grace) channel</span><br></pre></td></tr></table></figure>

<p>如果输出的信息中包含下面这句话说明你安装的是批量授权版：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LICENSE DESCRIPTION: Office 15, VOLUME_KMSCLIENT channel</span><br></pre></td></tr></table></figure>
</blockquote>
<p>激活 Office 的关键在于找到 <code>ospp.vbs</code> 这个文件。<code>ospp.vbs</code> 一般在 Office 的安装目录里。 Office 2016 的默认安装目录是：<code>C:\Program Files\Microsoft Office\Office16</code>。 以<strong>管理员权限</strong>打开一个cmd，然后执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"C:\Program Files\Microsoft Office\Office16"</span></span><br></pre></td></tr></table></figure>

<p>如果你系统是 64 位的但 Office 安装的是 32 位的，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"C:\Program Files (x86)\Microsoft Office\Office16"</span></span><br></pre></td></tr></table></figure>

<p>这样我们就进入到Office的安装目录，然后输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Office GVLK 激活密钥（不同版本的密钥详见附录）</span></span><br><span class="line">cscript ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</span><br><span class="line"><span class="comment"># 执行注册 KMS 服务器</span></span><br><span class="line">cscript ospp.vbs /sethst:IP:PORT</span><br><span class="line"><span class="comment"># 激活 OFFICE</span></span><br><span class="line">cscript ospp.vbs /act</span><br></pre></td></tr></table></figure>

<p>下面是几个可用的KMS服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kms.03k.org</span><br><span class="line">kms.chinancce.com</span><br><span class="line">kms.lotro.cc</span><br></pre></td></tr></table></figure>

<p>KMS服务器是否正常运行检测工具：<a href="https://www.kms.pub/check.html" target="_blank" rel="noopener external nofollow noreferrer">KMS服务器是否正常运行</a></p>
<h2 id="附录-Office-Visio-Project下载"><a href="#附录-Office-Visio-Project下载" class="headerlink" title="附录-Office_Visio_Project下载"></a>附录-Office_Visio_Project下载</h2><blockquote>
<p>下载地址：链接: <a href="https://pan.baidu.com/s/1i6Tx4DB" target="_blank" rel="noopener external nofollow noreferrer">https://pan.baidu.com/s/1i6Tx4DB</a> 密码: 5t1i</p>
</blockquote>
<p>本光盘集成了以下程序：</p>
<ul>
<li>Microsoft Office 专业增强版 2016 （简体中文）</li>
<li>Microsoft Project Professional 2016 （简体中文）</li>
<li>Microsoft Visio 专业版 2016 （简体中文）</li>
</ul>
<p>以上程序均为VL版本。</p>
<p>下载后务必校验镜像hash，否则可能会造成你的安装出错：</p>
<p>64位版本：<code>X64_OVP@03K.ORG_17.11.iso</code></p>
<ul>
<li>大小：3.03 GB</li>
<li>CRC-32: e86507f9</li>
<li>MD4: 7f920801005b2fbca6bc3eee9518cac4</li>
<li>MD5: a5b85d589a949b4d0e419424d14e1be2</li>
<li>SHA-1: 8e991e451fcc4c31c1515cd2c5470bfaf2380317</li>
</ul>
<p>32位版本：<code>X86_OVP@03K.ORG_17.11.iso</code></p>
<ul>
<li>大小：1.54 GB</li>
<li>CRC-32: 4ed2dadd</li>
<li>MD4: 9d74cc7dc2cd4363b30a4390d884eca4</li>
<li>MD5: f1bee496870a071692b231418f55848e</li>
<li>SHA-1: 3167a81e2fb16262bd10506d234e40ab494fd970</li>
</ul>
<blockquote>
<p>Hash校验插件：</p>
<ul>
<li><a href="http://implbits.com/products/hashtab/" target="_blank" rel="noopener external nofollow noreferrer">HashTab</a></li>
<li><a href="http://code.kliu.org/hashcheck/" target="_blank" rel="noopener external nofollow noreferrer">HashCheck Shell Extension</a></li>
</ul>
<p>这两款插件安装即可使用，只需要选中一个或多个文件，然后右键查看属性，其中就会有“Hashtab”、“文件校验”标签，非常方便。</p>
</blockquote>
<h2 id="附录-KEY"><a href="#附录-KEY" class="headerlink" title="附录-KEY"></a>附录-KEY</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="Windows-10-版本-1803"><a href="#Windows-10-版本-1803" class="headerlink" title="Windows 10 版本 1803"></a>Windows 10 版本 1803</h4><table>
<thead>
<tr>
<th>操作系统版本</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Windows 10 教育版</td>
<td>NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</td>
</tr>
<tr>
<td>Windows 10 教育版 N</td>
<td>2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</td>
</tr>
<tr>
<td>Windows 10 企业版</td>
<td>NPPR9-FWDCX-D2C8J-H872K-2YT43</td>
</tr>
<tr>
<td>Windows 10 企业版 G</td>
<td>YYVX9-NTFWV-6MDM3-9PT4T-4M68B</td>
</tr>
<tr>
<td>Windows 10 企业版 G N</td>
<td>44RPN-FTY23-9VTTB-MP9BX-T84FV</td>
</tr>
<tr>
<td>Windows 10 企业版 N</td>
<td>DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</td>
</tr>
<tr>
<td>Windows 10 专业版</td>
<td>W269N-WFGWX-YVC9B-4J6C9-T83GX</td>
</tr>
<tr>
<td>Windows 10 专业教育版</td>
<td>6TP4R-GNPTD-KYYHQ-7B7DP-J447Y</td>
</tr>
<tr>
<td>Windows 10 专业教育版 N</td>
<td>YVWGF-BXNMC-HTQYQ-CPQ99-66QFC</td>
</tr>
<tr>
<td>Windows 10 专业版 N</td>
<td>MH37W-N47XK-V7XM9-C7227-GCQG9</td>
</tr>
<tr>
<td>Windows 10 Professional Workstation</td>
<td>NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J</td>
</tr>
<tr>
<td>Windows 10 Professional Workstation N</td>
<td>9FNHH-K3HBT-3W4TD-6383H-6XYWF</td>
</tr>
</tbody></table>
<h4 id="Windows-10-版本-1709"><a href="#Windows-10-版本-1709" class="headerlink" title="Windows 10 版本 1709"></a>Windows 10 版本 1709</h4><table>
<thead>
<tr>
<th>操作系统版本</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Windows 10 Professional Workstation</td>
<td>NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J</td>
</tr>
<tr>
<td>Windows 10 Professional Workstation N</td>
<td>9FNHH-K3HBT-3W4TD-6383H-6XYWF</td>
</tr>
</tbody></table>
<h4 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h4><table>
<thead>
<tr>
<th>操作系统版本</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Windows 10 专业版</td>
<td>W269N-WFGWX-YVC9B-4J6C9-T83GX</td>
</tr>
<tr>
<td>Windows 10 专业版 N</td>
<td>MH37W-N47XK-V7XM9-C7227-GCQG9</td>
</tr>
<tr>
<td>Windows 10 企业版</td>
<td>NPPR9-FWDCX-D2C8J-H872K-2YT43</td>
</tr>
<tr>
<td>Windows 10 企业版 N</td>
<td>DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</td>
</tr>
<tr>
<td>Windows 10 教育版</td>
<td>NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</td>
</tr>
<tr>
<td>Windows 10 教育版 N</td>
<td>2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</td>
</tr>
<tr>
<td>Windows 10 企业版 2015 长期服务</td>
<td>WNMTR-4C88C-JK8YV-HQ7T2-76DF9</td>
</tr>
<tr>
<td>Windows 10 企业版 2015 长期服务 N</td>
<td>2F77B-TNFGY-69QQF-B8YKP-D69TJ</td>
</tr>
<tr>
<td>Windows 10 企业版 2016 长期服务</td>
<td>DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</td>
</tr>
<tr>
<td>Windows 10 企业版 2016 长期服务 N</td>
<td>QFFDN-GRT3P-VKWWX-X7T3R-8B639</td>
</tr>
</tbody></table>
<h4 id="Windows-7-和-Windows-Server-2008-R2"><a href="#Windows-7-和-Windows-Server-2008-R2" class="headerlink" title="Windows 7 和 Windows Server 2008 R2"></a>Windows 7 和 Windows Server 2008 R2</h4><table>
<thead>
<tr>
<th>操作系统版本</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Windows 7 专业版</td>
<td>FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4</td>
</tr>
<tr>
<td>Windows 7 专业版 N</td>
<td>MRPKT-YTG23-K7D7T-X2JMM-QY7MG</td>
</tr>
<tr>
<td>Windows 7 专业版 E</td>
<td>W82YF-2Q76Y-63HXB-FGJG9-GF7QX</td>
</tr>
<tr>
<td>Windows7 企业版</td>
<td>33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</td>
</tr>
<tr>
<td>Windows 7 企业版 N</td>
<td>YDRBP-3D83W-TY26F-D46B2-XCKRJ</td>
</tr>
<tr>
<td>Windows 7 企业版 E</td>
<td>C29WB-22CC8-VJ326-GHFJW-H9DH4</td>
</tr>
<tr>
<td>Windows Server 2008 R2 Web 版</td>
<td>6TPJF-RBVHG-WBW2R-86QPH-6RTM4</td>
</tr>
<tr>
<td>Windows Server 2008 R2 HPC 版</td>
<td>TT8MH-CG224-D3D7Q-498W2-9QCTX</td>
</tr>
<tr>
<td>WindowsServer 2008 R2 Standard</td>
<td>YC6KT-GKW9T-YTKYR-T4X34-R7VHC</td>
</tr>
<tr>
<td>WindowsServer 2008 R2 企业版</td>
<td>489J6-VHDMP-X63PK-3K798-CPX3Y</td>
</tr>
<tr>
<td>WindowsServer 2008 R2 Datacenter</td>
<td>74YFP-3QFB3-KQT8W-PMXWJ-7M648</td>
</tr>
<tr>
<td>面向基于 Itanium 系统的 Windows Server 2008 R2</td>
<td>GT63C-RJFQ3-4GMB6-BRFB9-CB83V</td>
</tr>
</tbody></table>
<h3 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h3><h4 id="Office-2019"><a href="#Office-2019" class="headerlink" title="Office 2019"></a>Office 2019</h4><table>
<thead>
<tr>
<th>产品</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Office Professional Plus 2019</td>
<td>NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</td>
</tr>
<tr>
<td>Office Standard 2019</td>
<td>6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK</td>
</tr>
<tr>
<td>Project Professional 2019</td>
<td>B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B</td>
</tr>
<tr>
<td>Project Standard 2019</td>
<td>C4F7P-NCP8C-6CQPT-MQHV9-JXD2M</td>
</tr>
<tr>
<td>Visio Professional 2019</td>
<td>9BGNQ-K37YR-RQHF2-38RQ3-7VCBB</td>
</tr>
<tr>
<td>Visio Standard 2019</td>
<td>7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2</td>
</tr>
<tr>
<td>Access 2019</td>
<td>9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT</td>
</tr>
<tr>
<td>Excel 2019</td>
<td>TMJWT-YYNMB-3BKTF-644FC-RVXBD</td>
</tr>
<tr>
<td>Outlook 2019</td>
<td>7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK</td>
</tr>
<tr>
<td>PowerPoint 2019</td>
<td>RRNCX-C64HY-W2MM7-MCH9G-TJHMQ</td>
</tr>
<tr>
<td>Publisher 2019</td>
<td>G2KWX-3NW6P-PY93R-JXK2T-C9Y9V</td>
</tr>
<tr>
<td>Skype for Business 2019</td>
<td>NCJ33-JHBBY-HTK98-MYCV8-HMKHJ</td>
</tr>
<tr>
<td>Word 2019</td>
<td>PBX3G-NWMT6-Q7XBW-PYJGG-WXD33</td>
</tr>
</tbody></table>
<h4 id="Office-2016"><a href="#Office-2016" class="headerlink" title="Office 2016"></a>Office 2016</h4><table>
<thead>
<tr>
<th>产品</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Office Professional Plus 2016</td>
<td>XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</td>
</tr>
<tr>
<td>Office Standard 2016</td>
<td>JNRGM-WHDWX-FJJG3-K47QV-DRTFM</td>
</tr>
<tr>
<td>Project Professional 2016</td>
<td>YG9NW-3K39V-2T3HJ-93F3Q-G83KT</td>
</tr>
<tr>
<td>Project Standard 2016</td>
<td>GNFHQ-F6YQM-KQDGJ-327XX-KQBVC</td>
</tr>
<tr>
<td>Visio Professional 2016</td>
<td>PD3PC-RHNGV-FXJ29-8JK7D-RJRJK</td>
</tr>
<tr>
<td>Visio Standard 2016</td>
<td>7WHWN-4T7MP-G96JF-G33KR-W8GF4</td>
</tr>
<tr>
<td>Access 2016</td>
<td>GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW</td>
</tr>
<tr>
<td>Excel 2016</td>
<td>9C2PK-NWTVB-JMPW8-BFT28-7FTBF</td>
</tr>
<tr>
<td>OneNote 2016</td>
<td>DR92N-9HTF2-97XKM-XW2WJ-XW3J6</td>
</tr>
<tr>
<td>Outlook 2016</td>
<td>R69KK-NTPKF-7M3Q4-QYBHW-6MT9B</td>
</tr>
<tr>
<td>PowerPoint 2016</td>
<td>J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6</td>
</tr>
<tr>
<td>Publisher 2016</td>
<td>F47MM-N3XJP-TQXJ9-BP99D-8837K</td>
</tr>
<tr>
<td>Skype for Business 2016</td>
<td>869NQ-FJ69K-466HW-QYCP2-DDBV6</td>
</tr>
<tr>
<td>Word 2016</td>
<td>WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6</td>
</tr>
</tbody></table>
<h4 id="Office-2013"><a href="#Office-2013" class="headerlink" title="Office 2013"></a>Office 2013</h4><table>
<thead>
<tr>
<th>产品</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Office 2013 Professional Plus</td>
<td>YC7DK-G2NP3-2QQC3-J6H88-GVGXT</td>
</tr>
<tr>
<td>Office 2013 Standard</td>
<td>KBKQT-2NMXY-JJWGP-M62JB-92CD4</td>
</tr>
<tr>
<td>Project 2013 Professional</td>
<td>FN8TT-7WMH6-2D4X9-M337T-2342K</td>
</tr>
<tr>
<td>Project 2013 Standard</td>
<td>6NTH3-CW976-3G3Y2-JK3TX-8QHTT</td>
</tr>
<tr>
<td>Visio 2013 Professional</td>
<td>C2FG9-N6J68-H8BTJ-BW3QX-RM3B3</td>
</tr>
<tr>
<td>Visio 2013 Standard</td>
<td>J484Y-4NKBF-W2HMG-DBMJC-PGWR7</td>
</tr>
<tr>
<td>Access 2013</td>
<td>NG2JY-H4JBT-HQXYP-78QH9-4JM2D</td>
</tr>
<tr>
<td>Excel 2013</td>
<td>VGPNG-Y7HQW-9RHP7-TKPV3-BG7GB</td>
</tr>
<tr>
<td>InfoPath 2013</td>
<td>DKT8B-N7VXH-D963P-Q4PHY-F8894</td>
</tr>
<tr>
<td>Lync 2013</td>
<td>2MG3G-3BNTT-3MFW9-KDQW3-TCK7R</td>
</tr>
<tr>
<td>OneNote 2013</td>
<td>TGN6P-8MMBC-37P2F-XHXXK-P34VW</td>
</tr>
<tr>
<td>Outlook 2013</td>
<td>QPN8Q-BJBTJ-334K3-93TGY-2PMBT</td>
</tr>
<tr>
<td>PowerPoint 2013</td>
<td>4NT99-8RJFH-Q2VDH-KYG2C-4RD4F</td>
</tr>
<tr>
<td>Publisher 2013</td>
<td>PN2WF-29XG2-T9HJ7-JQPJR-FCXK4</td>
</tr>
<tr>
<td>Word 2013</td>
<td>6Q7VD-NX8JD-WJ2VH-88V73-4GBJ7</td>
</tr>
</tbody></table>
<h4 id="Office-2010"><a href="#Office-2010" class="headerlink" title="Office 2010"></a>Office 2010</h4><p>Office 套件：</p>
<table>
<thead>
<tr>
<th>产品</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Office Professional Plus 2010</td>
<td>VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB</td>
</tr>
<tr>
<td>Office Standard 2010</td>
<td>V7QKV-4XVVR-XYV4D-F7DFM-8R6BM</td>
</tr>
<tr>
<td>Office Home and Business 2010</td>
<td>D6QFG-VBYP2-XQHM7-J97RH-VVRCK</td>
</tr>
</tbody></table>
<p>独立产品：</p>
<table>
<thead>
<tr>
<th>产品</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Access 2010</td>
<td>V7Y44-9T38C-R2VJK-666HK-T7DDX</td>
</tr>
<tr>
<td>Excel 2010</td>
<td>H62QG-HXVKF-PP4HP-66KMR-CW9BM</td>
</tr>
<tr>
<td>SharePoint Workspace 2010</td>
<td>QYYW6-QP4CB-MBV6G-HYMCJ-4T3J4</td>
</tr>
<tr>
<td>InfoPath 2010</td>
<td>K96W8-67RPQ-62T9Y-J8FQJ-BT37T</td>
</tr>
<tr>
<td>OneNote 2010</td>
<td>Q4Y4M-RHWJM-PY37F-MTKWH-D3XHX</td>
</tr>
<tr>
<td>Outlook 2010</td>
<td>7YDC2-CWM8M-RRTJC-8MDVC-X3DWQ</td>
</tr>
<tr>
<td>PowerPoint 2010</td>
<td>RC8FX-88JRY-3PF7C-X8P67-P4VTT</td>
</tr>
<tr>
<td>Project Professional 2010</td>
<td>YGX6F-PGV49-PGW3J-9BTGG-VHKC6</td>
</tr>
<tr>
<td>Project Standard 2010</td>
<td>4HP3K-88W3F-W2K3D-6677X-F9PGB</td>
</tr>
<tr>
<td>Publisher 2010</td>
<td>BFK7F-9MYHM-V68C7-DRQ66-83YTP</td>
</tr>
<tr>
<td>Word 2010</td>
<td>HVHB3-C6FV7-KQX9W-YQG79-CRY7T</td>
</tr>
</tbody></table>
<p>Visio：</p>
<table>
<thead>
<tr>
<th>产品</th>
<th>KMS 客户端安装密钥</th>
</tr>
</thead>
<tbody><tr>
<td>Visio Premium 2010</td>
<td>D9DWC-HPYVV-JGF4P-BTWQB-WX8BJ</td>
</tr>
<tr>
<td>Visio Professional 2010</td>
<td>7MCW8-VRQVK-G677T-PDJCM-Q8TCP</td>
</tr>
<tr>
<td>Visio Standard 2010</td>
<td>767HD-QGMWX-8QTDB-9G3R2-KHFGJ</td>
</tr>
</tbody></table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.keye.work/2018/07/24/kms.html" target="_blank" rel="noopener external nofollow noreferrer">KMS介绍</a></li>
<li><a href="https://mogeko.me/2018/017/" target="_blank" rel="noopener external nofollow noreferrer">本地搭建 KMS 激活服务</a></li>
<li><a href="https://teddysun.com/530.html" target="_blank" rel="noopener external nofollow noreferrer">一键安装KMS服务脚本</a></li>
<li><a href="https://03k.org/2016_ovp.html" target="_blank" rel="noopener external nofollow noreferrer">Office 2016_Visio_Project_VL多合一_集成补丁2017.11</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Office</tag>
        <tag>KMS</tag>
      </tags>
  </entry>
  <entry>
    <title>R数据可视化-ggplot2的几何对象与统计变换</title>
    <url>/archives/71d12648.html</url>
    <content><![CDATA[<ul>
<li><strong>几何对象</strong>执行着图层的实际渲染，控制着生成的图像类型。<ul>
<li><code>geom_point()</code>将会生成散点图</li>
<li><code>geom_line()</code>将会生成折线图</li>
<li><code>geom_bar()</code>将会生成柱状图</li>
<li><code>geom_boxplot()</code>将会生成箱型图</li>
<li><code>geom_histogram()</code>将会生成直方图</li>
</ul>
</li>
<li><strong>统计变换</strong>通常以某种方式对数据信息进行汇总。<ul>
<li><code>stat_smooth()</code>添加光滑曲线</li>
</ul>
</li>
</ul>
<a id="more"></a>

<p><strong>任何一个ggplot2图层都包括stat和geom两部分，<code>stat_</code>和<code>geom_</code>是两种绘图方法这个说法是不对的</strong>，下面我们简单解释下。</p>
<p>举个例子：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(rnorm(<span class="number">100</span>,<span class="number">14</span>,<span class="number">5</span>),rep(<span class="number">20</span>,<span class="number">20</span>)) </span><br><span class="line">y &lt;- c(rnorm(<span class="number">100</span>,<span class="number">14</span>,<span class="number">5</span>),rep(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">p &lt;- ggplot(data= <span class="literal">NULL</span>, aes(x = x, y = y))</span><br><span class="line">p &lt;- p + geom_point(color = <span class="string">"darkred"</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E5%87%A0%E4%BD%95%E5%AF%B9%E8%B1%A1-1.png" class="" title="几何对象-1">

<p>我们查看码源会发现<code>geom_point()</code>这个几何对象的默认stat是<code>identity</code>，即不做任何统计变换：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function (mapping &#x3D; NULL, data &#x3D; NULL, stat &#x3D; &quot;identity&quot;, position &#x3D; &quot;identity&quot;, </span><br><span class="line">    ..., na.rm &#x3D; FALSE, show.legend &#x3D; NA, inherit.aes &#x3D; TRUE) </span><br><span class="line">&#123;</span><br><span class="line">    layer(data &#x3D; data, mapping &#x3D; mapping, stat &#x3D; stat, geom &#x3D; GeomPoint, </span><br><span class="line">        position &#x3D; position, show.legend &#x3D; show.legend, inherit.aes &#x3D; inherit.aes, </span><br><span class="line">        params &#x3D; list(na.rm &#x3D; na.rm, ...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码我们可以发现，坐标<code>(20，20)</code>这个点的数据事实上有20个，但由于没做<strong>统计转换</strong>，<code>(20,20)</code>这个点被画了20次，因此我们看到的点其实是最后一次画的那个点。</p>
<p>因此，下面我们<strong>按照某一点出现的频率换算成大小</strong>（指定<code>stat = &quot;sum&quot;</code>）来作图：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(rnorm(<span class="number">100</span>,<span class="number">14</span>,<span class="number">5</span>),rep(<span class="number">20</span>,<span class="number">20</span>)) </span><br><span class="line">y &lt;- c(rnorm(<span class="number">100</span>,<span class="number">14</span>,<span class="number">5</span>),rep(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">p &lt;- ggplot(data= <span class="literal">NULL</span>, aes(x = x, y = y))</span><br><span class="line">p &lt;- p + geom_point(color = <span class="string">"darkred"</span>,stat = <span class="string">"sum"</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E5%87%A0%E4%BD%95%E5%AF%B9%E8%B1%A1-2.png" class="" title="几何对象-2">

<p>根据以上，我们可以发现一个单纯的<code>geom_point</code>里面也是带有<code>stat_</code>的，同样，我们也可以用<code>stat_sum</code>作为主函数来绘制这幅图，里面有参数<code>geom</code>，这里我们设置成<code>geom = “point”</code>。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(rnorm(<span class="number">100</span>,<span class="number">14</span>,<span class="number">5</span>),rep(<span class="number">20</span>,<span class="number">20</span>)) </span><br><span class="line">y &lt;- c(rnorm(<span class="number">100</span>,<span class="number">14</span>,<span class="number">5</span>),rep(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">p &lt;- ggplot(data= <span class="literal">NULL</span>, aes(x = x, y = y))</span><br><span class="line">p &lt;- p + stat_sum(color = <span class="string">"darkred"</span>,geom = <span class="string">"point"</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<p>画出来的图跟前面用<code>geom_point</code>函数是一样的。</p>
<p>因此，<strong>我们需要认识到<code>stat_</code>和<code>geom_</code>是两种绘图方法这个说法是不对的，其实它们是ggplot2每一个图层绘制都必须有的，是一个图层的一体两面</strong>。</p>
<p>下面简单介绍几个常用的绘图函数。</p>
<h2 id="geom-point-散点图"><a href="#geom-point-散点图" class="headerlink" title="geom_point()散点图"></a><code>geom_point()</code>散点图</h2><p>绘制散点图可以使用<code>geom_point()</code>函数，气泡图（bubble chart）也是一个散点图，只不过点的大小由一个变量（size）来控制。</p>
<p>散点图潜在的最大问题是过度绘图：当一个位置或相邻的位置上出现有多个点，就可能把点绘制在彼此之上，这会严重扭曲散点图的视觉外观，我们可以通过使点变得透明或者设置点的形状来解决该问题。</p>
<p><code>geom_point()</code>参数如下：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">geom_point(mapping = <span class="literal">NULL</span>, data = <span class="literal">NULL</span>, stat = <span class="string">"identity"</span>, position = <span class="string">"identity"</span>, <span class="keyword">...</span>, na.rm = <span class="literal">FALSE</span>, show.legend = <span class="literal">NA</span>, inherit.aes = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>

<p>这里我从数据集中随机选出了100个样本，作为一个小数据集：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让样本可重复</span></span><br><span class="line">set.seed(<span class="number">1410</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始数据的一个容量为100的随机样本</span></span><br><span class="line">dsmall &lt;- diamonds[sample(nrow(diamonds),<span class="number">100</span>),]</span><br></pre></td></tr></table></figure>

<p>下面是散点图的绘制：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = dsmall, mapping = aes(x = carat, y = price))</span><br><span class="line">p &lt;- p + geom_point(aes(color = color, size = cut), shape = <span class="number">19</span>, alpha = <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E6%95%A3%E7%82%B9%E5%9B%BE.png" class="" title="散点图">


<h2 id="geom-bar-柱状图"><a href="#geom-bar-柱状图" class="headerlink" title="geom_bar()柱状图"></a><code>geom_bar()</code>柱状图</h2><h3 id="离散单变量的柱状图"><a href="#离散单变量的柱状图" class="headerlink" title="离散单变量的柱状图"></a>离散单变量的柱状图</h3><p>明细数据集绘制柱状图-左图：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = cut))</span><br><span class="line">p &lt;- p + geom_bar()</span><br></pre></td></tr></table></figure>

<p><code>geom_bar()</code>函数中的<code>stat</code>参数的默认值为<code>stat = &#39;count&#39;</code>，即观测数量，统计的是每个离散变量出现的频次。</p>
<p>汇总好的数据集绘制柱状图-右图：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = cut, y = price))</span><br><span class="line">p &lt;- p + geom_bar(stat = <span class="string">"identity"</span>)</span><br></pre></td></tr></table></figure>

<p>我们只需要在<code>geom_bar()</code>中更改默认的<code>count</code>为<code>identity</code>就可以接受两个变量作图。</p>
<img src="/archives/71d12648/%E6%9F%B1%E7%8A%B6%E5%9B%BE-%E7%A6%BB%E6%95%A3%E5%8D%95%E5%8F%98%E9%87%8F.png" class="" title="柱状图-离散单变量">

<h3 id="分组柱状图"><a href="#分组柱状图" class="headerlink" title="分组柱状图"></a>分组柱状图</h3><p>分组柱状图一共有三种展现形式，我们可以使用<code>position</code>参数调整：</p>
<ul>
<li>并排放置<code>position=&quot;dodge&quot;</code></li>
<li>堆叠<code>position=&quot;stack&quot;</code></li>
<li>填充比例<code>position=&quot;fill&quot;</code></li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = cut,fill = color))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并排放置-左图</span></span><br><span class="line">p + geom_bar(position = <span class="string">"dodge"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆叠-中图</span></span><br><span class="line">p + geom_bar(position = <span class="string">"stack"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充比例-右图</span></span><br><span class="line">p + geom_bar(position = <span class="string">"fill"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E6%9F%B1%E7%8A%B6%E5%9B%BE-%E5%88%86%E7%BB%84%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" class="" title="柱状图-分组柱状图">

<h3 id="柱状图排序"><a href="#柱状图排序" class="headerlink" title="柱状图排序"></a>柱状图排序</h3><p>其实前面我们在画柱状图时，使用的变量并不规范，当横坐标是离散型变量时，<strong>x参数接的应该是一个因子型数据（factor）</strong>。</p>
<p>当x没有用因子型数据的时候，横轴可能会没有把所有的标签全标上，这表示把横轴当成连续性变量来看了，所以只标了一部分标签以表示大小关系。</p>
<p>同样的，fill也是作为离散分类变量，也应该接一个factor，我们可以看到不加时，图例是一个连续性渐变颜色的形式。</p>
<p>我们会发现，转化为因子型之后数据的排列方式，不是根据元素出现的前后顺序，而是<strong>按照首字母顺序</strong>。现在我们想让<strong>x轴按y轴数值大小排序</strong>。</p>
<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>我们可以自定义一个函数来实现柱子从高到低排列：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因子型数据，按照首字母排序-左图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = factor(cut)))</span><br><span class="line">p &lt;- p + geom_bar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line">reorder_size &lt;- <span class="keyword">function</span>(x) &#123;</span><br><span class="line">  factor(x, levels = names(sort(table(x), decreasing = <span class="literal">TRUE</span>)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从高到低排序-右图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = reorder_size(cut)))</span><br><span class="line">p &lt;- p + geom_bar()</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E6%9F%B1%E7%8A%B6%E5%9B%BE-%E6%8E%92%E5%BA%8F.png" class="" title="柱状图-排序">

<h4 id="reorder-函数"><a href="#reorder-函数" class="headerlink" title="reorder()函数"></a>reorder()函数</h4><p><code>reorder()</code>函数用法：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">reorder(x, X, FUN = mean, <span class="keyword">...</span>, order = is.ordered(x))</span><br></pre></td></tr></table></figure>

<ul>
<li><code>x</code>：因子型向量</li>
<li><code>X</code>：用来排序的数值型向量</li>
<li><code>FUN</code>：汇总数据的函数</li>
<li><code>...</code>：<code>FUN</code>的参数（可选）</li>
<li><code>order</code>：我们可以通过这个参数直接指定因子型向量的顺序</li>
</ul>
<p>按照x对X进行分组，对每一组组成的向量计算后面的函数，最后根据计算结果从小到大指定x中元素的顺序。</p>
<p>下面是<code>reorder()</code>实现柱子从高到低排列，结果和前面自定义函数是一样的：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(reorder(cut,rep(<span class="number">1</span>,length(cut)),sum)))</span><br><span class="line">p &lt;- p + geom_bar()</span><br></pre></td></tr></table></figure>

<p>我们可以根据cut对一个全是1的向量分组求和（相当于计算了cut中每一个元素出现的个数），再根据求和结果指定顺序。</p>
<h3 id="柱状图添加标签文字"><a href="#柱状图添加标签文字" class="headerlink" title="柱状图添加标签文字"></a>柱状图添加标签文字</h3><p>我们可以使用<code>geom_text()</code>为柱状图添加文本，显示柱状图的高度，并调整文本的位置和大小。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = factor(cut),fill = color))</span><br><span class="line">p &lt;- p + geom_bar(position = <span class="string">"fill"</span>)</span><br><span class="line">p &lt;- p + geom_text(stat = <span class="string">"count"</span>,mapping = aes(label = ..count..), size = <span class="number">5</span>, colour = <span class="string">'white'</span>, vjust = <span class="number">1</span>, hjust = <span class="number">.5</span>, position = position_fill(<span class="number">0.9</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E6%9F%B1%E7%8A%B6%E5%9B%BE-%E6%A0%87%E7%AD%BE%E6%96%87%E5%AD%97.png" class="" title="柱状图-标签文字">

<ul>
<li>label设置<ul>
<li>当<code>stat=&quot;count&quot;</code>时，设置文本的标签需要使用一个特殊的变量 <code>aes(label=..count..)</code>， 表示的是变量值的数量</li>
<li>当<code>stat=&quot;identity&quot;</code>时，设置文本的标签需要设置y轴的值，<code>aes(label=price)</code>，表示的变量的值</li>
</ul>
</li>
<li>size设置：标签字体大小，默认值为5号</li>
<li>color设置：标签文字的颜色</li>
<li>vjust设置：调整标签位置，1为分界线，越大于1，标签越在柱状图上界下方，反之则越在柱状图上界上方</li>
<li>hjust设置：<code>hjust = 0.5</code>将标签水平居中放置</li>
<li>position设置：这里的图形位置与标签位置摆放必须一致，即图形位置<code>geom_bar()</code>函数设置为<code>position = &#39;fill&#39;</code>，那么标签位置<code>geom_text()</code>函数设置为<code>position = position_fill(0.9)</code>参数</li>
</ul>
<h3 id="正负柱状图"><a href="#正负柱状图" class="headerlink" title="正负柱状图"></a>正负柱状图</h3><p>只要数据是负数，就能画出往下方的柱状图：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">d &lt;- data.frame(a=letters[<span class="number">1</span>:<span class="number">7</span>], b=c(<span class="number">4</span>,-<span class="number">6</span>,<span class="number">5</span>,-<span class="number">4</span>,-<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line">p &lt;- ggplot(d,aes(a,b))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左图</span></span><br><span class="line">p1 &lt;- p + geom_bar(stat=<span class="string">"identity"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右图</span></span><br><span class="line">p2 &lt;- p + geom_bar(aes(fill=factor((b&gt;<span class="number">0</span>)+<span class="number">1</span>)),stat=<span class="string">"identity"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E6%9F%B1%E7%8A%B6%E5%9B%BE-%E6%AD%A3%E8%B4%9F%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" class="" title="柱状图-正负柱状图">

<h2 id="geom-boxplot-箱型图"><a href="#geom-boxplot-箱型图" class="headerlink" title="geom_boxplot()箱型图"></a><code>geom_boxplot()</code>箱型图</h2><p><code>geom_boxplot()</code>函数中有outlier开头的多个参数，用于修改离群点的属性：</p>
<ul>
<li><code>outlier.colour</code>：离群点的颜色</li>
<li><code>outlier.fill</code>：离群点的填充色</li>
<li><code>outlier.shape</code>：离群点的形状</li>
<li><code>outlier.size</code>：离群点的大小</li>
<li><code>outlier.alpha</code>：离群点的透明度</li>
</ul>
<p>箱形图可以用fill参数指定填充颜色，color参数指定边框颜色。</p>
<p>下面是一个示例：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = cut, y = price))</span><br><span class="line">p &lt;- p + geom_boxplot(fill = <span class="string">"white"</span>, color = <span class="string">"darkgreen"</span>, outlier.shape=<span class="number">21</span>, outlier.size=<span class="number">4</span>, outlier.stroke = <span class="number">1</span>, outlier.color = <span class="string">"gray"</span>, outlier.fill = <span class="string">"orange"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E7%AE%B1%E5%9E%8B%E5%9B%BE.png" class="" title="箱型图">

<p>在添加有<strong>多分类变量</strong>时，箱线图默认使用的<code>position</code>参数是<code>dodge</code>，使用堆积方式<code>stack</code>、堆积百分比<code>fill</code>来呈现多维箱线图是会失败的。</p>
<h2 id="geom-histogram-直方图"><a href="#geom-histogram-直方图" class="headerlink" title="geom_histogram()直方图"></a><code>geom_histogram()</code>直方图</h2><p>直方图函数<code>geom_histogram()</code>与柱形图函数<code>geom_bar()</code>大致相同。</p>
<h3 id="直方图组距调整"><a href="#直方图组距调整" class="headerlink" title="直方图组距调整"></a>直方图组距调整</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认组距-左图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = price))</span><br><span class="line">p + geom_histogram()</span><br><span class="line"></span><br><span class="line"><span class="comment"># binwidth参数控制直方图组距大小-右图</span></span><br><span class="line">p + geom_histogram(binwidth = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E7%9B%B4%E6%96%B9%E5%9B%BE-%E7%BB%84%E8%B7%9D%E8%B0%83%E6%95%B4.png" class="" title="直方图-组距调整">

<h3 id="分组直方图"><a href="#分组直方图" class="headerlink" title="分组直方图"></a>分组直方图</h3><p>直方图参数中添加颜色映射来区分不同组，这时默认直方图输出为堆积直方图。我们也可以通过设置position参数对多序列柱形进行簇状、堆积百分比转换。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = price, fill = factor(cut)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认分组直方图（stack）-左上图</span></span><br><span class="line">p + geom_histogram()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不做任何转换（identity）-右上图</span></span><br><span class="line">p + geom_histogram(position = <span class="string">'identity'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 簇状分组柱状图（dodge）-左下图</span></span><br><span class="line">p + geom_histogram(position = <span class="string">'dodge'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆叠百分比分组柱状图（fill）-右下图</span></span><br><span class="line">p + geom_histogram(position = <span class="string">'fill'</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/71d12648/%E7%9B%B4%E6%96%B9%E5%9B%BE-%E5%88%86%E7%BB%84%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="直方图-分组直方图">


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.zhihu.com/question/24779017" target="_blank" rel="noopener external nofollow noreferrer">如何使用 ggplot2 ？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27093478" target="_blank" rel="noopener external nofollow noreferrer">R|ggplot2(二)|覆盖柱状图各种需求</a></li>
</ul>
]]></content>
      <categories>
        <category>R</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title>R数据可视化-ggplot2的标度</title>
    <url>/archives/99c6f91.html</url>
    <content><![CDATA[<p>标度控制着<strong>数据到图形属性的映射</strong>，标度将我们的数据转化为视觉上可以感知的东西，如大小、颜色、位置和形状，所以通过标度可以修改坐标轴和图例的参数。</p>
<p>每一种图形属性都拥有一个默认的标度，此标度将在我们每次使用这个图形属性时被自动添加到图形中，这些标度列于下表中，默认属性粗体显示：</p>
<table>
<thead>
<tr>
<th>图形属性</th>
<th>离散型</th>
<th>连续型</th>
</tr>
</thead>
<tbody><tr>
<td>颜色和填充色</td>
<td>brewer grey <strong>hue</strong> identity manual</td>
<td><strong>gradient</strong> gradient2 gradientn</td>
</tr>
<tr>
<td>位置</td>
<td><strong>discrete</strong></td>
<td><strong>continuous</strong> date</td>
</tr>
<tr>
<td>形状</td>
<td><strong>shape</strong> identity manual</td>
<td></td>
</tr>
<tr>
<td>线条类型</td>
<td><strong>linetype</strong> identity manual</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td>identity manual</td>
<td><strong>size</strong></td>
</tr>
</tbody></table>
<p>如果要添加一个不同的标度或修改默认标度的某些特征，<strong>我们必须构建一个新的标度，然后使用<code>+</code>将其添加到图形上</strong>。所有的标度构建器（scale）都拥有一套通用的命名方案，它们以<code>scale_</code>开头，接下来是图形属性的名称（例如：<code>colour_</code>、<code>shape_</code>、<code>x_</code>）最后以标度的名称结尾（<code>gradient</code>、<code>hue</code>、<code>manual</code>）。</p>
<ul>
<li>离散图形的颜色属性采用默认标度：<code>scale_colour_hue()</code></li>
<li>离散图形的填充色属性采用ColorBrewer配色标度：<code>scale_fill_brewer()</code></li>
</ul>
<a id="more"></a>

<p>下面是一个例子：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认标度-左图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, color = factor(cut)))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整标度的参数-右图</span></span><br><span class="line">p + scale_colour_hue(<span class="string">"cut"</span>,breaks=c(<span class="string">"Fair"</span>,<span class="string">"Good"</span>,<span class="string">"Very Good"</span>),labels=c(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-%E7%A4%BA%E4%BE%8B.png" class="" title="标度-示例">


<h2 id="标度系列函数"><a href="#标度系列函数" class="headerlink" title="标度系列函数"></a>标度系列函数</h2><p>标度系列函数可以粗略的分为4类：</p>
<ul>
<li><strong>位置标度</strong>：用于将连续型、离散型和日期-时间型变量映射到绘图区域，以及构造对应的坐标轴</li>
<li><strong>颜色标度</strong>：用于将连续型和离散型变量映射到颜色</li>
<li><strong>手动离散型标度</strong>：用于将离散型变量映射到我们选择的符号大小、线条类型、形状或颜色，以及创建对应的图例</li>
<li><strong>同一型标度</strong>：用于直接将变量值绘制为图形属性，而不去映射他们</li>
</ul>
<h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3><p>上面这些标度系列函数都会有一些参数，这些就是通用参数，下面简单介绍一下这些通用参数。</p>
<h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p><strong>name：设置坐标轴或图例上出现的标签</strong>。可以使用三个辅助函数<code>xlab()</code>、<code>ylab()</code>、<code>labs()</code>来减少代码。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认-左上</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, color = factor(cut)))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加x标签-右上</span></span><br><span class="line">p + scale_x_continuous(<span class="string">"Diamonds carat"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加x标签（使用xlab()这个辅助函数）</span></span><br><span class="line">p + xlab(<span class="string">"Diamonds carat"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时添加x、y及colour标度-左下</span></span><br><span class="line">p + labs(x = <span class="string">"Diamonds carat"</span>, y = <span class="string">"Diamonds price"</span>, colour = <span class="string">"Diamond Cut"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加x标度为表达式-右下</span></span><br><span class="line">p + xlab(expression(frac(carat,<span class="number">10</span>)))</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-name.png" class="" title="标度-name">

<h4 id="limits"><a href="#limits" class="headerlink" title="limits"></a>limits</h4><p><strong>limits：固定标度的定义域</strong>。</p>
<ul>
<li>连续型标度接受一个长度为2的数值型向量</li>
<li>离散型标度接受一个字符型向量</li>
</ul>
<p>我们可以通过设定limits来移除不想在图形上展示的数据，<strong>任何不在此范围内的数据将会被丢弃</strong>。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, color = factor(cut)))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定x轴的范围-左图</span></span><br><span class="line">p + scale_x_continuous(limits = c(<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定colour的范围-右图</span></span><br><span class="line">p + scale_colour_hue(limits = <span class="string">"Fair"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-limits.png" class="" title="标度-limits">

<h4 id="breaks、labels"><a href="#breaks、labels" class="headerlink" title="breaks、labels"></a>breaks、labels</h4><ul>
<li>breaks表示在坐标轴/图例上哪些点的位置标标签</li>
<li>labels表示标什么标签，若设定labels，则必须同时指定breaks。</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, color = factor(cut)))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定x轴的坐标轴的值-左图</span></span><br><span class="line">p + scale_x_continuous(breaks = c(<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定图例上的值-右图</span></span><br><span class="line">p + scale_colour_hue(breaks = <span class="string">"Fair"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-breaks.png" class="" title="标度-breaks">

<h3 id="位置标度"><a href="#位置标度" class="headerlink" title="位置标度"></a>位置标度</h3><p>每幅图都一定拥有两个位置标度，一个指定水平位置（x标度），另外一个指定竖直位置（y标度）。ggplot2提供了连续型、离散型（针对因子型、字符型和逻辑型向量）以及日期型标度。</p>
<h4 id="连续型位置标度"><a href="#连续型位置标度" class="headerlink" title="连续型位置标度"></a>连续型位置标度</h4><p>最常用的连续型位置标度是<code>scale_x_continuous</code>和<code>scale_y_continuous</code>，它们均将数据映射到x轴和y轴。而最有趣的变式是通过变换来生成的，每一个连续型标度都可以接受一个trans 参数，允许指定若干种线性或非线性的变换。</p>
<p>下面是支持的变换：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>变换函数$f(x)$</th>
<th>逆变换函数$f^{−1}(x)$</th>
</tr>
</thead>
<tbody><tr>
<td>asn</td>
<td>$tanh^{−1}(x)$</td>
<td>$tanh(y)$</td>
</tr>
<tr>
<td>exp</td>
<td>$e^x$</td>
<td>$log(y)$</td>
</tr>
<tr>
<td>identity</td>
<td>$x$</td>
<td>$y$</td>
</tr>
<tr>
<td>log</td>
<td>$log(x)$</td>
<td>$e^y$</td>
</tr>
<tr>
<td>log10</td>
<td>$log_{10}(x)$</td>
<td>$10^y$</td>
</tr>
<tr>
<td>log2</td>
<td>$log_2(x)$</td>
<td>$2^y$</td>
</tr>
<tr>
<td>logit</td>
<td>$log(\frac{x}{1−x})$</td>
<td>$\frac{1}{1+e(y)}$</td>
</tr>
<tr>
<td>pow10</td>
<td>$10^x$</td>
<td>$log_{10}(y)$</td>
</tr>
<tr>
<td>probit</td>
<td>$\phi(x)$</td>
<td>$\phi^{−1}(y)$</td>
</tr>
<tr>
<td>recip</td>
<td>$x^{−1}$</td>
<td>$y^{−1}$</td>
</tr>
<tr>
<td>reverse</td>
<td>$−x$</td>
<td>$−y$</td>
</tr>
<tr>
<td>sqrt</td>
<td>$x^{\frac{1}{2}}$</td>
<td>$y^2$</td>
</tr>
</tbody></table>
<p><strong>对于连续型位置标度，变换有简写形式</strong>，比如<code>scale_x_continuous(trans = “log10”)</code>可以简写为<code>scale_x_log10()</code>。参数trans对任意连续型标度均有效，但只有位置标度有简写形式。</p>
<p>当然，可以直接对变量进行变换，而不使用标度变换。比如我们可以直接绘制<code>log10(x)</code>，而不去使用<code>scale_x_log10()</code>。</p>
<p><strong>这两种做法将在绘图区域生成完全相同的结果，但是坐标轴和刻度标签却是不同的</strong>。</p>
<p>下面是一个对比：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自行变换log10()-左图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = log10(carat), y = log10(price), color = factor(cut)))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line"></span><br><span class="line"><span class="comment"># scale_x_log10()变换-右图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, color = factor(cut)))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line">p &lt;- p + scale_x_log10() + scale_y_log10()</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-%E4%BD%8D%E7%BD%AE-%E8%BF%9E%E7%BB%AD%E5%9E%8B.png" class="" title="标度-位置-连续型">

<h4 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h4><p>日期和时间值基本上属于连续型标度，但在标注坐标轴时有着特殊的处理方式。目前我们仅支持属于<code>date</code>类的日期值和属于<code>POSIXct</code>类的时间值。如果你的日期和时间值是其他格式的，则需要<code>as.Date()</code>或<code>as.POSIXct()</code>对其进行转换。</p>
<p>一共有三个参数可以控制坐标轴外观和刻度的位置：major、minor、format：</p>
<ul>
<li>major、minor：以时间的单位（即年月周日时分秒）来指定主要和次要断点的位置，并且允许以这些单位的倍数出现，比如，<code>major = &quot;2weeks&quot;</code>将在每隔两周的位置放置一个主刻度。如果未指定，日期刻度可以自动选出合适的默认值。</li>
<li>format：指定了刻度标签的格式。</li>
</ul>
<p>下面是一个例子：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(scales)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间序列-左上</span></span><br><span class="line">p &lt;- ggplot(data = economics, mapping = aes(x = date, y = psavert))</span><br><span class="line">p &lt;- p + geom_line()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加水平线-右上</span></span><br><span class="line">p &lt;- p + geom_hline(xintercept = <span class="number">0</span>, yintercept = <span class="number">0</span>, colour = <span class="string">"gray50"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔10年为一个断点-左下</span></span><br><span class="line">p + scale_x_date(breaks = date_breaks(<span class="string">"10 years"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用年月日的格式仅显示在2004年内的图形-右下</span></span><br><span class="line">p + scale_x_date(limits = as.Date(c(<span class="string">"2004-01-01"</span>,<span class="string">"2005-01-01"</span>)), labels = date_format(<span class="string">"%Y-%m-%d"</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-%E4%BD%8D%E7%BD%AE-%E6%97%B6%E9%97%B4.png" class="" title="标度-位置-时间">

<h4 id="离散型位置标度"><a href="#离散型位置标度" class="headerlink" title="离散型位置标度"></a>离散型位置标度</h4><p>离散型位置标度<code>scale_x_discrete</code>、<code>scale_y_discrete</code>将输入中的各个水平映射为整数。结果的顺序可用参数breaks进行控制，不想要的水平可以使用limits（或xlim、ylim）进行丢弃。</p>
<p>由于我们经常也会在图形的非整点位置放置标签和标注，所以离散型位置标度也可以接受连续型的值。如果你尚未调整breaks或limits，某个因子水平的所在位置的数值表示可以使用<code>as.numeric()</code>进行计算：以从1开始的整数表示。</p>
<p>离散型位置标度的参数主要是前面提到的<strong>通用参数</strong>。</p>
<p>下面看一个例子：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认方案-左图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(cut, price))</span><br><span class="line">p &lt;- p + geom_boxplot()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改横轴标度-中图</span></span><br><span class="line">p + scale_x_discrete(labels = c(<span class="string">"Fair"</span> = <span class="string">"A"</span>,<span class="string">"Good"</span> = <span class="string">"B"</span>, <span class="string">"Very Good"</span> = <span class="string">"C"</span>,<span class="string">"Premium"</span> = <span class="string">"D"</span>,<span class="string">"Ideal"</span> = <span class="string">"E"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除不想展示的cut-右图</span></span><br><span class="line">p + scale_x_discrete(limits = c(<span class="string">"Fair"</span>,<span class="string">"Good"</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-%E4%BD%8D%E7%BD%AE-%E7%A6%BB%E6%95%A3%E5%9E%8B.png" class="" title="标度-位置-离散型">


<h3 id="颜色标度"><a href="#颜色标度" class="headerlink" title="颜色标度"></a>颜色标度</h3><p>以下标度对<strong>边界色（colour）图形属性</strong>和<strong>填充色（fill）图形属性</strong>均有效。</p>
<h4 id="连续型颜色标度"><a href="#连续型颜色标度" class="headerlink" title="连续型颜色标度"></a>连续型颜色标度</h4><p>根据颜色梯度中的色彩数量划分，共有三类连续型颜色梯度（即渐变色）：</p>
<ul>
<li><strong><code>scale_colour_gradient()</code>、<code>scale_fill_gradient()</code>：双色梯度</strong>。参数low和high控制梯度两端的颜色</li>
<li><strong><code>scale_colour_gradient2()</code>、<code>scale_fill_gradient2()</code>：三色梯度</strong>。顺序为低-中-高，这两种标度还在中点处拥有一个中间色</li>
<li><strong><code>scale_colour_gradientn()</code>、<code>scale_fill_gradientn()</code>：自定义n色梯度</strong></li>
</ul>
<p><strong>颜色梯度常被用来展示一个二维表面的高度，用以描述第三维度，颜色的深浅代表着不同的值</strong>。例如描述地势高低时，地势的高低常常用颜色深浅来展现。</p>
<p>下面我们用R自带的一个向量数据集volcano，因为ggplot2只接受数据框格式，因此我们先把数据转换成数据框格式：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(reshape2)</span><br><span class="line"></span><br><span class="line">volcano3d &lt;- melt(volcano)</span><br><span class="line">names(volcano3d) &lt;- c(<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>)</span><br></pre></td></tr></table></figure>

<p>下面展示双色梯度<code>scale_fill_gradient()</code>的用法：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认参数-左图</span></span><br><span class="line">p &lt;- ggplot(data = volcano3d,mapping = aes(x,y,fill=z))</span><br><span class="line">p &lt;- p + geom_tile()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制填充颜色的值范围-中图</span></span><br><span class="line">p + scale_fill_gradient(limits = c(<span class="number">120</span>,<span class="number">170</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过参数low与high，控制颜色在low与high之间渐变-右图</span></span><br><span class="line">p + scale_fill_gradient(low = <span class="string">"blue"</span>, high = <span class="string">"red"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-%E9%A2%9C%E8%89%B2-%E8%BF%9E%E7%BB%AD%E5%9E%8B-1.png" class="" title="标度-颜色-连续型-1">

<p>下面展示三色梯度<code>scale_fill_gradient2()</code>的用法：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认参数，即midpoint=0-左图</span></span><br><span class="line">p + scale_fill_gradient2(low = <span class="string">"blue"</span>, high = <span class="string">"red"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置midpoint=150-右图</span></span><br><span class="line">p + scale_fill_gradient2(low = <span class="string">"blue"</span>, high = <span class="string">"red"</span>, midpoint = <span class="number">150</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-%E9%A2%9C%E8%89%B2-%E8%BF%9E%E7%BB%AD%E5%9E%8B-2.png" class="" title="标度-颜色-连续型-2">

<p>以上两图都设定了颜色由 blue 到 red 渐变，但是左图使用默认参数 <code>midpoint=0</code>，右图使用参数<code>midpoint=150</code>，而 z 值的范围是 <code>94~195</code>，所有他们在图中实际渐变色为，<strong>左图：浅红-红，右图：蓝-白-红</strong>。</p>
<p>下面展示自定义n色梯度<code>scale_fill_gradientn()</code>的用法：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动设置颜色-左图</span></span><br><span class="line">p + scale_fill_gradientn(colours = c(<span class="string">"black"</span>,<span class="string">"blue"</span>,<span class="string">"red"</span>,<span class="string">"white"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用R语言预设的调色盘-右图</span></span><br><span class="line">p + scale_fill_gradientn(colours = topo.colors(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-%E9%A2%9C%E8%89%B2-%E8%BF%9E%E7%BB%AD%E5%9E%8B-3.png" class="" title="标度-颜色-连续型-3">

<h4 id="离散型颜色标度"><a href="#离散型颜色标度" class="headerlink" title="离散型颜色标度"></a>离散型颜色标度</h4><p>离散型数据有两种颜色标度。一种可以自动选择颜色，另一种可以手工从颜色集中选择颜色。</p>
<ul>
<li><p>默认的配色方案，即<code>scale_colour_hue()</code>、<code>scale_fill_hue()</code>，可通过沿着hcl色轮选取均匀分布的色相来生成颜色。这种方案对颜色较少时有比较好的效果，但对于更多不同的颜色就不好区分开来。</p>
</li>
<li><p>另一种可选的方案是<a href="http://colorbrewer.org" target="_blank" rel="noopener external nofollow noreferrer">ColorBrewer配色</a>。即<code>scale_colour_brewer()</code>、<code>scale_fill_brewer()</code>。要想了解所有的调色板，可以使用<code>RColorBrewer::display.brewer.all()</code>查看。我们可以用参数<code>palette=”调色板名称或者数字”</code>来使用。例如，使用第二个调色板时用<code>palette = 2</code>（等价于<code>palette = &#39;YIOrBr&#39;</code>）。</p>
</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认方案，即scale_colour_hue()-左上图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(cut, price, fill = color))</span><br><span class="line">p &lt;- p + geom_boxplot()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用ColorBrewer配色-右上图</span></span><br><span class="line">p + scale_fill_brewer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用ColorBrewer配色中第二个调色板-左下图</span></span><br><span class="line">p + scale_fill_brewer(palette = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用ColorBrewer配色中'Spectral'调色板-右下图</span></span><br><span class="line">p + scale_fill_brewer(palette = <span class="string">"Spectral"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-%E9%A2%9C%E8%89%B2-%E7%A6%BB%E6%95%A3%E5%9E%8B.png" class="" title="标度-颜色-离散型">


<h3 id="手动离散型标度"><a href="#手动离散型标度" class="headerlink" title="手动离散型标度"></a>手动离散型标度</h3><p>离散型标度<code>scale_linetype()</code>、<code>scale_colour_manual()</code>、<code>scale_size_discrete()</code>、<code>scale_shape()</code>是按一定的顺序将因子的水平映射到一系列取值中。<strong>如果想要定制这些标度，需要使用以下手动型标度创建新的标度</strong>：</p>
<ul>
<li><code>scale_linetype_manual()</code></li>
<li><code>scale_colour_manual()</code></li>
<li><code>scale_size_discrete()</code></li>
<li><code>scale_shape_manual()</code></li>
</ul>
<p>手动型标度拥有一个重要参数values，我们可以用它来指定这个标度应该生成的值。</p>
<p>下面是一个例子：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认颜色-左上图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, color = factor(cut)))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动改变颜色-右上图</span></span><br><span class="line">p + scale_colour_manual(values = c(<span class="string">"Fair"</span> = <span class="string">"red"</span>,<span class="string">"Good"</span> = <span class="string">"yellow"</span>,<span class="string">"Very Good"</span> = <span class="string">"green"</span>,<span class="string">"Premium"</span> = <span class="string">"blue"</span>,<span class="string">"Ideal"</span> = <span class="string">"black"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认大小-左下图</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, size = factor(cut)))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动改变大小-右下图</span></span><br><span class="line">p + scale_size_manual(values = c(<span class="number">10</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/99c6f91/%E6%A0%87%E5%BA%A6-%E6%89%8B%E5%8A%A8%E7%A6%BB%E6%95%A3%E5%9E%8B.png" class="" title="标度-手动离散型">


<h3 id="同一型标度"><a href="#同一型标度" class="headerlink" title="同一型标度"></a>同一型标度</h3><p>当你的数据能被R中的绘图函数理解时，即数据空间和图形属性空间相同时，可以使用同一性标度(identity scale)，这意味着此时无法仅从数据本身派生出有意义的图例，所以默认是不绘制图例。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/lantingg/p/7999251.html" target="_blank" rel="noopener external nofollow noreferrer">ggplot2入门与进阶（上）</a></li>
<li><a href="https://www.cnblogs.com/lizhilei-123/p/6808370.html" target="_blank" rel="noopener external nofollow noreferrer">R数据可视化—-ggplot2之标度、坐标轴和图例详解</a></li>
<li><a href="https://blog.csdn.net/songzhilian22/article/details/49388677" target="_blank" rel="noopener external nofollow noreferrer">ggplot2学习笔记之颜色标度</a></li>
</ul>
]]></content>
      <categories>
        <category>R</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title>R数据可视化-ggplot2的坐标系</title>
    <url>/archives/16cc1f7e.html</url>
    <content><![CDATA[<p>在ggplot2中，为了得到更好的数据可视化效果，我们可能要用到一些坐标转换的操作。</p>
<p>ggplot2包含了6种不同的坐标系：</p>
<table>
<thead>
<tr>
<th align="center">名字</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>coord_cartesian</code></td>
<td align="center">笛卡尔坐标系</td>
</tr>
<tr>
<td align="center"><code>coord_equal</code></td>
<td align="center">同尺度笛卡尔坐标系</td>
</tr>
<tr>
<td align="center"><code>coord_flip</code></td>
<td align="center">翻转的笛卡尔坐标系</td>
</tr>
<tr>
<td align="center"><code>coord_trans</code></td>
<td align="center">变换的笛卡尔坐标系</td>
</tr>
<tr>
<td align="center"><code>coord_map</code></td>
<td align="center">地图射影</td>
</tr>
<tr>
<td align="center"><code>coord_polar</code></td>
<td align="center">极坐标系</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="笛卡尔坐标系"><a href="#笛卡尔坐标系" class="headerlink" title="笛卡尔坐标系"></a>笛卡尔坐标系</h2><p>笛卡尔坐标系参数说明：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">coord_cartesian(xlim = <span class="literal">NULL</span>, ylim = <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p>xlim、ylim参数用来限定x、y轴的范围。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整数据集-左</span></span><br><span class="line">p1 &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price))</span><br><span class="line">p1 &lt;- p1 + geom_point()</span><br><span class="line">p1 &lt;- p1 + geom_smooth()</span><br><span class="line"></span><br><span class="line"><span class="comment"># x的标度范围设置-中</span></span><br><span class="line">p2 &lt;- p1 + scale_x_continuous(limits = c(<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># x轴坐标系范围设置-右</span></span><br><span class="line">p3 &lt;- p1 + coord_cartesian(xlim = c(<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">grid.arrange(p1,p2,p3,ncol=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/16cc1f7e/%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB-1.png" class="" title="笛卡尔坐标系-1">

<p>左图是完整的数据集，中图为x的标度范围设置，右图为x轴坐标系范围设置。标度的范围设置是对数据取子集，然后再重新拟合曲线。<strong>坐标系的放缩就是图像的放缩</strong>。</p>
<p>上面的这个图看的不是很明显，下面看个更明显的例子：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整数据集-左</span></span><br><span class="line">p1 &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price))</span><br><span class="line">p1 &lt;- p1 + stat_bin2d(bins = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x的标度范围设置-中</span></span><br><span class="line">p2 &lt;- p1 + scale_x_continuous(limits = c(<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># x轴坐标系范围设置-右</span></span><br><span class="line">p3 &lt;- p1 + coord_cartesian(xlim = c(<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">grid.arrange(p1,p2,p3,ncol=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/16cc1f7e/%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB-2.png" class="" title="笛卡尔坐标系-2">

<p>这里我们可以通过方块的大小很直观的发现，当设定标度范围时，方块的数目还是相同的，只是覆盖了更少数的区域，当设定坐标系范围时，<strong>方块数目变少，但它们覆盖的区域没变</strong>。</p>
<h2 id="坐标轴翻转"><a href="#坐标轴翻转" class="headerlink" title="坐标轴翻转"></a>坐标轴翻转</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">coord_flip()</span><br></pre></td></tr></table></figure>

<p>把x轴和y轴互换，没有特殊参数。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常数据集-左</span></span><br><span class="line">p1 &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price))</span><br><span class="line">p1 &lt;- p1 + geom_point()</span><br><span class="line">p1 &lt;- p1 + geom_smooth()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴属性改变-中</span></span><br><span class="line">p2 &lt;- ggplot(data = diamonds, mapping = aes(x = price, y = carat))</span><br><span class="line">p2 &lt;- p2 + geom_point()</span><br><span class="line">p2 &lt;- p2 + geom_smooth()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴翻转-右</span></span><br><span class="line">p3 &lt;- p1 + coord_flip()</span><br><span class="line"></span><br><span class="line">grid.arrange(p1,p2,p3,ncol=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/16cc1f7e/%E5%9D%90%E6%A0%87%E8%BD%B4%E7%BF%BB%E8%BD%AC.png" class="" title="坐标轴翻转">

<ul>
<li>左图是原散点图相应的平滑曲线</li>
<li>中图互换两个属性变量，平滑曲线拟合的是旋转后的变量</li>
<li>右图<code>coord_flip()</code>拟合原始数据，<strong>然后再翻转输出结果</strong>，就变成是以y为条件变量刻画x的曲线了</li>
</ul>
<h2 id="坐标轴变换"><a href="#坐标轴变换" class="headerlink" title="坐标轴变换"></a>坐标轴变换</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">coord_trans(x = <span class="string">"identity"</span>, y = <span class="string">"identity"</span>, limx = <span class="literal">NULL</span>, limy = <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p>坐标形式转换包括对数转换、平方根转换等，这里x和y的值可以是log10,log2或squal等，另外两个参数也是限定坐标范围。</p>
<p>这个坐标轴变换函数<code>coord_trans()</code>和<code>scale_x_log10()</code>这类函数是有区别的：</p>
<ul>
<li>坐标轴变换函数是其他处理优先，最后作图时再取对数</li>
<li>标度函数是先将数据取对数，然后再拿进来处理</li>
</ul>
<p>我们拿拟合曲线举例子：</p>
<ul>
<li>如果用<code>scale_x_log10</code>就相当于把x的数据取了对数放进来做回归，拟合出一条直线。</li>
<li>如果用<code>coord_trans</code>则是先用原有数据进行回归，得到一条拟合直线之后再变换坐标轴，<strong>曲线也会被弯曲</strong>！</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"><span class="keyword">library</span>(scales)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常数据集-左</span></span><br><span class="line">p1 &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price))</span><br><span class="line">p1 &lt;- p1 + geom_point()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标度变换-中</span></span><br><span class="line">p2 &lt;- p1 + scale_x_log10() + scale_y_log10() + geom_smooth(method = <span class="string">'lm'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴变换-右</span></span><br><span class="line">p3 &lt;- p2 + coord_trans(x = exp_trans(<span class="number">10</span>),y=exp_trans(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">grid.arrange(p1,p2,p3,ncol=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/16cc1f7e/%E5%9D%90%E6%A0%87%E8%BD%B4%E5%8F%98%E6%8D%A2.png" class="" title="坐标轴变换">

<p><strong>坐标系层面的变换发生再统计变换之后，会影响拟合的曲线形状</strong>。</p>
<ul>
<li>左图为克拉和价格的散点图</li>
<li>中图为克拉和价格<strong>对数变换</strong>后的散点图，直线为回归曲线：<code>log(y)=a+blog(x)</code></li>
<li>右图将前面的图变换回去，标度还原，因此线性趋势变成指数形式，<code>y=k(c^x)</code></li>
</ul>
<h2 id="极坐标转换"><a href="#极坐标转换" class="headerlink" title="极坐标转换"></a>极坐标转换</h2><p>极坐标转换可以做出蜘蛛图或饼图的效果。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">coord_polar(theta = <span class="string">"x"</span>, start = <span class="number">0</span>, direction = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>theta可以选择x或y，表示外延的坐标</li>
<li>start是坐标开始的角度，默认起始位置是12点钟</li>
</ul>
<p>下面是一个例子：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱状图-上图</span></span><br><span class="line">p1 &lt;- ggplot(data = diamonds, mapping = aes(x = factor(<span class="number">1</span>), fill = cut))</span><br><span class="line">p1 &lt;- p1 + geom_bar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 圆环图效果-下图左</span></span><br><span class="line">p2 &lt;- p1 + coord_polar(theta=<span class="string">"x"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 饼图效果-下图右</span></span><br><span class="line">p3 &lt;- p1 + coord_polar(theta=<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line">grid.arrange(p2,p3,ncol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/16cc1f7e/%E6%9E%81%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2-1.png" class="" title="极坐标转换-1">

<ul>
<li>上图：当使用一个因子变量作为横轴，使用分类变量进行填充时，该柱形图变成了单条堆积柱形图。</li>
<li>当theta指定为x时，柱形图的x轴会被指定为极坐标的x轴（圆周），而柱形图的y轴则会成为极坐标的y轴（半径）。</li>
<li>当theta指定为y时，柱形图的y轴为被指定为极坐标的x轴（圆周），而柱形图的x轴则会成为极坐标的y轴（半径）。</li>
</ul>
<p>当有多个序列时：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱状图-上图</span></span><br><span class="line">p1 &lt;- ggplot(data = diamonds, mapping = aes(x = cut, fill = cut))</span><br><span class="line">p1 &lt;- p1 + geom_bar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 南丁格尔玫瑰图效果-左</span></span><br><span class="line">p2 &lt;- p1 + coord_polar(theta=<span class="string">"x"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 圆环图、圆条图效果-右</span></span><br><span class="line">p3 &lt;- p1 + coord_polar(theta=<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line">grid.arrange(p2,p3,ncol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/16cc1f7e/%E6%9E%81%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2-2.png" class="" title="极坐标转换-2">

<p>当有多个序列时，我们可以通过极坐标转换可以实现圆环图、圆条图效果以及南丁格尔玫瑰图效果。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆叠柱状图-上图</span></span><br><span class="line">p1 &lt;- ggplot(data = diamonds, mapping = aes(x = color, fill = cut))</span><br><span class="line">p1 &lt;- p1 + geom_bar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆叠玫瑰图效果-左</span></span><br><span class="line">p2 &lt;- p1 + coord_polar(theta=<span class="string">"x"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂的圆环图效果-右</span></span><br><span class="line">p3 &lt;- p1 + coord_polar(theta=<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line">grid.arrange(p2,p3,ncol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/16cc1f7e/%E6%9E%81%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2-3.png" class="" title="极坐标转换-3">


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/wkslearner/p/5718928.html" target="_blank" rel="noopener external nofollow noreferrer">ggplot2 坐标系相关设置（coord）</a></li>
<li><a href="https://blog.csdn.net/u011596455/article/details/79574080" target="_blank" rel="noopener external nofollow noreferrer">七、R数据可视化–ggplot2定位之坐标系详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27262426" target="_blank" rel="noopener external nofollow noreferrer">R语言可视化——极坐标变换与衍生图表类型</a></li>
</ul>
]]></content>
      <categories>
        <category>R</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title>R数据可视化-ggplot2的分面</title>
    <url>/archives/12b79187.html</url>
    <content><![CDATA[<p>分面(facet)是在一个页面上自动摆放多幅图形，这一过程先将数据划分为多个子集，然后将每个子集依次绘制到页面的不同面板中。</p>
<p>ggplot2提供了两种分面类型：</p>
<ul>
<li>网格分面-<code>facet_grid</code>：生成一个2维的面板网格，面板的行与列通过变量来定义。<strong>本质是2维的</strong>。</li>
<li>封装分面-<code>facet_wrap</code>：首先生成一个1维的面板条块，然后再分装到2维中。<strong>本质是1维的</strong>。</li>
</ul>
<a id="more"></a>

<h2 id="网格分面-facet-grid"><a href="#网格分面-facet-grid" class="headerlink" title="网格分面-facet_grid"></a>网格分面-<code>facet_grid</code></h2><p>网格分面生成的是一个2维的面板网格，面板的行与列通过变量来定义。本质是2维的。</p>
<h3 id="不进行分面"><a href="#不进行分面" class="headerlink" title="不进行分面"></a>不进行分面</h3><p>不进行分面：即不使用函数<code>facet_grid()</code>或使用<code>facet_null()</code>函数，此时得到的是单独画板。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line">p &lt;- p + facet_null()</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E7%BD%91%E6%A0%BC%E5%88%86%E9%9D%A2-1.png" class="" title="网格分面-1">

<h3 id="一行多列"><a href="#一行多列" class="headerlink" title="一行多列"></a>一行多列</h3><p>一行多列：纵坐标相同，用于y位置的比较。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line">p &lt;- p + facet_grid(<span class="string">'. ~ cut'</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E7%BD%91%E6%A0%BC%E5%88%86%E9%9D%A2-2.png" class="" title="网格分面-2">

<p><strong>电脑屏幕通常较宽，因此这个方向最合适数据的展示</strong>。</p>
<h3 id="一列多行"><a href="#一列多行" class="headerlink" title="一列多行"></a>一列多行</h3><p>一列多行：横坐标轴相同，利于x位置的比较，<strong>尤其是对数据分布的比较</strong>。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = price))</span><br><span class="line">p &lt;- p + geom_histogram(binwidth = <span class="number">30</span>)</span><br><span class="line">p &lt;- p + facet_grid(<span class="string">'cut ~ .'</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E7%BD%91%E6%A0%BC%E5%88%86%E9%9D%A2-3.png" class="" title="网格分面-3">

<h3 id="多列多行"><a href="#多列多行" class="headerlink" title="多列多行"></a>多列多行</h3><p>我们通常都将数目最多的变量按列排放，这样可以充分利用屏幕的宽高比。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line">p &lt;- p + facet_grid(<span class="string">'cut ~ color'</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E7%BD%91%E6%A0%BC%E5%88%86%E9%9D%A2-4.png" class="" title="网格分面-4">

<h3 id="facet-grid-函数的参数"><a href="#facet-grid-函数的参数" class="headerlink" title="facet_grid()函数的参数"></a><code>facet_grid()</code>函数的参数</h3><p><code>facet_grid()</code>函数的全部参数如下：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">facet_grid(facets, margins = <span class="literal">FALSE</span>, scales = <span class="string">"fixed"</span>, space = <span class="string">"fixed"</span>, shrink = <span class="literal">TRUE</span>,</span><br><span class="line">           labeller = <span class="string">"label_value"</span>, as.table = <span class="literal">TRUE</span>, drop = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>facets：分面参数</li>
<li>margins：用于分面的包含每个变量元素所有数据的数据组</li>
<li>scales：坐标刻度的范围，可以设定四种类型：<ul>
<li><code>fixed</code>：表示所有小图均使用统一坐标范围</li>
<li><code>free</code>：表示每个小图按照各自数据范围自由调整坐标刻度范围</li>
<li><code>free_x</code>：表示可以自由调整x轴刻度范围</li>
<li><code>free_y</code>：表示可以自由调整y轴刻度范围</li>
</ul>
</li>
<li>space：这个参数要配合scales使用，如果为fixed（默认），所有小图的大小都一样，如果为<code>free/free_x/free_y</code>，小图的大小将按照坐标轴的跨度比例进行设置</li>
<li>shrinks：这个参数和坐标轴刻度有关，如果为TRUE（默认）则按统计后的数据调整刻度范围，否则按统计前的数据设定坐标</li>
<li>labeller：这个参数用来设定小图标签</li>
<li>as.table：小图排列顺序有关的选项。如果为TRUE（默认）则按表格方式排列，即最大值（指分组level值）排在表格最后即右下角，否则排在左上角</li>
<li>drop：是否丢弃没有数据的分组，如果为TRUE（默认），则空数据组不绘图</li>
</ul>
<h4 id="margins"><a href="#margins" class="headerlink" title="margins"></a>margins</h4><p>我们可以用margins来绘制<strong>边际图</strong>。设定<code>margins=TRUE</code>可展示所有的边际图，或者<code>margins=c(&quot;A&quot;,&quot;B&quot;)</code>，列出你要展示的边际图的变量名称。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = price))</span><br><span class="line">p &lt;- p + geom_histogram(binwidth = <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认-左图</span></span><br><span class="line">p + facet_grid(facets = <span class="string">'cut ~ .'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示所有的边际图（margins = TRUE）-右图</span></span><br><span class="line">p + facet_grid(facets = <span class="string">'cut ~ .'</span>, margins = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E7%BD%91%E6%A0%BC%E5%88%86%E9%9D%A2-margins.png" class="" title="网格分面-margins">

<h4 id="scales"><a href="#scales" class="headerlink" title="scales"></a>scales</h4><p>固定标度可以让我们在相同的基准上对子集进行比较，观察在哪些地方各子集有相似的总体模式。而自由标度可以帮助我们发现更多细节，它在展示不同量纲的时间序列时非常有用。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = price))</span><br><span class="line">p &lt;- p + geom_histogram(binwidth = <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个分面中固定标度即横纵坐标范围相同-左图</span></span><br><span class="line">p + facet_grid(facets = <span class="string">'cut ~ .'</span>, scales = <span class="string">'fixed'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自由标度即横纵坐标范围可变-右图</span></span><br><span class="line">p + facet_grid(facets = <span class="string">'cut ~ .'</span>, scales = <span class="string">'free'</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E7%BD%91%E6%A0%BC%E5%88%86%E9%9D%A2-scales.png" class="" title="网格分面-scales">

<h4 id="space"><a href="#space" class="headerlink" title="space"></a>space</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = price))</span><br><span class="line">p &lt;- p + geom_histogram(binwidth = <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个分面中固定标度即横纵坐标范围相同-左图</span></span><br><span class="line">p + facet_grid(facets = <span class="string">'cut ~ .'</span>, scales = <span class="string">'fixed'</span>, space = <span class="string">'fixed'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># space设置为free时，每列的宽度与该列的标度范围成比例-右图</span></span><br><span class="line">p + facet_grid(facets = <span class="string">'cut ~ .'</span>, scales = <span class="string">'free'</span>, space = <span class="string">'free'</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E7%BD%91%E6%A0%BC%E5%88%86%E9%9D%A2-space.png" class="" title="网格分面-space">

<h2 id="封装分面-facet-wrap"><a href="#封装分面-facet-wrap" class="headerlink" title="封装分面-facet_wrap"></a>封装分面-<code>facet_wrap</code></h2><p>封装分面首先生成一个1维的面板条块，然后再分装到2维中。<strong>本质是1维的</strong>。</p>
<h3 id="facet-wrap-函数的参数"><a href="#facet-wrap-函数的参数" class="headerlink" title="facet_wrap()函数的参数"></a><code>facet_wrap()</code>函数的参数</h3><p><code>facet_wrap()</code>函数的全部参数如下：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">facet_wrap(facets, nrow = <span class="literal">NULL</span>, ncol = <span class="literal">NULL</span>, scales = <span class="string">"fixed"</span>,</span><br><span class="line">           shrink = <span class="literal">TRUE</span>, as.table = <span class="literal">TRUE</span>, drop = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>

<p>前面已经介绍过网格分面的参数，这里的封装分面的参数也是类似的，下面介绍不同的几个参数：</p>
<ul>
<li>nrow：绘制图形的行数</li>
<li>ncol：绘制图形的列数，一般<code>nrow/ncol</code>只设定一个即可</li>
</ul>
<h3 id="默认设置"><a href="#默认设置" class="headerlink" title="默认设置"></a>默认设置</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认设置</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line">p &lt;- p + facet_wrap(~ color)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E5%B0%81%E8%A3%85%E5%88%86%E9%9D%A2-1.png" class="" title="封装分面-1">

<h3 id="设置列"><a href="#设置列" class="headerlink" title="设置列"></a>设置列</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过ncol=2设置为两列</span></span><br><span class="line">p &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price))</span><br><span class="line">p &lt;- p + geom_point()</span><br><span class="line">p &lt;- p + facet_wrap(~ color, ncol = <span class="number">2</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E5%B0%81%E8%A3%85%E5%88%86%E9%9D%A2-2.png" class="" title="封装分面-2">

<h2 id="分面与分组对比"><a href="#分面与分组对比" class="headerlink" title="分面与分组对比"></a>分面与分组对比</h2><p>这两种绘图技巧都有相应的优缺点。</p>
<p>在分面图形中，每个组别都在单独的面板中，相隔较远，组间无重叠。因此组与组之间重叠严重时，分面图形有一定的好处。不过这也会导致组间的细微差别难以被发现。使用图形属性区分各组时，各组将会离得很近甚至可能重叠，不过细微得差别将会容易被发现。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组-左上</span></span><br><span class="line">p1 &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, colour = cut))</span><br><span class="line">p1 &lt;- p1 + geom_point()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分面-右上</span></span><br><span class="line">p2 &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, colour = cut))</span><br><span class="line">p2 &lt;- p2 + geom_point()</span><br><span class="line">p2 &lt;- p2 + facet_grid(<span class="string">'. ~ cut'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组-只显示回归线-左下</span></span><br><span class="line">p3 &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, colour = cut))</span><br><span class="line">p3 &lt;- p3 + geom_smooth(method = lm, se = <span class="literal">F</span>, fullrange = <span class="literal">T</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分面-只显示回归线-右下</span></span><br><span class="line">p4 &lt;- ggplot(data = diamonds, mapping = aes(x = carat, y = price, colour = cut))</span><br><span class="line">p4 &lt;- p4 + geom_smooth(method = lm, se = <span class="literal">F</span>, fullrange = <span class="literal">T</span>)</span><br><span class="line">p4 &lt;- p4 + facet_grid(<span class="string">'. ~ cut'</span>)</span><br><span class="line"></span><br><span class="line">p &lt;- grid.arrange(p1,p2,p3,p4,ncol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E5%88%86%E9%9D%A2%E4%B8%8E%E5%88%86%E7%BB%84%E5%AF%B9%E6%AF%94.png" class="" title="分面与分组对比">

<p><strong>我们可以使用color或者fill图形属性来为分面条形图上色</strong>。</p>
<p>在散点图中，仅使用颜色区分各组，我们可能还没注意到图形重叠了，但是回归线却可以让我们看到Ideal、Premium、Good、Very Good被分组在一起，与Fair组相距甚远。</p>
<h2 id="分面与并列对比"><a href="#分面与并列对比" class="headerlink" title="分面与并列对比"></a>分面与并列对比</h2><p>分面可绘制出与图形并列类似得图形效果。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并列-左图</span></span><br><span class="line">p1 &lt;- ggplot(data = diamonds, mapping = aes(x = color, fill = cut))</span><br><span class="line">p1 &lt;- p1 + geom_bar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分面-右图</span></span><br><span class="line">p2 &lt;- ggplot(data = diamonds, mapping = aes(x = color, fill = cut))</span><br><span class="line">p2 &lt;- p2 + geom_bar()</span><br><span class="line">p2 &lt;- p2 + facet_grid(<span class="string">'. ~ cut'</span>)</span><br><span class="line"></span><br><span class="line">grid.arrange(p1,p2,ncol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/12b79187/%E5%88%86%E9%9D%A2%E4%B8%8E%E5%B9%B6%E5%88%97%E5%AF%B9%E6%AF%94.png" class="" title="分面与并列对比">

<p><strong>我们可以使用color或者fill图形属性来为分面条形图上色</strong>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/songzhilian22/article/details/49491281" target="_blank" rel="noopener external nofollow noreferrer">ggplot2学习笔记之分面</a></li>
<li><a href="https://blog.csdn.net/u011596455/article/details/79574072" target="_blank" rel="noopener external nofollow noreferrer">六、R语言可视化–ggplot2定位之分面</a></li>
</ul>
]]></content>
      <categories>
        <category>R</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title>R数据可视化-ggplot2中的qplot函数</title>
    <url>/archives/8c7eb5d5.html</url>
    <content><![CDATA[<p><code>qplot()</code>是ggplot2的一个作图函数，qplot的意思是快速作图（quick plot）。</p>
<a id="more"></a>

<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>本文的所有绘图使用的都是ggplot2内置的diamonds数据集，便于我们聚焦于作图的细节。</p>
<p>diamonds数据集包含了约54000颗钻石的价格和质量的信息。</p>
<p>数据说明：</p>
<ul>
<li>反映钻石质量的四个“C”<ul>
<li>克拉重量：carat</li>
<li>切工：cut</li>
<li>颜色：color</li>
<li>净度：clarity</li>
</ul>
</li>
<li>五个物理指标<ul>
<li>深度：depth</li>
<li>钻面宽度：table</li>
<li>x</li>
<li>y</li>
<li>z</li>
</ul>
</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">str(diamonds)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:	53940 obs. of  10 variables:</span><br><span class="line"> $ carat  : num  0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...</span><br><span class="line"> $ cut    : Ord.factor w&#x2F; 5 levels &quot;Fair&quot;&lt;&quot;Good&quot;&lt;..: 5 4 2 4 2 3 3 3 1 3 ...</span><br><span class="line"> $ color  : Ord.factor w&#x2F; 7 levels &quot;D&quot;&lt;&quot;E&quot;&lt;&quot;F&quot;&lt;&quot;G&quot;&lt;..: 2 2 2 6 7 7 6 5 2 5 ...</span><br><span class="line"> $ clarity: Ord.factor w&#x2F; 8 levels &quot;I1&quot;&lt;&quot;SI2&quot;&lt;&quot;SI1&quot;&lt;..: 2 3 5 4 2 6 7 3 4 5 ...</span><br><span class="line"> $ depth  : num  61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...</span><br><span class="line"> $ table  : num  55 61 65 58 58 57 57 55 61 61 ...</span><br><span class="line"> $ price  : int  326 326 327 334 335 336 336 337 337 338 ...</span><br><span class="line"> $ x      : num  3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...</span><br><span class="line"> $ y      : num  3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...</span><br><span class="line"> $ z      : num  2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">head(diamonds)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>carat</th>
<th>cut</th>
<th>color</th>
<th>clarity</th>
<th>depth</th>
<th>table</th>
<th>price</th>
<th>x</th>
<th>y</th>
<th>z</th>
</tr>
</thead>
<tbody><tr>
<td>0.23</td>
<td>Ideal</td>
<td>E</td>
<td>SI2</td>
<td>61.5</td>
<td>55</td>
<td>326</td>
<td>3.95</td>
<td>3.98</td>
<td>2.43</td>
</tr>
<tr>
<td>0.21</td>
<td>Premium</td>
<td>E</td>
<td>SI1</td>
<td>59.8</td>
<td>61</td>
<td>326</td>
<td>3.89</td>
<td>3.84</td>
<td>2.31</td>
</tr>
<tr>
<td>0.23</td>
<td>Good</td>
<td>E</td>
<td>VS1</td>
<td>56.9</td>
<td>65</td>
<td>327</td>
<td>4.05</td>
<td>4.07</td>
<td>2.31</td>
</tr>
<tr>
<td>0.29</td>
<td>Premium</td>
<td>I</td>
<td>VS2</td>
<td>62.4</td>
<td>58</td>
<td>334</td>
<td>4.20</td>
<td>4.23</td>
<td>2.63</td>
</tr>
<tr>
<td>0.31</td>
<td>Good</td>
<td>J</td>
<td>SI2</td>
<td>63.3</td>
<td>58</td>
<td>335</td>
<td>4.34</td>
<td>4.35</td>
<td>2.75</td>
</tr>
<tr>
<td>0.24</td>
<td>Very Good</td>
<td>J</td>
<td>VVS2</td>
<td>62.8</td>
<td>57</td>
<td>336</td>
<td>3.94</td>
<td>3.96</td>
<td>2.48</td>
</tr>
</tbody></table>
<p>下面我们从原始数据中随机选出100个样本作为新数据集<code>dsmall</code>，便于小数据的作图展示：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让样本可重复</span></span><br><span class="line">set.seed(<span class="number">1410</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始数据的一个容量为100的随机样本</span></span><br><span class="line">dsmall &lt;- diamonds[sample(nrow(diamonds),<span class="number">100</span>),]</span><br></pre></td></tr></table></figure>

<h2 id="qplot-基本用法"><a href="#qplot-基本用法" class="headerlink" title="qplot()基本用法"></a>qplot()基本用法</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>下面是钻石的价格和重量之间的关系：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本用法-左图</span></span><br><span class="line">qplot(carat, price, data = diamonds)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种相关关系似乎是指数型的，因此我们应该先对变量进行一些变换。</span></span><br><span class="line"><span class="comment"># 变量的函数作为参数-中图</span></span><br><span class="line">qplot(log(carat), log(price), data = diamonds)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量的某种组合作为参数-右图</span></span><br><span class="line"><span class="comment"># 钻石的体积（`x * y * z`表示）和重量之间的关系</span></span><br><span class="line">qplot(carat, x * y * z, data = diamonds)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.png" class="" title="基本用法">


<h2 id="颜色、大小、形状和其他图形属性"><a href="#颜色、大小、形状和其他图形属性" class="headerlink" title="颜色、大小、形状和其他图形属性"></a>颜色、大小、形状和其他图形属性</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组-颜色-左图</span></span><br><span class="line">qplot(carat, price, data = dsmall, colour = color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组-形状-右图</span></span><br><span class="line">qplot(carat, price, data = dsmall, shape = cut)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E9%A2%9C%E8%89%B2%E3%80%81%E5%BD%A2%E7%8A%B6.png" class="" title="颜色、形状">

<p>我们可以使用<code>I()</code>来手动设定图形属性。</p>
<p>例如：<code>colour = I(&quot;red&quot;)</code>或<code>size = I(2)</code>。</p>
<p>我们可以通过使用alpha图形属性来调整透明度，例如<code>1/10</code>，其分母表示经过多少次重叠之后颜色将变得不透明，这样我们可以看到大部分的点在哪里进行了重叠。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 透明度设置为1/10-左图</span></span><br><span class="line">qplot(carat, price, data = diamonds, alpha = I(<span class="number">1</span>/<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 透明度设置为1/200-右图</span></span><br><span class="line">qplot(carat, price, data = diamonds, alpha = I(<span class="number">1</span>/<span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E9%80%8F%E6%98%8E%E5%BA%A6%E8%AE%BE%E7%BD%AE.png" class="" title="透明度设置">


<h2 id="几何对象geom"><a href="#几何对象geom" class="headerlink" title="几何对象geom"></a>几何对象geom</h2><p>我们可以通过改变几何对象画出任何一种类型的图形。</p>
<p>二维变量关系：</p>
<ul>
<li><code>geom = &quot;point&quot;</code>：散点图（默认）</li>
<li><code>geom = &quot;smooth&quot;</code>：拟合一条平滑曲线</li>
<li><code>geom = &quot;boxplot&quot;</code>：箱线胡须图</li>
<li><code>geom = &quot;path&quot;</code>和<code>geom = &quot;line&quot;</code>：数据点之间绘制连线</li>
</ul>
<p>一维分布：</p>
<ul>
<li>连续变量<ul>
<li><code>geom = &quot;histogram&quot;</code>：直方图（默认）</li>
<li><code>geom = &quot;freqplot&quot;</code>：频率多边形</li>
<li><code>geom = &quot;density&quot;</code>：密度曲线</li>
</ul>
</li>
<li>离散变量<ul>
<li><code>geom = &quot;bar&quot;</code>：条形图</li>
</ul>
</li>
</ul>
<h3 id="平滑曲线"><a href="#平滑曲线" class="headerlink" title="平滑曲线"></a>平滑曲线</h3><p>如果散点图中有非常多的数据点，那么数据展示的趋势就不太明显了，这时候，我们可以在图中添加一条平滑曲线。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小数据集-左图</span></span><br><span class="line">qplot(carat, price, data = dsmall, geom = c(<span class="string">"point"</span>, <span class="string">"smooth"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部数据集-右图</span></span><br><span class="line">qplot(carat, price, data = diamonds, geom = c(<span class="string">"point"</span>, <span class="string">"smooth"</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E5%B9%B3%E6%BB%91%E6%9B%B2%E7%BA%BF-1.png" class="" title="平滑曲线-1">

<p>我们可以通过span参数控制曲线的平滑程度。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">qplot(carat, price, data = dsmall, geom = c(<span class="string">"point"</span>, <span class="string">"smooth"</span>), span = <span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E5%B9%B3%E6%BB%91%E6%9B%B2%E7%BA%BF-2.png" class="" title="平滑曲线-2">


<h3 id="箱型图和扰动点图"><a href="#箱型图和扰动点图" class="headerlink" title="箱型图和扰动点图"></a>箱型图和扰动点图</h3><p>当数据集包含了一个分类变量和一个连续变量时，我们可以通过箱型图和扰动点图来看连续变量是如何随着分类变量的变化而变化的。</p>
<ul>
<li>扰动点图可以显示所有的点，但是有图形重叠的问题。</li>
<li>箱型图可以显示出分布的中位数和四分位数，信息更充分。</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扰动点图-左图</span></span><br><span class="line">qplot(color, price / carat, data = diamonds, geom = <span class="string">"jitter"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 箱型图-右图</span></span><br><span class="line">qplot(color, price / carat, data = diamonds, geom = <span class="string">"boxplot"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E7%AE%B1%E5%9E%8B%E5%9B%BE%E5%92%8C%E6%89%B0%E5%8A%A8%E7%82%B9%E5%9B%BE-1.png" class="" title="箱型图和扰动点图-1">

<p>我们可以用半透明度来解决扰动点图的图形重叠问题。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 透明度设置为1/5-左图</span></span><br><span class="line">qplot(color, price / carat, data = diamonds, geom = <span class="string">"jitter"</span>, alpha = I(<span class="number">1</span>/<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 透明度设置为1/50-中图</span></span><br><span class="line">qplot(color, price / carat, data = diamonds, geom = <span class="string">"jitter"</span>, alpha = I(<span class="number">1</span>/<span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 透明度设置为1/200-右图</span></span><br><span class="line">qplot(color, price / carat, data = diamonds, geom = <span class="string">"jitter"</span>, alpha = I(<span class="number">1</span>/<span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E7%AE%B1%E5%9E%8B%E5%9B%BE%E5%92%8C%E6%89%B0%E5%8A%A8%E7%82%B9%E5%9B%BE-2.png" class="" title="箱型图和扰动点图-2">


<h3 id="直方图和密度曲线图"><a href="#直方图和密度曲线图" class="headerlink" title="直方图和密度曲线图"></a>直方图和密度曲线图</h3><p>直方图和密度曲线图可以展示单个变量的分布。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直方图-左图</span></span><br><span class="line">qplot(carat, data = diamonds, geom = <span class="string">"histogram"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密度曲线图-右图</span></span><br><span class="line">qplot(carat, data = diamonds, geom = <span class="string">"density"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%92%8C%E5%AF%86%E5%BA%A6%E6%9B%B2%E7%BA%BF%E5%9B%BE.png" class="" title="直方图和密度曲线图">

<p><strong>在直方图中，应该尝试多种组距。当组距较大时，图形能反映数据的总体特征，当组距较小时，则能显示出更多的细节</strong>。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 组距设置为1-左图</span></span><br><span class="line">qplot(carat, data = diamonds, geom = <span class="string">"histogram"</span>, binwidth = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组距设置为0.1-中图</span></span><br><span class="line">qplot(carat, data = diamonds, geom = <span class="string">"histogram"</span>, binwidth = <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组距设置为0.01-右图</span></span><br><span class="line">qplot(carat, data = diamonds, geom = <span class="string">"histogram"</span>, binwidth = <span class="number">0.01</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%84%E8%B7%9D%E5%AF%B9%E6%AF%94.png" class="" title="直方图组距对比">

<p>如果要对不同组的分布进行对比，只需要再加上一个<strong>图形映射</strong>。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密度图分组对比-左图</span></span><br><span class="line">qplot(carat, data = diamonds, geom = <span class="string">"density"</span>, colour = color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直方图分组对比-右图</span></span><br><span class="line">qplot(carat, data = diamonds, geom = <span class="string">"histogram"</span>, fill = color)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%92%8C%E5%AF%86%E5%BA%A6%E5%9B%BE%E5%88%86%E7%BB%84%E5%AF%B9%E6%AF%94.png" class="" title="直方图和密度图分组对比">

<h3 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h3><p>条形图几何对象会计算每一个水平下观测的数量，因此无需预先对数据进行汇总。</p>
<p>下面是钻石颜色的条形图：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 普通条形图（钻石颜色）-左图</span></span><br><span class="line">qplot(color, data = diamonds, geom = <span class="string">"bar"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按重量加权的条形图，即得到的是每种颜色的钻石的总重量-右图</span></span><br><span class="line">qplot(color, data = diamonds, geom = <span class="string">"bar"</span>, weight = carat) + scale_y_continuous(<span class="string">"carat"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E6%9D%A1%E5%BD%A2%E5%9B%BE.png" class="" title="条形图">


<h3 id="时间序列中的线条图和路径图"><a href="#时间序列中的线条图和路径图" class="headerlink" title="时间序列中的线条图和路径图"></a>时间序列中的线条图和路径图</h3><p>线条图和路径图常用于时间序列的可视化。</p>
<ul>
<li>线条图：点从左到右进行连接</li>
<li>路径图：按照点在数据集中的顺序进行连接</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">str(economics)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classes &#39;spec_tbl_df&#39;, &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:	574 obs. of  6 variables:</span><br><span class="line"> $ date    : Date, format: &quot;1967-07-01&quot; &quot;1967-08-01&quot; ...</span><br><span class="line"> $ pce     : num  507 510 516 512 517 ...</span><br><span class="line"> $ pop     : num  198712 198911 199113 199311 199498 ...</span><br><span class="line"> $ psavert : num  12.6 12.6 11.9 12.9 12.8 11.8 11.7 12.3 11.7 12.3 ...</span><br><span class="line"> $ uempmed : num  4.5 4.7 4.6 4.9 4.7 4.8 5.1 4.5 4.1 4.6 ...</span><br><span class="line"> $ unemploy: num  2944 2945 2958 3143 3066 ...</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">head(economics)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>date</th>
<th>pce</th>
<th>pop</th>
<th>psavert</th>
<th>uempmed</th>
<th>unemploy</th>
</tr>
</thead>
<tbody><tr>
<td>1967-07-01</td>
<td>506.7</td>
<td>198712</td>
<td>12.6</td>
<td>4.5</td>
<td>2944</td>
</tr>
<tr>
<td>1967-08-01</td>
<td>509.8</td>
<td>198911</td>
<td>12.6</td>
<td>4.7</td>
<td>2945</td>
</tr>
<tr>
<td>1967-09-01</td>
<td>515.6</td>
<td>199113</td>
<td>11.9</td>
<td>4.6</td>
<td>2958</td>
</tr>
<tr>
<td>1967-10-01</td>
<td>512.2</td>
<td>199311</td>
<td>12.9</td>
<td>4.9</td>
<td>3143</td>
</tr>
<tr>
<td>1967-11-01</td>
<td>517.4</td>
<td>199498</td>
<td>12.8</td>
<td>4.7</td>
<td>3066</td>
</tr>
<tr>
<td>1967-12-01</td>
<td>525.1</td>
<td>199657</td>
<td>11.8</td>
<td>4.8</td>
<td>3018</td>
</tr>
</tbody></table>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 失业人口的比例-左图</span></span><br><span class="line">qplot(date, unemploy / pop, data = economics, geom = <span class="string">"line"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 失业星期数的中位数-右图</span></span><br><span class="line">qplot(date, uempmed, data = economics, geom = <span class="string">"line"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97.png" class="" title="时间序列">


<h2 id="分面"><a href="#分面" class="headerlink" title="分面"></a>分面</h2><p>比较不同分组可以通过</p>
<ul>
<li><strong>图形属性（颜色和形状）</strong>：所有组绘制在同一张图中</li>
<li><strong>分面</strong>：数据分割成若干子集，然后创建一个图形的矩阵，将每个子集绘制到图形矩阵中</li>
</ul>
<p>下面第一张图展示的是频数，第二张图展示的是频率，频率图可以使得比较不同组的分布时不受到该组样本量大小的影响：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 钻石重量的频数（按照颜色分组）-左图</span></span><br><span class="line">qplot(carat, data = diamonds, facets = color ~ ., </span><br><span class="line">      geom = <span class="string">"histogram"</span>, binwidth = <span class="number">0.1</span>, xlim = c(<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 钻石重量的频率（按照颜色分组）-右图</span></span><br><span class="line">qplot(carat, ..density.., data = diamonds, facets = color ~ ., </span><br><span class="line">      geom = <span class="string">"histogram"</span>, binwidth = <span class="number">0.1</span>, xlim = c(<span class="number">0</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E5%88%86%E9%9D%A2.png" class="" title="分面">

<p>语法说明：</p>
<ul>
<li>我们可以通过<code>row_var ~ col_var</code>的表达式进行指定窗格数。如果想指定一行或一列，可以使用<code>.</code>作为占位符</li>
<li><code>..density..</code>：这是一个新的语法，告诉ggplot2将密度而不是频数映射到y轴</li>
</ul>
<h2 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h2><p>qplot中还有以下选项用于控制图形的外观：</p>
<ul>
<li>xlim、ylim：设置x轴和y轴的显示区间。例如：<code>xlim = c(0, 20)</code></li>
<li>log：一个字符型向量，说明哪个坐标轴应该取对数。例如：<code>log = &quot;xy&quot;</code></li>
<li>main：图形的主标题，可以是字符串或表达式。例如：<code>main = &quot;plot title&quot;</code>或<code>main = expression(beta[1] == 1)</code></li>
<li>xlab、ylab：设置x轴和y轴的标签文字，可以是字符串或表达式。</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标题、坐标轴标签设置-左图</span></span><br><span class="line">qplot(</span><br><span class="line">    carat, price, data = dsmall, </span><br><span class="line">    xlab = <span class="string">"Price ($)"</span>, ylab = <span class="string">"Weight (carats)"</span>, </span><br><span class="line">    main = <span class="string">"Price-weight relationship"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴设置为对数-右图</span></span><br><span class="line">qplot(carat, price, data = dsmall, log = <span class="string">"xy"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/8c7eb5d5/%E5%85%B6%E4%BB%96%E9%80%89%E9%A1%B9.png" class="" title="其他选项">


<blockquote>
<p>本文是《ggplot2-数据分析与图形艺术》的笔记</p>
</blockquote>
]]></content>
      <categories>
        <category>R</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter Notebook中使用R语言</title>
    <url>/archives/3aa9fd39.html</url>
    <content><![CDATA[<p>既然我们是用R语言来做数据分析，那么就不得不提到Jupyter Notebook。</p>
<p>Jupyter Notebook是以网页的形式打开，这样我们可以在网页中直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示，非常方便直观。如果在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释。</p>
<ul>
<li>R版本：3.6.1</li>
<li>Jupyter Notebook版本：1.0.0</li>
</ul>
<a id="more"></a>

<h2 id="Jupyter-Notebook安装"><a href="#Jupyter-Notebook安装" class="headerlink" title="Jupyter Notebook安装"></a>Jupyter Notebook安装</h2><p>安装Jupyter Notebook的前提是需要安装了Python。然后可以通过pip进行安装，cmd中输入：</p>
<ol>
<li>升级pip到最新版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>注意：老版本的pip在安装Jupyter Notebook过程中或面临依赖项无法同步安装的问题。因此强烈建议先把pip升级到最新版本。</p>
<ol start="2">
<li>安装Jupyter Notebook</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure>

<h2 id="运行Jupyter-Notebook"><a href="#运行Jupyter-Notebook" class="headerlink" title="运行Jupyter Notebook"></a>运行Jupyter Notebook</h2><p>直接在终端中输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>

<p>执行命令之后，在终端中将会显示一系列notebook的服务器信息，同时浏览器将会自动启动Jupyter Notebook。</p>
<p>注意：之后在Jupyter Notebook的所有操作，都请保持终端不要关闭，因为一旦关闭终端，就会断开与本地服务器的链接。</p>
<h2 id="Jupyter-Notebook里添加R核"><a href="#Jupyter-Notebook里添加R核" class="headerlink" title="Jupyter Notebook里添加R核"></a>Jupyter Notebook里添加R核</h2><p>这里需要提前安装好R。</p>
<ol>
<li>在R Console中输入</li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages(c(<span class="string">'repr'</span>, <span class="string">'IRdisplay'</span>, <span class="string">'evaluate'</span>, <span class="string">'crayon'</span>, <span class="string">'pbdZMQ'</span>, <span class="string">'devtools'</span>, <span class="string">'uuid'</span>, <span class="string">'digest'</span>))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装IRkernel包，在R Console中输入</li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">devtools::install_github(<span class="string">'IRkernel/IRkernel'</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使R在Jupyter Notebook中可以被探测到，在R Console中输入</li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">IRkernel::installspec(user = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>

<p>通过设置<code>user=FALSE</code>安装在系统中，如果缺省，即<code>IRkernel::installspec()</code>，则只在当前用户下安装。</p>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[InstallKernelSpec] Installed kernelspec ir in C:\ProgramData\jupyter\kernels\ir</span><br></pre></td></tr></table></figure>

<p>至此，安装完成。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试一下是否安装成功。再次打开jupyter notebook，在<strong>右侧新建的下拉选择</strong>里面出现R，就代表安装成功了。</p>
<p>至此，Jupyter Notebook里已正确添加R核。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/91365f343585" target="_blank" rel="noopener external nofollow noreferrer">Jupyter Notebook介绍、安装及使用教程</a></li>
</ul>
]]></content>
      <categories>
        <category>R</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode中配置R语言运行环境</title>
    <url>/archives/eb2dec05.html</url>
    <content><![CDATA[<p>在使用R语言的大部分用户中，RStudio都是首选的IDE。凭借其完善的功能和特性，RStudio似乎成了R语言理所当然的选择。不过一些时候，我们可能并不需要特别多的复杂功能，因此，我尝试在VSCode这个轻量级的通用代码编辑器中配置R语言运行环境。</p>
<a id="more"></a>

<h2 id="安装R"><a href="#安装R" class="headerlink" title="安装R"></a>安装R</h2><p>首先我们需要安装<a href="https://www.r-project.org/" target="_blank" rel="noopener external nofollow noreferrer">R 核心程序</a>。</p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>如果你曾经在VSCode中使用过Python插件，实际上只需要微软出品的这一个插件就差不多可以开始工作了。但作为小众语言，R的插件并不是官方开发，而是由第三方开发者贡献的。这也导致配置一个尚可的R环境需要从四处安装不同的东西，才能开始工作。</p>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a><a href="https://marketplace.visualstudio.com/items?itemName=Ikuyadeu.r" target="_blank" rel="noopener external nofollow noreferrer">R</a></h3><p>首先，在Visual Studio Code的应用商店中搜索扩展R，然后我们可以按照扩展说明进行配置：</p>
<blockquote>
<ul>
<li>For Windows, set config r.rterm.windows to your R.exe Path like “C:\Program Files\R\R-3.3.4\bin\x64\R.exe”;</li>
<li>For Radian console, enable config r.bracketedPaste</li>
<li>Open your folder that has R source file (Can’t work if you open only file)</li>
<li>Use F1 key and R: command or Ctrl+Enter(Mac: ⌘+Enter)</li>
</ul>
</blockquote>
<p>首先配置R语言的可执行文件位置，也就是<code>R.exe</code>的位置</p>
<img src="/archives/eb2dec05/%E9%85%8D%E7%BD%AER%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE.png" class="" title="配置r语言的可执行文件位置">

<p>配置好之后需要重新加载。新建窗口，打开自己编写的 r 文件。</p>
<ul>
<li>选中执行是 <code>ctrl + Enter</code></li>
<li>执行文件是 <code>ctrl + Shift + s</code> 或者 点击右上角的小图标</li>
</ul>
<h3 id="R-LSP-Client"><a href="#R-LSP-Client" class="headerlink" title="R LSP Client"></a><a href="https://marketplace.visualstudio.com/items?itemName=REditorSupport.r-lsp" target="_blank" rel="noopener external nofollow noreferrer">R LSP Client</a></h3><p>如果只安装上面这个R插件，很多代码不能自动补全，尤其是来自第三方包的命令。这对强烈依赖第三方包的R简直是致命的。这时就需要安装另外的一个插件：R LSP Client。</p>
<blockquote>
<p>LSP 是Language Server Protocol 的缩写。简单来说，LSP 为不同语言在不同编辑器或IDE 中的自动补全、查找定义、悬停查看函数文档等功能搭建了桥梁，使得开发者可以减少针对不同语言和不同编辑器的重复开发。对用户来说，使用这一功能意味着可以获得更好的自动补全、查看帮助文档等特性。</p>
</blockquote>
<p><strong>注意：安装了这个插件后，你会发现自动补全依然没有出现。实际上，插件只是在编辑器一侧提供了实现LSP的条件，而在R语言一侧还需要另外的包languageserver来完成搭接</strong>。</p>
<p>在R环境中运行如下安装指令：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages(<span class="string">"languageserver"</span>)</span><br></pre></td></tr></table></figure>

<p>然后重启一下VSCode，整个LSP的功能就可以实现了。</p>
<h3 id="radian"><a href="#radian" class="headerlink" title="radian"></a><a href="https://github.com/randy3k/radian" target="_blank" rel="noopener external nofollow noreferrer">radian</a></h3><p>使用R语言很多时候是把编辑器中的代码发送到Console中运行，一些时候也需要直接在Console中运行一些代码进行快速交互。RStudio为Console提供了语法高亮、自动补全等功能的加持，使得在Console中也可以有比较方便的输入输出体验。然而R for VSCode插件默认在Terminal中调用R进程，只会返回朴素的R Console界面，高亮、补全通通不在考虑范围之内。</p>
<p>radian为这件事提供了新的可能。它给“性冷淡”的R Console 穿上一身华丽的新衣，也增加了自动补全、多行输入等等特殊能力。我们可以把它加入到VSCode中，或是直接在终端中使用它运行R代码。</p>
<p>radian本身是一个Python项目，所以你需要安装有一个Python环境，然后使用pip安装这个包，直接在终端中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -U radian</span><br></pre></td></tr></table></figure>

<p>安装完成后，就可以在终端中直接使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">radian</span><br></pre></td></tr></table></figure>

<p>由于radian并不是VSCode插件，它可以独立在终端中运行，但带来的问题就是无法在VSCode中默认调用它。好在R for VSCode插件提供了更换R Console 路径的设置。</p>
<p>打开VSCode的设置项，找到r的设置。这里有三项相似的设置分别为<code>r.rterm.linux</code>、<code>r.rterm.mac</code>、<code>r.rterm.windows</code>，根据你的系统，找到需要更改的其中一个设置项。但在更改之前，需要知道radian在哪里。比较快捷的方式是在终端中运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">where</span> radian</span><br></pre></td></tr></table></figure>

<p>然后我们将返回的路径粘贴在相应设置的值中。</p>
<p>但重启VSCode并运行一个R命令会发现VSCode返回一个类似的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">终端进程命令“&#x2F;Users&#x2F;caoyue&#x2F;anaconda3&#x2F;bin&#x2F;rtichoke --no-save --no-restore --no-site-file”无法启动 (退出代码: 2)</span><br></pre></td></tr></table></figure>

<p>因为R for VSCode插件在开启一个R 进程时，默认带入了三个选项<code>--no-save</code>、<code>--no-restore</code>、<code>--no-site-file</code>。然而根据radian作者的说法，radian的<code>--no-save</code>和<code>--no-restore</code>已经作为默认选项故而无法再传入。因此，在设置中关闭<code>--no-save</code>和<code>no-restore</code>两个选项即可。在VSCode 的设置中，找到r设置下的<code>r.rterm.option</code>，将后面不需要的两项注释掉或删掉即可。当然，你也可以在这里使用自定义的选项。</p>
<p>另外的一个问题是，你可能发现更换掉R Console路径后，LSP 带来的效果不见了。这是因为Lanuage Server指向的路径默认随着R Console 变动，而它无法识别radian。我们通过将选项<code>r.rpath.lsp</code>更改为<code>R.exe</code>的默认路径即可修复该问题。</p>
<p>到此为止，radian的配置工作结束。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://neusncp.com/user/blog?id=191" target="_blank" rel="noopener external nofollow noreferrer">VS Code中使用R语言扩展的相关配置</a></li>
<li><a href="https://sspai.com/post/47386" target="_blank" rel="noopener external nofollow noreferrer">在VSCode 中配置R 语言运行环境</a></li>
</ul>
]]></content>
      <categories>
        <category>R</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题目总结-二叉树</title>
    <url>/archives/101cdf53.html</url>
    <content><![CDATA[<p>树是一种以层次化方式组织和存放数据的特定数据结构。</p>
<p>树有两个主要特征：</p>
<ul>
<li>每个项都有多个子节点</li>
<li>除了叫做根的特殊的项，所有其他的项都只有一个父节点</li>
</ul>
<p>二叉树(binary tree)是一种特殊的树结构，它每个节点最多有两个子结点，亦称左孩子和右孩子。</p>
<p>这里总结了LeetCode中二叉树相关的题目，我把这些题目分成了以下五个部分：</p>
<ul>
<li><a href="#二叉树的性质相关题目">二叉树的性质相关题目</a></li>
<li><a href="#二叉树的遍历相关题目">二叉树的遍历相关题目</a></li>
<li><a href="#路径和相关题目">路径和相关题目</a></li>
<li><a href="#二叉树的构建相关题目">二叉树的构建相关题目</a></li>
<li><a href="#二叉搜索树相关题目">二叉搜索树相关题目</a></li>
</ul>
<a id="more"></a>

<h2 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h2><p>二叉树的存储结构 TreeNode 为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h2 id="二叉树的性质相关题目"><a href="#二叉树的性质相关题目" class="headerlink" title="二叉树的性质相关题目"></a>二叉树的性质相关题目</h2><p>树的性质判断是树的数据结构比较基本的操作。</p>
<ul>
<li><a href="100-相同的树">100-相同的树</a></li>
<li><a href="#101-对称二叉树">101-对称二叉树</a></li>
<li><a href="#110-平衡二叉树">110-平衡二叉树</a></li>
<li><a href="#104-二叉树的最大深度">104-二叉树的最大深度</a></li>
<li><a href="#111-二叉树的最小深度">111-二叉树的最小深度</a></li>
<li><a href="#662-二叉树最大宽度">662-二叉树最大宽度</a></li>
</ul>
<h3 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100-相同的树"></a>100-相同的树</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p>
<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:       1         1</span><br><span class="line">          &#x2F; \       &#x2F; \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:      1          1</span><br><span class="line">          &#x2F;           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:       1         1</span><br><span class="line">          &#x2F; \       &#x2F; \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>方法1：递归</p>
<p>终止条件与返回值：</p>
<ul>
<li>当两棵树的当前节点都为 null 时返回 true</li>
<li>当其中一个为 null 另一个不为 null 时返回 false</li>
<li>当两个都不为空但是值不相等时，返回 false</li>
</ul>
<p>执行过程：当满足终止条件时进行返回，不满足时分别判断左子树和右子树是否相同，其中要注意代码中的短路效应。</p>
<p>下面是一个图解：</p>
<img src="/archives/101cdf53/100-1.png" class="" title="相同的树-1">

<img src="/archives/101cdf53/100-2.png" class="" title="相同的树-2">

<img src="/archives/101cdf53/100-3.png" class="" title="相同的树-3">


<p>方法2：迭代</p>
<p>首先用一个栈来保存根节点p，q。接着不断遍历这个栈。</p>
<ol>
<li><p>我们从栈中拿出两个元素进行比较，如果这两个元素不等(一个是空一个不为空，或者两个节点的值不等)，就直接返回false。</p>
</li>
<li><p>如果这两个节点的值相等，就继续把p节点的左孩子,q节点的左孩子放入栈中；再把p节点的右孩子，q节点的右孩子放入栈中。</p>
</li>
</ol>
<p>重复这个步骤，直到栈为空。</p>
<p>如果整个循环遍历完了，说明两个树的元素都是相等的，返回true。</p>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/same-tree/solution/hua-jie-suan-fa-100-xiang-tong-de-shu-by-guanpengc/" target="_blank" rel="noopener external nofollow noreferrer">画解算法：100. 相同的树</a></p>
</blockquote>
<h4 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h4><p>方法1：递归</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> p == <span class="literal">None</span> <span class="keyword">and</span> q == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p == <span class="literal">None</span> <span class="keyword">or</span> q == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p.val != q.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.isSameTree(p.left,q.left) <span class="keyword">and</span> self.isSameTree(p.right,q.right)</span><br></pre></td></tr></table></figure>

<p>方法2：迭代</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        stack = []</span><br><span class="line">        stack.append((p,q))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            p,q = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> p == <span class="literal">None</span> <span class="keyword">and</span> q == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> p == <span class="literal">None</span> <span class="keyword">or</span> q == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> p.val != q.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> p.val == q.val:</span><br><span class="line">                stack.append((p.left,q.left))</span><br><span class="line">                stack.append((p.right,q.right))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>


<h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101-对称二叉树"></a>101-对称二叉树</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p>例如，二叉树 <code>[1,2,2,3,4,4,3]</code> 是对称的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   2</span><br><span class="line"> &#x2F; \ &#x2F; \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure>

<p>但是下面这个 <code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> &#x2F; \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure>

<p>说明：如果你可以运用递归和迭代两种方法解决这个问题，会很加分。</p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>如果一个树的左子树与右子树镜像对称，那么这个树是对称的。</p>
<p>因此，该问题可以转化为：两个树在什么情况下互为镜像？</p>
<p>如果同时满足下面的条件，两个树互为镜像：</p>
<ul>
<li>它们的两个根结点具有相同的值。</li>
<li>每个树的右子树都与另一个树的左子树镜像对称。</li>
</ul>
<img src="/archives/101cdf53/101-1.png" class="" title="对称二叉树-1">

<h4 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.isMirror(root.left,root.right)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMirror</span><span class="params">(self, t1, t2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> t1 == <span class="literal">None</span> <span class="keyword">and</span> t2 == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t1 == <span class="literal">None</span> <span class="keyword">or</span> t2 == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t1 != <span class="literal">None</span> <span class="keyword">and</span> t2 != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> t1.val == t2.val:</span><br><span class="line">                <span class="keyword">return</span> self.isMirror(t1.left,t2.right) <span class="keyword">and</span> self.isMirror(t1.right,t2.left)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>


<h3 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110-平衡二叉树"></a>110-平衡二叉树</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：一个二叉树每个节点的左右两个子树的高度差的绝对值不超过1。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定二叉树 [3,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">返回 true 。</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定二叉树 [1,2,2,3,3,null,null,4,4]</span><br><span class="line"></span><br><span class="line">       1</span><br><span class="line">      &#x2F; \</span><br><span class="line">     2   2</span><br><span class="line">    &#x2F; \</span><br><span class="line">   3   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 4   4</span><br><span class="line">返回 false 。</span><br></pre></td></tr></table></figure>

<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>方法1：自顶向下暴力递归</p>
<p>构造一个获取当前节点最大深度的方法 <code>depth()</code> ，通过比较左右子树最大高度差<code>abs(self.depth(root.left) - self.depth(root.right))</code>，来判断以此节点为根节点下是否是二叉平衡树；</p>
<ul>
<li>从顶至底DFS，以每个节点为根节点，递归判断是否是平衡二叉树：<ul>
<li>若所有根节点都满足平衡二叉树性质，则返回 True ；</li>
<li>若其中任何一个节点作为根节点时，不满足平衡二叉树性质，则返回False。</li>
</ul>
</li>
</ul>
<p>本方法产生大量重复的节点访问和计算，最差情况下时间复杂度 <code>O(N^2)</code>。</p>
<p>方法2：自底向上（提前阻断）</p>
<p>对二叉树做深度优先遍历DFS，递归过程中：</p>
<ul>
<li>终止条件：当DFS越过叶子节点时，返回高度0；</li>
<li>返回值：<ul>
<li>从底至顶，返回以每个节点root为根节点的子树最大高度（左右子树中最大的高度值加1，即<code>max(left,right) + 1)</code>）</li>
<li>当我们发现有一例 左/右子树高度差 ＞ 1 的情况时，代表此树不是平衡树，返回-1</li>
<li><strong>当发现不是平衡树时，后面的高度计算都没有意义了，因此一路返回-1，避免后续多余计算</strong>。</li>
</ul>
</li>
</ul>
<p>最差情况是对树做一遍完整DFS，时间复杂度为 O(N)。</p>
<h4 id="Python实现-2"><a href="#Python实现-2" class="headerlink" title="Python实现"></a>Python实现</h4><p>方法1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前节点满足平衡树，继续递归判断子树是否满足平衡树条件</span></span><br><span class="line">        <span class="keyword">if</span> abs(self.depth(root.left)-self.depth(root.right)) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> self.isBalanced(root.left) <span class="keyword">and</span> self.isBalanced(root.right)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算树高度</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.left == <span class="literal">None</span> <span class="keyword">and</span> root.right == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.left != <span class="literal">None</span> <span class="keyword">or</span> root.right != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+max(self.depth(root.left),self.depth(root.right))</span><br></pre></td></tr></table></figure>

<p>方法2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> self.depth(root) == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        depth_left = self.depth(root.left)</span><br><span class="line">        <span class="comment"># 提前阻断</span></span><br><span class="line">        <span class="keyword">if</span> depth_left == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        depth_right = self.depth(root.right)</span><br><span class="line">        <span class="comment"># 提前阻断</span></span><br><span class="line">        <span class="keyword">if</span> depth_right == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> abs(depth_left-depth_right) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+max(depth_left,depth_right)</span><br><span class="line">        <span class="comment"># 提前阻断</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104-二叉树的最大深度"></a>104-二叉树的最大深度</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<p>说明：叶子节点是指没有子节点的节点。</p>
<p>示例：给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回它的最大深度 3 。</p>
<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>方法1：迭代</p>
<p>层次遍历二叉树，如果树为空，直接返回0。否则将树和深度值1入队列，逐一弹出队列中节点：</p>
<ul>
<li>若某节点左右子树均为空，此节点即为叶子节点，我们将它的深度和最大深度<code>max_depth</code>进行比较，更新最大深度。</li>
<li>若其存在子树，则将其存在的子树和子树深度入队列。</li>
</ul>
<p>方法2：递归</p>
<p>递归结束条件：</p>
<ul>
<li>当 root 节点左右孩子都为空（叶子节点）时，返回 1</li>
<li>当 root 节点左右孩子至少有一个不为空时，返回左右孩子较大深度的节点值</li>
</ul>
<h4 id="Python实现-3"><a href="#Python实现-3" class="headerlink" title="Python实现"></a>Python实现</h4><p>方法1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        queue = [(root,<span class="number">1</span>)]</span><br><span class="line">        max_depth = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node,depth = queue.pop(<span class="number">0</span>)</span><br><span class="line">            max_depth = max(max_depth,depth)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                queue.append((node.left,depth+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                queue.append((node.right,depth+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_depth</span><br></pre></td></tr></table></figure>

<p>方法2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 叶子节点，返回1</span></span><br><span class="line">        <span class="keyword">if</span> root.left == <span class="literal">None</span> <span class="keyword">and</span> root.right == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当左右孩子至少有一个不为空时，返回左右孩子较大深度的节点值</span></span><br><span class="line">        <span class="keyword">if</span> root.left != <span class="literal">None</span> <span class="keyword">or</span> root.right != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+max(self.maxDepth(root.left),self.maxDepth(root.right))</span><br></pre></td></tr></table></figure>


<h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111-二叉树的最小深度"></a>111-二叉树的最小深度</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，找出其最小深度。</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例：给定二叉树<code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回它的最小深度2.</p>
<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>方法1：迭代</p>
<p>层次遍历二叉树，如果树为空，直接返回0。否则将树和深度值1入队列，逐一弹出队列中节点：</p>
<ul>
<li>若某节点左右子树均为空，此节点即为叶子节点，我们将它的深度和最小深度<code>min_depth</code>进行比较，更新最小深度。</li>
<li>若其存在子树，则将其存在的子树和子树深度入队列。</li>
</ul>
<p>实际上，因为层次遍历是一层一层遍历的，所以<strong>第一个叶子节点即为最小深度的叶子节点</strong>，直接返回其深度即可。这样就不用遍历所有的节点。</p>
<p>方法2：递归</p>
<p>递归解法的关键是搞清楚递归结束条件：</p>
<ul>
<li>当 root 节点左右孩子都为空（叶子节点）时，返回 1</li>
<li>当 root 节点左右孩子有一个为空时，返回不为空的孩子节点的深度</li>
<li>当 root 节点左右孩子都不为空时，返回左右孩子较小深度的节点值</li>
</ul>
<h4 id="Python实现-4"><a href="#Python实现-4" class="headerlink" title="Python实现"></a>Python实现</h4><p>方法1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">      </span><br><span class="line">        queue = [(root,<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node,depth = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> node.left == <span class="literal">None</span> <span class="keyword">and</span> node.right == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> depth</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                queue.append((node.left,depth+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                queue.append((node.right,depth+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>方法2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 叶子节点，返回1</span></span><br><span class="line">        <span class="keyword">if</span> root.left == <span class="literal">None</span> <span class="keyword">and</span> root.right == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当左右孩子有一个为空时，返回不为空的孩子节点的深度</span></span><br><span class="line">        <span class="keyword">if</span> root.left == <span class="literal">None</span> <span class="keyword">or</span> root.right == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+max(self.minDepth(root.left),self.minDepth(root.right))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当左右孩子都不为空时，返回左右孩子较小深度的节点值</span></span><br><span class="line">        <span class="keyword">if</span> root.left != <span class="literal">None</span> <span class="keyword">and</span> root.right != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+min(self.minDepth(root.left),self.minDepth(root.right))</span><br></pre></td></tr></table></figure>

<h3 id="662-二叉树最大宽度"><a href="#662-二叉树最大宽度" class="headerlink" title="662-二叉树最大宽度"></a>662-二叉树最大宽度</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与<strong>满二叉树</strong>（full binary tree）结构相同，但一些节点为空。</p>
<p>每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的null节点也计入长度）之间的长度。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line"></span><br><span class="line">           1</span><br><span class="line">         &#x2F;   \</span><br><span class="line">        3     2</span><br><span class="line">       &#x2F; \     \  </span><br><span class="line">      5   3     9 </span><br><span class="line"></span><br><span class="line">输出: 4</span><br><span class="line">解释: 最大值出现在树的第 3 层，宽度为 4 (5,3,null,9)。</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         &#x2F;  </span><br><span class="line">        3    </span><br><span class="line">       &#x2F; \       </span><br><span class="line">      5   3     </span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line">解释: 最大值出现在树的第 3 层，宽度为 2 (5,3)。</span><br></pre></td></tr></table></figure>

<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        3   2 </span><br><span class="line">       &#x2F;        </span><br><span class="line">      5      </span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line">解释: 最大值出现在树的第 2 层，宽度为 2 (3,2)。</span><br></pre></td></tr></table></figure>

<p>示例 4:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        3   2</span><br><span class="line">       &#x2F;     \  </span><br><span class="line">      5       9 </span><br><span class="line">     &#x2F;         \</span><br><span class="line">    6           7</span><br><span class="line">输出: 8</span><br><span class="line">解释: 最大值出现在树的第 4 层，宽度为 8 (6,null,null,null,null,null,null,7)。</span><br></pre></td></tr></table></figure>

<p>注意: 答案在32位有符号整数的表示范围内。</p>
<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>因为两端点间的None值也计入，所以这里我们不能简单的统计每一层的节点数，这里我们可以考虑给<strong>树中的每一个节点进行编号</strong>，根节点为1，然后如果是左节点，值为根节点的二倍；如果是右节点，值为根节点的二倍加一。</p>
<p>这里我用层次遍历，采用一个队列记录每一个节点的节点以及号码，一层的首末元素的编号差就是该层的最大宽度。</p>
<h4 id="Python实现-5"><a href="#Python实现-5" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">widthOfBinaryTree</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        queue = [(root,<span class="number">1</span>)]</span><br><span class="line">        width = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            length = len(queue)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">                node,nums = queue.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># 记录该层第一个节点的编号、最后一个节点的编号</span></span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                    first_num = nums</span><br><span class="line">                <span class="keyword">if</span> i == length<span class="number">-1</span>:</span><br><span class="line">                    last_num = nums</span><br><span class="line">                    <span class="comment"># 更新最大宽度</span></span><br><span class="line">                    width = max(width,last_num-first_num+<span class="number">1</span>)</span><br><span class="line">                <span class="comment"># 左右子树入队</span></span><br><span class="line">                <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                    queue.append((node.left,<span class="number">2</span>*nums))</span><br><span class="line">                <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                    queue.append((node.right,<span class="number">2</span>*nums+<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> width</span><br></pre></td></tr></table></figure>


<h2 id="二叉树的遍历相关题目"><a href="#二叉树的遍历相关题目" class="headerlink" title="二叉树的遍历相关题目"></a>二叉树的遍历相关题目</h2><p>遍历的含义就是把树的所有节点（Node）按照某种顺序访问一遍。包括前序，中序，后序，层序4种遍历方法。</p>
<ol>
<li>以图的深度优先搜索为原型的遍历</li>
</ol>
<ul>
<li><a href="#144-二叉树的前序遍历">144-二叉树的前序遍历</a></li>
<li><a href="#94-二叉树的中序遍历">94-二叉树的中序遍历</a></li>
<li><a href="#145-二叉树的后序遍历">145-二叉树的后序遍历</a></li>
</ul>
<p>在这种类型中，递归的实现方式是非常简单的，只需要递归左右结点，直到结点为空作为结束条件就可以，哪种序就取决于你访问结点的时间。</p>
<p>不过一般这不能满足面试官的要求，可能会接着问能不能用非递归实现一下，这个说起来比较简单，其实就是用一个栈手动模拟递归的过程。</p>
<p>有时候非递归还是不能满足面试官，还会问一问，上面的做法时间和空间复杂度是多少。我们知道，正常遍历时间复杂度是<code>O(n)</code>，而空间复杂度是则是递归栈（或者自己维护的栈）的大小，也就是<code>O(logn)</code>。他会问能不能够在常量空间内解决树的遍历问题呢？确实还真可以，这里就要介绍一下Morris遍历。</p>
<blockquote>
<p>Morris遍历方法用了线索二叉树，这个方法不需要为每个节点额外分配指针指向其前驱和后继结点，而是利用叶子节点中的右空指针指向中序遍历下的后继节点就可以了。这样就节省了需要用栈来记录前驱或者后继结点的额外空间，所以可以达到<code>O(1)</code>的空间复杂度。不过这种方法有一个问题就是会暂时性的改动树的结构，这在程序设计中并不是很好的习惯，这些在面试中都可以和面试官讨论，一般来说问到这里不会需要进行Morris遍历方法的代码实现了，只需要知道这种方法和他的主要优劣势就可以了。</p>
</blockquote>
<ol start="2">
<li>以图的广度优先搜索为原型的遍历，在树中称为层序遍历，LeetCode中有三种：自顶向下层序、自底向上层序、锯齿层序遍历。</li>
</ol>
<ul>
<li><a href="#102-二叉树的层次遍历">102-二叉树的层次遍历</a></li>
<li><a href="#103-二叉树的锯齿形层次遍历">103-二叉树的锯齿形层次遍历</a></li>
<li><a href="#107-二叉树的层次遍历ii">107-二叉树的层次遍历ii</a></li>
</ul>
<p><strong>自顶向下层序遍历</strong>其实比较简单，代码基本就是图的广度优先搜索，思路就是维护一个<strong>队列</strong>存储上一层的结点，逐层访问。而<strong>自底向上层序层序遍历</strong>则要从最后一层倒序访问上来，这个我没有想到太好的方法，现在的实现就是把自顶向下层序遍历得到的层放入数据结构然后reverse过来。至于<strong>锯齿层序遍历</strong>因为每一层访问顺序有所改变，而且是每次都反转顺序，这让我们想到<strong>栈</strong>这个数据结构，所以这里不用队列而改用栈来保存，就可以满足每层反转访问顺序的要求了。</p>
<p>层次遍历相关的题目：</p>
<ul>
<li><a href="#116-填充每个节点的下一个右侧节点指针">116-填充每个节点的下一个右侧节点指针</a></li>
<li><a href="#117-填充每个节点的下一个右侧节点指针ii">117-填充每个节点的下一个右侧节点指针ii</a></li>
<li>513-找树左下角的值</li>
<li>515-在每个树行中找最大值</li>
</ul>
<h3 id="详细题解"><a href="#详细题解" class="headerlink" title="详细题解"></a>详细题解</h3><ul>
<li><a href="https://tding.top/archives/5f8aadd1.html">LeetCode 题目总结 - 二叉搜索树</a></li>
</ul>
<h2 id="路径和相关题目"><a href="#路径和相关题目" class="headerlink" title="路径和相关题目"></a>路径和相关题目</h2><p>树的求和属于树的题目中比较常见的，因为可以有几种变体，灵活度比较高，也可以考察到对于树的数据结构和递归的理解。</p>
<ul>
<li><a href="#112-路径总和">112-路径总和</a></li>
<li><a href="#113-路径总和ii">113-路径总和ii</a></li>
<li>124-二叉树中的最大路径和</li>
<li><a href="#129-求根到叶子节点数字之和">129-求根到叶子节点数字之和</a></li>
<li><a href="#257-二叉树的所有路径">257-二叉树的所有路径</a></li>
</ul>
<h3 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112-路径总和"></a>112-路径总和</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例:<br>给定如下二叉树，以及目标和 sum = 22，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \      \</span><br><span class="line">7    2      1</span><br></pre></td></tr></table></figure>

<p>返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 <code>5-&gt;4-&gt;11-&gt;2</code>。</p>
<h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>这道题是判断是否存在从根到叶子的路径和跟给定sum相同。树的题目基本都是用递归来解决，主要考虑两个问题：</p>
<ol>
<li>如何把问题分治成子问题给左子树和右子树。这里就是看看左子树和右子树有没有存在和等于sum减去当前结点值的路径，只要有一个存在，那么当前结点就存在路径。</li>
<li>考虑结束条件是什么：<ul>
<li>结束条件1：如果当前节点是空的，则返回false。</li>
<li>结束条件2：如果是叶子，那么如果剩余的sum等于当前叶子的值，则找到满足条件的路径，返回true。</li>
</ul>
</li>
</ol>
<p>想清楚上面两个问题，那么实现起来就是一次树的遍历，按照刚才的分析用参数或者返回值传递需要维护的值，然后按照<strong>递归条件</strong>和<strong>结束条件</strong>进行返回即可。算法的时间复杂度是一次遍历<code>O(n)</code>，空间复杂度是栈的大小<code>O(logn)</code>。</p>
<h4 id="Python实现——递归"><a href="#Python实现——递归" class="headerlink" title="Python实现——递归"></a>Python实现——递归</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root: TreeNode, sum: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前节点是叶子，检查 root.val 值是否为 sum</span></span><br><span class="line">        <span class="keyword">if</span> root.left == <span class="literal">None</span> <span class="keyword">and</span> root.right == <span class="literal">None</span> <span class="keyword">and</span> root.val == sum:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前节点不是叶子，对它的所有孩子节点，递归调用 hasPathSum() 函数</span></span><br><span class="line">        <span class="keyword">return</span> self.hasPathSum(root.left,sum-root.val) <span class="keyword">or</span> self.hasPathSum(root.right,sum-root.val)</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：我们访问每个节点一次，时间复杂度为 <code>O(N)</code> ，其中 N 是节点个数。</li>
<li>空间复杂度：最坏情况下，整棵树是非平衡的，例如每个节点都只有一个孩子，递归会调用 N 次（树的高度），因此栈的空间开销是 <code>O(N)</code>。但在最好情况下，树是完全平衡的，高度只有 <code>log(N)</code>，因此在这种情况下空间复杂度只有 <code>O(log(N))</code> 。</li>
</ul>
<h4 id="Python实现——迭代"><a href="#Python实现——迭代" class="headerlink" title="Python实现——迭代"></a>Python实现——迭代</h4><p>我们可以用栈将递归转成迭代的形式。</p>
<p>栈中保存<strong>当前节点前的剩余值</strong>就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root: TreeNode, sum: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        stack = [(root,sum)]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node,sum = stack.pop()</span><br><span class="line">            <span class="comment"># 判断叶子节点是否满足了条件</span></span><br><span class="line">            <span class="keyword">if</span> node.left == <span class="literal">None</span> <span class="keyword">and</span> node.right == <span class="literal">None</span> <span class="keyword">and</span> node.val == sum:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 左节点不为空，我们把左节点和剩余值打包压栈</span></span><br><span class="line">            <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                stack.append((node.left,sum-node.val))</span><br><span class="line">            <span class="comment"># 右节点不为空，我们把右节点和剩余值打包压栈</span></span><br><span class="line">            <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                stack.append((node.right,sum-node.val))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>


<h3 id="113-路径总和ii"><a href="#113-路径总和ii" class="headerlink" title="113-路径总和ii"></a>113-路径总和ii</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例:<br>给定如下二叉树，以及目标和 sum = 22，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \    &#x2F; \</span><br><span class="line">7    2  5   1</span><br></pre></td></tr></table></figure>

<p>返回:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>这道题思路和<strong>112-路径总和</strong>是完全一样的，只是需要输出所有路径，所以需要数据结构来维护路径，添加两个参数，一个用来维护走到当前结点的路径，一个用来保存满足条件的所有路径，思路上递归条件和结束条件是完全一致的，空间上这里会依赖于结果的数量了。</p>
<h4 id="Python实现——递归-1"><a href="#Python实现——递归-1" class="headerlink" title="Python实现——递归"></a>Python实现——递归</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root: TreeNode, sum: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="comment"># 辅助函数（因为需要一个变量记录路径）       </span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root, sum, temp)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 路径和满足sum，路径添加到结果数组res</span></span><br><span class="line">            <span class="keyword">if</span> root.left == <span class="literal">None</span> <span class="keyword">and</span> root.right == <span class="literal">None</span> <span class="keyword">and</span> root.val == sum:</span><br><span class="line">                temp += [root.val]</span><br><span class="line">                res.append(temp)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 递归搜索左右子树，传入剩余和以及路径</span></span><br><span class="line">            helper(root.left,sum-root.val,temp+[root.val])</span><br><span class="line">            helper(root.right,sum-root.val,temp+[root.val])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        helper(root,sum,[])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h4 id="Python实现——迭代-1"><a href="#Python实现——迭代-1" class="headerlink" title="Python实现——迭代"></a>Python实现——迭代</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root: TreeNode, sum: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        temp = []</span><br><span class="line">        stack = [(root,sum,temp)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node,sum,temp = stack.pop()</span><br><span class="line">            <span class="comment"># 判断叶子节点是否满足了条件</span></span><br><span class="line">            <span class="keyword">if</span> node.left == <span class="literal">None</span> <span class="keyword">and</span> node.right == <span class="literal">None</span> <span class="keyword">and</span> node.val == sum:</span><br><span class="line">                temp += [node.val]</span><br><span class="line">                res.append(temp)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                stack.append((node.left,sum-node.val,temp + [node.val]))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                stack.append((node.right,sum-node.val,temp + [node.val]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


<h3 id="129-求根到叶子节点数字之和"><a href="#129-求根到叶子节点数字之和" class="headerlink" title="129-求根到叶子节点数字之和"></a>129-求根到叶子节点数字之和</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。</p>
<p>例如，从根到叶子节点路径 <code>1-&gt;2-&gt;3</code> 代表数字 123。</p>
<p>计算从根到叶子节点生成的所有数字之和。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3]</span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line">输出: 25</span><br><span class="line">解释:</span><br><span class="line">从根到叶子节点路径 1-&gt;2 代表数字 12.</span><br><span class="line">从根到叶子节点路径 1-&gt;3 代表数字 13.</span><br><span class="line">因此，数字总和 &#x3D; 12 + 13 &#x3D; 25.</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,9,0,5,1]</span><br><span class="line">    4</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9   0</span><br><span class="line"> &#x2F; \</span><br><span class="line">5   1</span><br><span class="line">输出: 1026</span><br><span class="line">解释:</span><br><span class="line">从根到叶子节点路径 4-&gt;9-&gt;5 代表数字 495.</span><br><span class="line">从根到叶子节点路径 4-&gt;9-&gt;1 代表数字 491.</span><br><span class="line">从根到叶子节点路径 4-&gt;0 代表数字 40.</span><br><span class="line">因此，数字总和 &#x3D; 495 + 491 + 40 &#x3D; 1026.</span><br></pre></td></tr></table></figure>

<h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>这道题目相比<strong>112-路径总和</strong>，增加了两个变化：</p>
<ol>
<li>每一个结点相当于位上的值。我们只需要每一层乘以10加上自己的值就可以了。</li>
<li>所有路径需要累加起来。我们只需要在最后对结果列表进行求和即可。</li>
</ol>
<h4 id="Python实现——递归-2"><a href="#Python实现——递归-2" class="headerlink" title="Python实现——递归"></a>Python实现——递归</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumNumbers</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root, nums)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新路径和</span></span><br><span class="line">            nums *= <span class="number">10</span></span><br><span class="line">            nums += root.val</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果已经是叶子节点，保存路径和到列表中</span></span><br><span class="line">            <span class="keyword">if</span> root.left == <span class="literal">None</span> <span class="keyword">and</span> root.right == <span class="literal">None</span>:</span><br><span class="line">                res.append(nums)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> root.left != <span class="literal">None</span>:</span><br><span class="line">                helper(root.left,nums)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> root.right != <span class="literal">None</span>:</span><br><span class="line">                helper(root.right,nums)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        helper(root,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum(res)</span><br></pre></td></tr></table></figure>

<h4 id="Python实现——迭代-2"><a href="#Python实现——迭代-2" class="headerlink" title="Python实现——迭代"></a>Python实现——迭代</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumNumbers</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        stack = [(root,<span class="number">0</span>)]</span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node,nums = stack.pop()</span><br><span class="line">            <span class="comment"># 更新路径和</span></span><br><span class="line">            nums *= <span class="number">10</span></span><br><span class="line">            nums += node.val</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果已经是叶子节点，保存路径和到列表中</span></span><br><span class="line">            <span class="keyword">if</span> node.left == <span class="literal">None</span> <span class="keyword">and</span> node.right == <span class="literal">None</span>:</span><br><span class="line">                res.append(nums)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                stack.append((node.left,nums))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                stack.append((node.right,nums))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum(res)</span><br></pre></td></tr></table></figure>


<h3 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257-二叉树的所有路径"></a>257-二叉树的所有路径</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line"> &#x2F;   \</span><br><span class="line">2     3</span><br><span class="line"> \</span><br><span class="line">  5</span><br><span class="line"></span><br><span class="line">输出: [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</span><br><span class="line"></span><br><span class="line">解释: 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</span><br></pre></td></tr></table></figure>

<h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><p>我们维护一个队列，存储节点以及根到该节点的路径。一开始这个队列里只有根节点。在每一步迭代中，我们取出队列中的首节点，如果它是一个叶子节点，则将它对应的路径加入到答案中。如果它不是一个叶子节点，则将它的所有孩子节点加入到队列的末尾。当队列为空时，迭代结束。</p>
<h4 id="Python实现-6"><a href="#Python实现-6" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span><span class="params">(self, root: TreeNode)</span> -&gt; List[str]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        queue = [(root,<span class="string">''</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            temp = <span class="string">''</span></span><br><span class="line">            length = len(queue)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(length):</span><br><span class="line">                node,temp = queue.pop(<span class="number">0</span>)</span><br><span class="line">                temp += str(node.val)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 如果是叶子节点，记录路径</span></span><br><span class="line">                <span class="keyword">if</span> node.left == <span class="literal">None</span> <span class="keyword">and</span> node.right == <span class="literal">None</span>:    </span><br><span class="line">                    res.append(temp)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 格式要求</span></span><br><span class="line">                temp += <span class="string">'-&gt;'</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                    queue.append((node.left,temp))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                    queue.append((node.right,temp))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


<h2 id="二叉树的构建相关题目"><a href="#二叉树的构建相关题目" class="headerlink" title="二叉树的构建相关题目"></a>二叉树的构建相关题目</h2><p>这类题目本质还是用递归的手法来实现，但是这类题目有一个特点，就是它是构建一棵树，而不是给定一棵树，然后进行遍历，所以实现起来思路上有点逆向。</p>
<ul>
<li><a href="#105-从前序与中序遍历序列构造二叉树">105-从前序与中序遍历序列构造二叉树</a></li>
<li><a href="#106-从中序与后序遍历序列构造二叉树">106-从中序与后序遍历序列构造二叉树</a></li>
<li><a href="#108-将有序数组转换为二叉搜索树">108-将有序数组转换为二叉搜索树</a></li>
<li><a href="#109-有序链表转换二叉搜索树">109-有序链表转换二叉搜索树</a></li>
</ul>
<p>思路就是在递归中创建根节点，然后找到将元素劈成左右子树的方法，递归得到左右根节点，接上创建的根然后返回。方法还是比较具有模板型的。</p>
<h3 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105-从前序与中序遍历序列构造二叉树"></a>105-从前序与中序遍历序列构造二叉树</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p>根据一棵树的前序遍历与中序遍历构造二叉树。</p>
<p>注意:你可以假设树中没有重复的元素。</p>
<p>例如，给出</p>
<ul>
<li>前序遍历 <code>preorder = [3,9,20,15,7]</code></li>
<li>中序遍历 <code>inorder = [9,3,15,20,7]</code></li>
</ul>
<p>返回如下的二叉树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><p>前序遍历数组的第1个数（索引为0）的数一定是二叉树的根结点，于是可以在中序遍历中找这个根结点的索引，然后把“前序遍历数组”和“中序遍历数组”分为两个部分，就分别对应二叉树的左子树和右子树，分别递归完成就可以了。</p>
<img src="/archives/101cdf53/105-1.png" class="" title="从前序与中序遍历序列构造二叉树-1">

<p>下面是一个具体的例子，演示了如何计算数组子区间的边界：</p>
<img src="/archives/101cdf53/105-2.png" class="" title="从前序与中序遍历序列构造二叉树-2">

<blockquote>
<ul>
<li><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/" target="_blank" rel="noopener external nofollow noreferrer">分治法（Python 代码、Java 代码）</a></li>
<li><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/shi-yong-map-by-powcai/" target="_blank" rel="noopener external nofollow noreferrer">使用 map</a></li>
</ul>
</blockquote>
<h4 id="Python实现——递归-3"><a href="#Python实现——递归-3" class="headerlink" title="Python实现——递归"></a>Python实现——递归</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, preorder: List[int], inorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> len(preorder) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        root = TreeNode(preorder[<span class="number">0</span>])</span><br><span class="line">        mid = inorder.index(preorder[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归构造左子树、右子树</span></span><br><span class="line">        root.left = self.buildTree(preorder[<span class="number">1</span>:mid+<span class="number">1</span>],inorder[<span class="number">0</span>:mid])</span><br><span class="line">        root.right = self.buildTree(preorder[mid+<span class="number">1</span>:],inorder[mid+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N^2)，这里 N 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 N 个结点，在中序遍历中找到根结点在中序遍历中的位置，是与 N 相关的，这里不计算递归方法占用的时间。</li>
<li>空间复杂度：O(1)，这里不计算递归方法占用的空间。</li>
</ul>
<h4 id="Python实现——哈希表优化"><a href="#Python实现——哈希表优化" class="headerlink" title="Python实现——哈希表优化"></a>Python实现——哈希表优化</h4><p>我们可以用哈希表（字典）来存储中序遍历，这样就可以在<code>O(1)</code>时间复杂度下找到根结点在中序遍历数组中的索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, preorder: List[int], inorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> len(preorder) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        root = TreeNode(preorder[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 哈希表存储中序遍历的值、索引</span></span><br><span class="line">        dicts = &#123;var:i <span class="keyword">for</span> i,var <span class="keyword">in</span> enumerate(inorder)&#125;</span><br><span class="line">        index = dicts[preorder[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归构造左子树、右子树</span></span><br><span class="line">        root.left = self.buildTree(preorder[<span class="number">1</span>:index+<span class="number">1</span>],inorder[:index])</span><br><span class="line">        root.right = self.buildTree(preorder[index+<span class="number">1</span>:],inorder[index+<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<p>上面的代码在递归函数里面建立哈希表，这会导致<strong>哈希表一共建立二叉树节点个数次（即N次）</strong>，没有达到我们的优化目的，我们希望的是哈希表仅仅建立一次，后续递归中每次都能有直接调用。下面是优化后的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, preorder: List[int], inorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="comment"># 辅助函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(pre_left,pre_right,in_left,in_right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> pre_left == pre_right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构建当前“根”</span></span><br><span class="line">            root = TreeNode(preorder[pre_left])</span><br><span class="line">            <span class="comment"># 从哈希表中找到当前“根”的索引</span></span><br><span class="line">            index = dicts[preorder[pre_left]]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新前序遍历、中序遍历边界，然后递归构建左右子树</span></span><br><span class="line">            <span class="comment"># 我们可以通过“前序和中序个数是相同”这个隐含条件，求出前序左右边界</span></span><br><span class="line">            root.left = helper(pre_left+<span class="number">1</span>,pre_left+<span class="number">1</span>+index-in_left,in_left,index)</span><br><span class="line">            <span class="comment"># 根据上面用过的，写出剩下的</span></span><br><span class="line">            root.right = helper(pre_left+<span class="number">1</span>+index-in_left,pre_right,index+<span class="number">1</span>,in_right)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 哈希表存储中序遍历的值、索引</span></span><br><span class="line">        dicts = &#123;var:i <span class="keyword">for</span> i,var <span class="keyword">in</span> enumerate(inorder)&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用辅助函数</span></span><br><span class="line">        root = helper(<span class="number">0</span>,len(preorder),<span class="number">0</span>,len(inorder))</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<h3 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106-从中序与后序遍历序列构造二叉树"></a>106-从中序与后序遍历序列构造二叉树</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p>根据一棵树的中序遍历与后序遍历构造二叉树。</p>
<p>注意：你可以假设树中没有重复的元素。</p>
<p>例如，给出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">中序遍历 inorder &#x3D; [9,3,15,20,7]</span><br><span class="line">后序遍历 postorder &#x3D; [9,15,7,20,3]</span><br></pre></td></tr></table></figure>

<p>返回如下的二叉树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><p>这道题目类似<strong>105题</strong>。</p>
<p>下面是一个图解：</p>
<img src="/archives/101cdf53/106-1.png" class="" title="从中序与后序遍历序列构造二叉树-1">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/solution/hou-xu-bian-li-python-dai-ma-java-dai-ma-by-liwe-2/" target="_blank" rel="noopener external nofollow noreferrer">分治法（Python、Java）</a></p>
</blockquote>
<h4 id="Python实现——递归-4"><a href="#Python实现——递归-4" class="headerlink" title="Python实现——递归"></a>Python实现——递归</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, inorder: List[int], postorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> len(postorder) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 后序遍历的最后一个结点就是根结点</span></span><br><span class="line">        root = TreeNode(postorder[<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># 在中序遍历中找到根结点的索引，得到左右子树的一个划分</span></span><br><span class="line">        mid = inorder.index(postorder[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里的列表切片使用的是复制值，使用了一些空间，因此空间复杂度是 O(N)</span></span><br><span class="line">        root.left = self.buildTree(inorder[:mid],postorder[:mid])</span><br><span class="line">        root.right = self.buildTree(inorder[mid+<span class="number">1</span>:],postorder[mid:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<h4 id="Python实现——哈希表优化-1"><a href="#Python实现——哈希表优化-1" class="headerlink" title="Python实现——哈希表优化"></a>Python实现——哈希表优化</h4><p>同样的，我们可以把中序遍历的值和索引放在一个哈希表中，这样就不需要通过遍历得到当前根结点在中序遍历中的位置了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, inorder: List[int], postorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="comment"># 辅助函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(in_left,in_right,post_left,post_right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> in_left == in_right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构建当前“根”</span></span><br><span class="line">            root = TreeNode(postorder[post_right<span class="number">-1</span>])</span><br><span class="line">            <span class="comment"># 从哈希表中找到当前“根”的索引</span></span><br><span class="line">            index = dicts[postorder[post_right<span class="number">-1</span>]]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新中序遍历、后序遍历边界，然后递归构建左右子树</span></span><br><span class="line">            <span class="comment"># 我们可以通过“中序和后序个数是相同”这个隐含条件，求出后序左右边界</span></span><br><span class="line">            root.left = helper(in_left,index,post_left,post_right<span class="number">-1</span>-(in_right-index<span class="number">-1</span>))</span><br><span class="line">            root.right = helper(index+<span class="number">1</span>,in_right,post_right<span class="number">-1</span>-(in_right-index<span class="number">-1</span>),post_right<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 哈希表存储中序遍历的值、索引</span></span><br><span class="line">        dicts = &#123;var:i <span class="keyword">for</span> i,var <span class="keyword">in</span> enumerate(inorder)&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用辅助函数</span></span><br><span class="line">        root = helper(<span class="number">0</span>,len(inorder),<span class="number">0</span>,len(postorder))</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>


<h3 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108-将有序数组转换为二叉搜索树"></a>108-将有序数组转换为二叉搜索树</h3><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p>将一个按照升序排列的有序数组，转换为一棵<strong>高度平衡二叉搜索树</strong>。</p>
<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点的左右两个子树的高度差的绝对值不超过 1。</p>
<p>示例:</p>
<p>给定有序数组: <code>[-10,-3,0,5,9]</code>，一个可能的答案是：<code>[0,-3,9,-10,null,5]</code>，它可以表示下面这个高度平衡二叉搜索树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     0</span><br><span class="line">    &#x2F; \</span><br><span class="line">  -3   9</span><br><span class="line">  &#x2F;   &#x2F;</span><br><span class="line">-10  5</span><br></pre></td></tr></table></figure>

<h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><p>二叉搜索树的中序遍历刚好可以输出一个升序数组，所以题目给出的升序数组就是二叉搜索树的中序遍历。</p>
<p>根据中序遍历还原一颗树，又想到了 105 题 和 106 题，通过中序遍历加前序遍历或者中序遍历加后序遍历来还原一棵树。前序（后序）遍历的作用呢？提供根节点！然后根据根节点，就可以递归的生成左右子树。</p>
<p>这里的话怎么知道根节点呢？平衡二叉树，既然要做到平衡，我们只要把根节点选为数组的中点即可。</p>
<h4 id="Python实现-7"><a href="#Python实现-7" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span><span class="params">(self, nums: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">return</span> self.binarySearch(nums,<span class="number">0</span>,len(nums)<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span><span class="params">(self, nums, left, right)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left &gt; right:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        mid = left + (right-left) // <span class="number">2</span></span><br><span class="line">        root = TreeNode(nums[mid])</span><br><span class="line">        <span class="comment"># 递归构建左右子树</span></span><br><span class="line">        root.left = self.binarySearch(nums, left, mid<span class="number">-1</span>)</span><br><span class="line">        root.right = self.binarySearch(nums, mid+<span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<h3 id="109-有序链表转换二叉搜索树"><a href="#109-有序链表转换二叉搜索树" class="headerlink" title="109-有序链表转换二叉搜索树"></a>109-有序链表转换二叉搜索树</h3><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个<strong>单链表</strong>，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p>
<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点的左右两个子树的高度差的绝对值不超过 1。</p>
<p>示例:</p>
<p>给定的有序链表：<code>[-10, -3, 0, 5, 9]</code>，一个可能的答案是：<code>[0, -3, 9, -10, null, 5]</code>, 它可以表示下面这个高度平衡二叉搜索树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     0</span><br><span class="line">    &#x2F; \</span><br><span class="line">  -3   9</span><br><span class="line">  &#x2F;   &#x2F;</span><br><span class="line">-10  5</span><br></pre></td></tr></table></figure>

<h4 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h4><p>这道题目跟108题是类似的，数组可以很方便的找到中点，但链表的特性导致我们无法像数组那样通过下标访问各个元素。若想按照108题的做法，就需要设置两个指针slow、fast，slow每走一步fast走两步，这样fast结束时slow就在中点。<strong>但这样会导致每次递归都需要重复遍历链表，效率较低</strong>。</p>
<p>注意：当找到链表中的中间元素后，我们将<strong>链表从中间元素的左侧断开</strong>，做法是slow指针初始指向dummy，最后<code>slow.next</code>才是中点，然后我们在中点的左侧断开，也就是<code>slow.next = None</code>。</p>
<h4 id="Python实现——二分"><a href="#Python实现——二分" class="headerlink" title="Python实现——二分"></a>Python实现——二分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedListToBST</span><span class="params">(self, head: ListNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 链表寻找中点</span></span><br><span class="line">        <span class="comment"># 为了保证保留左子树的右边界，这里设置slow=dummy而不是head</span></span><br><span class="line">        dummy = ListNode(<span class="literal">None</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line"></span><br><span class="line">        slow = dummy</span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> fast.next != <span class="literal">None</span> <span class="keyword">and</span> fast.next.next != <span class="literal">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 由于slow初始值为dummy，因此slow.next才为中点</span></span><br><span class="line">        root = TreeNode(slow.next.val)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 链表从中间断开（左子树的右边界是中点的左边一个节点，右子树的左边界是中点的右边一个节点）</span></span><br><span class="line">        mid = slow.next.next</span><br><span class="line">        slow.next = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 递归构建左右子树</span></span><br><span class="line">        <span class="comment"># 判断左子树是否为空</span></span><br><span class="line">        <span class="keyword">if</span> slow == dummy:</span><br><span class="line">            root.left = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            root.left = self.sortedListToBST(dummy.next)</span><br><span class="line">        root.right = self.sortedListToBST(mid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<h4 id="Python实现——链表转换数组-二分"><a href="#Python实现——链表转换数组-二分" class="headerlink" title="Python实现——链表转换数组+二分"></a>Python实现——链表转换数组+二分</h4><p>在这个方法中，我们将给定的链表转成数组并利用数组来构建二叉搜索树。数组找中间元素只需要 O(1) 的时间，所以会降低整个算法的时间复杂度开销。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedListToBST</span><span class="params">(self, head: ListNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="comment"># 链表转换成数组</span></span><br><span class="line">        nums = []</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            nums.append(head.val)</span><br><span class="line">            head = head.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.binarySearch(nums,<span class="number">0</span>,len(nums)<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 辅助函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span><span class="params">(self, nums, left, right)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left &gt; right:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">        root = TreeNode(nums[mid])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归构建左右子树</span></span><br><span class="line">        root.left = self.binarySearch(nums,left,mid<span class="number">-1</span>)</span><br><span class="line">        root.right = self.binarySearch(nums,mid+<span class="number">1</span>,right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>


<h2 id="二叉搜索树相关题目"><a href="#二叉搜索树相关题目" class="headerlink" title="二叉搜索树相关题目"></a>二叉搜索树相关题目</h2><p>二叉查找树既是一颗树，又带有特别的有序性质，所以考察的方式比较多而且灵活，属于面试题目中的常客。</p>
<p>此部分详细题解见：</p>
<ul>
<li><a href="https://tding.top/archives/5f8aadd1.html">LeetCode 题目总结 - 二叉搜索树</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5d9f0b9551882509165ff2a8" target="_blank" rel="noopener external nofollow noreferrer">LeetCode 前1000题二叉树题目系统总结（吐血推荐！）</a></li>
<li><a href="https://www.jianshu.com/p/77ad56b9f128" target="_blank" rel="noopener external nofollow noreferrer">LeetCode二叉树(Tree)小结</a></li>
<li><a href="http://www.jintiankansha.me/t/4EJM5iEhVB" target="_blank" rel="noopener external nofollow noreferrer">LeetCode 总结 - 搞定 Binary Tree 面试题</a></li>
<li><a href="http://interviewsource.blogspot.com/2016/09/blog-post.html" target="_blank" rel="noopener external nofollow noreferrer">LeetCode总结 – 树</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>Google搜索技巧</title>
    <url>/archives/b1453574.html</url>
    <content><![CDATA[<p>我们在日常生活中利用Google搜索的一些技巧可以更加高效的找到我们需要的信息。</p>
<a id="more"></a>

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h3><p>谷歌的默认搜索是<strong>and逻辑</strong>，我们在输入关键字后进行搜索时，如输入：<code>program google</code>后，会搜出包含<code>program</code>和<code>google</code>的文件内容。</p>
<h3 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h3><p>如果你想搜索两个中的任意一个，那么就要使用关键词<strong>OR</strong>。</p>
<p>注意：OR是大写的，小写是不起作用的，而且，每一个关键词与<strong>OR</strong>之间是有一个空格的。</p>
<h3 id="短语搜索"><a href="#短语搜索" class="headerlink" title="短语搜索"></a>短语搜索</h3><p>如果你希望搜索<code>“program google”</code>的内容，而不希望这两个单词之间有任何其他的内容，那么就要使用双引号把搜索的内容组成一个词组来达到目的。</p>
<h3 id="“-”"><a href="#“-”" class="headerlink" title="“-”"></a>“-”</h3><p>如果我们只想看到<code>program</code>的内容，而不希望看到<code>google</code>的内容，就可以把<code>-</code>（减号或者破折号）应用到搜索当中去，语法为<code>program -google</code>。</p>
<p>注意：<code>-</code>之前是有一个空格的，而其后却是和下一个关键词是紧紧相连的！可以看得到结果中都会包含<code>program</code>，而不包含<code>google</code>。</p>
<h2 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h2><h3 id="intitle"><a href="#intitle" class="headerlink" title="intitle"></a>intitle</h3><p>这个语法的作用是<strong>将搜索的范围局限在标题上</strong>。在关键词前面加上这个，就会只对网页的标题进行搜索并且配对，最后将结果返回给用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intitle:小丁</span><br></pre></td></tr></table></figure>

<h3 id="intext"><a href="#intext" class="headerlink" title="intext"></a>intext</h3><p>这个语法是用来搜索<strong>网页正文内容</strong>的，这样就可以忽略网页中的超文本链接、URL和题目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intext:小丁</span><br></pre></td></tr></table></figure>

<h3 id="inanchor"><a href="#inanchor" class="headerlink" title="inanchor"></a>inanchor</h3><p>这个语法的意思是在页面的链接锚点进行搜索。</p>
<blockquote>
<p>链接锚点指的是一个<strong>链接的描述文本</strong>，如这样的一段HTML代码：<code>&lt;a href=https://www.baidu.com&gt;百度&lt;/a&gt;</code>，链接的锚点就是“百度”了。</p>
</blockquote>
<h3 id="site"><a href="#site" class="headerlink" title="site"></a>site</h3><p>这个语法是把<strong>搜索限制在站点域名之内</strong>。</p>
<p>例如我们搜索<code>program site:google.com</code>，这里呢，我们通常不需要加上前面的www，这样搜索的结果就会是包括所有含有<code>google.com</code>域名的有关内容，包括顶级域名和二级域名甚至三级域名的内容。</p>
<h3 id="inurl"><a href="#inurl" class="headerlink" title="inurl"></a>inurl</h3><p>这个语法会将搜索的范围限制在URL或者网站的页面上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:password</span><br></pre></td></tr></table></figure>

<h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>这个语法可以帮助我们查找到google索引过的页面副本，即使源文件界面不存在了，或者变成了其它的内容，我们依然可以搜索的到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cache：www.baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="filetype"><a href="#filetype" class="headerlink" title="filetype"></a>filetype</h3><p>这个语法可以搜索指定后缀的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filetype:pdf</span><br></pre></td></tr></table></figure>

<h3 id="特定时间"><a href="#特定时间" class="headerlink" title="特定时间"></a>特定时间</h3><p>为了将查询结果限制在一个特定的时间段内，可以采用以下语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avengers endgame before:2019</span><br><span class="line">avengers endgame after:2019-04-01</span><br><span class="line">avengers endgame after:2019-03-01 before:2019-03-05</span><br></pre></td></tr></table></figure>

<h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><p>当我们需要简单数学运算时，无需费力的点开计算机，只需要直接在Google中输入数学算式即可，算式可以包含<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>和括号这些基本的算术功能。例如：<code>(4*8)/2+18-1</code></p>
<h2 id="单位换算"><a href="#单位换算" class="headerlink" title="单位换算"></a>单位换算</h2><p>方便的单位换算，只需要输入你想要换算的两种单位即可，例如：<code>100磅=?公斤</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/u014565127/article/details/53842885" target="_blank" rel="noopener external nofollow noreferrer">谷歌搜索语法（一）基本语法</a></li>
<li><a href="https://blog.csdn.net/u014565127/article/details/53868443" target="_blank" rel="noopener external nofollow noreferrer">谷歌搜索语法（二）高级语法</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>搜索引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅的选择字体(font-family)</title>
    <url>/archives/278a1433.html</url>
    <content><![CDATA[<p>大家都知道，在不同操作系统、不同游览器里面默认显示的字体是不一样的，并且相同字体在不同操作系统里面渲染的效果也不尽相同，那么如何设置字体显示效果会比较好呢？下面我们逐步的分析一下：</p>
<a id="more"></a>

<h2 id="一、首先我们看看各平台的默认字体情况"><a href="#一、首先我们看看各平台的默认字体情况" class="headerlink" title="一、首先我们看看各平台的默认字体情况"></a>一、首先我们看看各平台的默认字体情况</h2><h3 id="1、Window下："><a href="#1、Window下：" class="headerlink" title="1、Window下："></a>1、Window下：</h3><ul>
<li><p><strong>宋体（SimSun）</strong>：Win下大部分游览器的默认字体，宋体在小字号下（如12px、14px）的显示效果还可以接受，但是字号一大就非常糟糕了，所以使用的时候要注意。</p>
</li>
<li><p><strong>微软雅黑（”Microsoft Yahei”）</strong>：从 Vista 开始，微软提供了这款新的字体，一款无衬线的黑体类字体，并且拥有 <code>Regular</code>、<code>Bold</code> 两种粗细的字重，显著提高了字体的显示效果。现在这款字体已经成为Windows游览器中最值得使用的中文字体。从Win8开始，微软雅黑又加入了 <code>Light</code> 这款更细的字重，对于喜欢细字体的设计、开发人员又多了一个新的选择。</p>
</li>
<li><p><strong>Arial</strong>：Win平台上默认的无衬线西文字体（为什么要说英文字体后面会解释），有多种变体，显示效果一般。</p>
</li>
<li><p><strong>Tahoma</strong>：十分常见的无衬线字体，被采用为Windows 2000、Windows XP、Windows Server 2003及Sega游戏主机Dreamcast等系统的预设字型，显示效果比Arial要好。</p>
</li>
<li><p><strong>Verdana</strong>：无衬线字体，优点在于它在小字上仍结构清晰端整、阅读辨识容易。</p>
</li>
</ul>
<p>其他：Windows 下默认字体列表：微软官网、维基百科、Office字体</p>
<p>结论：微软雅黑为Win平台上最值得选择的中文字体，但非游览器默认，需要设置；西文字体的选择以<code>Arial</code>、<code>Tahoma</code>等无衬线字体为主。</p>
<h3 id="2、Mac-OS下："><a href="#2、Mac-OS下：" class="headerlink" title="2、Mac OS下："></a>2、Mac OS下：</h3><ul>
<li><p><strong>华文黑体（STHeiti）、华文细黑（STXihei）</strong>：属于同一字体家族系列，OS X 10.6 之前的简体中文系统界面默认字体，也是目前Chrome游览器下的默认字体，有 <code>Regular</code> 和 <code>Bold</code> 两个字重，显示效果可以接受，华文细黑也曾是我最喜欢的字体之一。</p>
</li>
<li><p><strong>黑体-简（Heiti SC）</strong>：从 10.6 开始，黑体-简代替华文黑体用作简体中文系统界面默认字体，苹果生态最常用的字体之一，包括iPhone、iPad等设备用的也是这款字体，显示效果不错，但是喇叭口设计遭人诟病。</p>
</li>
<li><p><strong>冬青黑体（ Hiragino Sans GB ）</strong>：听说又叫苹果丽黑，日文字体<code>Hiragino KakuGothic</code>的简体中文版，简体中文有 <code>常规体</code> 和 <code>粗体</code> 两种，冬青黑体是一款清新的专业印刷字体，小字号时足够清晰，拥有很多人的追捧。</p>
</li>
<li><p><strong>Times New Roman</strong>：Mac平台Safari下默认的字体，是最常见且广为人知的西文衬线字体之一，众多网页浏览器和文字处理软件都是用它作为默认字体。</p>
</li>
<li><p><strong>Helvetica、Helvetica Neue</strong>：一种被广泛使用的传奇般的西文字体（这货还有专门的记录片呢），在微软使用山寨货的<code>Arial</code>时，乔布斯却花费重金获得了<code>Helvetica</code>苹果系统上的使用权，因此该字体也一直伴随着苹果用户，是苹果生态中最常用的西文字体。<code>Helvetica Neue</code>为<code>Helvetica</code>的改善版本，且增加了更多不同粗细与宽度的字形，共拥有51种字体版本，极大的满足了日常的使用。</p>
</li>
<li><p><strong>苹方（PingFang SC）</strong>：在Mac OS X EL Capitan上，苹果为中国用户打造了一款全新中文字体–<code>苹方</code>，去掉了为人诟病的喇叭口，整体造型看上去更加简洁，字族共六枚字体：<code>极细体</code>、<code>纤细体</code>、<code>细体</code>、<code>常规体</code>、<code>中黑体</code>、<code>中粗体</code>。</p>
</li>
<li><p><strong>San Francisco</strong>：同样是Mac OS X EL Capitan上最新发布的西文字体，感觉和<code>Helvetica</code>看上去差别不大，目前已经应用在Mac OS 10.11+、iOS 9.0+、watch OS等最新系统上。</p>
</li>
</ul>
<p>其他：Mac下默认字体列表：苹果官网、维基百科</p>
<p>结论：目前苹方和San Francisco为苹果推出的最新字体，显示效果也最为优雅，但只有最新系统才能支持，而黑体-简和Helvetica可以获得更多系统版本支持，显示效果也相差无几，可以接受。</p>
<h3 id="3、Android系统："><a href="#3、Android系统：" class="headerlink" title="3、Android系统："></a>3、Android系统：</h3><ul>
<li><strong>Droid Sans、Droid Sans Fallback</strong>：<code>Droid Sans</code>为安卓系统中默认的西文字体，是一款人文主义无衬线字体，而<code>Droid Sans Fallback</code>则是包含汉字、日文假名、韩文的文字扩展支持。</li>
</ul>
<p>结论：<code>Droid Sans</code>为默认的字体，并结合了中英文，无需单独设置。</p>
<h3 id="4、iOS系统："><a href="#4、iOS系统：" class="headerlink" title="4、iOS系统："></a>4、iOS系统：</h3><p>iOS系统的字体和Mac OS系统的字体相同，保证了Mac上的字体效果，iOS设备就没有太大问题。</p>
<h3 id="5、Linux："><a href="#5、Linux：" class="headerlink" title="5、Linux："></a>5、Linux：</h3><ul>
<li><p><strong>文泉驿点阵宋体</strong>：类似宋体的衬线字体，一般不推荐使用。</p>
</li>
<li><p><strong>文泉驿微米黑</strong>：几乎是 Linux 社区现有的最佳简体中文字体。</p>
</li>
</ul>
<h2 id="二、选择字体需要注意的问题"><a href="#二、选择字体需要注意的问题" class="headerlink" title="二、选择字体需要注意的问题"></a>二、选择字体需要注意的问题</h2><h3 id="1、字体的中英文写法："><a href="#1、字体的中英文写法：" class="headerlink" title="1、字体的中英文写法："></a>1、字体的中英文写法：</h3><p>我们在操作系统中常常看到宋体、微软雅黑这样的字体名称，但实际上这只是字体的显示名称，而不是字体文件的名称，一般字体文件都是用英文命名的，如<code>SimSun</code>、<code>Microsoft Yahei</code>。在大多数情况下直接使用显示名称也能正确的显示，但是有一些用户的特殊设置会导致中文声明无效。</p>
<p>因此，<strong>保守的做法是使用字体的字体名称（英文）或者两者兼写</strong>。如下示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">STXihei</span>, "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>";</span><br><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">STXihei</span>, "华文细黑", "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", "微软雅黑";</span><br></pre></td></tr></table></figure>

<h3 id="2、声明英文字体："><a href="#2、声明英文字体：" class="headerlink" title="2、声明英文字体："></a>2、声明英文字体：</h3><p>绝大部分中文字体里都包含英文字母和数字，不进行英文字体声明是没有问题的，但是大多数中文字体中的英文和数字的部分都不是特别漂亮，所以建议也对英文字体进行声明。<br><strong>由于英文字体中大多不包含中文，我们可以先进行英文字体的声明，这样不会影响到中文字体的选择，因此优先使用最优秀的英文字体，中文字体声明则紧随其次</strong>。如下示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>";</span><br></pre></td></tr></table></figure>

<h3 id="3、照顾不同的操作系统："><a href="#3、照顾不同的操作系统：" class="headerlink" title="3、照顾不同的操作系统："></a>3、照顾不同的操作系统：</h3><ul>
<li><strong>英文、数字部分</strong>：在默认的操作系统中，Mac和Win都会带有<code>Arial</code>、<code>Verdana</code>、<code>Tahoma</code>等几个预装字体，从显示效果来看，<code>Tahoma</code>要比<code>Arial</code>更加清晰一些，因此字体设置<code>Tahoma</code>最好放到前面，当找不到<code>Tahoma</code>时再使用<code>Arial</code>；而在Mac中，还拥有一款更加漂亮的<code>Helvetica</code>字体，所以为了照顾Mac用户有更好的体验，应该更优先设置<code>Helvetica</code>字体；Android系统下默认的无衬线字体就可以接受，因此无需单独设置。最后，英文、数字字体的最佳写法如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Helvetica</span>, <span class="selector-tag">Tahoma</span>, <span class="selector-tag">Arial</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>中文部分</strong>：在Win下，微软雅黑为大部分人最常使用的中文字体，由于很多人安装Office的缘故，Mac电脑中也会出现微软雅黑字体，因此把显示效果不错的微软雅黑加入到字体列表是个不错的选择；同样，为了保证Mac中更为优雅字体苹方（<code>PingFang SC</code>）、黑体-简（<code>Heiti SC</code>）、冬青黑体（ <code>Hiragino Sans GB</code> ）的优先显示，需要把这些字体放到中文字体列表的最前面；同时为了照顾到Linux操作系统的体验，还需要添加<code>文泉驿微米黑</code>字体。最后，中文字体部分最佳写法如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: "<span class="selector-tag">PingFang</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Hiragino</span> <span class="selector-tag">Sans</span> <span class="selector-tag">GB</span>", "<span class="selector-tag">Heiti</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", "<span class="selector-tag">WenQuanYi</span> <span class="selector-tag">Micro</span> <span class="selector-tag">Hei</span>";</span><br></pre></td></tr></table></figure>

<p>中英文整合写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Helvetica</span>, <span class="selector-tag">Tahoma</span>, <span class="selector-tag">Arial</span>, "<span class="selector-tag">Heiti</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", "<span class="selector-tag">WenQuanYi</span> <span class="selector-tag">Micro</span> <span class="selector-tag">Hei</span>";</span><br><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Helvetica</span>, <span class="selector-tag">Tahoma</span>, <span class="selector-tag">Arial</span>, "<span class="selector-tag">PingFang</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Hiragino</span> <span class="selector-tag">Sans</span> <span class="selector-tag">GB</span>", "<span class="selector-tag">Heiti</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", "<span class="selector-tag">WenQuanYi</span> <span class="selector-tag">Micro</span> <span class="selector-tag">Hei</span>";</span><br></pre></td></tr></table></figure>

<h3 id="4、注意向下兼容"><a href="#4、注意向下兼容" class="headerlink" title="4、注意向下兼容"></a>4、注意向下兼容</h3><p>如果还需要考虑旧版本操作系统用户的话，不得不加上一些旧版操作系统存在的字体：Mac中的<code>华文黑体</code>、<code>冬青黑体</code>，Win中的<code>黑体</code>等。同样按照显示效果排列在列表后面，写法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Helvetica</span>, <span class="selector-tag">Tahoma</span>, <span class="selector-tag">Arial</span>, "<span class="selector-tag">PingFang</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Hiragino</span> <span class="selector-tag">Sans</span> <span class="selector-tag">GB</span>", "<span class="selector-tag">Heiti</span> <span class="selector-tag">SC</span>", <span class="selector-tag">STXihei</span>, "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", <span class="selector-tag">SimHei</span>, "<span class="selector-tag">WenQuanYi</span> <span class="selector-tag">Micro</span> <span class="selector-tag">Hei</span>";</span><br></pre></td></tr></table></figure>

<p>加入了 <code>STXihei</code>（<code>华文细黑</code>）和 <code>SimHei</code>（<code>黑体</code>）。</p>
<h3 id="5、补充字体族名称"><a href="#5、补充字体族名称" class="headerlink" title="5、补充字体族名称"></a>5、补充字体族名称</h3><p>字体族大体上分为两类：<code>sans-serif</code>（无衬线体）和<code>serif</code>（衬线体），<strong>当所有的字体都找不到时，我们可以使用字体族名称作为操作系统最后选择字体的方向</strong>。一般非衬线字体在显示器中的显示效果会比较好，因此我们需要在最后添加 <code>sans-serif</code>，写法如下：。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Helvetica</span>, <span class="selector-tag">Tahoma</span>, <span class="selector-tag">Arial</span>, "<span class="selector-tag">PingFang</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Hiragino</span> <span class="selector-tag">Sans</span> <span class="selector-tag">GB</span>", "<span class="selector-tag">Heiti</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", "<span class="selector-tag">WenQuanYi</span> <span class="selector-tag">Micro</span> <span class="selector-tag">Hei</span>", <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure>


<h2 id="三、我们看一下大公司的常见写法（2016-07查看）"><a href="#三、我们看一下大公司的常见写法（2016-07查看）" class="headerlink" title="三、我们看一下大公司的常见写法（2016.07查看）"></a>三、我们看一下大公司的常见写法（2016.07查看）</h2><h3 id="1、小米"><a href="#1、小米" class="headerlink" title="1、小米"></a>1、小米</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">font: 14px/1.5 "Helvetica Neue",Helvetica,Arial,"Microsoft Yahei","Hiragino Sans GB","Heiti SC","WenQuanYi Micro Hei",sans-serif;</span><br></pre></td></tr></table></figure>

<p>小米公司优先使用<code>Helvetica Neue</code>这款字体以保证最新版本Mac用户的最佳体验，选择了<code>Arial</code>作为Win下默认英文字体及Mac的替代英文字体；中文字体方面首选了<code>微软雅黑</code>，然后选择了<code>冬青黑体</code>及<code>黑体-简</code>作为Mac上的替代方案；最后使用<code>文泉驿微米黑</code>兼顾了Linux系统。</p>
<h3 id="2、淘宝"><a href="#2、淘宝" class="headerlink" title="2、淘宝"></a>2、淘宝</h3><p>鉴于淘宝网改版频率较频繁，这里截图保存了一下。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">font: 12px/1.5 tahoma,arial,'Hiragino Sans GB','\5b8b\4f53',sans-serif;</span><br></pre></td></tr></table></figure>

<p>其实从图中明显看出淘宝网的导航及内容有着大量的衬线字体，鉴于淘宝网站大部分字号比较小，显示效果也还可以接受。代码中可以看出淘宝使用了<code>Tahoma</code>、<code>Arial</code>作为首选英文字体，中文字体首选了<code>冬青黑体</code>，由于Win下没有预装该款字体，所以显示出了后面的<code>宋体</code>（<code>5b8b4f53</code>为汉字宋体用 unicode 表示的写法，不用<code>SimSun</code>是因为 Firefox 的某些版本和 Opera 不支持 <code>SimSun</code>的写法）</p>
<h3 id="3、简书"><a href="#3、简书" class="headerlink" title="3、简书"></a>3、简书</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: "<span class="selector-tag">lucida</span> <span class="selector-tag">grande</span>", "<span class="selector-tag">lucida</span> <span class="selector-tag">sans</span> <span class="selector-tag">unicode</span>", <span class="selector-tag">lucida</span>, <span class="selector-tag">helvetica</span>, "<span class="selector-tag">Hiragino</span> <span class="selector-tag">Sans</span> <span class="selector-tag">GB</span>", "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", "<span class="selector-tag">WenQuanYi</span> <span class="selector-tag">Micro</span> <span class="selector-tag">Hei</span>", <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure>

<p>自认为简书的阅读体验很棒，我们看看简书所用的字体，简书优先选择了<code>lucida</code>家族的系列字体作为英文字体，该系列字体在Mac和Win上都是预装的，并且有着不俗的表现；中文字体方面将<code>冬青黑体</code>作为最优先使用的字体，同样考虑了Linux系统。</p>
<p>各大公司的字体设置大同小异，这里不再一一举例查看，有兴趣的可以自己多多查看。</p>
<h2 id="四、其他的一些注意点"><a href="#四、其他的一些注意点" class="headerlink" title="四、其他的一些注意点"></a>四、其他的一些注意点</h2><h3 id="1、字体何时需要添加引号"><a href="#1、字体何时需要添加引号" class="headerlink" title="1、字体何时需要添加引号"></a>1、字体何时需要添加引号</h3><p>当字体具体某个取值中若有一种样式名称包含空格，则需要用双引号或单引号表示，如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", "<span class="selector-tag">Arial</span> <span class="selector-tag">Narrow</span>", <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure>

<p>如果书写中文字体名称为了保证兼容性也会添加引号，如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: "黑体<span class="selector-tag">-</span>简", "微软雅黑", "文泉驿微米黑";</span><br></pre></td></tr></table></figure>

<h3 id="2、引用外部字体"><a href="#2、引用外部字体" class="headerlink" title="2、引用外部字体"></a>2、引用外部字体</h3><p>大多数的中文字体由于版权原因不能随意使用，这里推荐一个免版权而且漂亮的中文字体<code>思源黑体</code>，该字体为Adobe与Google推出的一款开源字体， 有七种字体粗细（<code>ExtraLight</code>、<code>Light</code>、<code>Normal</code>、<code>Regular</code>、<code>Medium</code>、<code>Bold</code> 和 <code>Heavy</code>），完全支持日文、韩文、繁体中文和简体中文，字形优美，依稀记得小米公司好像有使用过。</p>
<p>鉴于中文字体的体积比较大（一般字库全一点的中文字体动辄几Mb），所以较少人会使用外部字体，如果真的需要引入，也可以考虑通过工具根据页面文字的使用多少单独生成中文字体，以减小文件大小。</p>
<h2 id="五、最后，推荐写法"><a href="#五、最后，推荐写法" class="headerlink" title="五、最后，推荐写法"></a>五、最后，推荐写法</h2><p>由于每个人的审美不一样，钟爱的字体也会有所有不同，这里给出我个人的常用写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: "<span class="selector-tag">Helvetica</span> <span class="selector-tag">Neue</span>", <span class="selector-tag">Helvetica</span>, <span class="selector-tag">Arial</span>, "<span class="selector-tag">PingFang</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Hiragino</span> <span class="selector-tag">Sans</span> <span class="selector-tag">GB</span>", "<span class="selector-tag">Heiti</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", "<span class="selector-tag">WenQuanYi</span> <span class="selector-tag">Micro</span> <span class="selector-tag">Hei</span>", <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure>

<p>另外推荐两个github上的关于中文字体和排版的项目：</p>
<ul>
<li><a href="https://github.com/zenozeng/fonts.css" target="_blank" rel="noopener external nofollow noreferrer">Fonts.css – 跨平台中文字体解决方案</a></li>
<li><a href="https://github.com/sofish/typo.css" target="_blank" rel="noopener external nofollow noreferrer">typo.css – 中文网页重设与排版：一致化浏览器排版效果</a></li>
</ul>
<blockquote>
<p>本文转载于：<a href="https://segmentfault.com/a/1190000006110417" target="_blank" rel="noopener external nofollow noreferrer">如何优雅的选择字体(font-family)</a></p>
<p>本文遵循原文的创作者协议</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题目总结-二叉树的遍历</title>
    <url>/archives/e1014f63.html</url>
    <content><![CDATA[<p>遍历的含义就是把树的所有节点（Node）按照某种顺序访问一遍。包括前序，中序，后序，层序4种遍历方法。</p>
<a id="more"></a>

<ol>
<li>以图的深度优先搜索为原型的遍历</li>
</ol>
<ul>
<li><a href="#144-二叉树的前序遍历">144-二叉树的前序遍历</a></li>
<li><a href="#94-二叉树的中序遍历">94-二叉树的中序遍历</a></li>
<li><a href="#145-二叉树的后序遍历">145-二叉树的后序遍历</a></li>
</ul>
<p>在这种类型中，递归的实现方式是非常简单的，只需要递归左右结点，直到结点为空作为结束条件就可以，哪种序就取决于你访问结点的时间。</p>
<p>不过一般这不能满足面试官的要求，可能会接着问能不能用非递归实现一下，这个说起来比较简单，其实就是用一个栈手动模拟递归的过程。</p>
<p>有时候非递归还是不能满足面试官，还会问一问，上面的做法时间和空间复杂度是多少。我们知道，正常遍历时间复杂度是<code>O(n)</code>，而空间复杂度是则是递归栈（或者自己维护的栈）的大小，也就是<code>O(logn)</code>。他会问能不能够在常量空间内解决树的遍历问题呢？确实还真可以，这里就要介绍一下Morris遍历。</p>
<blockquote>
<p>Morris遍历方法用了线索二叉树，这个方法不需要为每个节点额外分配指针指向其前驱和后继结点，而是利用叶子节点中的右空指针指向中序遍历下的后继节点就可以了。这样就节省了需要用栈来记录前驱或者后继结点的额外空间，所以可以达到<code>O(1)</code>的空间复杂度。不过这种方法有一个问题就是会暂时性的改动树的结构，这在程序设计中并不是很好的习惯，这些在面试中都可以和面试官讨论，一般来说问到这里不会需要进行Morris遍历方法的代码实现了，只需要知道这种方法和他的主要优劣势就可以了。</p>
</blockquote>
<ol start="2">
<li>以图的广度优先搜索为原型的遍历，在树中称为层序遍历，LeetCode中有三种：自顶向下层序、自底向上层序、锯齿层序遍历。</li>
</ol>
<ul>
<li><a href="#102-二叉树的层次遍历">102-二叉树的层次遍历</a></li>
<li><a href="#103-二叉树的锯齿形层次遍历">103-二叉树的锯齿形层次遍历</a></li>
<li><a href="#107-二叉树的层次遍历ii">107-二叉树的层次遍历ii</a></li>
</ul>
<p><strong>自顶向下层序遍历</strong>其实比较简单，代码基本就是图的广度优先搜索，思路就是维护一个<strong>队列</strong>存储上一层的结点，逐层访问。而<strong>自底向上层序层序遍历</strong>则要从最后一层倒序访问上来，这个我没有想到太好的方法，现在的实现就是把自顶向下层序遍历得到的层放入数据结构然后reverse过来。至于<strong>锯齿层序遍历</strong>因为每一层访问顺序有所改变，而且是每次都反转顺序，这让我们想到<strong>栈</strong>这个数据结构，所以这里不用队列而改用栈来保存，就可以满足每层反转访问顺序的要求了。</p>
<p>层次遍历相关的题目：</p>
<ul>
<li><a href="#116-填充每个节点的下一个右侧节点指针">116-填充每个节点的下一个右侧节点指针</a></li>
<li><a href="#117-填充每个节点的下一个右侧节点指针ii">117-填充每个节点的下一个右侧节点指针ii</a></li>
<li>513-找树左下角的值</li>
<li>515-在每个树行中找最大值</li>
</ul>
<h2 id="以图的深度优先搜索为原型的遍历"><a href="#以图的深度优先搜索为原型的遍历" class="headerlink" title="以图的深度优先搜索为原型的遍历"></a>以图的深度优先搜索为原型的遍历</h2><h3 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144-二叉树的前序遍历"></a>144-二叉树的前序遍历</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，返回它的 <strong>前序</strong> 遍历。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [1,2,3]</span><br></pre></td></tr></table></figure>

<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>前序遍历算法先访问树的根节点，然后以类似的方式分别遍历左子树和右子树。</p>
<img src="/archives/e1014f63/144-1.png" class="" title="前序遍历">

<h5 id="方法1——递归"><a href="#方法1——递归" class="headerlink" title="方法1——递归"></a>方法1——递归</h5><p>定义函数<code>preorderTraversal(self, node)</code>返回以node为答案的先序遍历结果的数组，假设它的两个孩子<code>node.left</code>和<code>node.right</code>已经搞定了，即可以返回答案的输出数组。那么思考最终的输出数组是什么样的，很明显要满足<code>根 ➜ 左 ➜ 右</code>的规则，应该返回<code>[node.val] + preorderTraversal(self, node.left) + preorderTraversal(self, node.right)</code>（函数返回的就是一个数组，只需要把它们拼接起来即可）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        output = []</span><br><span class="line">        </span><br><span class="line">        output.append(root.val)</span><br><span class="line">        output += self.preorderTraversal(root.left)</span><br><span class="line">        output += self.preorderTraversal(root.right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<h5 id="方法2——迭代"><a href="#方法2——迭代" class="headerlink" title="方法2——迭代"></a>方法2——迭代</h5><p>递归算法使用系统栈，不好控制，性能问题比较严重，需要进一步了解不用递归如何实现。为了维护固定的访问顺序，使用栈数据结构的先入后出特性。</p>
<p>先处理根节点，根据访问顺序<code>根 ➜ 左 ➜ 右</code>，先入栈的后访问，为了保持访问顺序（先入后出），<strong>先把右孩子入栈，再入栈左孩子（此处需要注意，出栈才是访问顺序）</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        stack = [root]</span><br><span class="line">        output = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> root != <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 先入栈右节点</span></span><br><span class="line">                stack.append(root.right)</span><br><span class="line">                <span class="comment"># 后入栈左节点</span></span><br><span class="line">                stack.append(root.left)</span><br><span class="line">                <span class="comment"># 栈顶元素并入输出</span></span><br><span class="line">                output.append(root.val)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<p>注意：我这里是把所有迭代过程中的root节点的right节点、left节点（包括空节点）均放入栈，然后在循环里面弹出栈顶元素，检查是否是空，如果为空节点，则不操作。</p>
<ul>
<li>时间复杂度：访问每个节点恰好一次，时间复杂度为 O(N) ，其中 N 是节点的个数，也就是树的大小。</li>
<li>空间复杂度：取决于树的结构，最坏情况存储整棵树，因此空间复杂度是 O(N)。</li>
</ul>
<h5 id="方法3——颜色标记法"><a href="#方法3——颜色标记法" class="headerlink" title="方法3——颜色标记法"></a>方法3——颜色标记法</h5><p>其核心思想是使用<strong>颜色标记节点的状态，新节点为白色，已访问的节点为灰色</strong>：</p>
<ul>
<li>如果遇到的节点为白色，则将其标记为灰色，然后将其右子节点、左子节点、自身依次入栈。</li>
<li>如果遇到的节点为灰色，则将节点的值输出。</li>
</ul>
<p><strong>颜色标记法的优势</strong>：兼具栈迭代方法的高效，又像递归方法一样简洁易懂，更重要的是，这种方法对于前序、中序、后序遍历，能够写出完全一致的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        WHITE,GRAY = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">        stack = [(WHITE,root)]</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            color,root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> root != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> color == WHITE:</span><br><span class="line">                    stack.append((WHITE,root.right))</span><br><span class="line">                    stack.append((WHITE,root.left))</span><br><span class="line">                    stack.append((GRAY,root))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    output.append(root.val)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>


<h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94-二叉树的中序遍历"></a>94-二叉树的中序遍历</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，返回它的 <strong>中序</strong> 遍历。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">输出: [1,3,2]</span><br></pre></td></tr></table></figure>

<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>中序遍历的算法先遍历左子树，然后访问根节点，最后遍历右子树，这个算法先尽量移动到树的最左边，然后才开始访问节点。</p>
<img src="/archives/e1014f63/94-1.png" class="" title="中序遍历">

<h5 id="方法1——递归-1"><a href="#方法1——递归-1" class="headerlink" title="方法1——递归"></a>方法1——递归</h5><p>同理于前序遍历，一模一样的处理方法，考虑访问顺序为<code>左 ➜ 根 ➜ 右</code>即可，快速模仿并写出代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        output += self.inorderTraversal(root.left)</span><br><span class="line">        output.append(root.val)</span><br><span class="line">        output += self.inorderTraversal(root.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<h5 id="方法2——迭代-1"><a href="#方法2——迭代-1" class="headerlink" title="方法2——迭代"></a>方法2——迭代</h5><p>核心思路依旧是利用栈维护节点的访问顺序：<code>左 ➜ 根 ➜ 右</code>。使用一个<code>p_node</code>来指向当前访问节点，p是代表指针point，另外有一个变量<code>cur_node</code>表示当前正在操作节点（把出栈节点值加入输出数组中），算法步骤如下（可以对照代码注释）:</p>
<ul>
<li><p>访问当前节点，如果当前节点有左孩子，则把它的左孩子都入栈，移动当前节点到左孩子，重复第一步直到当前节点没有左孩子</p>
</li>
<li><p>当当前节点没有左孩子时，栈顶节点出栈，加入结果数组</p>
</li>
<li><p>当前节点指向栈顶节点的右节点</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前访问节点指针</span></span><br><span class="line">        p_node = root</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> p_node:</span><br><span class="line">            <span class="comment"># 把所有当前访问节点的左孩子都入栈</span></span><br><span class="line">            <span class="keyword">while</span> p_node:</span><br><span class="line">                stack.append(p_node)</span><br><span class="line">                p_node = p_node.left</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 操作栈顶节点，如果是第一次运行到这步，那么这是整棵树的最左节点</span></span><br><span class="line">            cur_node = stack.pop()</span><br><span class="line">            <span class="comment"># 因为已经保证没有左节点，可以访问根节点</span></span><br><span class="line">            output.append(cur_node.val)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur_node.right:</span><br><span class="line">                <span class="comment"># 将指针指向当前节点的右节点</span></span><br><span class="line">                p_node = cur_node.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<h5 id="方法3——颜色标记法-1"><a href="#方法3——颜色标记法-1" class="headerlink" title="方法3——颜色标记法"></a>方法3——颜色标记法</h5><p>其核心思想是使用颜色标记节点的状态，新节点为白色，已访问的节点为灰色：</p>
<ul>
<li>如果遇到的节点为白色，则将其标记为灰色，然后将其右子节点、自身、左子节点依次入栈。</li>
<li>如果遇到的节点为灰色，则将节点的值输出。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        WHITE,GRAY = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        stack = [(WHITE,root)]</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            color,root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> root != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> color == WHITE:</span><br><span class="line">                    stack.append((WHITE,root.right))</span><br><span class="line">                    stack.append((GRAY,root))</span><br><span class="line">                    stack.append((WHITE,root.left))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    output.append(root.val)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<h3 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145-二叉树的后序遍历"></a>145-二叉树的后序遍历</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，返回它的 <strong>后序</strong> 遍历。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [3,2,1]</span><br></pre></td></tr></table></figure>

<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>后序遍历算法会先遍历左子树，然后是右子树，最后访问根节点。</p>
<img src="/archives/e1014f63/145-1.png" class="" title="后序遍历">

<h5 id="方法1——递归-2"><a href="#方法1——递归-2" class="headerlink" title="方法1——递归"></a>方法1——递归</h5><p>类似前序遍历，只需要改变<strong>节点访问顺序</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self,root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        output = []</span><br><span class="line">        </span><br><span class="line">        output += self.postorderTraversal(root.left)</span><br><span class="line">        output += self.postorderTraversal(root.right)</span><br><span class="line">        output.append(root.val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<h5 id="方法2——迭代-2"><a href="#方法2——迭代-2" class="headerlink" title="方法2——迭代"></a>方法2——迭代</h5><p>我们发现后序遍历的顺序是<code>左 ➜ 右 ➜ 根</code>，那么反序的话，就直接倒序的输出结果，即反后序：<code>根 ➜ 右 ➜ 左</code>，和先序遍历的<code>根 ➜ 左 ➜ 右</code>对比，发现只需要稍微改一下代码就可以得到反后序的结果，参考先序遍历，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self,root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        stack = [root]</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> root != <span class="literal">None</span>:</span><br><span class="line">                output.append(root.val)</span><br><span class="line">                stack.append(root.left)</span><br><span class="line">                stack.append(root.right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> output[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<h5 id="方法3——迭代（颜色标记法）"><a href="#方法3——迭代（颜色标记法）" class="headerlink" title="方法3——迭代（颜色标记法）"></a>方法3——迭代（颜色标记法）</h5><p>后序遍历访问顺序要求为<code>左 ➜ 右 ➜ 根</code>，<strong>在对访问节点进行操作的条件是，它的左子树和右子树都已经被访问</strong>。这样算法的框架就出来了：只需要对每个节点进行标记，表示这个节点有没有被访问，一个节点能否进行操作的条件就是这个节点的左右节点都被访问过了。</p>
<p>因为栈先入后出，为了维护访问顺序满足条件，入栈顺序应该是<code>根 ➜ 右 ➜ 左</code>（和要求访问顺序相反）。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self,root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        WHITE,GRAY = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        stack = [(WHITE,root)]</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            color,root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> root != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> color == WHITE:</span><br><span class="line">                    stack.append((GRAY,root))</span><br><span class="line">                    stack.append((WHITE,root.right))                </span><br><span class="line">                    stack.append((WHITE,root.left))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    output.append(root.val)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>


<h2 id="以图的广度优先搜索为原型的遍历"><a href="#以图的广度优先搜索为原型的遍历" class="headerlink" title="以图的广度优先搜索为原型的遍历"></a>以图的广度优先搜索为原型的遍历</h2><h3 id="102-二叉树的层次遍历"><a href="#102-二叉树的层次遍历" class="headerlink" title="102-二叉树的层次遍历"></a>102-二叉树的层次遍历</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，返回其按层次遍历的节点值。（即逐层地，从左到右访问所有节点）。</p>
<p>例如：给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回其层次遍历结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><h5 id="方法1——借助队列的迭代方法"><a href="#方法1——借助队列的迭代方法" class="headerlink" title="方法1——借助队列的迭代方法"></a>方法1——借助队列的迭代方法</h5><p>我们将树上顶点按照层次依次放入队列结构中，队列中元素满足 FIFO（先进先出）的原则。在 Python 中如果使用 Queue 结构，但因为它是为多线程之间安全交换而设计的，所以使用了锁，会导致性能不佳。因此在 Python 中可以使用 deque 的 <code>append()</code> 和 <code>popleft()</code> 函数来快速实现队列的功能。</p>
<p>注意：输出要求<code>List[List[int]]</code>。</p>
<p>算法步骤：</p>
<ul>
<li>计算当前层级节点数目，然后从队列中循环取出当前层级的全部节点（节点放入到列表中），并且将其左右子节点放入队列。</li>
<li>循环上步直到队列为空</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        queue = deque([root,])</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前层级节点数目</span></span><br><span class="line">            level_length = len(queue)</span><br><span class="line"></span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(level_length):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                temp.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">            </span><br><span class="line">            output.append(temp)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<h5 id="方法2——递归"><a href="#方法2——递归" class="headerlink" title="方法2——递归"></a>方法2——递归</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="comment"># 辅助函数（添加变量res，depth）</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root, res, depth)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 比较访问节点所在的层次 depth 和当前最高层次 len(res) 的大小，如果前者更大就向 res 添加一个空列表</span></span><br><span class="line">            <span class="keyword">if</span> len(res) == depth:</span><br><span class="line">                res.append([])</span><br><span class="line">            <span class="comment"># 当前节点插入到对应层的列表 res[depth] 中</span></span><br><span class="line">            res[depth].append(root.val)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 递归</span></span><br><span class="line">            helper(root.left,res,depth+<span class="number">1</span>)</span><br><span class="line">            helper(root.right,res,depth+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        helper(root,res,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，因为每个节点恰好会被运算一次。</li>
<li>空间复杂度：O(N)，保存输出结果的数组包含 N 个节点的值。</li>
</ul>
<h3 id="103-二叉树的锯齿形层次遍历"><a href="#103-二叉树的锯齿形层次遍历" class="headerlink" title="103-二叉树的锯齿形层次遍历"></a>103-二叉树的锯齿形层次遍历</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>
<p>例如：给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回锯齿形层次遍历如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><h5 id="方法1——借助队列的迭代方法-1"><a href="#方法1——借助队列的迭代方法-1" class="headerlink" title="方法1——借助队列的迭代方法"></a>方法1——借助队列的迭代方法</h5><p>与102题相同，这道题的本质是树的层次遍历（广度优先遍历）。只需要把偶数层的结果进行反转即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zigzagLevelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        queue = deque([root])</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 标记是否需要翻转结果</span></span><br><span class="line">        signal = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            <span class="comment"># 队列的长度（这层的节点数）</span></span><br><span class="line">            length = len(queue)     </span><br><span class="line"></span><br><span class="line">            temp = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(length):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">                temp.append(node.val)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 根据标记决定是否翻转结果</span></span><br><span class="line">            <span class="keyword">if</span> signal == <span class="literal">False</span>:</span><br><span class="line">                temp = temp[::<span class="number">-1</span>]</span><br><span class="line">                signal = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                signal = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            output.append(temp)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>


<h3 id="107-二叉树的层次遍历ii"><a href="#107-二叉树的层次遍历ii" class="headerlink" title="107-二叉树的层次遍历ii"></a>107-二叉树的层次遍历ii</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，返回其节点值自底向上的层次遍历。（即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>
<p>例如：给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回其自底向上的层次遍历为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><h3 id="方法1——层次遍历迭代（反转结果）"><a href="#方法1——层次遍历迭代（反转结果）" class="headerlink" title="方法1——层次遍历迭代（反转结果）"></a>方法1——层次遍历迭代（反转结果）</h3><p>我这里用层次遍历得到节点列表，然后将这个节点列表进行反转即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output = output[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<p>整体代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        queue = deque([root])</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            <span class="comment"># 当前层级节点数目</span></span><br><span class="line">            length = len(queue)</span><br><span class="line">            temp = []</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(length):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                temp.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line"></span><br><span class="line">            output.append(temp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<h5 id="方法2——层次遍历迭代（从头添加数组）"><a href="#方法2——层次遍历迭代（从头添加数组）" class="headerlink" title="方法2——层次遍历迭代（从头添加数组）"></a>方法2——层次遍历迭代（从头添加数组）</h5><p>当然，我们也可以每次从头添加数组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output.insert(<span class="number">0</span>,temp)</span><br></pre></td></tr></table></figure>

<p>整体代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        queue = deque([root])</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            <span class="comment"># 当前层级节点数目</span></span><br><span class="line">            length = len(queue)</span><br><span class="line">            temp = []</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(length):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                temp.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line"></span><br><span class="line">            output.insert(<span class="number">0</span>,temp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>


<h3 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116-填充每个节点的下一个右侧节点指针"></a>116-填充每个节点的下一个右侧节点指针</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个<strong>完美二叉树</strong>，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。</p>
<p>初始状态下，所有 next 指针都被设置为 NULL。</p>
<p>示例：</p>
<img src="/archives/e1014f63/116-1.png" class="" title="填充每个节点的下一个右侧节点指针-1">

<p>输入：<code>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:5},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:6},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;7&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;val&quot;:3},&quot;val&quot;:1}</code></p>
<p>输出：<code>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;right&quot;:null,&quot;val&quot;:6},&quot;right&quot;:null,&quot;val&quot;:5},&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:{&quot;$id&quot;:&quot;7&quot;,&quot;left&quot;:{&quot;$ref&quot;:&quot;5&quot;},&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;6&quot;},&quot;val&quot;:3},&quot;right&quot;:{&quot;$ref&quot;:&quot;4&quot;},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;7&quot;},&quot;val&quot;:1}</code></p>
<p>解释：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。</p>
<p>提示：</p>
<ul>
<li>你只能使用常量级额外空间。</li>
<li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li>
</ul>
<h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><h5 id="方法1——层次遍历-迭代"><a href="#方法1——层次遍历-迭代" class="headerlink" title="方法1——层次遍历-迭代"></a>方法1——层次遍历-迭代</h5><p>首先想到层次遍历入队，各层中的点都逐一连接。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, left, right, next):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.left = left</span></span><br><span class="line"><span class="string">        self.right = right</span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        queue = [root]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            length = len(queue)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 先弹出一个节点，便于循环中填充next指针</span></span><br><span class="line">            pre = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 左右子树入队</span></span><br><span class="line">            <span class="keyword">if</span> pre.left != <span class="literal">None</span>:</span><br><span class="line">                queue.append(pre.left)</span><br><span class="line">            <span class="keyword">if</span> pre.right != <span class="literal">None</span>:</span><br><span class="line">                queue.append(pre.right)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(length<span class="number">-1</span>):</span><br><span class="line">                cur = queue.pop(<span class="number">0</span>)</span><br><span class="line">                pre.next = cur</span><br><span class="line">                <span class="comment"># 左右子树入队</span></span><br><span class="line">                <span class="keyword">if</span> cur.left != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(cur.left)</span><br><span class="line">                <span class="keyword">if</span> cur.right != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(cur.right)</span><br><span class="line">                <span class="comment"># 更新pre指针</span></span><br><span class="line">                pre = cur</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<h5 id="方法2——常数空间复杂度"><a href="#方法2——常数空间复杂度" class="headerlink" title="方法2——常数空间复杂度"></a>方法2——常数空间复杂度</h5><p>之前是用队列将下一层的节点保存了起来。这里的话，其实只需要<strong>提前把下一层的next构造完成，到了下一层的时候就可以遍历了</strong>。</p>
<p>我们可以通过判断当前遍历的节点是不是null来决定是否进入下一层。</p>
<p>然后，我们需要一个额外的变量存储每一层的开头节点。</p>
<p>下面是一个图解：</p>
<img src="/archives/e1014f63/116-2.png" class="" title="填充每个节点的下一个右侧节点指针-2">

<img src="/archives/e1014f63/116-3.png" class="" title="填充每个节点的下一个右侧节点指针-3">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, left, right, next):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.left = left</span></span><br><span class="line"><span class="string">        self.right = right</span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        start = root</span><br><span class="line">        pre = root</span><br><span class="line">        cur = root.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> start.left != <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 构造下一层的next指针</span></span><br><span class="line">            pre.left.next = pre.right</span><br><span class="line">            <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">                pre.right.next = cur.left</span><br><span class="line">                cur.left.next = cur.right</span><br><span class="line">                <span class="comment"># 更新pre、cur</span></span><br><span class="line">                pre = cur</span><br><span class="line">                cur = cur.next</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新pre、cur、start</span></span><br><span class="line">            pre = start.left</span><br><span class="line">            cur = start.right</span><br><span class="line">            start = pre</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### 117-填充每个节点的下一个右侧节点指针ii</span></span><br><span class="line"><span class="comment">#### 题目描述</span></span><br><span class="line">给定一个二叉树</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。</p>
<p>初始状态下，所有 next 指针都被设置为 NULL。</p>
<p>示例：</p>
<img src="/archives/e1014f63/117-1.png" class="" title="填充每个节点的下一个右侧节点指针ii-1">

<p>输入：<code>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:5},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;val&quot;:3},&quot;val&quot;:1}</code></p>
<p>输出：<code>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;right&quot;:null,&quot;val&quot;:5},&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;5&quot;},&quot;val&quot;:3},&quot;right&quot;:{&quot;$ref&quot;:&quot;4&quot;},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;6&quot;},&quot;val&quot;:1}</code></p>
<p>解释：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。</p>
<p>提示：</p>
<ul>
<li>你只能使用常量级额外空间。</li>
<li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li>
</ul>
<h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><h5 id="方法1——层次遍历"><a href="#方法1——层次遍历" class="headerlink" title="方法1——层次遍历"></a>方法1——层次遍历</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, left, right, next):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.left = left</span></span><br><span class="line"><span class="string">        self.right = right</span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        queue = [root]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            length = len(queue)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 先弹出一个节点，便于循环中填充next指针</span></span><br><span class="line">            pre = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 左右子树入队</span></span><br><span class="line">            <span class="keyword">if</span> pre.left != <span class="literal">None</span>:</span><br><span class="line">                queue.append(pre.left)</span><br><span class="line">            <span class="keyword">if</span> pre.right != <span class="literal">None</span>:</span><br><span class="line">                queue.append(pre.right)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(length<span class="number">-1</span>):</span><br><span class="line">                cur = queue.pop(<span class="number">0</span>)</span><br><span class="line">                pre.next = cur</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 左右子树入队</span></span><br><span class="line">                <span class="keyword">if</span> cur.left != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(cur.left)</span><br><span class="line">                <span class="keyword">if</span> cur.right != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(cur.right)</span><br><span class="line"></span><br><span class="line">                pre = cur</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<h5 id="方法2——常数空间解法"><a href="#方法2——常数空间解法" class="headerlink" title="方法2——常数空间解法"></a>方法2——常数空间解法</h5><p>我们用一个dummy指针，当连接第一个节点的时候，就将dummy指针指向他。</p>
<p>cur 指针利用 next 不停的遍历当前层。如果 cur 的孩子不为 null 就将它接到 tail 后边，然后更新tail。<strong>当 cur 为 null 的时候，再利用 dummy 指针得到新的一层的开始节点</strong>。</p>
<p>下面是一个示意图：</p>
<img src="/archives/e1014f63/117-2.png" class="" title="填充每个节点的下一个右侧节点指针ii-2">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, left, right, next):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.left = left</span></span><br><span class="line"><span class="string">        self.right = right</span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        cur = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            dummy = Node()</span><br><span class="line">            tail = dummy</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历cur所在的当前层</span></span><br><span class="line">            <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> cur.left != <span class="literal">None</span>:</span><br><span class="line">                    tail.next = cur.left</span><br><span class="line">                    tail = tail.next</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> cur.right != <span class="literal">None</span>:</span><br><span class="line">                    tail.next = cur.right</span><br><span class="line">                    tail = tail.next</span><br><span class="line"></span><br><span class="line">                cur = cur.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新cur到下一层</span></span><br><span class="line">            cur = dummy.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://charlesliuyx.github.io/2018/10/22/%E3%80%90%E7%9B%B4%E8%A7%82%E7%AE%97%E6%B3%95%E3%80%91%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener external nofollow noreferrer">【直观算法】二叉树遍历算法总结</a></li>
<li><a href="http://interviewsource.blogspot.com/2016/09/blog-post.html" target="_blank" rel="noopener external nofollow noreferrer">LeetCode总结 – 树</a></li>
<li><a href="http://codeganker.blogspot.com/2014/08/leetcode_11.html" target="_blank" rel="noopener external nofollow noreferrer">LeetCode总结 – 树的遍历篇</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题目总结-二叉搜索树</title>
    <url>/archives/5f8aadd1.html</url>
    <content><![CDATA[<p>我们发现：</p>
<ul>
<li>在链表中，插入、删除速度很快<code>O(1)</code>，但查找速度较慢<code>O(n)</code>。</li>
<li>在数组中，查找速度很快<code>O(1)</code>，但插入、删除速度很慢<code>O(n)</code>。</li>
</ul>
<p>为了解决这个问题，我们需要寻找一种能够在插入、删除、查找、遍历等操作都相对快的容器，于是人们发明了二叉搜索树（二叉树仅作为二叉搜索树的基础）。二叉搜索树的插入、删除、查找成本均为<code>O(log n)</code></p>
<a id="more"></a>

<h2 id="二叉搜索树的性质"><a href="#二叉搜索树的性质" class="headerlink" title="二叉搜索树的性质"></a>二叉搜索树的性质</h2><ul>
<li>如果节点的左子树不空，则左子树上所有结点的值均小于等于它的根结点的值；</li>
<li>如果节点的右子树不空，则右子树上所有结点的值均大于等于它的根结点的值；</li>
<li>任意节点的左、右子树也分别为二叉搜索树；</li>
</ul>
<h2 id="二叉搜索树的查找、插入、删除过程"><a href="#二叉搜索树的查找、插入、删除过程" class="headerlink" title="二叉搜索树的查找、插入、删除过程"></a>二叉搜索树的查找、插入、删除过程</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>通过二叉搜索树查找节点，理想情况下我们需要检查的节点数可以减半。</p>
<p>但是<strong>二叉搜索树十分依赖于树中节点的拓扑结构</strong>，也就是节点间的布局关系。下图描绘了一个节点插入顺序为 <code>20, 50, 90, 150, 175, 200</code> 的二叉搜索树。这些节点是按照递升顺序被插入的，结果就是这棵树没有广度（Breadth）可言。也就是说，它的拓扑结构其实就是将节点排布在一条线上，而不是以扇形结构散开，所以查找时间也为 <code>O(n)</code>。</p>
<img src="/archives/5f8aadd1/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-%E6%9F%A5%E6%89%BE-2.gif" class="" title="二叉搜索树-查找-2">

<p>下面是一个查找过程：</p>
<img src="/archives/5f8aadd1/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-%E6%9F%A5%E6%89%BE-1.gif" class="" title="二叉搜索树-查找-1">

<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>当向树中插入一个新的节点时，<strong>该节点将总是作为叶子节点</strong>。所以，最困难的地方就是如何找到该节点的父节点。</p>
<p>下面是一个插入过程：</p>
<img src="/archives/5f8aadd1/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-%E6%8F%92%E5%85%A5.gif" class="" title="二叉搜索树-插入">

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除节点算法的第一步是定位要被删除的节点，这可以使用前面介绍的查找算法，因此运行时间为 <code>O(logn)</code>。接着应该选择合适的节点来代替删除节点的位置，它共有三种情况需要考虑。</p>
<ul>
<li>情况 1：如果<strong>被删除的节点没有右孩子</strong>，那么就选择它的左孩子来代替原来的节点。二叉搜索树的性质保证了被删除节点的左子树必然符合二叉搜索树的性质。因此左子树的值要么都大于，要么都小于被删除节点的父节点的值，这取决于被删除节点是左孩子还是右孩子。因此用被删除节点的左子树来替代被删除节点，是完全符合二叉搜索树的性质的。</li>
<li>情况 2：如果<strong>被删除节点的右孩子没有左孩子</strong>，那么这个右孩子被用来替换被删除节点。因为被删除节点的右孩子都大于被删除节点左子树的所有节点，同时也大于或小于被删除节点的父节点，这同样取决于被删除节点是左孩子还是右孩子。因此，用右孩子来替换被删除节点，符合二叉搜索树的性质。</li>
<li>情况 3：如果<strong>被删除节点的右孩子有左孩子</strong>，就需要用被删除节点右孩子的左子树中的最下面的节点来替换它，就是说，我们用<strong>被删除节点的右子树中最小值的节点来替换</strong>。</li>
</ul>
<img src="/archives/5f8aadd1/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-%E5%88%A0%E9%99%A4.gif" class="" title="二叉搜索树-删除">

<h2 id="LeetCode相关题目"><a href="#LeetCode相关题目" class="headerlink" title="LeetCode相关题目"></a>LeetCode相关题目</h2><ul>
<li><p><strong>基本操作</strong></p>
<ul>
<li><a href="#235-二叉搜索树的最近公共祖先">235-二叉搜索树的最近公共祖先</a></li>
<li><a href="#450-删除二叉搜索树中的节点">450-删除二叉搜索树中的节点</a></li>
<li><a href="#669-修剪二叉搜索树">669-修剪二叉搜索树</a></li>
<li><a href="#700-二叉搜索树中的搜索">700-二叉搜索树中的搜索</a></li>
<li><a href="#701-二叉搜索树中的插入操作">701-二叉搜索树中的插入操作</a></li>
</ul>
</li>
<li><p><strong>基于中序遍历</strong></p>
<ul>
<li><a href="#98-验证二叉搜索树">98-验证二叉搜索树</a></li>
<li><a href="#99-恢复二叉搜索树">99-恢复二叉搜索树</a></li>
<li><a href="#230-二叉搜索树中第K小的元素">230-二叉搜索树中第K小的元素</a></li>
<li><a href="#501-二叉搜索树中的众数">501-二叉搜索树中的众数</a></li>
</ul>
</li>
</ul>
<h3 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235-二叉搜索树的最近公共祖先"></a>235-二叉搜索树的最近公共祖先</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
<p>例如，给定如下二叉搜索树:  <code>root = [6,2,8,0,4,7,9,null,null,3,5]</code></p>
<img src="/archives/5f8aadd1/235-1.png" class="" title="二叉搜索树的最近公共祖先-1">

<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>所有节点的值都是唯一的。</li>
<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>
</ul>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>最近公共子节点有可能是下面这几种情况：</p>
<img src="/archives/5f8aadd1/235-2.png" class="" title="二叉搜索树的最近公共祖先-2">

<p>具体步骤如下：</p>
<ul>
<li>从根节点开始遍历树</li>
<li>如果节点 p 和节点 q 都在右子树上，那么以右孩子为根节点继续 1 的操作</li>
<li>如果节点 p 和节点 q 都在左子树上，那么以左孩子为根节点继续 1 的操作</li>
<li>如果条件 2 和条件 3 都不成立，这就意味着我们已经找到节 p 和节点 q 的 LCA 了</li>
</ul>
<blockquote>
<p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/solution/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian--2/" target="_blank" rel="noopener external nofollow noreferrer">二叉搜索树的最近公共祖先</a></p>
</blockquote>
<h4 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h4><p>方法1：递归</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        <span class="keyword">if</span> root.val &lt; p.val <span class="keyword">and</span> root.val &lt; q.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.right,p,q)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> root.val &gt; p.val <span class="keyword">and</span> root.val &gt; q.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.left,p,q)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<p>方法2：迭代</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        cur_node = root</span><br><span class="line">        <span class="keyword">while</span> cur_node:</span><br><span class="line">            <span class="keyword">if</span> p.val &gt; cur_node.val <span class="keyword">and</span> q.val &gt; cur_node.val:</span><br><span class="line">                cur_node = cur_node.right</span><br><span class="line">            <span class="keyword">elif</span> p.val &lt; cur_node.val <span class="keyword">and</span> q.val &lt; cur_node.val:</span><br><span class="line">                cur_node = cur_node.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> cur_node</span><br></pre></td></tr></table></figure>

<h3 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450-删除二叉搜索树中的节点"></a>450-删除二叉搜索树中的节点</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>
<p>一般来说，删除节点可分为两个步骤：</p>
<ol>
<li>首先找到需要删除的节点；</li>
<li>如果找到了，删除它。</li>
</ol>
<p>说明： 要求算法时间复杂度为 O(h)，h 为树的高度。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root &#x3D; [5,3,6,2,4,null,7]</span><br><span class="line">key &#x3D; 3</span><br><span class="line"></span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  3   6</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">2   4   7</span><br></pre></td></tr></table></figure>

<p>给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。</p>
<p>一个正确的答案是 <code>[5,4,6,2,null,null,7]</code>, 如下图所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  4   6</span><br><span class="line"> &#x2F;     \</span><br><span class="line">2       7</span><br></pre></td></tr></table></figure>

<p>另一个正确答案是 <code>[5,2,6,null,4,null,7]</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  5</span><br><span class="line"> &#x2F; \</span><br><span class="line">2   6</span><br><span class="line"> \   \</span><br><span class="line">  4   7</span><br></pre></td></tr></table></figure>

<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>理解这个算法的关键在于保持 BST 中序遍历的顺序性。</p>
<p>删除一个节点会有三种情况，具体见下面的图解：</p>
<div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">流程1</a></li><li class="tab"><a href="#tab-2">流程2</a></li><li class="tab"><a href="#tab-3">流程3</a></li><li class="tab"><a href="#tab-4">流程4</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><img src="/archives/5f8aadd1/450-1.png" class="" title="删除二叉搜索树中的节点-1"></div><div class="tab-pane" id="tab-2"><img src="/archives/5f8aadd1/450-2.png" class="" title="删除二叉搜索树中的节点-2"></div><div class="tab-pane" id="tab-3"><img src="/archives/5f8aadd1/450-3.png" class="" title="删除二叉搜索树中的节点-3"></div><div class="tab-pane" id="tab-4"><img src="/archives/5f8aadd1/450-4.png" class="" title="删除二叉搜索树中的节点-4"></div></div></div>

<blockquote>
<p><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/solution/yong-qian-qu-huo-zhe-hou-ji-jie-dian-zi-shu-dai-ti/" target="_blank" rel="noopener external nofollow noreferrer">用前驱或者后继结点代替被删除结点（Python、Java 代码）</a></p>
</blockquote>
<h4 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self, root: TreeNode, key: int)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归调用左子树</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; root.val:</span><br><span class="line">            root.left = self.deleteNode(root.left, key)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归调用右子树</span></span><br><span class="line">        <span class="keyword">if</span> key &gt; root.val:</span><br><span class="line">            root.right = self.deleteNode(root.right, key)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前节点的val正好等于key</span></span><br><span class="line">        <span class="comment"># 当前节点的左子节点不存在，直接提升右子节点即可</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            new_root = root.right</span><br><span class="line">            root.right = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> new_root</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前节点的右子节点不存在，直接提升左子节点即可</span></span><br><span class="line">        <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            new_root = root.left</span><br><span class="line">            root.left = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> new_root</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前节点的左右子节点均存在，这里我用左子树中最大的点来替换</span></span><br><span class="line">        <span class="comment"># 寻找左子树中最大的点（即最右边这个节点）</span></span><br><span class="line">        node = root.left</span><br><span class="line">        <span class="keyword">while</span> node.right != <span class="literal">None</span>:</span><br><span class="line">            node = node.right</span><br><span class="line">        <span class="comment"># 左子树中最大的点变为新的根节点</span></span><br><span class="line">        new_root = TreeNode(node.val)</span><br><span class="line">        <span class="comment"># 新的根节点的左子树需要更新</span></span><br><span class="line">        new_root.left = self.removeMax(root.left)</span><br><span class="line">        <span class="comment"># 新的根节点的右子树即为原来的右子树</span></span><br><span class="line">        new_root.right = root.right</span><br><span class="line"></span><br><span class="line">        root.left = <span class="literal">None</span></span><br><span class="line">        root.right = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> new_root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeMax</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node.right == <span class="literal">None</span>:</span><br><span class="line">            new_root = node.left</span><br><span class="line">            node.left = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> new_root</span><br><span class="line">        node.right = self.removeMax(node.right)</span><br><span class="line">        <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果不把待删除节点的左右节点设置为None会怎么样？</p>
</blockquote>
<p>写这两行代码是出于面向对象的程序语言（Python 和 Java 都是）的垃圾回收机制（Garbage Collection，GC）的考虑。如果一个对象没有被其它对象引用，它会在合适的时候被垃圾回收机制回收，被垃圾回收机制回收即是真正从内存中删除了，语义上也没有必要保留这两个引用。</p>
<h3 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669-修剪二叉搜索树"></a>669-修剪二叉搜索树</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉搜索树，同时给定最小边界L 和最大边界 R。通过修剪二叉搜索树，使得所有节点的值在<code>[L, R]</code>中 (<code>R&gt;=L</code>) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  0   2</span><br><span class="line"></span><br><span class="line">  L &#x3D; 1</span><br><span class="line">  R &#x3D; 2</span><br><span class="line"></span><br><span class="line">输出: </span><br><span class="line">    1</span><br><span class="line">      \</span><br><span class="line">       2</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  0   4</span><br><span class="line">   \</span><br><span class="line">    2</span><br><span class="line">   &#x2F;</span><br><span class="line">  1</span><br><span class="line"></span><br><span class="line">  L &#x3D; 1</span><br><span class="line">  R &#x3D; 3</span><br><span class="line"></span><br><span class="line">输出: </span><br><span class="line">      3</span><br><span class="line">     &#x2F; </span><br><span class="line">   2   </span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br></pre></td></tr></table></figure>

<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>这里我用递归来进行修建：</p>
<ul>
<li>当 <code>node.val &gt; R</code>，那么修剪后的二叉树必定出现在节点的左边。</li>
<li>当 <code>node.val &lt; L</code>，那么修剪后的二叉树出现在节点的右边。</li>
<li>否则，我们将会修剪树的两边。</li>
</ul>
<h4 id="Python实现-2"><a href="#Python实现-2" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trimBST</span><span class="params">(self, root: TreeNode, L: int, R: int)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.val &gt; R:</span><br><span class="line">            <span class="keyword">return</span> self.trimBST(root.left,L,R)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root.val &lt; L:</span><br><span class="line">            <span class="keyword">return</span> self.trimBST(root.right,L,R)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.val &gt;= L <span class="keyword">and</span> root.val &lt;= R:</span><br><span class="line">            root.left = self.trimBST(root.left,L,R)</span><br><span class="line">            root.right = self.trimBST(root.right,L,R)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>


<h3 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700-二叉搜索树中的搜索"></a>700-二叉搜索树中的搜索</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p>
<p>例如，给定二叉搜索树:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    4</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   7</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   3</span><br></pre></td></tr></table></figure>

<p>和值：2</p>
<p>你应该返回如下子树:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  2     </span><br><span class="line"> &#x2F; \   </span><br><span class="line">1   3</span><br></pre></td></tr></table></figure>

<p>在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。</p>
<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>根据二叉搜索树的性质：如果val小于当前结点的值，转向其左子树继续搜索；如果val大于当前结点的值，转向其右子树继续搜索；如果已找到，则返回当前结点。如果搜索到最后仍未找到结点，则返回None。</p>
<h4 id="Python实现-3"><a href="#Python实现-3" class="headerlink" title="Python实现"></a>Python实现</h4><p>方法1：递归</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchBST</span><span class="params">(self, root: TreeNode, val: int)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> val &gt; root.val:</span><br><span class="line">            <span class="keyword">return</span> self.searchBST(root.right,val)</span><br><span class="line">        <span class="keyword">elif</span> val &lt; root.val:</span><br><span class="line">            <span class="keyword">return</span> self.searchBST(root.left,val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<p>方法2：迭代</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchBST</span><span class="params">(self, root: TreeNode, val: int)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            <span class="keyword">if</span> val &gt; root.val:</span><br><span class="line">                root = root.right</span><br><span class="line">            <span class="keyword">elif</span> val &lt; root.val:</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">elif</span> val == root.val:</span><br><span class="line">                <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h3 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701-二叉搜索树中的插入操作"></a>701-二叉搜索树中的插入操作</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。<strong>保证原始二叉搜索树中不存在新值</strong>。</p>
<p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。</p>
<p>例如，给定二叉搜索树:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    4</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   7</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   3</span><br></pre></td></tr></table></figure>

<p>和 插入的值: 5</p>
<p>你可以返回这个二叉搜索树:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     4</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     7</span><br><span class="line"> &#x2F; \   &#x2F;</span><br><span class="line">1   3 5</span><br></pre></td></tr></table></figure>

<p>或者这个树也是有效的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     5</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     7</span><br><span class="line"> &#x2F; \   </span><br><span class="line">1   3</span><br><span class="line">     \</span><br><span class="line">      4</span><br></pre></td></tr></table></figure>

<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>这里我们采用经典的插入方法，使整体操作变化最小。</p>
<ol>
<li>直接深拷贝构造新树，然后修改</li>
<li>寻找到合适的叶位置后插入新节点，这样只需要在原树的某个叶节点处延伸一个节点</li>
</ol>
<h4 id="Python实现-4"><a href="#Python实现-4" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertIntoBST</span><span class="params">(self, root: TreeNode, val: int)</span> -&gt; TreeNode:</span></span><br><span class="line">        res = copy.deepcopy(root)</span><br><span class="line">        cur_node = res</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果二叉搜索树为空树，用val构造二叉树节点作为根节点并返回</span></span><br><span class="line">        <span class="keyword">if</span> cur_node == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> TreeNode(val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur_node:</span><br><span class="line">            <span class="keyword">if</span> val &gt; cur_node.val:</span><br><span class="line">                <span class="comment"># 走向右子树</span></span><br><span class="line">                <span class="keyword">if</span> cur_node.right != <span class="literal">None</span>:</span><br><span class="line">                    cur_node = cur_node.right</span><br><span class="line">                <span class="comment"># 应该走向右子树而右子树为空，即找到了插入位置</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur_node.right = TreeNode(val)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">elif</span> val &lt; cur_node.val:</span><br><span class="line">                <span class="comment"># 走向左子树</span></span><br><span class="line">                <span class="keyword">if</span> cur_node.left != <span class="literal">None</span>:</span><br><span class="line">                    cur_node = cur_node.left</span><br><span class="line">                <span class="comment"># 应该走向左子树而左子树为空，即找到了插入位置</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur_node.left = TreeNode(val)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


<h3 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98-验证二叉搜索树"></a>98-验证二叉搜索树</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>
<p>假设一个二叉搜索树具有如下特征：</p>
<ul>
<li>节点的左子树只包含小于当前节点的数。</li>
<li>节点的右子树只包含大于当前节点的数。</li>
<li>所有左子树和右子树自身必须也是二叉搜索树。</li>
</ul>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line">输出: false</span><br><span class="line">解释: 输入为: [5,1,4,null,null,3,6]。根节点的值为 5 ，但是其右子节点值为 4</span><br></pre></td></tr></table></figure>

<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>方法1：递归</p>
<p>看到这道题目，我们首先想到遍历整棵树，检查 <code>node.right.val &gt; node.val</code> 和 <code>node.left.val &lt; node.val</code> 对每个结点是否成立。但是这种方法并不总是正确。因为<strong>不仅右子结点要大于该节点，整个右子树的元素都应该大于该节点</strong>。</p>
<p>这意味着我们需要在遍历树的同时保留结点的上界与下界，在比较时不仅比较子结点的值，也要与上下界比较。</p>
<p>方法2：中序遍历</p>
<p>中序遍历按照<code>左子树 -&gt; 结点 -&gt; 右子树</code>的顺序，这意味着一个<strong>二叉搜索树的中序遍历得到的每个元素都应该比下一个元素小</strong>。</p>
<p>具体步骤：</p>
<ol>
<li>计算中序遍历列表inorder</li>
<li>检查中序遍历列表是否从小到大</li>
</ol>
<h4 id="Python实现-5"><a href="#Python实现-5" class="headerlink" title="Python实现"></a>Python实现</h4><p>方法1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root,max_val,min_val)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> root.val &lt; max_val <span class="keyword">and</span> root.val &gt; min_val:</span><br><span class="line">                <span class="keyword">return</span> helper(root.left,root.val,min_val) <span class="keyword">and</span> helper(root.right,max_val,root.val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        max_val = float(<span class="string">'inf'</span>)</span><br><span class="line">        min_val = -float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="keyword">return</span> helper(root,max_val,min_val)</span><br></pre></td></tr></table></figure>

<p>方法2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        pre = -float(<span class="string">'inf'</span>)</span><br><span class="line">        stack = []</span><br><span class="line"></span><br><span class="line">        p_node = root</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> p_node:</span><br><span class="line">            <span class="comment"># 把所有当前访问节点的左孩子都入栈</span></span><br><span class="line">            <span class="keyword">while</span> p_node:</span><br><span class="line">                stack.append(p_node)</span><br><span class="line">                p_node = p_node.left</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 操作栈顶节点，如果是第一次运行到这步，那么这是整棵树的最左节点</span></span><br><span class="line">            cur_node = stack.pop()</span><br><span class="line">            <span class="comment"># 检查是否从小到大</span></span><br><span class="line">            <span class="keyword">if</span> cur_node.val &gt; pre:</span><br><span class="line">                pre = cur_node.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将指针指向当前节点的右节点</span></span><br><span class="line">            <span class="keyword">if</span> cur_node.right != <span class="literal">None</span>:</span><br><span class="line">                p_node = cur_node.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>


<h3 id="99-恢复二叉搜索树"><a href="#99-恢复二叉搜索树" class="headerlink" title="99-恢复二叉搜索树"></a>99-恢复二叉搜索树</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>二叉搜索树中的两个节点被错误地交换。</p>
<p>请在不改变其结构的情况下，恢复这棵树。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,3,null,null,2]</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">  &#x2F;</span><br><span class="line"> 3</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line"></span><br><span class="line">输出: [3,1,null,null,2]</span><br><span class="line"></span><br><span class="line">   3</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">  \</span><br><span class="line">   2</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,1,4,null,null,2]</span><br><span class="line"></span><br><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  2</span><br><span class="line"></span><br><span class="line">输出: [2,1,4,null,null,3]</span><br><span class="line"></span><br><span class="line">  2</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  3</span><br></pre></td></tr></table></figure>

<p>进阶:</p>
<ul>
<li>使用 O(n) 空间复杂度的解法很容易实现。</li>
<li>你能想出一个只使用常数空间的解决方案吗？</li>
</ul>
<h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>二叉搜索树中序遍历输出应该是递增的，在遍历二叉树的过程中找到不满足递增的点（即错误交换的点），交换两者的值即可。</p>
<p><strong>注意：错误交换的点在中序遍历结果中可能是相邻的，也可能是不相邻的</strong>。</p>
<ul>
<li><strong>错误交换的点是相邻的（中序遍历结果1324）</strong>：使用first和second表示错误交换的两个点，在第一次遇到不递增的情况时，将first置为3，second置为2，遍历结束后交换first与second。</li>
<li><strong>错误交换的点是不相邻的（中序遍历结果3214）</strong>：在第一次遇到不递增的情况时，将first设置为3，second设置为2，在第二次遇到不递增的情况时，只改变second，将second置为1.遍历结束后交换first与second。</li>
</ul>
<h4 id="Python实现-6"><a href="#Python实现-6" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recoverTree</span><span class="params">(self, root: TreeNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        pre = TreeNode(-float(<span class="string">'inf'</span>))</span><br><span class="line">        first_node = <span class="literal">None</span></span><br><span class="line">        second_node = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        p_node = root</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> p_node:</span><br><span class="line">            <span class="keyword">while</span> p_node:</span><br><span class="line">                stack.append(p_node)</span><br><span class="line">                p_node = p_node.left</span><br><span class="line"></span><br><span class="line">            cur_node = stack.pop()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 根据当前节点和前一个节点的值来判断节点是否错误</span></span><br><span class="line">            <span class="keyword">if</span> cur_node.val &gt; pre.val:</span><br><span class="line">                pre = cur_node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 第一次相遇</span></span><br><span class="line">                <span class="keyword">if</span> first_node == <span class="literal">None</span>:</span><br><span class="line">                    first_node = pre</span><br><span class="line">                    second_node = cur_node</span><br><span class="line">                <span class="comment"># 第二次相遇</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    second_node = cur_node</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> cur_node.right != <span class="literal">None</span>:</span><br><span class="line">                p_node = cur_node.right</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 交换两个错误交换的节点</span></span><br><span class="line">        first_node.val,second_node.val = second_node.val,first_node.val</span><br></pre></td></tr></table></figure>


<h3 id="230-二叉搜索树中第K小的元素"><a href="#230-二叉搜索树中第K小的元素" class="headerlink" title="230-二叉搜索树中第K小的元素"></a>230-二叉搜索树中第K小的元素</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。</p>
<p>说明：你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root &#x3D; [5,3,6,2,4,null,null,1], k &#x3D; 3</span><br><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">     3   6</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   4</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>

<p>进阶：如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化 kthSmallest 函数？</p>
<h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>二叉搜索树的中序遍历序列为递增序列，因此可中序遍历二叉搜索树，返回第K个元素。</p>
<h4 id="Python实现-7"><a href="#Python实现-7" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, root: TreeNode, k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 中序遍历二叉树</span></span><br><span class="line">        res = []</span><br><span class="line">        stack = []</span><br><span class="line">        p_node = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> p_node:</span><br><span class="line">            <span class="keyword">while</span> p_node:</span><br><span class="line">                stack.append(p_node)</span><br><span class="line">                p_node = p_node.left</span><br><span class="line"></span><br><span class="line">            cur_node = stack.pop()</span><br><span class="line">            res.append(cur_node.val)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur_node.right != <span class="literal">None</span>:</span><br><span class="line">                p_node = cur_node.right</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回第k个元素</span></span><br><span class="line">        <span class="keyword">return</span> res[k<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<p>我们也可以提前中止中序遍历：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, root: TreeNode, k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 中序遍历二叉树</span></span><br><span class="line">        stack = []</span><br><span class="line">        p_node = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> p_node:</span><br><span class="line">            <span class="keyword">while</span> p_node:</span><br><span class="line">                stack.append(p_node)</span><br><span class="line">                p_node = p_node.left</span><br><span class="line"></span><br><span class="line">            cur_node = stack.pop()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 返回第k个元素</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> cur_node.val</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur_node.right != <span class="literal">None</span>:</span><br><span class="line">                p_node = cur_node.right</span><br></pre></td></tr></table></figure>


<h3 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501-二叉搜索树中的众数"></a>501-二叉搜索树中的众数</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p>
<p>假定 BST 有如下定义：</p>
<ul>
<li>结点左子树中所含结点的值小于等于当前结点的值</li>
<li>结点右子树中所含结点的值大于等于当前结点的值</li>
<li>左子树和右子树都是二叉搜索树</li>
</ul>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 BST [1,null,2,2],</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   2</span><br><span class="line">返回[2].</span><br></pre></td></tr></table></figure>

<p>提示：如果众数超过1个，不需考虑输出顺序</p>
<p>进阶：你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</p>
<h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>方法1：层序遍历+字典</p>
<p>这里我用层次遍历，然后用一个字典记录每个值出现的次数，最后在字典中搜索最大值（即出现次数最多的值，也就是众数）。</p>
<p>但是这种方法用了额外的空间。</p>
<p>方法2：中序遍历</p>
<p>二叉搜索树的中序遍历是一个<strong>升序序列</strong>，逐个比对当前结点值<code>cur_node.val</code>与前驱结点值<code>pre_node.val</code>。更新当前节点值出现次数<code>curTimes</code>及最大出现次数<code>maxTimes</code>，更新规则：</p>
<ul>
<li>若<code>curTimes=maxTimes</code>，将<code>cur_node.val</code>添加到结果向量<code>res</code>中</li>
<li>若<code>curTimes&gt;maxTimes</code>，清空<code>res</code>，将<code>cur_node.val</code>添加到<code>res</code>，并更新<code>maxTimes</code>为<code>curTimes</code></li>
</ul>
<h4 id="Python实现-8"><a href="#Python实现-8" class="headerlink" title="Python实现"></a>Python实现</h4><p>方法1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        dicts = &#123;&#125;</span><br><span class="line">        queue = [root]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            length = len(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(length):</span><br><span class="line">                node = queue.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># 节点值存入字典</span></span><br><span class="line">                <span class="keyword">if</span> node.val <span class="keyword">in</span> dicts:</span><br><span class="line">                    dicts[node.val] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dicts[node.val] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算众数</span></span><br><span class="line">        max_num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,counts <span class="keyword">in</span> dicts.items():</span><br><span class="line">            <span class="keyword">if</span> counts &gt; max_num:</span><br><span class="line">                res = [i]</span><br><span class="line">                max_num = counts</span><br><span class="line">            <span class="comment"># 输出所有众数</span></span><br><span class="line">            <span class="keyword">elif</span> counts == max_num:</span><br><span class="line">                res.append(i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>方法2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        p_node = root</span><br><span class="line">        pre_node = TreeNode(float(<span class="string">'inf'</span>))</span><br><span class="line">        maxTimes = <span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> p_node:</span><br><span class="line">            <span class="comment"># 把所有当前访问节点的左孩子都入栈</span></span><br><span class="line">            <span class="keyword">while</span> p_node != <span class="literal">None</span>:</span><br><span class="line">                stack.append(p_node)</span><br><span class="line">                p_node = p_node.left</span><br><span class="line"></span><br><span class="line">            cur_node = stack.pop()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新当前节点出现次数</span></span><br><span class="line">            <span class="keyword">if</span> pre_node.val == cur_node.val:</span><br><span class="line">                curTimes += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curTimes = <span class="number">1</span></span><br><span class="line">            <span class="comment"># 最大出现次数</span></span><br><span class="line">            <span class="keyword">if</span> maxTimes == curTimes:</span><br><span class="line">                res.append(cur_node.val)</span><br><span class="line">            <span class="keyword">elif</span> maxTimes &lt; curTimes:</span><br><span class="line">                res = [cur_node.val]</span><br><span class="line">                maxTimes = curTimes</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新前驱节点</span></span><br><span class="line">            pre_node = cur_node</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur_node.right != <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 将指针指向当前节点的右节点</span></span><br><span class="line">                p_node = cur_node.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://lufficc.com/blog/binary-search-tree" target="_blank" rel="noopener external nofollow noreferrer">多动态图详细讲解二叉搜索树</a></li>
<li><a href="https://www.cnblogs.com/gaochundong/p/binary_search_tree.html" target="_blank" rel="noopener external nofollow noreferrer">二叉查找树</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题解汇总</title>
    <url>/archives/91220368.html</url>
    <content><![CDATA[<blockquote>
<p>刷 LeetCode 的最大好处就是可以锻炼解决问题的思维能力，同时大量高质量的题目可以加深我们对计算机科学中经典数据结构的深刻理解，从而可以快速用合适的数据结构去解决现实中的问题。</p>
</blockquote>
<p>本文主要汇总了我的LeetCode题解。</p>
<ul>
<li><p>算法：</p>
<ul>
<li><a href="https://tding.top/archives/fa228c3f.html">LeetCode 题目总结 - 位运算</a></li>
<li><a href="https://tding.top/archives/647f3958.html">LeetCode 题目总结 - 数组中的双指针问题</a></li>
<li>LeetCode 题目总结 - 二分查找</li>
<li><a href="https://tding.top/archives/551df4d4.html">LeetCode 题目总结 - 链表</a></li>
<li><a href="https://tding.top/archives/101cdf53.html">LeetCode 题目总结 - 二叉树</a></li>
<li><a href="https://tding.top/archives/e1014f63.html">LeetCode 题目总结 - 二叉树的遍历</a></li>
<li><a href="https://tding.top/archives/5f8aadd1.html">LeetCode 题目总结 - 二叉搜索树</a></li>
<li>LeetCode 题目总结 - 动态规划</li>
</ul>
</li>
<li><p>数据库：</p>
<ul>
<li><a href="https://tding.top/archives/32d634f4.html">LeetCode 题目总结 - SQL</a></li>
</ul>
</li>
</ul>
<a id="more"></a>

<p>其中不少题目参考了前人的解法，欢迎各位留言交流。</p>
<blockquote>
<p><a href="https://selfboot.cn/2016/07/24/leetcode_guide_why/" target="_blank" rel="noopener external nofollow noreferrer">LeetCode 刷题指南（一）：为什么要刷题</a></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
        <tag>数组</tag>
        <tag>链表</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题目总结-链表</title>
    <url>/archives/551df4d4.html</url>
    <content><![CDATA[<p>链表是一种利用不连续的内存块，通过在每块内存中存储下一块内存的指针而构造的线性存储结构，所以链表是线性表的一种形式。</p>
<p>链表问题是一种考察基本编码能力的问题，这类问题的特点是解法并不复杂，难点在于证明解法的正确性，以及如何编码。即，考察是否能编写出bug free的代码，少数会考察算法的数学证明问题。</p>
<p>很多链表的题目可以通过画图来辅助思考。</p>
<p>本文总结的链表题目主要包括以下部分：</p>
<ul>
<li><a href="#链表的基本操作类题目">链表的基本操作类题目</a></li>
<li><a href="#反转类题目">反转类题目</a></li>
<li><a href="#双指针问题">双指针问题</a></li>
<li><a href="#数学问题">数学问题</a></li>
</ul>
<a id="more"></a>

<h2 id="链表的基础知识"><a href="#链表的基础知识" class="headerlink" title="链表的基础知识"></a>链表的基础知识</h2><p>数组和链表的对比可以看：<a href="https://tding.top/archives/5c8792e.html">数组和链表的区别</a>。</p>
<h2 id="链表类题目的常用技巧"><a href="#链表类题目的常用技巧" class="headerlink" title="链表类题目的常用技巧"></a>链表类题目的常用技巧</h2><ol>
<li><strong>使用dummy node</strong>：dummy node就是在链表的head前加一个节点指向head，即<code>dummy-&gt;head</code>，可以理解成一个虚拟节点。有了dummy node就使得<strong>操作head节点与操作其他节点没有区别</strong>。特别适合用在链表的head发生变化的情况下，譬如删除或者被修改等。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">dummy.next = head</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>双指针法</strong>：对于寻找链表的某个特定位置，或者判断是否有环等问题时，可以用两个指针变量fast和slow，两个指针以不同的策略移动，直到两个指针的值相等（或其他特殊条件）为止。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">slow = head</span><br><span class="line">fast = head</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>交换节点的处理</strong>：如果需要交换两个节点的位置，对于这两个前驱节点，他们的next指针会受到影响，这两个节点本身也会受到影响，可以用以下步骤：<ul>
<li>先交换两个前驱节点的next指针的值</li>
<li>再交换这两个节点的next指针的值</li>
</ul>
</li>
</ol>
<h2 id="链表类题目测试代码"><a href="#链表类题目测试代码" class="headerlink" title="链表类题目测试代码"></a>链表类题目测试代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution()代码</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 链表生成函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_node_list</span><span class="params">(arr)</span>:</span></span><br><span class="line">    head = ListNode(arr[<span class="number">0</span>])</span><br><span class="line">    cur = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        cur.next = ListNode(arr[i])</span><br><span class="line">        cur = cur.next</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链表打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_node_list</span><span class="params">(head)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        print(head.val, <span class="string">'-&gt;'</span>, end=<span class="string">' '</span>)</span><br><span class="line">        head = head.next</span><br><span class="line">    print(<span class="string">'NULL'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    arr = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">    head = create_node_list(arr)</span><br><span class="line">    print_node_list(head)</span><br><span class="line"></span><br><span class="line">    x = Solution()</span><br><span class="line">    print_node_list(x.reorderList(head))</span><br></pre></td></tr></table></figure>

<h2 id="链表的基本操作类题目"><a href="#链表的基本操作类题目" class="headerlink" title="链表的基本操作类题目"></a>链表的基本操作类题目</h2><ul>
<li><p>删除链表中的节点</p>
<ul>
<li><a href="#203-移除链表元素">203-移除链表元素</a></li>
<li><a href="#237-删除链表中的节点">237-删除链表中的节点</a></li>
</ul>
</li>
<li><p>合并链表</p>
<ul>
<li><a href="#21-合并两个有序链表">21-合并两个有序链表</a></li>
<li><a href="#23-合并k个排序链表">23-合并k个排序链表</a></li>
</ul>
</li>
<li><p>分隔链表</p>
<ul>
<li><a href="#86-分隔链表">86-分隔链表</a></li>
</ul>
</li>
<li><p>交换链表</p>
<ul>
<li><a href="#24-两两交换链表中的节点">24-两两交换链表中的节点</a></li>
</ul>
</li>
<li><p>旋转链表</p>
<ul>
<li><a href="#61-旋转链表">61-旋转链表</a></li>
</ul>
</li>
<li><p>链表排序</p>
<ul>
<li><a href="#143-重排链表">143-重排链表</a></li>
<li><a href="#147-对链表进行插入排序">147-对链表进行插入排序</a></li>
<li><a href="#148-排序链表">148-排序链表</a></li>
</ul>
</li>
</ul>
<h3 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203-移除链表元素"></a>203-移除链表元素</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>删除链表中等于给定值 val 的所有节点。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val &#x3D; 6</span><br><span class="line">输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题目可以用双指针解决：设置两个指针，一个指针（fast）遍历原链表，另一个指针（slow）指向一个新的链表，只要当前值不等于给定值val，就把当前值添加到slow指针后面。</p>
<p>不过这个方法用到了额外的空间，有没有办法在遍历过程中原地完成移除链表元素操作？</p>
<p>如果只用一个指针遍历链表，我们会发现，当我们遍历到一个节点时，其实就无法删除这个节点了。所以如果想要删除某个节点，就必须<strong>找到这个节点的前一个节点，把前一个节点的指针改变，即指向下下一个</strong>。这样即可完成原地移除链表元素。</p>
<p>下面是一个图解：</p>
<img src="/archives/551df4d4/203-1.gif" class="" title="移除链表元素">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/solution/dong-hua-yan-shi-203-yi-chu-lian-biao-yuan-su-by-u/" target="_blank" rel="noopener external nofollow noreferrer">动画演示 203. 移除链表元素</a></p>
</blockquote>
<h4 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head: ListNode, val: int)</span> -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line"></span><br><span class="line">        p = dummy</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> p.next != <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 当前值等于val，跳过，p指针不移动</span></span><br><span class="line">            <span class="keyword">if</span> p.next.val == val:</span><br><span class="line">                p.next = p.next.next</span><br><span class="line">            <span class="comment"># 当前值不等于val，p指针后移</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = p.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>

<h3 id="237-删除链表中的节点"><a href="#237-删除链表中的节点" class="headerlink" title="237-删除链表中的节点"></a>237-删除链表中的节点</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p>
<p>现有一个链表 – <code>head = [4,5,1,9]</code>，它可以表示为:</p>
<img src="/archives/551df4d4/237.png" class="" title="删除链表中的节点">

<p>示例 1:</p>
<ul>
<li>输入: <code>head = [4,5,1,9], node = 5</code></li>
<li>输出: <code>[4,1,9]</code></li>
<li>解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 <code>4 -&gt; 1 -&gt; 9</code></li>
</ul>
<p>示例 2:</p>
<ul>
<li>输入: <code>head = [4,5,1,9], node = 1</code></li>
<li>输出: <code>[4,5,9]</code></li>
<li>解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 <code>4 -&gt; 5 -&gt; 9</code></li>
</ul>
<p>说明:</p>
<ul>
<li>链表至少包含两个节点。</li>
<li>链表中所有节点的值都是唯一的。</li>
<li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li>
<li>不要从你的函数中返回任何结果。</li>
</ul>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>由于这道题目只输入了需要删除的节点node，<strong>因此无法获取删除节点node的前一个节点pre，从而也就无法将前一个节点pre指向删除节点的下一个节点next</strong>；既然无法通过修改指针完成，那么肯定要修改链表节点的值了，所以只要将删除节点node的值和指针都改为下一个节点next的值和指针即可。</p>
<h4 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type node: ListNode</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify node in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node.val = node.next.val</span><br><span class="line">        node.next = node.next.next</span><br></pre></td></tr></table></figure>

<h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21-合并两个有序链表"></a>21-合并两个有序链表</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>

<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>这里我们可以用到<strong>归并排序</strong>的思维。</p>
<p>我们维护一个 cur 指针，我们需要做的是调整它的 next 指针。如果 l1 当前位置的值小于等于 l2 ，我们就把 l1 的值接在 cur 节点的后面同时将 l1 指针往后移一个。否则，我们对 l2 做同样的操作。不管我们将哪一个元素接在了后面，我们都把 cur 向后移一个元素。</p>
<p>在循环终止的时候， l1 和 l2 至多有一个是非空的。由于输入的两个链表都是有序的，所以不管哪个链表是非空的，它包含的所有元素都比前面已经合并链表中的所有元素都要大。这意味着我们只需要简单地将非空链表接在合并链表的后面，并返回合并链表。</p>
<h4 id="Python实现-2"><a href="#Python实现-2" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        cur = dummy</span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="literal">None</span> <span class="keyword">or</span> l2 != <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># l1链表已经取完</span></span><br><span class="line">            <span class="keyword">if</span> l1 == <span class="literal">None</span>:</span><br><span class="line">                cur.next = l2</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># l2链表已经取完</span></span><br><span class="line">            <span class="keyword">if</span> l2 == <span class="literal">None</span>:</span><br><span class="line">                cur.next = l1</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> l1.val &gt;= l2.val:</span><br><span class="line">                cur.next = ListNode(l2.val)</span><br><span class="line">                cur = cur.next</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur.next = ListNode(l1.val)</span><br><span class="line">                cur = cur.next</span><br><span class="line">                l1 = l1.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>

<h3 id="23-合并k个排序链表"><a href="#23-合并k个排序链表" class="headerlink" title="23-合并k个排序链表"></a>23-合并k个排序链表</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure>

<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>看到这道题目，我们首先会想到一个很简单粗暴的办法，就是两两合并这k个排序链表，一共需要k次合并操作。</p>
<ul>
<li>时间复杂度：<code>O(kN)</code>，其中 k 是链表的数目。</li>
</ul>
<p>然后我们可以用<strong>分而治之</strong>的思想进行优化：</p>
<ol>
<li>首先我们将 k 个链表配对并将同一对中的链表合并。两个链表的合并见第21题。</li>
<li>第一轮合并以后， k 个链表被合并成了 $\frac{k}{2}$ 个链表，平均长度为 $\frac{2N}{k}$ ，然后是 $\frac{k}{4}$ 个链表， $\frac{k}{8}$ 个链表等等。</li>
<li>重复这一过程，直到我们得到了最终的有序链表。</li>
</ol>
<p>因此，我们在每一次配对合并的过程中都会遍历几乎全部 N 个节点，并重复这一过程 $\log_2K$ 次。</p>
<ul>
<li>时间复杂度： <code>O(Nlogk)</code> ，其中 k 是链表的数目。</li>
</ul>
<img src="/archives/551df4d4/23.png" class="" title="合并k个排序链表">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/solution/he-bing-kge-pai-xu-lian-biao-by-leetcode/" target="_blank" rel="noopener external nofollow noreferrer">合并K个排序链表</a></p>
</blockquote>
<h4 id="为什么这里分治的聚合次数是log2-K-次，而不是K-1次？"><a href="#为什么这里分治的聚合次数是log2-K-次，而不是K-1次？" class="headerlink" title="为什么这里分治的聚合次数是log2(K)次，而不是K-1次？"></a>为什么这里分治的聚合次数是<code>log2(K)</code>次，而不是K-1次？</h4><p>两个链表聚合确实发生了K-1次。但是注意，题解中把 K个链表两两聚合，生成K/2个链表的过程叫一次Merging。然后这样的Merging总共发生<code>log(K)</code>次。每一次Merging需要比较的次数是N。所以总的时间复杂度是<code>O(N*log(K))</code>。这才是两两聚合和逐一聚合的本质差别。</p>
<ul>
<li><p>逐一聚合的情况下，<strong>两个聚合的链表长度会发生偏斜，其中一个链表长度越来越长</strong>。考虑最坏情况K个链表每个仅包含一个元素（N为总元素数，这里N=K)，那么逐一聚合的总复杂度就是<code>O(1+2+3+...N-1) = O(K*N)</code>. </p>
</li>
<li><p>两两聚合的情况下，仍然考虑刚才的例子，</p>
<ul>
<li>第一轮K个链表，聚合完成后剩K/2个，发生的比较次数是 <code>1 + 1 + 1 + ...+ 1 =1*K = N</code></li>
<li>第二轮K/2个链表，聚合完成后剩K/4个，发生的比较次数是(最坏情况) <code>2+2+2+ ... + 2 = 2 * K/2 = N</code></li>
<li>第三轮K/4个链表，聚合完成后剩K/8个，发生的比较次数 <code>4 + 4 + 4 + .... + 4 = 4 * K/4 = N</code></li>
<li>…..</li>
<li>最后一轮剩2个链表，比较次数 <code>K/2 + K/2 = 2* K/2 = N</code></li>
<li>总共有<code>log(K)</code>轮，总比较次数 <code>N*log(K)</code></li>
</ul>
</li>
</ul>
<h4 id="Python实现-3"><a href="#Python实现-3" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class="line">        k = len(lists)</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        interval = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 两两合并</span></span><br><span class="line">        <span class="keyword">while</span> interval &lt; k:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,k,interval*<span class="number">2</span>):</span><br><span class="line">                <span class="comment"># 最后落单的链表直接保留</span></span><br><span class="line">                <span class="keyword">if</span> i + interval &lt; k:</span><br><span class="line">                    lists[i] = self.mergeLists(lists[i],lists[i+interval])</span><br><span class="line">            interval *= <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 合并两个链表函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeLists</span><span class="params">(self,l1,l2)</span>:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        cur = dummy</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="literal">None</span> <span class="keyword">or</span> l2 != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> l1 == <span class="literal">None</span>:</span><br><span class="line">                cur.next = l2</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> l2 == <span class="literal">None</span>:</span><br><span class="line">                cur.next = l1</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                cur.next = ListNode(l1.val)</span><br><span class="line">                cur = cur.next</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur.next = ListNode(l2.val)</span><br><span class="line">                cur = cur.next</span><br><span class="line">                l2 = l2.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>

<h3 id="86-分隔链表"><a href="#86-分隔链表" class="headerlink" title="86-分隔链表"></a>86-分隔链表</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。</p>
<p>你应当保留两个分区中每个节点的初始相对位置。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: head &#x3D; 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x &#x3D; 3</span><br><span class="line">输出: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</span><br></pre></td></tr></table></figure>

<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>如果不限制使用额外的空间的话，我们可以用两个链表，一个链表放小于x的节点，一个链表放大于等于x的节点，最后，拼接这两个链表。</p>
<h4 id="Python实现-4"><a href="#Python实现-4" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head: ListNode, x: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 创建两个链表，分别保存小于x的数、大于等于x的数</span></span><br><span class="line">        cur = head</span><br><span class="line"></span><br><span class="line">        l1 = ListNode(<span class="number">0</span>)</span><br><span class="line">        l2 = ListNode(<span class="number">0</span>)</span><br><span class="line">        head1 = l1</span><br><span class="line">        head2 = l2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.val &lt; x:</span><br><span class="line">                l1.next = ListNode(cur.val)</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l2.next = ListNode(cur.val)</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            cur = cur.next</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 两个链表拼接在一起</span></span><br><span class="line">        l1.next = head2.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head1.next</span><br></pre></td></tr></table></figure>

<h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24-两两交换链表中的节点"></a>24-两两交换链表中的节点</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，<strong>两两交换其中相邻的节点</strong>，并返回交换后的链表。</p>
<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>

<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>首先建立一个dummy为哑头节点，它的next指向head。为了保证节点不丢失，我一共设置了pre、a、b三个指针，然后更新指针，完成交换。这里迭代的终止条件是<code>pre.next</code>为空或<code>pre.next.next</code>节点为空（说明后面的节点不到两个，无需交换）。</p>
<p>下面是一个图解：</p>
<img src="/archives/551df4d4/24-1.gif" class="" title="两两交换链表中的节点">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/dong-hua-yan-shi-24-liang-liang-jiao-huan-lian-bia/" target="_blank" rel="noopener external nofollow noreferrer">动画演示 24. 两两交换链表中的节点</a></p>
</blockquote>
<h4 id="Python实现-5"><a href="#Python实现-5" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 创建哑头节点</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line"></span><br><span class="line">        pre = dummy</span><br><span class="line">        a = dummy</span><br><span class="line">        b = dummy</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pre.next != <span class="literal">None</span> <span class="keyword">and</span> pre.next.next != <span class="literal">None</span>:</span><br><span class="line">            a = pre.next</span><br><span class="line">            b = pre.next.next</span><br><span class="line">            pre.next = b</span><br><span class="line">            a.next = b.next</span><br><span class="line">            b.next = a</span><br><span class="line">            pre = pre.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>

<h3 id="61-旋转链表"><a href="#61-旋转链表" class="headerlink" title="61-旋转链表"></a>61-旋转链表</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k &#x3D; 2</span><br><span class="line">输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</span><br><span class="line">向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 0-&gt;1-&gt;2-&gt;NULL, k &#x3D; 4</span><br><span class="line">输出: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL</span><br><span class="line">向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL</span><br><span class="line">向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>

<h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>链表中的点已经相连，一次旋转操作意味着：我们可以先将链表闭合成环，然后找到相应的位置断开这个环，最后确定新的链表头和链表尾。</p>
<p>具体步骤：</p>
<p>首先找到<strong>旧的尾部并将其与链表头相连</strong>（<code>cur.next = head</code>），整个链表闭合成环，同时计算出链表的长度n。然后找到新的尾部，第 <code>n - k % n - 1</code> 个节点 ，新的链表头是第 <code>n - k % n</code> 个节点。最后断开环 <code>end.next = None</code>，并返回新的链表头 <code>new_head</code>。</p>
<img src="/archives/551df4d4/61.png" class="" title="旋转链表">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/rotate-list/solution/xuan-zhuan-lian-biao-by-leetcode/" target="_blank" rel="noopener external nofollow noreferrer">旋转链表</a></p>
</blockquote>
<h4 id="Python实现-6"><a href="#Python实现-6" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> head.next == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 循环找到链表末尾</span></span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur.next != <span class="literal">None</span>:</span><br><span class="line">            cur = cur.next</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 链表末尾连接到链表头</span></span><br><span class="line">        cur.next = head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环找到链表第k个节点（拆分处）</span></span><br><span class="line">        end = head</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(n-k%n<span class="number">-1</span>):</span><br><span class="line">            end = end.next</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 断开第k个节点</span></span><br><span class="line">        new_head = end.next</span><br><span class="line">        end.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_head</span><br></pre></td></tr></table></figure>

<h3 id="143-重排链表"><a href="#143-重排链表" class="headerlink" title="143-重排链表"></a>143-重排链表</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个单链表 L：<code>L0→L1→…→Ln-1→Ln</code>，将其重新排列后变为： <code>L0→Ln→L1→Ln-1→L2→Ln-2→…</code></p>
<p>你不能只是单纯的改变节点内部的值，而是需要<strong>实际的进行节点交换</strong>。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>

<h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>先将链表拆分成前后两半A和B。后一半B逆转成C。再将A和C交叉合并。</p>
<p>例如：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code>拆分成：<code>A=1-&gt;2-&gt;3</code>，<code>B=4-&gt;5</code>。然后把B逆转成<code>C=5-&gt;4</code>。最后A和C交叉合并成<code>D=1-&gt;5-&gt;2-&gt;4-&gt;3</code>。</p>
<h4 id="Python实现-7"><a href="#Python实现-7" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderList</span><span class="params">(self, head: ListNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify head in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找到中间节点</span></span><br><span class="line">        slow = head</span><br><span class="line">        fast = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast.next != <span class="literal">None</span> <span class="keyword">and</span> fast.next.next != <span class="literal">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 从中间拆分成两个链表</span></span><br><span class="line">        a = head</span><br><span class="line">        b = slow.next</span><br><span class="line">        slow.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反转链表B得到C</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        cur = b</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            temp = cur.next</span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line">        c = pre</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 交叉合并A、C得到D</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        d = dummy</span><br><span class="line">        <span class="keyword">while</span> a != <span class="literal">None</span> <span class="keyword">or</span> c != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> a != <span class="literal">None</span>:</span><br><span class="line">                d.next = a</span><br><span class="line">                d = d.next</span><br><span class="line">                a = a.next</span><br><span class="line">            <span class="keyword">if</span> c != <span class="literal">None</span>:</span><br><span class="line">                d.next = c</span><br><span class="line">                d = d.next</span><br><span class="line">                c = c.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>

<h4 id="147-对链表进行插入排序"><a href="#147-对链表进行插入排序" class="headerlink" title="147-对链表进行插入排序"></a>147-对链表进行插入排序</h4><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>对链表进行插入排序。</p>
<img src="/archives/551df4d4/147-1.gif" class="" title="对链表进行插入排序">

<p>插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。</p>
<p>插入排序算法：</p>
<ol>
<li>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</li>
<li>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</li>
<li>重复直到所有输入数据插入完为止。</li>
</ol>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3-&gt;4</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -1-&gt;5-&gt;3-&gt;4-&gt;0</span><br><span class="line">输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>

<h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>按照插入排序的方法，只是这里每个数都是从链表的前面开始一个个比较。</p>
<h4 id="Python实现-8"><a href="#Python实现-8" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertionSortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 创建哑头节点（pre是一个新的链表）</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        pre = dummy</span><br><span class="line"></span><br><span class="line">        cur = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 保留cur.next的指针</span></span><br><span class="line">            temp = cur.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 链表中当前位置的数小于待插入的数，当前位置后移</span></span><br><span class="line">            <span class="keyword">while</span> pre.next != <span class="literal">None</span> <span class="keyword">and</span> pre.next.val &lt; cur.val:</span><br><span class="line">                pre = pre.next</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 已确定插入位置，完成插入</span></span><br><span class="line">            cur.next = pre.next</span><br><span class="line">            pre.next = cur</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># pre、cur改变（为下一次循环做准备）</span></span><br><span class="line">            cur = temp</span><br><span class="line">            pre = dummy</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>

<p><strong>注意：结果链表pre是一个以dummy为首节点的新链表，跟原来的链表没关系</strong>。</p>
<h3 id="148-排序链表"><a href="#148-排序链表" class="headerlink" title="148-排序链表"></a>148-排序链表</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p>在 <code>O(n log n)</code> 时间复杂度和常数级空间复杂度下，对链表进行排序。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3-&gt;4</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -1-&gt;5-&gt;3-&gt;4-&gt;0</span><br><span class="line">输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>

<h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><p>我这里用归并排序实现链表的排序。采用的是递归方法。</p>
<p>通过递归实现链表归并排序，有以下两个环节：</p>
<ol>
<li><p>分割、排序环节：首先找到当前链表中点，并从中点将链表断开，以便在下次递归分割排序时，链表片段拥有正确边界：</p>
<ul>
<li>我们使用 fast,slow 快慢双指针法，奇数个节点找到中点，偶数个节点找到中心左边的节点。</li>
<li>找到中点 slow 后，执行 <code>slow.next = None</code> 将链表切断。</li>
<li>递归分割时，输入<strong>当前链表左端点head</strong>和<strong>中心节点 slow 的下一个节点mid</strong>（因为链表是从 slow 切断的）。</li>
<li>递归终止条件：当<code>head.next == None</code>时，说明只有一个节点了，直接返回此节点。</li>
</ul>
</li>
<li><p>合并环节：我们将两个排序链表合并，转化为一个排序链表。这个过程跟第21题是一样的。</p>
</li>
</ol>
<img src="/archives/551df4d4/148-1.png" class="" title="排序链表">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/sort-list/solution/sort-list-gui-bing-pai-xu-lian-biao-by-jyd/" target="_blank" rel="noopener external nofollow noreferrer">Sort List （归并排序链表）</a></p>
</blockquote>
<h4 id="Python实现-9"><a href="#Python实现-9" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> head.next == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 双指针寻找链表中点</span></span><br><span class="line">        slow = head</span><br><span class="line">        fast = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast.next != <span class="literal">None</span> <span class="keyword">and</span> fast.next.next != <span class="literal">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 中点处切断链表，得到两个链表</span></span><br><span class="line">        mid = slow.next</span><br><span class="line">        slow.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        l1 = self.sortList(head)</span><br><span class="line">        l2 = self.sortList(mid)</span><br><span class="line">        <span class="keyword">return</span> self.merge(l1,l2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        cur = dummy</span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="literal">None</span> <span class="keyword">or</span> l2 != <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># l1链表已经取完</span></span><br><span class="line">            <span class="keyword">if</span> l1 == <span class="literal">None</span>:</span><br><span class="line">                cur.next = l2</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># l2链表已经取完</span></span><br><span class="line">            <span class="keyword">if</span> l2 == <span class="literal">None</span>:</span><br><span class="line">                cur.next = l1</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> l1.val &gt;= l2.val:</span><br><span class="line">                cur.next = ListNode(l2.val)</span><br><span class="line">                cur = cur.next</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur.next = ListNode(l1.val)</span><br><span class="line">                cur = cur.next</span><br><span class="line">                l1 = l1.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>

<p>注意：递归调用函数将带来<code>O(logn)</code>的空间复杂度，因此若希望达到O(1)空间复杂度，则不能使用递归。</p>
<h2 id="反转类题目"><a href="#反转类题目" class="headerlink" title="反转类题目"></a>反转类题目</h2><p>单向链表的反转是一个非常常见的链表类面试题。</p>
<p>最简单易懂的办法就是使用一个<strong>数组</strong>来存储链表中的结点信息，比如结点的数据值等，之后根据题目要求对数组进行相关操作后，再重新把数组元素做为每一个结点连接成链表返回。<strong>但是这种办法空间复杂度达到了 O(n)</strong>，为了保证O(1)的空间复杂度，<strong>我们需要在原单链表的数据结构上，进行单链表反转</strong>，我们可以使用迭代或者递归完成。</p>
<ul>
<li>迭代：从前往后依次处理，直到循环到链尾</li>
<li>递归：先一直迭代到链尾，也就是递归基判断的准则，然后再逐层返回处理到开头</li>
</ul>
<p>下面是几个常见的题目：</p>
<ul>
<li><a href="#206-反转链表">206-反转链表</a></li>
<li><a href="#92-反转链表ii">92-反转链表ii</a></li>
<li><a href="#25-k个一组翻转链表">25-k个一组翻转链表</a></li>
</ul>
<h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206-反转链表"></a>206-反转链表</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p>反转一个单链表。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>

<p>进阶:你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>
<h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><p>举例而言，现在我们有一个三个不同结点组成的链表 <code>A → B → C</code>，需要反转结点中的链接成为 <code>A ← B ← C</code>。</p>
<p>假设我们有两个指针，一个指向结点 A，一个指向结点 B。 分别记为 pre 和 cur。则可以用这两个指针简单地实现 A 和 B 之间的链接反转：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cur.next = pre</span><br></pre></td></tr></table></figure>

<p>这样做唯一的问题是，没有办法继续下去，换而言之，这样做之后就无法再访问到结点 C。因此，我们需要引入第三个指针，用于帮助反转过程的进行。因此，我们不采用上面的反转方法，而是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = cur.next</span><br><span class="line">cur.next = pre</span><br><span class="line">pre = cur</span><br><span class="line">cur = temp</span><br></pre></td></tr></table></figure>

<p><strong>迭代</strong>地进行上述过程，即可完成问题的要求。</p>
<h4 id="Python实现-10"><a href="#Python实现-10" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        cur = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            temp = cur.next</span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure>

<p>这里要注意下，pre初始设置为None，保证了<strong>最后反转过来的链表最后指向的是None</strong>。</p>
<ul>
<li>时间复杂度：O(n)。</li>
<li>空间复杂度：O(1)。</li>
</ul>
<h3 id="92-反转链表ii"><a href="#92-反转链表ii" class="headerlink" title="92-反转链表ii"></a>92-反转链表ii</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p>反转从位置 m 到 n 的链表。请使用<strong>一趟扫描</strong>完成反转。</p>
<p>说明:<code>1 ≤ m ≤ n ≤ 链表长度</code>。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m &#x3D; 2, n &#x3D; 4</span><br><span class="line">输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br></pre></td></tr></table></figure>

<h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><p>我们需要两个指针 pre 和 cur。pre 指针初始化为 None，cur 指针初始化为链表的 head。然后我们同时向前推进 cur 指针，prev 指针跟随其后，直到 cur 指针到达从链表头起的第 m 个结点。这就是我们反转链表的起始位置。</p>
<p>这时候我们要<strong>引入两个额外指针</strong>，分别称为 tail 和 con。tail 指针指向从链表头起的第m个结点，此结点是反转后链表的尾部，故称为 tail。con 指针指向第 m 个结点的前一个结点，此结点是新链表的头部。tail 和 con 指针将在算法最后被调用，用于完成链表反转。</p>
<p>当 cur 指针抵达第 m 个结点后，迭代地反转链接，直到完成指向第 n 个结点的链接。此时，pre 指针会指向第 n 个结点。</p>
<p>这时候，我们使用 con 指针来连接 pre 指针，类似地，我们利用 tail 指针来连接 pre 指针之后的结点（第 n+1 个结点）。</p>
<p>下面是一个例子，给定一个链表 <code>7 → 9 → 2 → 10 → 1 → 8 → 6</code>，我们需要反转从第 3 个结点到第 6 个结点的子链表。具体过程如下：</p>
<img src="/archives/551df4d4/92-1.png" class="" title="反转链表ii-1">

<p>从上图可以看到迭代法的前几步。第一步展示了两个指针的初始化，第三步显示链表到达了反转过程的初始位置。</p>
<img src="/archives/551df4d4/92-2.png" class="" title="反转链表ii-2">

<p>上图详细显示了链接反转的过程以及反转两个结点的链接后如何向前移动。如下图所示，本步骤将执行多次。</p>
<img src="/archives/551df4d4/92-3.png" class="" title="反转链表ii-3">
<img src="/archives/551df4d4/92-4.png" class="" title="反转链表ii-4">

<p>如上图所示, 两个指针都已经到达最终位置。我们完成了子链表的反转工作。然而，还有一些链接需要调整。下图展示了利用 tail 和 con 指针完成链接调整的过程。</p>
<img src="/archives/551df4d4/92-5.png" class="" title="反转链表ii-5">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/fan-zhuan-lian-biao-ii-by-leetcode/" target="_blank" rel="noopener external nofollow noreferrer">反转链表II</a></p>
</blockquote>
<h4 id="Python实现-11"><a href="#Python实现-11" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head: ListNode, m: int, n: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 初始化pre、cur</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        cur = head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cur 指针抵达第 m 个结点</span></span><br><span class="line">        <span class="keyword">while</span> m &gt; <span class="number">1</span>:</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.next</span><br><span class="line">            m -= <span class="number">1</span></span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化con、tail</span></span><br><span class="line">        con = pre</span><br><span class="line">        tail = cur</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 链表反转</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            temp = cur.next</span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># con、tail链接调整</span></span><br><span class="line">        <span class="keyword">if</span> con:</span><br><span class="line">            con.next = pre</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head = pre</span><br><span class="line">        tail.next = cur</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>

<h3 id="25-k个一组翻转链表"><a href="#25-k个一组翻转链表" class="headerlink" title="25-k个一组翻转链表"></a>25-k个一组翻转链表</h3><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p>
<p>k 是一个正整数，它的值小于或等于链表的长度。</p>
<p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
<p>示例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5</span><br><span class="line"></span><br><span class="line">当 k &#x3D; 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5</span><br><span class="line"></span><br><span class="line">当 k &#x3D; 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>你的算法只能使用常数的额外空间。</li>
<li>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</li>
</ul>
<h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><p>具体步骤如下：</p>
<ol>
<li>链表分区为已翻转部分+待翻转部分+未翻转部分。</li>
<li>每次翻转前，要确定翻转链表的范围，这个必须通过 k 次循环来确定，需记录翻转链表前驱（代码中的<code>l_old</code>，下图的<code>pre</code>）和后继（代码中的<code>l_new</code>，下图的<code>next</code>），方便翻转完成后把已翻转部分和未翻转部分连接起来。同时，k个一组的链表的头和尾我用<code>start</code>和<code>end</code>表示，<code>start</code>初始位于k个链表的第一个，而<code>end</code>初始位于其前驱。</li>
<li>经过k次循环，end 到达末尾，记录待翻转链表的后继 <code>l_new = end.next</code>，并把end断开，如下图第四行。</li>
<li>反转链表。</li>
<li>然后将三部分链表连接起来，然后重置 <code>l_old</code>（下图的<code>pre</code>） 和 <code>end</code> 指针，然后进入下一次循环。</li>
</ol>
<img src="/archives/551df4d4/25-1.png" class="" title="k个一组翻转链表">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/solution/tu-jie-kge-yi-zu-fan-zhuan-lian-biao-by-user7208t/" target="_blank" rel="noopener external nofollow noreferrer">图解k个一组翻转链表</a></p>
</blockquote>
<h4 id="Python实现-12"><a href="#Python实现-12" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line"></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line"></span><br><span class="line">        l_old = dummy</span><br><span class="line">        end = dummy</span><br><span class="line">        start = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># k次循环，end到达一组的末尾</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(k):</span><br><span class="line">                end = end.next</span><br><span class="line">                <span class="keyword">if</span> end == <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 链表到达末尾（剩余不够k个）</span></span><br><span class="line">            <span class="keyword">if</span> end == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 分割开后面的链表</span></span><br><span class="line">            l_new = end.next</span><br><span class="line">            end.next = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 反转这k个链表（返回的是反转后的头节点）</span></span><br><span class="line">            temp = self.reverse(start)</span><br><span class="line">            <span class="comment"># 前面部分已反转完成的链表接上这个头节点</span></span><br><span class="line">            l_old.next = temp</span><br><span class="line">            <span class="comment"># 更新这几个指针</span></span><br><span class="line">            l_old = start</span><br><span class="line">            end = start</span><br><span class="line">            start.next = l_new</span><br><span class="line">            start = start.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反转链表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        pre = dummy</span><br><span class="line">        cur = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            temp = cur.next</span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure>



<h2 id="双指针问题"><a href="#双指针问题" class="headerlink" title="双指针问题"></a>双指针问题</h2><p>双指针算法，就是指的是在遍历的过程中，不是普通的使用单个指针进行循环访问，而是使用两个<strong>相同方向</strong>或者<strong>相反方向</strong>的指针进行扫描，从而达到相应的目的。</p>
<p>链表题目主要用的是相同方向的双指针，也就是快慢指针。快慢指针是两个指针从同一侧开始遍历数组，将这两个指针分别定义为快指针（fast）和慢指针（slow），两个指针以不同的策略移动，直到两个指针的值相等（或其他特殊条件）为止，如 fast 每次增长两个，slow 每次增长一个。</p>
<p>下面是几个常见的题目：</p>
<ul>
<li><a href="#19-删除链表的倒数第N个节点">19-删除链表的倒数第N个节点</a></li>
<li><a href="#83-删除排序链表中的重复元素">83-删除排序链表中的重复元素</a></li>
<li><a href="#82-删除排序链表中的重复元素ii">82-删除排序链表中的重复元素ii</a></li>
<li><a href="#141-环形链表">141-环形链表</a></li>
<li><a href="#142-环形链表ii">142-环形链表ii</a></li>
<li><a href="#234-回文链表">234-回文链表</a></li>
<li><a href="#328-奇偶链表">328-奇偶链表</a></li>
</ul>
<h3 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19-删除链表的倒数第N个节点"></a>19-删除链表的倒数第N个节点</h3><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n &#x3D; 2.</span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure>

<p>说明：给定的 n 保证是有效的。</p>
<p>进阶：你能尝试使用<strong>一趟扫描</strong>实现吗？</p>
<h4 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h4><p>首先我们将添加一个哑结点作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。</p>
<p>我们可以使用两个指针而不是一个指针。第一个指针从列表的开头向前移动 n+1 步，而第二个指针将从列表的开头出发。现在，这两个指针被 n 个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第 n 个结点。我们重新链接第二个指针所引用的结点的 next 指针指向该结点的下下个结点。</p>
<img src="/archives/551df4d4/19-1.png" class="" title="删除链表的倒数第N个节点">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-by-l/" target="_blank" rel="noopener external nofollow noreferrer">删除链表的倒数第N个节点</a></p>
</blockquote>
<h4 id="Python实现-13"><a href="#Python实现-13" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head: ListNode, n: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 设置哑头节点，简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        slow = dummy</span><br><span class="line">        fast = dummy</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 快指针先走n+1步</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">            fast = fast.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 两个指针一起移动，直到快指针到达None</span></span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除慢指针指向的节点，也就是倒数第n个节点</span></span><br><span class="line">        slow.next = slow.next.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>


<h3 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83-删除排序链表中的重复元素"></a>83-删除排序链表中的重复元素</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p>
<p>示例 1:</p>
<ul>
<li>输入: <code>1-&gt;1-&gt;2</code></li>
<li>输出: <code>1-&gt;2</code></li>
</ul>
<p>示例 2:</p>
<ul>
<li>输入: <code>1-&gt;1-&gt;2-&gt;3-&gt;3</code></li>
<li>输出: <code>1-&gt;2-&gt;3</code></li>
</ul>
<h4 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h4><p>我首先想到可以把链表中的元素放入到一个集合set中，然后从头开始循环往下找，如果下一个结点的值在集合中出现过，那么更改当前结点的next指针，跳出下一个结点。</p>
<p>但是这样就没有用到<strong>输入的链表已排序</strong>这个条件。</p>
<p>其实我们可以<strong>将结点的值与它之后的结点进行比较来确定它是否为重复结点</strong>。如果它是重复的，我们更改当前结点的 next 指针，以便它跳过下一个结点并直接指向下一个结点之后的结点。</p>
<h4 id="Python实现-14"><a href="#Python实现-14" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        </span><br><span class="line">        current = head</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> current != <span class="literal">None</span> <span class="keyword">and</span> current.next != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> current.val == current.next.val:</span><br><span class="line">                current.next = current.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>


<h3 id="82-删除排序链表中的重复元素ii"><a href="#82-删除排序链表中的重复元素ii" class="headerlink" title="82-删除排序链表中的重复元素ii"></a>82-删除排序链表中的重复元素ii</h3><h4 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 <strong>没有重复出现</strong> 的数字。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">输出: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class="line">输出: 2-&gt;3</span><br></pre></td></tr></table></figure>

<h4 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h4><p>为了避免开头就出现重复数字，因此先加空头。</p>
<p>这里采用快慢指针，用快指针跳过那些有重复数组，慢指针负责和快指针拼接。</p>
<p>下面是一个图解：</p>
<img src="/archives/551df4d4/82.jpg" class="" title="删除排序链表中的重复元素ii">

<blockquote>
<p>来源：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/xun-huan-jie-fa-jian-dan-gao-xiao-tu-jie-by-wu-yan/" target="_blank" rel="noopener external nofollow noreferrer">循环解法，简单高效，图解</a></p>
</blockquote>
<h4 id="Python实现-15"><a href="#Python实现-15" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建空头</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        pre = dummy</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 循环判断</span></span><br><span class="line">        cur = head</span><br><span class="line">        is_duplicate = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span> <span class="keyword">and</span> cur.next != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.val == cur.next.val:</span><br><span class="line">                is_duplicate = <span class="literal">True</span></span><br><span class="line">                cur = cur.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> is_duplicate:</span><br><span class="line">                    cur = cur.next</span><br><span class="line">                    is_duplicate = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 这里要新建一个ListNode，而不是直接pre.next = cur</span></span><br><span class="line">                    pre.next = ListNode(cur.val)</span><br><span class="line">                    pre = pre.next</span><br><span class="line">                    cur = cur.next</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 链表最后一个数处理</span></span><br><span class="line">        <span class="keyword">if</span> is_duplicate == <span class="literal">False</span>:</span><br><span class="line">            pre.next = ListNode(cur.val)</span><br><span class="line">            pre = pre.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>


<h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141-环形链表"></a>141-环形链表</h3><h4 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，判断链表中是否有环。</p>
<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<img src="/archives/551df4d4/141-1.png" class="" title="环形链表-1">

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<img src="/archives/551df4d4/141-2.png" class="" title="环形链表-2">

<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure>

<img src="/archives/551df4d4/141-3.png" class="" title="环形链表-3">

<p>进阶：你能用 O(1)（即，常量）内存解决此问题吗？</p>
<h4 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h4><p>环形链表，即原本末尾的节点的 next 指针，指向了链表的任意一个节点，形成了一个闭环。在这种环形链表中，遍历时会停不下来，因为在环中会一直循环，这是它的特点。</p>
<p>我们设置两个指针：慢指针和快指针，慢指针每次移动一步，而快指针每次移动两步。我们可以把慢指针和快指针想象成两个在环形赛道上跑步的运动员（分别称之为慢跑者与快跑者）。而快跑者最终一定会追上慢跑者。</p>
<p>而如果列表中不存在环，最终快指针将会最先到达尾部，此时我们可以返回 false。</p>
<h4 id="Python实现-16"><a href="#Python实现-16" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line"></span><br><span class="line">        slow = dummy</span><br><span class="line">        fast = dummy</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast.next != <span class="literal">None</span> <span class="keyword">and</span> fast.next.next != <span class="literal">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="keyword">if</span> slow == fast:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>


<h3 id="142-环形链表ii"><a href="#142-环形链表ii" class="headerlink" title="142-环形链表ii"></a>142-环形链表ii</h3><h4 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>
<p>说明：不允许修改给定的链表。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出：tail connects to node index 1</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<img src="/archives/551df4d4/141-1.png" class="" title="环形链表-1">

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">输出：tail connects to node index 0</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<img src="/archives/551df4d4/141-2.png" class="" title="环形链表-2">

<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">输出：no cycle</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure>

<img src="/archives/551df4d4/141-3.png" class="" title="环形链表-3">

<h4 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h4><p>首先我们设两指针 fast，slow 指向链表头部 head，fast 每轮走 2 步，slow 每轮走 1 步。</p>
<ul>
<li>如果fast指针走到链表末端，说明链表无环，直接返回 null。</li>
<li>如果有环的话，两指针一定会相遇。</li>
</ul>
<p>设链表共有 a+b 个节点，其中 <strong>链表头部到链表入口</strong> 有 a 个节点（不计链表入口节点）， <strong>链表环</strong> 有 b 个节点，两指针分别走了 f，s 步。</p>
<img src="/archives/551df4d4/142-1.png" class="" title="环形链表ii-1">

<p>当两指针在环中<strong>第一次相遇</strong>时，fast与slow走过的步数关系如下：</p>
<ul>
<li>fast 走的步数是slow步数的 2 倍，即 <code>f = 2s</code></li>
<li>fast 比 slow多走了 n 个环的长度，即 <code>f = s + nb</code>（双指针都走过 a 步，然后在环内绕圈直到重合，重合时 fast 比 slow 多走 <strong>环的长度的整数倍</strong>）</li>
</ul>
<p>以上两式相减得：<code>f = 2nb</code>，<code>s = nb</code>，即fast和slow指针分别走了2n、n个<strong>环的周长</strong></p>
<img src="/archives/551df4d4/142-2.png" class="" title="环形链表ii-2">

<img src="/archives/551df4d4/142-3.png" class="" title="环形链表ii-3">

<p>双指针第二次相遇：</p>
<p>我们会发现，所有<strong>走到链表入口节点时的步数</strong>是：<code>a+nb</code>（先走 a 步到入口节点，之后每绕 1 圈环都会再次到入口节点）。而目前，slow 指针走过的步数为 nb 步。<strong>因此，我们只要想办法让 slow 再走 a 步停下来，就可以到环的入口</strong>。但是我们不知道 a 的值，该怎么办？</p>
<p>我们依然可以使用双指针法。我们可以在<strong>链表头部head</strong>构建一个指针，此指针和slow一起向前走 a 步后，两者在入口节点重合。</p>
<img src="/archives/551df4d4/142-4.png" class="" title="环形链表ii-4">

<img src="/archives/551df4d4/142-5.png" class="" title="环形链表ii-5">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/linked-list-cycle-ii-kuai-man-zhi-zhen-shuang-zhi-/" target="_blank" rel="noopener external nofollow noreferrer">环形链表 II（双指针法，清晰图解）</a></p>
</blockquote>
<h4 id="Python实现-17"><a href="#Python实现-17" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        slow = dummy</span><br><span class="line">        fast = dummy</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 链表无环</span></span><br><span class="line">            <span class="keyword">if</span> fast.next == <span class="literal">None</span> <span class="keyword">or</span> fast.next.next == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="comment"># 双指针第一次相遇</span></span><br><span class="line">            <span class="keyword">if</span> slow == fast:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构造第二次相遇</span></span><br><span class="line">        fast = dummy</span><br><span class="line">        <span class="keyword">while</span> slow != fast:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>


<h3 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234-回文链表"></a>234-回文链表</h3><h4 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h4><p>请判断一个链表是否为回文链表。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>进阶：你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p>
<h4 id="思路-18"><a href="#思路-18" class="headerlink" title="思路"></a>思路</h4><p>这道题目可以用快慢指针+反转链表解决。</p>
<ol>
<li>使用快慢指针找到链表的中间位置，然后将链表分为两个部分</li>
<li>反转后半部分链表</li>
<li>逐一对比前后两部分链表</li>
</ol>
<p>注意：如果链表长度是偶数的话，前半部分和后半部分长度是一样的。如果链表长度是奇数，那么前半部分的长度比后半部分长度多1个，<strong>所以最后迭代链表的时候，以后半部分为准就可以了，当链表总长为奇数时，前半部分的最后一个节点就不会被遍历到了</strong>。</p>
<h4 id="Python实现-18"><a href="#Python实现-18" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 快慢指针求得链表中点</span></span><br><span class="line">        slow = head</span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> fast.next != <span class="literal">None</span> <span class="keyword">and</span> fast.next.next != <span class="literal">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        <span class="comment"># 中点处断开</span></span><br><span class="line">        cur = slow.next</span><br><span class="line">        slow.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反转后半个链表</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            temp = cur.next</span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断两个链表是否是回文链表</span></span><br><span class="line">        l1 = head</span><br><span class="line">        l2 = pre</span><br><span class="line">        <span class="keyword">while</span> l2 != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> l2.val != l1.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            l2 = l2.next</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="328-奇偶链表"><a href="#328-奇偶链表" class="headerlink" title="328-奇偶链表"></a>328-奇偶链表</h3><h4 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p>
<p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL </span><br><span class="line">输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure>

<p>说明：应当保持奇数节点和偶数节点的相对顺序。链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</p>
<h4 id="思路-19"><a href="#思路-19" class="headerlink" title="思路"></a>思路</h4><p>我们可以利用两个指针完成分离：第一个指针odd连接奇数位结点，第二个指针even连接偶数位结点。分离结束后将odd段链表的尾指针指向even链表的head（即<code>evenHead</code>）。</p>
<img src="/archives/551df4d4/328-1.png" class="" title="奇偶链表">

<blockquote>
<p><a href="https://leetcode-cn.com/problems/odd-even-linked-list/solution/shuang-zhi-zhen-c-by-bai-yue-guang/" target="_blank" rel="noopener external nofollow noreferrer">双指针(c++)</a></p>
</blockquote>
<h4 id="Python实现-19"><a href="#Python实现-19" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oddEvenList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 特殊情况处理</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span> <span class="keyword">or</span> head.next == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 奇偶指针初始化</span></span><br><span class="line">        odd = head</span><br><span class="line">        even = head.next</span><br><span class="line">        evenHead = even</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 奇偶指针分离</span></span><br><span class="line">        <span class="keyword">while</span> even != <span class="literal">None</span> <span class="keyword">and</span> even.next != <span class="literal">None</span>:</span><br><span class="line">            odd.next = odd.next.next</span><br><span class="line">            odd = odd.next</span><br><span class="line">            even.next = even.next.next</span><br><span class="line">            even = even.next</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 奇数链表的尾指针指向偶数链表的头指针</span></span><br><span class="line">        odd.next = evenHead</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>



<h2 id="数学问题"><a href="#数学问题" class="headerlink" title="数学问题"></a>数学问题</h2><p>这部分包括一些非常典型的数学基本操作和链表基本操作题。</p>
<ul>
<li><a href="#2-两数相加">2-两数相加</a></li>
</ul>
<h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2-两数相加"></a>2-两数相加</h3><h4 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 &#x3D; 807</span><br></pre></td></tr></table></figure>

<h4 id="思路-20"><a href="#思路-20" class="headerlink" title="思路"></a>思路</h4><ol>
<li>我们可以将两个链表看成是相同长度的进行遍历，如果一个链表较短则在前面补 0，比如 <code>987 + 23 = 987 + 023 = 1010</code></li>
<li>每一位计算需要考虑上一位的进位问题，而当前位计算结束后同样需要更新进位值</li>
<li>如果两个链表全部遍历完毕后，进位值为 1，则在新链表最前方添加节点 1</li>
</ol>
<div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">流程1</a></li><li class="tab"><a href="#tab-2">流程2</a></li><li class="tab"><a href="#tab-3">流程3</a></li><li class="tab"><a href="#tab-4">流程4</a></li><li class="tab"><a href="#tab-5">流程5</a></li><li class="tab"><a href="#tab-6">流程6</a></li><li class="tab"><a href="#tab-7">流程7</a></li><li class="tab"><a href="#tab-8">流程8</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><img src="/archives/551df4d4/2-1.png" class="" title="两数相加-1"></div><div class="tab-pane" id="tab-2"><img src="/archives/551df4d4/2-2.png" class="" title="两数相加-2"></div><div class="tab-pane" id="tab-3"><img src="/archives/551df4d4/2-3.png" class="" title="两数相加-3"></div><div class="tab-pane" id="tab-4"><img src="/archives/551df4d4/2-4.png" class="" title="两数相加-4"></div><div class="tab-pane" id="tab-5"><img src="/archives/551df4d4/2-5.png" class="" title="两数相加-5"></div><div class="tab-pane" id="tab-6"><img src="/archives/551df4d4/2-6.png" class="" title="两数相加-6"></div><div class="tab-pane" id="tab-7"><img src="/archives/551df4d4/2-7.png" class="" title="两数相加-7"></div><div class="tab-pane" id="tab-8"><img src="/archives/551df4d4/2-8.png" class="" title="两数相加-8"></div></div></div>

<blockquote>
<p><a href="https://leetcode-cn.com/problems/add-two-numbers/solution/hua-jie-suan-fa-2-liang-shu-xiang-jia-by-guanpengc/" target="_blank" rel="noopener external nofollow noreferrer">画解算法：2. 两数相加</a></p>
</blockquote>
<h4 id="Python实现-20"><a href="#Python实现-20" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 初始化结果链表</span></span><br><span class="line">        cur = ListNode(<span class="number">0</span>)</span><br><span class="line">        head = cur</span><br><span class="line">        </span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l1 != <span class="literal">None</span> <span class="keyword">or</span> l2 != <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 如果一个链表较短则在前面补0</span></span><br><span class="line">            <span class="keyword">if</span> l1 == <span class="literal">None</span>:</span><br><span class="line">                x1 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x1 = l1.val</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">if</span> l2 == <span class="literal">None</span>:</span><br><span class="line">                x2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x2 = l2.val</span><br><span class="line">                l2 = l2.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 每一位计算的同时需要考虑上一位的进位问题，而当前位计算结束后同样需要更新进位值</span></span><br><span class="line">            sums = (x1 + x2 + carry)%<span class="number">10</span></span><br><span class="line">            carry = (x1 + x2 + carry)//<span class="number">10</span></span><br><span class="line">            cur.next = ListNode(sums)</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果两个链表全部遍历完毕后，进位值为 1，则在新链表最前方添加节点 1</span></span><br><span class="line">        <span class="keyword">if</span> carry == <span class="number">1</span>:</span><br><span class="line">            cur.next = ListNode(carry)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5d3d0cf4e51d4510624f98ba" target="_blank" rel="noopener external nofollow noreferrer">leetcode链表问题汇总与解题思路总结</a></li>
<li><a href="https://blog.csdn.net/qqxx6661/article/details/77518876" target="_blank" rel="noopener external nofollow noreferrer">[Leetcode][链表]相关题目汇总/分析/总结</a></li>
<li><a href="https://www.cnblogs.com/aspirant/p/9199608.html" target="_blank" rel="noopener external nofollow noreferrer">链表翻转的图文讲解（递归与迭代两种实现）（百度面试）</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI0OTQwMTA5Ng==&mid=2247483830&idx=1&sn=a88aa30e1bd82ed0ea9adabe48b7ec09&chksm=e9935bd1dee4d2c766567e476d567d3811ec4f34fef3644cc04c17cc8f7a8c624b0371b91d24&scene=27#wechat_redirect" target="_blank" rel="noopener external nofollow noreferrer">LeetCode链表知识点&amp;题型总结&amp;题表</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>链表</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客部署到Coding</title>
    <url>/archives/e09249d2.html</url>
    <content><![CDATA[<p>GitHub 服务器毕竟是在国外，国内访问的速度比较慢。而Coding是<strong>国内</strong>的一个面向开发者的云端开发平台，这意味着能够大大提升国内的访问速度。</p>
<p>本文简单记录了Hexo博客部署到Coding的过程。</p>
<a id="more"></a>

<h2 id="创建Coding仓库"><a href="#创建Coding仓库" class="headerlink" title="创建Coding仓库"></a>创建Coding仓库</h2><ol>
<li><p>首先官网注册账号。</p>
</li>
<li><p>注册完账号之后，请前个人账户的设置页面选择 SSH 公钥将本地生成的 公钥 添加进去。公钥储存位置一般在 <code>C:\Users\用户名\.ssh</code> 目录下的 <code>id_rsa.pub</code> 文件里，用记事本打开复制其内容即可。</p>
</li>
<li><p>创建一个托管静态页面的仓库</p>
<ul>
<li>项目名称任意，但是<strong>最好是自己在 Coding 上设置的账户名</strong>。因为当我们的项目推送成功并开启Pages服务后，其访问地址为<code>username.coding.me/projectname</code>。而当你的<code>projectname</code>与<code>username</code>相同的时候，其访问地址可以简化为<code>username.coding.me</code>。</li>
<li>项目描述随意填写</li>
<li>公开源代码：建议不勾选，这样仓库就只能自己查看</li>
<li>启用 <code>README.md</code>、添加 <code>License</code> 文件和添加 <code>.gitignore</code> 文件均可以不用理会，使用默认的就好</li>
</ul>
</li>
</ol>
<h2 id="部署到Coding仓库"><a href="#部署到Coding仓库" class="headerlink" title="部署到Coding仓库"></a>部署到Coding仓库</h2><p>现在我们将 public 目录推送到 Coding 上博客仓库的 master 分支。</p>
<p>我们只需要改下站点的配置文件，添加如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@git.dev.tencent.com:tding/tding.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>然后<code>hexo deploy</code>即可部署成功。</p>
<h2 id="开启Coding-Pages服务"><a href="#开启Coding-Pages服务" class="headerlink" title="开启Coding Pages服务"></a>开启Coding Pages服务</h2><p>博客部署完成后，我们在<code>代码 ——&gt; Pages服务</code>中一键开启Coding Pages服务。</p>
<p>在浏览器中直接输入域名，即仓名（如<code>tding.coding.me</code>）查看是否部署成功。</p>
<h2 id="添加自定义域名"><a href="#添加自定义域名" class="headerlink" title="添加自定义域名"></a>添加自定义域名</h2><p>首先得有一个自定义域名，然后我们把它绑定到Coding上。</p>
<p>这里我用DNSPod来提供域名解析服务。</p>
<h3 id="添加解析记录"><a href="#添加解析记录" class="headerlink" title="添加解析记录"></a>添加解析记录</h3><p>我们需要在DNSPod控制台的DNS管理中添加两条解析记录：</p>
<ol>
<li><p>记录类型为<code>A</code>，主机记录为<code>@</code>，解析线路选择<strong>默认</strong>，记录值为你Hexo项目所部署到Coding Pages的IP地址，可以通过ping得到。如我的Coding仓库为<code>tding.coding.me</code>，则打开cmd，输入<code>ping tding.coding.me</code>，就可以得到Coding Pages的IP地址。我这里是<code>150.109.112.233</code>。</p>
</li>
<li><p>记录类型为<code>CNAME</code>，主机记录为<code>www</code>，解析线路选择<strong>默认</strong>，记录值为你Hexo项目所部署到Coding Pages的访问地址，如我的为<code>tding.coding.me</code>。</p>
</li>
</ol>
<p>注意：因为我们要实现国内外访问不同的服务，所以需要分别设置解析，无论是腾讯云还是阿里云的解析服务，都能够很好的区分国内外节点，我们需要将国内的 <code>CNAME</code> 设置到 <code>pages.coding.me</code>，将国外的 <code>CNAME</code> 设置到 <code>pages.github.io</code>。</p>
<p>具体如下图：</p>
<img src="/archives/e09249d2/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" class="" title="域名解析">

<h3 id="Coding绑定自定义域名"><a href="#Coding绑定自定义域名" class="headerlink" title="Coding绑定自定义域名"></a>Coding绑定自定义域名</h3><p>打开Coding的Pages服务，进入设置页面，为网站绑定自己的域名。添加刚才解析的两条记录。</p>
<img src="/archives/e09249d2/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.png" class="" title="自定义域名">

<p>注意：一定要选首选的域名，并且<strong>非首选域名要勾选跳转至首选域名</strong>，不然有些第三方服务数据会统计不到一起。</p>
<h3 id="开启HTTPS"><a href="#开启HTTPS" class="headerlink" title="开启HTTPS"></a>开启HTTPS</h3><p>如果你之前已经部署到了 GitHub Pages 并开启了 HTTPS，那么直接在设置页面绑定你自己的域名，SSL/TLS 安全证书就会显示申请错误。</p>
<p>申请错误原因是：在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败。</p>
<p><strong>正确的做法是：先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书，大约十秒左右就能申请成功，然后开启强制 HTTPS 访问</strong>。</p>
<img src="/archives/e09249d2/HTTPS.png" class="" title="HTTPS">

<h2 id="速度对比"><a href="#速度对比" class="headerlink" title="速度对比"></a>速度对比</h2><p>至此，我们完成了博客在 GitHub Pages 和 Coding Pages 双线部署。</p>
<p>下面是一张 GitHub Pages 和 Coding Pages 在国内的速度对比图，可以明显看到速度的提升：</p>
<img src="/archives/e09249d2/%E9%80%9F%E5%BA%A6%E5%AF%B9%E6%AF%94.png" class="" title="速度对比">


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jealyn.top/domain-binding.html" target="_blank" rel="noopener external nofollow noreferrer">域名申请与绑定到Coding Pages</a></li>
<li><a href="https://www.itrhx.com/2019/09/16/A47-hexo-deployed-to-github-and-coding/" target="_blank" rel="noopener external nofollow noreferrer">Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>Coding Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题目总结-数组中的双指针问题</title>
    <url>/archives/647f3958.html</url>
    <content><![CDATA[<p>所谓双指针算法，就是指的是在遍历的过程中，不是普通的使用单个指针进行循环访问，而是使用<strong>两个相同方向或者相反方向的指针</strong>进行扫描，从而达到相应的目的。双指针法充分使用了数组有序这一特征，从而在某些情况下能够简化一些运算，降低时间复杂度.</p>
<p>本文主要总结了几种双指针算法在数组类题目中的应用，下面是目录：</p>
<ul>
<li><a href="#对撞指针">对撞指针</a></li>
<li><a href="#前向型指针-快慢指针">前向型指针-快慢指针</a></li>
<li><a href="#前向型指针-滑动窗口">前向型指针-滑动窗口</a></li>
<li><a href="#分离双指针">分离双指针</a></li>
</ul>
<a id="more"></a>

<h2 id="对撞指针"><a href="#对撞指针" class="headerlink" title="对撞指针"></a>对撞指针</h2><p>对撞指针是指在<strong>有序数组</strong>中，将指向最左侧的索引定义为左指针(left)，最右侧的定义为右指针(right)，然后从两头向中间进行数组遍历。</p>
<ul>
<li><a href="#1-两数之和">1-两数之和</a></li>
<li><a href="#15-三数之和">15-三数之和</a></li>
<li><a href="#16-最接近的三数之和">16-最接近的三数之和</a></li>
<li><a href="#18-四数之和">18-四数之和</a></li>
<li><a href="#167-两数之和-输入有序数组">167-两数之和-输入有序数组</a></li>
<li><a href="#11-盛最多水的容器">11-盛最多水的容器</a></li>
<li>42-接雨水</li>
<li><a href="#611-有效三角形的个数">611-有效三角形的个数</a></li>
</ul>
<h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1-两数之和"></a>1-两数之和</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的<strong>数组下标</strong>。</p>
<p><strong>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素</strong>。</p>
<p>示例:</p>
<p>给定 <code>nums = [2, 7, 11, 15], target = 9</code></p>
<p>因为 <code>nums[0] + nums[1] = 2 + 7 = 9</code>，所以返回 <code>[0, 1]</code></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们马上可以想到一个暴力解法：遍历每个元素 x，并查找是否存在一个值与 <code>target - x</code> 相等的目标元素。但是这个方法时间复杂度达到<code>O(n^2)</code>。</p>
<p>因此，我想到用哈希表以空间换取速度，将查找时间从 O(n) 降低到 O(1)。</p>
<p>在进行迭代并将元素插入到哈希表的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p>
<p><strong>注意：这里没有使用对撞指针，因为这里数组是无序的，而排序的时间复杂度为O(nlogn)，所以不太划算。</strong></p>
<h4 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        nums_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            temp = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> temp <span class="keyword">in</span> nums_dict:</span><br><span class="line">                <span class="keyword">return</span> [i,nums_dict[temp]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums_dict[nums[i]] = i</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n)，我们只遍历了包含有 n 个元素的列表一次。在表中进行的每次查找只花费 O(1) 的时间。</li>
<li>空间复杂度：O(n)，所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 n 个元素。</li>
</ul>
<h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15-三数之和"></a>15-三数之和</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 <code>a + b + c = 0</code> ？找出所有满足条件且不重复的三元组。</p>
<p><strong>注意：答案中不可以包含重复的三元组</strong>。</p>
<p>例如, 给定数组 <code>nums = [-1, 0, 1, 2, -1, -4]</code>，满足要求的三元组集合为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>这里思路来源于<strong>167- 两数之和 II - 输入有序数组</strong>。我们可以先对数组进行排序，然后我们选择一个数字做C位，然后我们在这个C位数字的右边进行双指针搜索：</p>
<ul>
<li>从最左边<code>i+1</code>（最小值）和最右边<code>len(nums)-1</code>（最大值）两个数字开始，加上C位，计算总和是否等于0。<ul>
<li>如果大于 0，说明实力太强了，就把右侧的数字左移一位。</li>
<li>如果小于 0，说明实力太弱了，就把左边的数字右移一位。</li>
</ul>
</li>
<li>当双指针碰到的时候，这轮循环结束，以该数字为C位的所有可能都已经尝试完毕了。</li>
</ul>
<p>这里要注意数组的去重，去重过程包含了遍历，也会增加时间复杂度，所以我进行了优化，<strong>对于排序完成的数组来说，只要判断下相邻的数是否相等，如果相等就直接移动指针即可，这就完成了去重</strong>。</p>
<h4 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self,nums)</span>:</span></span><br><span class="line">        <span class="comment"># 排序</span></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 单循环+双指针</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="comment"># 去重（如果当前C位数和相邻的数相等，直接移动指针）</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = len(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[left] + nums[right] &gt; <span class="number">0</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[i] + nums[left] + nums[right] &lt; <span class="number">0</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[i] + nums[left] + nums[right] == <span class="number">0</span>:</span><br><span class="line">                    res.append([nums[i],nums[left],nums[right]])</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 去重（如果当前数和相邻的数相等，直接移动指针）</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left+<span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right<span class="number">-1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：<code>O(n^2)</code></li>
</ul>
<h3 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16-最接近的三数之和"></a>16-最接近的三数之和</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。<strong>假定每组输入只存在唯一答案</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如，给定数组 nums &#x3D; [-1，2，1，-4], 和 target &#x3D; 1.</span><br><span class="line"></span><br><span class="line">与 target 最接近的三个数的和为 2. (-1 + 2 + 1 &#x3D; 2).</span><br></pre></td></tr></table></figure>

<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>这个题目跟<strong>15-三数之和</strong>类似，只是需要保存一下最接近target的值，搜索过程中碰到更接近的数就更新这个值。</p>
<p>具体步骤如下：</p>
<ol>
<li>在数组 nums 中，进行遍历，每遍历一个值利用其下标i，形成一个固定值 <code>nums[i]</code>。</li>
<li>使用前指针指向 <code>left = i + 1</code> 处，后指针指向 <code>right = len(nums) - 1</code> 处，也就是结尾处，根据 <code>sums = nums[i] + nums[left] + nums[right]</code> 的结果，判断 sums 与目标 target 的距离，如果更近则更新结果a。</li>
<li>因为数组有序，如果 <code>sums &gt; target</code> 则 <code>right -= 1</code>，如果 <code>sums &lt; target</code> 则 <code>left += 1</code>，如果 <code>sums == target</code> 则说明距离为 0，直接返回结果。</li>
</ol>
<h4 id="Python实现-2"><a href="#Python实现-2" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 排序</span></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        a = abs(nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>] - target)</span><br><span class="line">        res = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = len(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前nums[i]情况下，搜索最接近的组合</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                sums = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="comment"># 比较sums与目标target的距离与之前最近的距离，如果更近则更新</span></span><br><span class="line">                <span class="keyword">if</span> abs(sums-target) &lt; a:</span><br><span class="line">                    a = abs(sums-target)</span><br><span class="line">                    res = sums</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> sums &gt; target:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> sums &lt; target:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 如果sums == target，则说明距离为0，这就是最接近的数</span></span><br><span class="line">                <span class="keyword">elif</span> sums == target:</span><br><span class="line">                    <span class="keyword">return</span> sums</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h3 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18-四数之和"></a>18-四数之和</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 <code>a + b + c + d</code> 的值与 target 相等？找出所有满足条件且不重复的四元组。</p>
<p>注意：答案中不可以包含重复的四元组。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定数组 nums &#x3D; [1, 0, -1, 0, -2, 2]，和 target &#x3D; 0。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>这道题目跟<strong>15.三数之和</strong>基本类似，也可以采用对撞指针进行解决，只是外面多了一个循环。</p>
<p>其中的难点在于<strong>四元组的去重</strong>。</p>
<p>最简单的办法是在结果列表中进行查找判断是否有重复的四元组，如果没有再存入，但是效率比较低，这里我采用<strong>如果当前值等于之前的值，那么我就跳过这个数</strong>来去重。</p>
<h4 id="Python实现-3"><a href="#Python实现-3" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fourSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="comment"># 排序</span></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-3</span>):</span><br><span class="line">            <span class="comment"># 去重：确保nums[i]改变了</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(nums)<span class="number">-2</span>):</span><br><span class="line">                <span class="comment"># 去重：确保nums[j]改变了</span></span><br><span class="line">                <span class="keyword">if</span> j &gt; i+<span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j<span class="number">-1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span>                </span><br><span class="line"></span><br><span class="line">                left = j + <span class="number">1</span></span><br><span class="line">                right = len(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                    sums = nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                    <span class="keyword">if</span> sums == target:</span><br><span class="line">                        res.append([nums[i],nums[j],nums[left],nums[right]])</span><br><span class="line">                        <span class="comment"># 去重：确保nums[left]改变了</span></span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left+<span class="number">1</span>]:</span><br><span class="line">                            left += <span class="number">1</span></span><br><span class="line">                        <span class="comment"># 去重：确保nums[right]改变了</span></span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right<span class="number">-1</span>]:</span><br><span class="line">                            right -= <span class="number">1</span></span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> sums &lt; target:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> sums &gt; target:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：<code>O(n^3)</code></li>
</ul>
<h3 id="167-两数之和-输入有序数组"><a href="#167-两数之和-输入有序数组" class="headerlink" title="167-两数之和-输入有序数组"></a>167-两数之和-输入有序数组</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个已按照 <strong>升序排列</strong> 的有序数组，找到两个数使得它们相加之和等于目标数。</p>
<p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>
<p>说明:</p>
<ul>
<li>返回的下标值（index1 和 index2）不是从零开始的。</li>
<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>
</ul>
<p>示例:</p>
<ul>
<li>输入: <code>numbers = [2, 7, 11, 15], target = 9</code></li>
<li>输出: <code>[1,2]</code></li>
<li>解释: 2 与 7 之和等于目标数 9 。因此 <code>index1 = 1</code>, <code>index2 = 2</code> 。</li>
</ul>
<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>我们可以使用 <strong>两数之和</strong> 的解法在 <code>O(n^2)</code> 时间 <code>O(1)</code> 空间暴力解决，也可以用哈希表在 <code>O(n)</code> 时间和 <code>O(n)</code> 空间内解决。然而，这两种方法都没有用到输入数组已经排序的性质，我们可以做得更好。</p>
<p>我们使用两个指针，初始分别位于第一个元素和最后一个元素位置，比较这两个元素之和与目标值的大小。如果和等于目标值，我们发现了这个唯一解。如果比目标值小，我们将较小元素指针增加一。如果比目标值大，我们将较大指针减小一。移动指针后重复上述比较直到找到答案。</p>
<h4 id="Python实现-4"><a href="#Python实现-4" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers, target)</span>:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = len(numbers)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> numbers[i] + numbers[j] &gt; target:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> numbers[i] + numbers[j] &lt; target:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> numbers[i] + numbers[j] == target:</span><br><span class="line">                <span class="keyword">return</span> [i+<span class="number">1</span>,j+<span class="number">1</span>]</span><br></pre></td></tr></table></figure>


<h3 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11-盛最多水的容器"></a>11-盛最多水的容器</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p><strong>说明：你不能倾斜容器，且 n 的值至少为 2。</strong></p>
<img src="/archives/647f3958/11.jpg" class="" title="省最多水的容器">

<p>图中垂直线代表输入数组 <code>[1,8,6,2,5,4,8,3,7]</code>。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出: 49</span><br></pre></td></tr></table></figure>

<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>这种方法背后的思路在于，<strong>两线段之间形成的区域总是会受到其中较短那条长度的限制</strong>。此外，两线段距离越远，得到的面积就越大。</p>
<p>下面我们从公式来验证上面的结论：</p>
<ul>
<li>水槽面积公式：<code>S(i,j)=min(h[i],h[j])×(j−i)</code><ul>
<li>若向内移动短板，水槽的短板 <code>min(h[i], h[j])</code> 可能变大，因此水槽面积 <code>S(i,j)</code> 可能增大。</li>
<li>若向内移动长板，水槽的短板 <code>min(h[i], h[j])</code> 不变或变小，下个水槽的面积一定小于当前水槽面积。</li>
</ul>
</li>
</ul>
<p><strong>我们也会发现：若不指定移动规则，所有移动出现的 <code>S(i,j)</code> 的状态数为 <code>C(n,2)</code>，即暴力枚举出所有状态。在状态 <code>S(i,j)</code> 下向内移动短板至 <code>S(i+1,j)</code>（假设 <code>h[i] &lt; h[j]</code>），则相当于消去了 <code>S(i,j−1),S(i,j−2),...,S(i,i+1)</code> 状态集合。而所有消去状态的面积一定 <code>&lt;=S(i,j)</code>。</strong></p>
<h4 id="Python实现-5"><a href="#Python实现-5" class="headerlink" title="Python实现"></a>Python实现</h4><p>具体步骤如下：</p>
<p>我们在由线段长度构成的数组中使用两个指针，一个放在开始，一个置于末尾。 此外，我们会使用变量 maxarea 来持续存储到目前为止所获得的最大面积。 在每一步中，我们会找出指针所指向的两条线段形成的区域，更新 maxarea，并将指向较短线段的指针向较长线段那端移动一步。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(height) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始值</span></span><br><span class="line">        res = min(height[left],height[right]) * (len(height) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="comment"># 更新maxarea</span></span><br><span class="line">            <span class="keyword">if</span> min(height[left],height[right]) * (right - left) &gt; res:</span><br><span class="line">                res = min(height[left],height[right]) * (right - left)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 移动较短线段的指针</span></span><br><span class="line">            <span class="keyword">if</span> height[left] &gt; height[right]:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


<h3 id="611-有效三角形的个数"><a href="#611-有效三角形的个数" class="headerlink" title="611-有效三角形的个数"></a>611-有效三角形的个数</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,2,3,4]</span><br><span class="line">输出: 3</span><br><span class="line">解释:</span><br><span class="line">有效的组合是: </span><br><span class="line">2,3,4 (使用第一个 2)</span><br><span class="line">2,3,4 (使用第二个 2)</span><br><span class="line">2,2,3</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>数组长度不超过1000。</li>
<li>数组里整数的范围为 <code>[0, 1000]</code>。</li>
</ul>
<h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p><strong>三角形的性质</strong>：三角形的任何两边的和一定大于第三边，由此亦可证明得三角形的任意两边的差一定小于第三边。</p>
<p>根据三角形的性质，我们会发现，只要小的两个边之和大于最长的那个边（<code>a + b &gt; c</code>），任意两边就一定大于第三边。</p>
<ol>
<li>数组排序，便于后序的处理</li>
<li>固定最长的边c，然后采用双指针在其左侧寻找合适的a、b：<ul>
<li>a从最左侧开始（<code>nums[0]</code>）、b从最右侧开始（<code>nums[i-1]</code>）</li>
<li>如果<code>nums[left] + nums[right] &gt; nums[i]</code>，说明<code>[left,right]、[left+1,right]...[right-1,right]</code>均满足条件，以<code>nums[right]</code>为中间边的情况已全部考虑过，然后<code>right -= 1</code></li>
<li>如果<code>nums[left] + nums[right] &lt;= nums[i]</code>，两边之和太小，需要增大，<code>left += 1</code></li>
</ul>
</li>
</ol>
<h4 id="Python实现-6"><a href="#Python实现-6" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">triangleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 排序</span></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,len(nums)):</span><br><span class="line">            </span><br><span class="line">            left = <span class="number">0</span></span><br><span class="line">            right = i - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                <span class="keyword">if</span> nums[left] + nums[right] &gt; nums[i]:</span><br><span class="line">                    <span class="comment"># 这些都可以：[left,right]、[left+1,right]...[right-1,right]</span></span><br><span class="line">                    count += right - left</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：<code>O(n^2)</code></li>
</ul>
<h2 id="前向型指针-快慢指针"><a href="#前向型指针-快慢指针" class="headerlink" title="前向型指针-快慢指针"></a>前向型指针-快慢指针</h2><p>快慢指针也是双指针，但是两个指针从同一侧开始遍历数组，将这两个指针分别定义为快指针（fast）和慢指针（slow），两个指针以不同的策略移动，直到两个指针的值相等（或其他特殊条件）为止，如fast每次增长两个，slow每次增长一个。</p>
<ul>
<li><a href="#26-删除排序数组中的重复项">26-删除排序数组中的重复项</a></li>
<li><a href="#27-移除元素">27-移除元素</a></li>
<li><a href="#80-删除排序数组中的重复项">80-删除排序数组中的重复项</a></li>
<li><a href="#283-移动零">283-移动零</a></li>
<li><a href="#845-数组中的最长山脉">845-数组中的最长山脉</a></li>
<li>904-水果成篮</li>
</ul>
<p>不少链表的题目可以用快慢指针来解决，由于本文主要双指针在数组中的应用，这里就不讨论了。</p>
<h3 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26-删除排序数组中的重复项"></a>26-删除排序数组中的重复项</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p>示例 1:</p>
<p>给定数组 <code>nums = [1,1,2]</code>, 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。你不需要考虑数组中超出新长度后面的元素。</p>
<p>示例 2:</p>
<p>给定 <code>nums = [0,0,1,1,1,2,2,3,3,4]</code>,函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>说明:为什么返回数值是整数，但输出的答案是数组呢?</strong></p>
<p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>数组完成排序后，我们可以放置两个指针 i 和 j，其中 i 是慢指针，而 j 是快指针。只要 <code>nums[i] = nums[j]</code>，我们就增加 j 以跳过重复项。</p>
<p>当我们遇到 <code>nums[j] != nums[i]</code> 时，跳过重复项的运行已经结束，因此我们必须把它（<code>nums[j]</code>）的值复制到 <code>nums[i + 1]</code>。然后递增 i，接着我们将再次重复相同的过程，直到 j 到达数组的末尾为止。</p>
<p>图解：</p>
<img src="/archives/647f3958/26.png" class="" title="图解">

<blockquote>
<p>来源：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/solution/shuang-zhi-zhen-shan-chu-zhong-fu-xiang-dai-you-hu/" target="_blank" rel="noopener external nofollow noreferrer">【双指针】删除重复项-带优化思路</a></p>
</blockquote>
<h4 id="Python实现-7"><a href="#Python实现-7" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; len(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[j] == nums[i]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span></span><br></pre></td></tr></table></figure>


<h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27-移除元素"></a>27-移除元素</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p>
<ul>
<li><strong>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成</strong>。</li>
<li>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</li>
</ul>
<p>示例 1:</p>
<p>给定 <code>nums = [3,2,2,3], val = 3</code>,函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。</p>
<p>示例 2:</p>
<p>给定 <code>nums = [0,1,2,2,3,0,4,2], val = 2</code>,函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>
<h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>我们可以保留两个指针 i 和 j，其中 i 是慢指针，j 是快指针。当 <code>nums[j]</code> 与给定的值相等时，递增 j 以跳过该元素。只要 <code>nums[j] != val</code>，我们就复制 <code>nums[j]</code> 到 <code>nums[i]</code> 并同时递增两个索引。重复这一过程，直到 j 到达数组的末尾，该数组的新长度为 i。</p>
<h4 id="Python实现-8"><a href="#Python实现-8" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums: List[int], val: int)</span> -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; len(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[j] == val:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[j] != val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n)，假设数组总共有 n 个元素，i 和 j 至少遍历 2n 步。</li>
<li>空间复杂度：O(1)。</li>
</ul>
<h4 id="进阶做法"><a href="#进阶做法" class="headerlink" title="进阶做法"></a>进阶做法</h4><p>现在考虑<strong>数组包含很少的要删除的元素</strong>的情况。例如， <code>num=[4，1，2，3，5]，Val=4</code>。似乎没有必要将 <code>[1，2，3，5]</code> 这几个元素左移一步，因为问题描述中提到元素的顺序可以更改。当我们遇到 <code>nums[i] = val</code> 时，我们可以将当前元素与最后一个元素进行交换，并释放最后一个元素。这实际上使数组的大小减少了 1。请注意，被交换的最后一个元素可能是您想要移除的值。但是不要担心，在下一次迭代中，我们仍然会检查这个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums: List[int], val: int)</span> -&gt; int:</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        last = len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= last:</span><br><span class="line">            <span class="keyword">if</span> nums[j] == val:</span><br><span class="line">                nums[j] = nums[last]</span><br><span class="line">                last -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> last+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>注意：while循环中的判断条件应该是<code>j &lt;= last</code>而不是<code>j &lt; len(nums)</code>。</p>
<ul>
<li>时间复杂度：O(n)，j 和 last 最多遍历 n 步。在这个方法中，赋值操作的次数等于要删除的元素的数量。因此，如果要移除的元素很少，效率会更高。</li>
<li>空间复杂度：O(1)。</li>
</ul>
<h3 id="80-删除排序数组中的重复项"><a href="#80-删除排序数组中的重复项" class="headerlink" title="80-删除排序数组中的重复项"></a>80-删除排序数组中的重复项</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p>示例 1:</p>
<p>给定 <code>nums = [1,1,1,2,2,3]</code>,函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。你不需要考虑数组中超出新长度后面的元素。</p>
<p>示例 2:</p>
<p>给定 <code>nums = [0,0,1,1,1,1,2,3,3]</code>,函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。你不需要考虑数组中超出新长度后面的元素。</p>
<h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><p>遍历整个表：</p>
<ul>
<li><p>把当前的元素与它前面的对比，如果二者元素相同（为重复元素）：此时统计重复的计数器<code>count+=1</code>。题目要求只保留2个重复的元素，这里需要加入重复元素个数的判断：</p>
<ul>
<li>这个元素正好重复了2次 =&gt; 则进行保留。列表长度<code>i+=1</code>，然后<code>nums[i]=nums[j]</code>；</li>
<li>这个元素重复多于2次 =&gt; 不进行任何操作。体现在程序上不做处理</li>
</ul>
</li>
<li><p>把当前的元素与它前面的对比，如果二者元素不同（为新元素）：此时把当前这个结点(<code>nums[j]</code>)添加到新表里面去，<code>nums[i] = nums[j]</code>,表长<code>i+1</code>。</p>
</li>
</ul>
<h4 id="Python实现-9"><a href="#Python实现-9" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; len(nums):</span><br><span class="line">            <span class="comment"># 二者元素相同（重复元素）</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] == nums[j]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 这个元素正好重复了2次</span></span><br><span class="line">                <span class="keyword">if</span> count == <span class="number">2</span>:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    nums[i] = nums[j]</span><br><span class="line">                <span class="comment"># 这个元素重复多于2次</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 二者元素不同（新元素）</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283-移动零"></a>283-移动零</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p>示例:</p>
<ul>
<li>输入: <code>[0,1,0,3,12]</code></li>
<li>输出: <code>[1,3,12,0,0]</code></li>
</ul>
<p>说明:</p>
<ul>
<li>必须在原数组上操作，不能拷贝额外的数组。</li>
<li>尽量减少操作次数。</li>
</ul>
<h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><ol>
<li>nums中，i指针用于存放非零元素</li>
<li>j指针用于遍历寻找非零元素（注：j指针找到一个非零元素后，方法<code>nums[i]</code>的位置<code>i++</code>，用于下一个j指针找到的非零元素）</li>
<li>j指针遍历完后，最后nums数组还有空位置，存放0即可</li>
</ol>
<h4 id="Python实现-10"><a href="#Python实现-10" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums: List[int])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 双指针遍历寻找非零元素</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; len(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[j] == <span class="number">0</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 空位置赋0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(i,len(nums)):</span><br><span class="line">            nums[k] = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="845-数组中的最长山脉"><a href="#845-数组中的最长山脉" class="headerlink" title="845-数组中的最长山脉"></a>845-数组中的最长山脉</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>我们把数组 A 中符合下列属性的任意连续子数组 B 称为 “山脉”：</p>
<ul>
<li><code>B.length &gt;= 3</code></li>
<li>存在 <code>0 &lt; i &lt; B.length - 1</code> 使得 <code>B[0] &lt; B[1] &lt; ... B[i-1] &lt; B[i] &gt; B[i+1] &gt; ... &gt; B[B.length - 1]</code></li>
</ul>
<p>注意：B 可以是 A 的任意子数组，包括整个数组 A。</p>
<p>给出一个整数数组 A，返回最长 “山脉” 的长度。</p>
<p>如果不含有 “山脉” 则返回 0。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[2,1,4,7,3,2,5]</span><br><span class="line">输出：5</span><br><span class="line">解释：最长的 “山脉” 是 [1,4,7,3,2]，长度为 5。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[2,2,2]</span><br><span class="line">输出：0</span><br><span class="line">解释：不含 “山脉”。</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<ul>
<li><code>0 &lt;= A.length &lt;= 10000</code></li>
<li><code>0 &lt;= A[i] &lt;= 10000</code></li>
</ul>
<h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><p>首先固定山峰值，然后分别寻找左、右半边山脉的长度。</p>
<ul>
<li><code>A[left] &lt; A[left+1]</code>，继续向左寻找</li>
<li><code>A[right] &lt; A[right-1]</code>，继续向右寻找</li>
</ul>
<p>如果以当前山峰的山脉长度比最长山脉长，更新最长山脉。</p>
<p>注意：我们可以在<strong>只有当前点为山峰的情况（即<code>A[i-1] &lt; A[i] and A[i+1] &lt; A[i]</code>），才在左右寻找最长山峰</strong>，这样可以大大降低搜索的次数。</p>
<h4 id="Python实现-11"><a href="#Python实现-11" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestMountain</span><span class="params">(self, A: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(A) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 固定山峰</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(A)<span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># 只有当前点为山峰的情况，才在左右寻找最长山峰</span></span><br><span class="line">            <span class="keyword">if</span> A[i<span class="number">-1</span>] &lt; A[i] <span class="keyword">and</span> A[i+<span class="number">1</span>] &lt; A[i]:</span><br><span class="line">                left = i - <span class="number">1</span></span><br><span class="line">                right = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 左半边山脉的长度</span></span><br><span class="line">                <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> A[left] &lt; A[left+<span class="number">1</span>]:</span><br><span class="line">                    left -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 右半边山脉的长度</span></span><br><span class="line">                <span class="keyword">while</span> right &lt;= len(A)<span class="number">-1</span> <span class="keyword">and</span> A[right] &lt; A[right<span class="number">-1</span>]:</span><br><span class="line">                    right += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 如果这个山脉比最长的山脉长，更新res</span></span><br><span class="line">                <span class="keyword">if</span> right - left - <span class="number">1</span> &gt; res:</span><br><span class="line">                    res =  right - left - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>



<h2 id="前向型指针-滑动窗口"><a href="#前向型指针-滑动窗口" class="headerlink" title="前向型指针-滑动窗口"></a>前向型指针-滑动窗口</h2><p>有些时候，我们需要获得数组或者字符串的<strong>连续子部分</strong>，这时候我们就可以考虑使用滑动窗口。<code>nums[left,right]</code>为滑动窗口，根据具体的要求，通过遍历的时候，来改变left和right的位置，从而完成任务。 </p>
<ul>
<li><a href="#209-长度最小的子数组">209-长度最小的子数组</a></li>
<li><a href="#713-乘积小于K的子数组">713-乘积小于K的子数组</a></li>
</ul>
<p>由于本文主要关注双指针在数组中的应用，这里就不讨论字符串相关的题目了。</p>
<h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209-长度最小的子数组"></a>209-长度最小的子数组</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 <code>≥ s</code> 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。</p>
<p>示例: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。</span><br></pre></td></tr></table></figure>

<p>进阶:如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。</p>
<h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><p>在一个坐标上存在两个指针left和right，left代表滑窗的左边框，right代表滑窗的右边框。两者分别向右滑动，前者能使窗口之间的和减小，后者能使窗口之间的和增大。开始时二者重合，窗口的和就是重合点所在的数。</p>
<ol>
<li>开始right向右滑动，使和变大。</li>
<li>当恰好<code>&gt;=s</code>时，记录滑窗所包括的子数组长度res，若res已有数值，需判断新值是否小于旧值，若是，更新res；left向右滑动。</li>
<li>判断是否仍<code>&gt;=s</code>，若是，重复步骤2，3。若否，转步骤1。直到右边框到达最右边。</li>
</ol>
<h4 id="Python实现-12"><a href="#Python实现-12" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSubArrayLen</span><span class="params">(self, s: int, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        left,sums,res = <span class="number">0</span>,<span class="number">0</span>,float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 右指针右移</span></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            sums += nums[right]</span><br><span class="line">            <span class="keyword">while</span> sums &gt;= s:</span><br><span class="line">                <span class="comment"># 若新值小于旧值，更新res</span></span><br><span class="line">                <span class="keyword">if</span> right - left + <span class="number">1</span> &lt; res:</span><br><span class="line">                    res = right - left + <span class="number">1</span></span><br><span class="line">                <span class="comment"># 左指针向右滑动</span></span><br><span class="line">                sums -= nums[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> res == float(<span class="string">'inf'</span>) <span class="keyword">else</span> res</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="713-乘积小于K的子数组"><a href="#713-乘积小于K的子数组" class="headerlink" title="713-乘积小于K的子数组"></a>713-乘积小于K的子数组</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个正整数数组 nums。</p>
<p>找出该数组内乘积小于 k 的<strong>连续</strong>的子数组的个数。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [10,5,2,6], k &#x3D; 100</span><br><span class="line">输出: 8</span><br><span class="line">解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。</span><br><span class="line">需要注意的是 [10,5,2] 并不是乘积小于100的子数组。</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li><code>0 &lt; nums.length &lt;= 50000</code></li>
<li><code>0 &lt; nums[i] &lt; 1000</code></li>
<li><code>0 &lt;= k &lt; 10^6</code></li>
</ul>
<h4 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h4><ul>
<li>步骤1：当<code>left &lt;= right</code>且滑动窗口内的乘积小于k时，我们可以知道<code>[left,right]、[left+1,right]...[right-1,right]</code>均满足条件，因此，计数加<code>right-left+1</code>，然后移动右边界（滑动区间加大），看剩下的区间是否满足乘积小于k，如果小于k，重复步骤1，否则进行步骤2。</li>
<li>步骤2：当滑动窗口内的乘积大于等于k时，右移左边界（滑动区间减小），如果这个区间内乘积小于k，进入步骤1，否则重复步骤2。</li>
</ul>
<h4 id="Python实现-13"><a href="#Python实现-13" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span>        </span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        product = <span class="number">1</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="comment"># 右边界右移</span></span><br><span class="line">            product *= nums[right]</span><br><span class="line">            <span class="comment"># 如果乘积&gt;=k，左边界右移</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> product &gt;= k:</span><br><span class="line">                product /= nums[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 当前右边界下，满足条件的数组</span></span><br><span class="line">            count += right - left + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>



<h2 id="分离双指针"><a href="#分离双指针" class="headerlink" title="分离双指针"></a>分离双指针</h2><p>输入是<strong>两个数组/链表</strong>，两个指针分别在两个容器中移动；根据问题的不同，初始位置可能都在头部，或者都在尾部，或一头一尾。</p>
<ul>
<li><a href="#349-两个数组的交集">349-两个数组的交集</a></li>
<li><a href="#350-两个数组的交集">350-两个数组的交集</a></li>
<li><a href="#88-合并两个有序数组">88-合并两个有序数组</a></li>
</ul>
<h3 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349-两个数组的交集"></a>349-两个数组的交集</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个数组，编写一个函数来计算它们的交集。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">输出: [2]</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">输出: [9,4]</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>输出结果中的每个元素一定是唯一的。</li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<h4 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h4><p>我先对两个数组进行排序。然后再运用双指针遍历两个数组，将交集中的元素加入到 <code>set()</code> 中。<code>set()</code> 可以非常方便的去重。</p>
<h4 id="Python实现-14"><a href="#Python实现-14" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersection</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 排序</span></span><br><span class="line">        nums1.sort()</span><br><span class="line">        nums2.sort()</span><br><span class="line"></span><br><span class="line">        i,j = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        nums_set = set()</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(nums1) <span class="keyword">and</span> j &lt; len(nums2):</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &gt; nums2[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums1[i] &lt; nums2[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums1[i] == nums2[j]:</span><br><span class="line">                nums_set.add(nums1[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nums_set</span><br></pre></td></tr></table></figure>

<h4 id="其他方法——运用set-的方法"><a href="#其他方法——运用set-的方法" class="headerlink" title="其他方法——运用set()的方法"></a>其他方法——运用set()的方法</h4><p>我们可以将两个数组转换为集合 set，然后直接用内置的交集即可得到结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersection</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        set1 = set(nums1)</span><br><span class="line">        set2 = set(nums2)</span><br><span class="line">        <span class="keyword">return</span> set1 &amp; set2</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：<code>O(m+n)</code>，其中 n 和 m 是数组的长度。<code>O(n)</code> 的时间用于转换 nums1 在集合中，<code>O(m)</code> 的时间用于转换 nums2 到集合中，并且平均情况下，集合的操作为 O(1)。</li>
<li>空间复杂度：<code>O(m+n)</code>，最坏的情况是数组中的所有元素都不同。</li>
</ul>
<h3 id="350-两个数组的交集"><a href="#350-两个数组的交集" class="headerlink" title="350-两个数组的交集"></a>350-两个数组的交集</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个数组，编写一个函数来计算它们的交集。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">输出: [2,2]</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">输出: [4,9]</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><strong>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</strong></li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<h4 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h4><p>我先对两个数组进行排序。然后再运用双指针遍历两个数组，将交集中的元素加入到 <strong>列表</strong> 中。</p>
<p>本题跟<code>349. 两个数组的交集</code>的区别在于，本题不需要去重，因此用列表而不是集合保存结果。</p>
<h4 id="Python实现-15"><a href="#Python实现-15" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersect</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 排序</span></span><br><span class="line">        nums1.sort()</span><br><span class="line">        nums2.sort()</span><br><span class="line"></span><br><span class="line">        i,j = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(nums1) <span class="keyword">and</span> j &lt; len(nums2):</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &gt; nums2[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums1[i] &lt; nums2[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums1[i] == nums2[j]:</span><br><span class="line">                res.append(nums1[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h3 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88-合并两个有序数组"></a>88-合并两个有序数组</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p>
<p>说明:</p>
<ul>
<li>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。</li>
<li>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</li>
</ul>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3</span><br><span class="line">nums2 &#x3D; [2,5,6],       n &#x3D; 3</span><br><span class="line"></span><br><span class="line">输出: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure>

<h4 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h4><p>这个题目可以参考归并排序中的方法来解决。具体见<a href=""></a>。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT增加canvas粒子时钟</title>
    <url>/archives/dd68b70.html</url>
    <content><![CDATA[<p>网上看到一款不错的canvas粒子时钟，下面是在NexT主题增加的步骤。</p>
<a id="more"></a>

<h2 id="canvas粒子时钟引入"><a href="#canvas粒子时钟引入" class="headerlink" title="canvas粒子时钟引入"></a>canvas粒子时钟引入</h2><ol>
<li>在<code>/themes/next/layout/_custom/</code>目录下，新建<code>clock.swig</code>文件，内容如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">style</span>=<span class="string">"width:60%;"</span>&gt;</span>当前浏览器不支持canvas，请更换浏览器后再试<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> digit=</span></span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [0,0,1,1,1,0,0]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//0</span></span></span><br><span class="line">        [</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,1,1,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [1,1,1,1,1,1,1]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//1</span></span></span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,1,1,1,1,1]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//2</span></span></span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//3</span></span></span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,1,0],</span><br><span class="line">            [0,0,1,1,1,1,0],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [1,1,0,0,1,1,0],</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,1,1]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//4</span></span></span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,1,1,1,1,0],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//5</span></span></span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//6</span></span></span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//7</span></span></span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//8</span></span></span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0]</span><br><span class="line"><span class="actionscript">        ],<span class="comment">//9</span></span></span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0]</span><br><span class="line"><span class="actionscript">        ]<span class="comment">//:</span></span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span></span><br><span class="line"></span><br><span class="line">if(canvas.getContext)&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> cxt = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//声明canvas的宽高</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> H = <span class="number">100</span>,W = <span class="number">700</span>;</span></span><br><span class="line">    canvas.height = H;</span><br><span class="line">    canvas.width = W;</span><br><span class="line"><span class="actionscript">    cxt.fillStyle = <span class="string">'#f00'</span>;</span></span><br><span class="line">    cxt.fillRect(10,10,50,50);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//存储时间数据</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> data = [];</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//存储运动的小球</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> balls = [];</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//设置粒子半径</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> R = canvas.height/<span class="number">20</span><span class="number">-1</span>;</span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> temp = <span class="regexp">/(\d)(\d):(\d)(\d):(\d)(\d)/</span>.exec(<span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成</span></span></span><br><span class="line">        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/*生成点阵数字*/</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">renderDigit</span><span class="params">(index,num)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; digit[num].length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; digit[num][i].length; j++)&#123;</span></span><br><span class="line">                if(digit[num][i][j] == 1)&#123;</span><br><span class="line">                    cxt.beginPath();</span><br><span class="line"><span class="javascript">                    cxt.arc(<span class="number">14</span>*(R+<span class="number">2</span>)*index + j*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),i*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),R,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span></span><br><span class="line">                    cxt.closePath();</span><br><span class="line">                    cxt.fill();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/*更新时钟*/</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">updateDigitTime</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> changeNumArray = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> temp = <span class="regexp">/(\d)(\d):(\d)(\d):(\d)(\d)/</span>.exec(<span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> NewData = [];</span></span><br><span class="line">        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);</span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = data.length<span class="number">-1</span>; i &gt;=<span class="number">0</span> ; i--)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//时间发生变化</span></span></span><br><span class="line">            if(NewData[i] !== data[i])&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">//将变化的数字值和在data数组中的索引存储在changeNumArray数组中</span></span></span><br><span class="line"><span class="javascript">                changeNumArray.push(i+<span class="string">'_'</span>+(<span class="built_in">Number</span>(data[i])+<span class="number">1</span>)%<span class="number">10</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//增加小球</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; changeNumArray.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">            addBalls.apply(<span class="keyword">this</span>,changeNumArray[i].split(<span class="string">'_'</span>));</span></span><br><span class="line">        &#125;</span><br><span class="line">        data = NewData.concat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/*更新小球状态*/</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">updateBalls</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; balls.length; i++)&#123;</span></span><br><span class="line">            balls[i].stepY += balls[i].disY;</span><br><span class="line">            balls[i].x += balls[i].stepX;</span><br><span class="line">            balls[i].y += balls[i].stepY;</span><br><span class="line">            if(balls[i].x &gt; W + R || balls[i].y &gt; H + R)&#123;</span><br><span class="line">                balls.splice(i,1);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/*增加要运动的小球*/</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addBalls</span><span class="params">(index,num)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> numArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> colorArray =  [<span class="string">"#3BE"</span>,<span class="string">"#09C"</span>,<span class="string">"#A6C"</span>,<span class="string">"#93C"</span>,<span class="string">"#9C0"</span>,<span class="string">"#690"</span>,<span class="string">"#FB3"</span>,<span class="string">"#F80"</span>,<span class="string">"#F44"</span>,<span class="string">"#C00"</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; digit[num].length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; digit[num][i].length; j++)&#123;</span></span><br><span class="line">                if(digit[num][i][j] == 1)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ball = &#123;</span></span><br><span class="line">                        x:14*(R+2)*index + j*2*(R+1)+(R+1),</span><br><span class="line">                        y:i*2*(R+1)+(R+1),</span><br><span class="line"><span class="javascript">                        stepX:<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">4</span> <span class="number">-2</span>),</span></span><br><span class="line"><span class="javascript">                        stepY:<span class="number">-2</span>*numArray[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*numArray.length)],</span></span><br><span class="line"><span class="javascript">                        color:colorArray[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*colorArray.length)],</span></span><br><span class="line">                        disY:1</span><br><span class="line">                    &#125;;</span><br><span class="line">                    balls.push(ball);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/*渲染*/</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//重置画布宽度，达到清空画布的效果</span></span></span><br><span class="line">        canvas.height = 100;</span><br><span class="line"><span class="actionscript">        <span class="comment">//渲染时钟</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++)&#123;</span></span><br><span class="line">            renderDigit(i,data[i]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//渲染小球</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; balls.length; i++)&#123;</span></span><br><span class="line">            cxt.beginPath();</span><br><span class="line"><span class="javascript">            cxt.arc(balls[i].x,balls[i].y,R,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span></span><br><span class="line">            cxt.fillStyle = balls[i].color;</span><br><span class="line">            cxt.closePath();</span><br><span class="line">            cxt.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clearInterval(oTimer);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> oTimer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//更新时钟</span></span></span><br><span class="line">        updateDigitTime();</span><br><span class="line"><span class="actionscript">        <span class="comment">//更新小球状态</span></span></span><br><span class="line">        updateBalls();</span><br><span class="line"><span class="actionscript">        <span class="comment">//渲染</span></span></span><br><span class="line">        render();</span><br><span class="line">    &#125;,50);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在<code>/themes/next/layout/_custom/sidebar.swig</code>中引入：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &#39;.&#x2F;clock.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在<code>/themes/next/layout/_macro/sidebar.swig</code>中引入：</li>
</ol>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">      &lt;div class="site-overview-wrap sidebar-panel&#123;% if not display_toc or toc(page.content).length &lt;= 1 %&#125; sidebar-panel-active&#123;% endif %&#125;"&gt;</span><br><span class="line">        &lt;div class="site-overview"&gt;</span><br><span class="line">          </span><br><span class="line">          ...</span><br><span class="line"></span><br><span class="line">          &#123;% if theme.recent_posts %&#125;</span><br><span class="line">              &lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.recent_posts_layout  &#125;&#125;"&gt;</span><br><span class="line">                &lt;div class="links-of-blogroll-title"&gt;</span><br><span class="line">                  &lt;!-- modify icon to fire by szw --&gt;</span><br><span class="line">                  &lt;i class="fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;" aria-hidden="true"&gt;&lt;/i&gt;</span><br><span class="line">                  &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul class="links-of-blogroll-list"&gt;</span><br><span class="line">                  &#123;% set posts = site.posts.sort('-date') %&#125;</span><br><span class="line">                  &#123;% for post in posts.slice('0', '5') %&#125;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                      &lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;" title="&#123;&#123; post.title &#125;&#125;" target="_blank"&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                  &#123;% endfor %&#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+         &#123;% if theme.custom_file_path.sidebar %&#125;</span></span><br><span class="line"><span class="addition">+           &#123;% set custom_sidebar = '../../../../' + theme.custom_file_path.sidebar %&#125;</span></span><br><span class="line"><span class="addition">+         &#123;% else %&#125;</span></span><br><span class="line"><span class="addition">+           &#123;% set custom_sidebar = '../_custom/sidebar.swig' %&#125;</span></span><br><span class="line"><span class="addition">+         &#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+         &#123;% include custom_sidebar %&#125;</span></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这里我放在侧栏的末尾。</p>
<h2 id="canvas粒子时钟样式"><a href="#canvas粒子时钟样式" class="headerlink" title="canvas粒子时钟样式"></a>canvas粒子时钟样式</h2><p>在<code>/themes/next/source/css/_custom/custom.styl</code>添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 粒子时钟样式</span><br><span class="line"><span class="selector-class">.site-overview</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">canvas</span><span class="selector-id">#canvas</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/xiaohuochai/p/6368039.html" target="_blank" rel="noopener external nofollow noreferrer">canvas粒子时钟</a></li>
<li><a href="https://leafjame.github.io/posts/2114475547.html" target="_blank" rel="noopener external nofollow noreferrer">Hexo NexT主题美化2.0</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>粒子时钟</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题目总结-位运算</title>
    <url>/archives/fa228c3f.html</url>
    <content><![CDATA[<p>位运算(Bit Manipulation)一直是程序员面试中的一个必须准备的主题，不过现在面试中位运算出现的次数并不多，主要原因还是位运算太考察技巧了，很多时候很难在短时间内想出来，所以作为面试的题目显得有点太花时间了。</p>
<a id="more"></a>

<p>下面是本文的题目目录：</p>
<ul>
<li><strong>汉明距离相关题目</strong><ul>
<li><a href="#191-位1的个数">191-位1的个数</a></li>
<li><a href="#461-汉明距离">461-汉明距离</a></li>
<li><a href="#477-汉明距离总和">477-汉明距离总和</a></li>
</ul>
</li>
<li><strong>只出现一次的数字相关题目</strong><ul>
<li><a href="#136-只出现一次的数字">136-只出现一次的数字</a></li>
<li><a href="#137-只出现一次的数字ii">137-只出现一次的数字ii</a></li>
<li><a href="#260-只出现一次的数字iii">260-只出现一次的数字iii</a></li>
</ul>
</li>
<li><strong>反转相关题目</strong><ul>
<li><a href="#190-颠倒二进制位">190-颠倒二进制位</a></li>
<li><a href="#476-数字的补数">476-数字的补数</a></li>
</ul>
</li>
<li><strong>全组合相关题目</strong><ul>
<li><a href="#78-子集">78-子集</a></li>
</ul>
</li>
<li><strong>数学相关题目</strong><ul>
<li><a href="#29-两数相除">29-两数相除</a></li>
<li><a href="#201-数字范围按位与">201-数字范围按位与</a></li>
<li><a href="#371-两整数之和">371-两整数之和</a></li>
</ul>
</li>
<li><strong>其他类型题目</strong><ul>
<li><a href="#693-交替位二进制数">693-交替位二进制数</a></li>
</ul>
</li>
</ul>
<h2 id="基础知识与常用技巧"><a href="#基础知识与常用技巧" class="headerlink" title="基础知识与常用技巧"></a>基础知识与常用技巧</h2><p>基本的位运算知识：</p>
<ul>
<li>与运算（<code>&amp;</code>）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 &amp; 0 &#x3D; 0</span><br><span class="line">1 &amp; 1 &#x3D; 1</span><br><span class="line">1 &amp; 0 &#x3D; 0</span><br></pre></td></tr></table></figure>

<ul>
<li>或运算（<code>|</code>）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 | 0 &#x3D; 0</span><br><span class="line">1 | 0 &#x3D; 1</span><br><span class="line">1 | 1 &#x3D; 1</span><br></pre></td></tr></table></figure>

<ul>
<li>异或运算（<code>^</code>）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 ^ 1 &#x3D; 0</span><br><span class="line">1 ^ 0 &#x3D; 1</span><br><span class="line">0 ^ 0 &#x3D; 0</span><br></pre></td></tr></table></figure>

<p>根据上面的知识我们可以知道：两个相同的数异或的结果为0，而0与任何一个数异或的结果为这个数。</p>
<p>常用技巧：</p>
<ul>
<li><code>n &amp; (n-1)</code>能够消灭n中最右侧的一个1。</li>
<li>右移：除以2；左移：乘以2。</li>
<li>异或性质：交换律，0^a=a, a^a=0。</li>
<li>我们可以将常用字符、数字等均转为按位运算，可以节约空间。</li>
</ul>
<h2 id="汉明距离-Hamming-Weight-相关题目"><a href="#汉明距离-Hamming-Weight-相关题目" class="headerlink" title="汉明距离(Hamming Weight)相关题目"></a>汉明距离(Hamming Weight)相关题目</h2><h3 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191-位1的个数"></a>191-位1的个数</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：00000000000000000000000000001011</span><br><span class="line">输出：3</span><br><span class="line">解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：00000000000000000000000010000000</span><br><span class="line">输出：1</span><br><span class="line">解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure>

<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：11111111111111111111111111111101</span><br><span class="line">输出：31</span><br><span class="line">解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们遍历数字的 32 位。如果某一位是 1 ，将计数器加一。</p>
<p><strong>进阶做法：我们可以把前面的算法进行优化。我们不再检查数字的每一个位，而是不断把数字最后一个 1 反转，并把答案加一。当数字变成 0 的时候，我们就知道它没有 1 的位了，此时返回答案。这里关键的想法是对于任意数字 n ，将 n 和 n - 1 做按位与运算，会把最后一个 1 的位变成 0 。</strong></p>
<img src="/archives/fa228c3f/191.png" class="" title="LeetCode191">

<h4 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 将 n 和 n - 1 做按位与运算，把最后一个 1 的位变成 0，得到新的n</span></span><br><span class="line">            n = n &amp; (n<span class="number">-1</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>

<h3 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="461-汉明距离"></a>461-汉明距离</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。</p>
<p>给出两个整数 x 和 y，计算它们之间的汉明距离。</p>
<p>注意：0 ≤ x, y &lt; 231.</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: x &#x3D; 1, y &#x3D; 4</span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">1   (0 0 0 1)</span><br><span class="line">4   (0 1 0 0)</span><br><span class="line">       ↑   ↑</span><br><span class="line"></span><br><span class="line">上面的箭头指出了对应二进制位不同的位置。</span><br></pre></td></tr></table></figure>

<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>我们先对两个数进行异或，然后计算其中“1”的个数，即为这两个数的汉明距离。</p>
<h4 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span><span class="params">(self, x: int, y: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 异或</span></span><br><span class="line">        a = x ^ y</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算“1”的个数</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> a != <span class="number">0</span>:</span><br><span class="line">            a = a &amp; (a<span class="number">-1</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>

<h3 id="477-汉明距离总和"><a href="#477-汉明距离总和" class="headerlink" title="477-汉明距离总和"></a>477-汉明距离总和</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>两个整数的 汉明距离 指的是这两个数字的二进制数对应位不同的数量。</p>
<p>计算一个数组中，任意两个数之间汉明距离的总和。</p>
<p>示例:</p>
<ul>
<li>输入: 4, 14, 2</li>
<li>输出: 6</li>
<li>解释: 在二进制表示中，4表示为0100，14表示为1110，2表示为0010。（这样表示是为了体现后四位之间关系）</li>
<li>答案：<code>HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6</code>.</li>
</ul>
<p>注意:</p>
<ul>
<li>数组中元素的范围为从 0到 10^9。</li>
<li>数组的长度不超过 10^4。</li>
</ul>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>看到题意第一想法就是遍历数组，嵌套一个for循环遍历数组进行两两比较，但是这样时间复杂度高达O(N^2)。因此，这里我转变思维，从逐一数字的横向比较，转变为纵向的逐位比较，来优化时间复杂度。</p>
<p>对于每一个数的某一位来说，若当前位为 1，那么对于当前位来说，所有数字的同位上为 0 的个数即当前数字当前位的汉明距离。因此，每一位的汉明距离为0出现的次数乘以1出现的次数，最后遍历32位即可。</p>
<h4 id="Python实现-2"><a href="#Python实现-2" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">totalHammingDistance</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            c0 = <span class="number">0</span></span><br><span class="line">            c1 = <span class="number">0</span></span><br><span class="line">            <span class="comment"># 遍历数组</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                <span class="comment"># 统计当前位1的个数</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt;&gt; i) &amp; <span class="number">1</span>:</span><br><span class="line">                    c1 += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 统计当前位0的个数</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    c0 += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 总的汉明距离加上当前位的汉明距离</span></span><br><span class="line">            res += c0 * c1</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：<code>O(32∗n)=O(n)</code></li>
</ul>
<h2 id="只出现一次的数字-Single-Number-相关题目"><a href="#只出现一次的数字-Single-Number-相关题目" class="headerlink" title="只出现一次的数字(Single Number)相关题目"></a>只出现一次的数字(Single Number)相关题目</h2><h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136-只出现一次的数字"></a>136-只出现一次的数字</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>说明：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</strong></p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>我们可以利用异或的性质：0和一个数异或后得到那个数，两个相同的数异或后则为0。</p>
<p>显然将所有数字异或后，得到的结果即为出现一次的值。</p>
<h4 id="Python实现-3"><a href="#Python实现-3" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            res = res ^ nums[i]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n) 。我们只需要将 nums 中的元素遍历一遍，所以时间复杂度就是 nums 中的元素个数。</li>
<li>空间复杂度：O(1) 。</li>
</ul>
<h3 id="137-只出现一次的数字ii"><a href="#137-只出现一次的数字ii" class="headerlink" title="137-只出现一次的数字ii"></a>137-只出现一次的数字ii</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了<strong>三次</strong>。找出那个只出现了一次的元素。</p>
<p>说明：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,2,3,2]</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [0,1,0,1,0,1,99]</span><br><span class="line">输出: 99</span><br></pre></td></tr></table></figure>

<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>根据题目要求，我们可以设计这样一个状态机：</p>
<table>
<thead>
<tr>
<th></th>
<th>a</th>
<th>b</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>初始状态：</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>第一次碰见某个数x：</td>
<td>0</td>
<td>x</td>
<td>把x记录在b中</td>
</tr>
<tr>
<td>第二次碰见某个数x：</td>
<td>x</td>
<td>0</td>
<td>把x记录在a中</td>
</tr>
<tr>
<td>第三次碰见某个数x：</td>
<td>0</td>
<td>0</td>
<td>把a和b都清空，可以处理其他数</td>
</tr>
</tbody></table>
<p>我们按照上述变换规则设计a和b：</p>
<ul>
<li>b=0时碰到x，就变成x；b=x时再碰到x，就变成0，这个就是异或，我们也许可以设计<code>b=b xor x</code>。当b再次碰到x，这时候b还是要为0，但这时候不同的是a=x，而前两种情况都是a=0。所以我们可以设计成<code>b=(b xor x)&amp;~a</code></li>
<li>同样道理，我们可以设计出：<code>a=(a xor x)&amp;~b</code></li>
</ul>
<p>按照这个设计，最后那个只出现一次的元素必定存储在b中。</p>
<h4 id="Python实现-4"><a href="#Python实现-4" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        b = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            b = (b ^ nums[i]) &amp; ~a</span><br><span class="line">            a = (a ^ nums[i]) &amp; ~b</span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O（n）。</li>
<li>空间复杂度：O（1）。</li>
</ul>
<h3 id="260-只出现一次的数字iii"><a href="#260-只出现一次的数字iii" class="headerlink" title="260-只出现一次的数字iii"></a>260-只出现一次的数字iii</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个整数数组 nums，其中恰好有<strong>两个元素</strong>只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。</p>
<p>示例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,1,3,2,5]</span><br><span class="line">输出: [3,5]</span><br></pre></td></tr></table></figure>

<p>注意：结果输出的顺序并不重要，对于上面的例子， <code>[5, 3]</code> 也是正确答案。你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</p>
<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>由于这两个数不相等，所以异或结果不为0，也就是说二进制中至少有一位1，记为第n位。我们以第n位是否为1，来把数组分为两个子数组。</p>
<p>然后这个问题就相当于<strong>分别在两个数组中找一个只出现一次的元素</strong>。</p>
<h4 id="Python实现-5"><a href="#Python实现-5" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 所有数异或</span></span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            x = x ^ nums[i]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 由于两个出现一次的元素不相同，所以至少有一位为1，下面我找到最低那个1</span></span><br><span class="line">        mask = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x &amp; mask == <span class="number">0</span>:</span><br><span class="line">            mask = mask &lt;&lt; <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 所有数根据mask=1或者0分成两组（两个特殊的数字被分为两组）</span></span><br><span class="line">        a1 = <span class="number">0</span></span><br><span class="line">        a2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &amp; mask == <span class="number">0</span>:</span><br><span class="line">                a1 = a1 ^ nums[i]</span><br><span class="line">            <span class="keyword">elif</span> nums[i] &amp; mask == mask:</span><br><span class="line">                a2 = a2 ^ nums[i]</span><br><span class="line">        <span class="keyword">return</span> [a1,a2]</span><br></pre></td></tr></table></figure>


<h2 id="反转相关题目"><a href="#反转相关题目" class="headerlink" title="反转相关题目"></a>反转相关题目</h2><h3 id="190-颠倒二进制位"><a href="#190-颠倒二进制位" class="headerlink" title="190-颠倒二进制位"></a>190-颠倒二进制位</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>颠倒给定的 32 位无符号整数的二进制位。</p>
<p>示例 1：</p>
<ul>
<li>输入: 00000010100101000001111010011100</li>
<li>输出: 00111001011110000010100101000000</li>
<li>解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。</li>
</ul>
<p>示例 2：</p>
<ul>
<li>输入：11111111111111111111111111111101</li>
<li>输出：10111111111111111111111111111111</li>
<li>解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。</li>
</ul>
<h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>从最低位到最高位逐位检查n的第i位是不是为1，如果是, 就把res的第<code>31-i</code>位设为1。</p>
<h4 id="Python实现-6"><a href="#Python实现-6" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        mask = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> n &amp; mask == mask:</span><br><span class="line">                res = res | (<span class="number">1</span> &lt;&lt; <span class="number">31</span>-i)</span><br><span class="line">            mask = mask &lt;&lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h3 id="476-数字的补数"><a href="#476-数字的补数" class="headerlink" title="476-数字的补数"></a>476-数字的补数</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。</p>
<p>注意:给定的整数保证在32位带符号整数的范围内。你可以假定二进制数不包含前导零位。</p>
<p>示例 1:</p>
<ul>
<li>输入: 5</li>
<li>输出: 2</li>
<li>解释: 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。</li>
</ul>
<p>示例 2:</p>
<ul>
<li>输入: 1</li>
<li>输出: 0</li>
<li>解释: 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。</li>
</ul>
<h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>首先要求得二进制数的位数，然后构造一个长度等于二进制数长度的全1的数，然后异或即可得到补数。</p>
<h4 id="Python实现-7"><a href="#Python实现-7" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findComplement</span><span class="params">(self, num: int)</span> -&gt; int:</span></span><br><span class="line">        mask = <span class="number">1</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> num &gt;= mask:</span><br><span class="line">            <span class="comment"># 除首位外全1的数</span></span><br><span class="line">            res = res | mask</span><br><span class="line">            <span class="comment"># 0b1、0b10、0b100...</span></span><br><span class="line">            mask = mask &lt;&lt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num ^ res</span><br></pre></td></tr></table></figure>


<h2 id="全组合相关题目"><a href="#全组合相关题目" class="headerlink" title="全组合相关题目"></a>全组合相关题目</h2><h3 id="78-子集"><a href="#78-子集" class="headerlink" title="78-子集"></a>78-子集</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>数组的每个元素，可以有两个状态：</p>
<ol>
<li>不在子数组中（用 0 表示）；</li>
<li>在子数组中（用 1 表示）。</li>
</ol>
<p>那么得到的组合序列一共有2^N个, 其中<code>00...00</code>表示所有元素都不取，<code>00...01</code>表示只取第一个，依次类推。</p>
<p>下面是一个例子：</p>
<img src="/archives/fa228c3f/78.png" class="" title="LeetCode78">

<h4 id="Python实现-8"><a href="#Python实现-8" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        size = len(nums)  <span class="comment"># 数组长度</span></span><br><span class="line">        n = <span class="number">1</span> &lt;&lt; size     <span class="comment"># 位掩码个数</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="comment"># 根据当前位掩码是否为1决定是否加入数组该位</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(size):</span><br><span class="line">                <span class="keyword">if</span> i &gt;&gt; j &amp; <span class="number">1</span>:</span><br><span class="line">                    temp.append(nums[j])</span><br><span class="line">            res.append(temp)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


<h2 id="数学相关题目"><a href="#数学相关题目" class="headerlink" title="数学相关题目"></a>数学相关题目</h2><h3 id="29-两数相除"><a href="#29-两数相除" class="headerlink" title="29-两数相除"></a>29-两数相除</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，<strong>要求不使用乘法、除法和 mod 运算符</strong>。</p>
<p>返回被除数 dividend 除以除数 divisor 得到的商。</p>
<p>示例 1:</p>
<ul>
<li>输入: dividend = 10, divisor = 3</li>
<li>输出: 3</li>
</ul>
<p>示例 2:</p>
<ul>
<li>输入: dividend = 7, divisor = -3</li>
<li>输出: -2</li>
</ul>
<p>说明:</p>
<ul>
<li>被除数和除数均为 32 位有符号整数。</li>
<li>除数不为 0。</li>
<li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 <code>[−2^31,  2^31 − 1]</code>。本题中，如果除法结果溢出，则返回 <code>2^31 − 1</code>。</li>
</ul>
<h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><p>题目中要求我们不能用乘法和除法，但是我们可以用减法，我们可以通过<strong>被除数最多可以减多少个除数还能保证是非负来得到商</strong>。</p>
<p>$$<br>dividend=quotient∗divisor+remainder<br>$$</p>
<p>不过这样在某些情况会超时（比如<code>2**30/1</code>），为了解决效率问题，可以<strong>减去除数的倍数</strong>，利用位运算，每次除数左移一位（2倍），次数相应加对应的倍数。然后再判断当前的和是否大于被除数，如果大于的话，再把除数回置（右移）。</p>
<h4 id="Python实现-9"><a href="#Python实现-9" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(self, dividend: int, divisor: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 求最后结果的符号</span></span><br><span class="line">        sign = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)</span><br><span class="line">        dividend = abs(dividend)</span><br><span class="line">        divisor = abs(divisor)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 被除数减去除数</span></span><br><span class="line">        quotient = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 除数加倍直到超过剩余的被除数</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> dividend - (divisor &lt;&lt; count) &gt;= <span class="number">0</span>:</span><br><span class="line">            quotient += (<span class="number">1</span> &lt;&lt; count)</span><br><span class="line">            dividend -= (divisor &lt;&lt; count)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 除数减半直到count=0</span></span><br><span class="line">        <span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            count -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dividend - (divisor &lt;&lt; count) &gt;= <span class="number">0</span>:</span><br><span class="line">                quotient += (<span class="number">1</span> &lt;&lt; count)</span><br><span class="line">                dividend -= (divisor &lt;&lt; count)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 负数处理</span></span><br><span class="line">        <span class="keyword">if</span> sign:</span><br><span class="line">            quotient = -quotient </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 最大数处理</span></span><br><span class="line">        <span class="keyword">if</span> quotient &gt; <span class="number">2147483647</span>:</span><br><span class="line">            quotient = <span class="number">2147483647</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 最小数处理</span></span><br><span class="line">        <span class="keyword">if</span> quotient &lt; <span class="number">-2147483648</span>:</span><br><span class="line">            quotient = <span class="number">-2147483648</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> quotient</span><br></pre></td></tr></table></figure>

<h3 id="201-数字范围按位与"><a href="#201-数字范围按位与" class="headerlink" title="201-数字范围按位与"></a>201-数字范围按位与</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定范围 <code>[m, n]</code>，其中 <code>0 &lt;= m &lt;= n &lt;= 2147483647</code>，返回此范围内所有数字的按位与（包含 m, n 两端点）。</p>
<p>示例 1: </p>
<ul>
<li>输入: <code>[5,7]</code></li>
<li>输出: 4</li>
</ul>
<p>示例 2:</p>
<ul>
<li>输入: <code>[0,1]</code></li>
<li>输出: 0</li>
</ul>
<h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><p>此题其实就是寻找<code>[m,n]</code>范围内二进制数<strong>高位（左边）没有变化的数</strong>（由于是按位与，那么某位一旦出现0，结果该位肯定是0），后面补上0即为所求的结果。</p>
<p>举个例子：</p>
<ul>
<li>范围：<code>[26,30]</code></li>
<li>公共部分：<strong>11</strong>010、<strong>11</strong>011、<strong>11</strong>100、<strong>11</strong>101、<strong>11</strong>110</li>
</ul>
<h4 id="Python实现-10"><a href="#Python实现-10" class="headerlink" title="Python实现"></a>Python实现</h4><p>我们可以建立一个31位都为1的mask，然后每次左移一位，比较<code>m &amp; mask</code>和<code>n &amp; mask</code>是否相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rangeBitwiseAnd</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">        mask = (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (m &amp; mask) != (n &amp; mask):</span><br><span class="line">            mask = mask &lt;&lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> m &amp; mask</span><br></pre></td></tr></table></figure>

<h3 id="371-两整数之和"><a href="#371-两整数之和" class="headerlink" title="371-两整数之和"></a>371-两整数之和</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: a &#x3D; 1, b &#x3D; 2</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: a &#x3D; -2, b &#x3D; 3</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>

<h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><p>题目说不能使用运算符 + 和 -，那么我们就要使用其他方式来替代这两个运算符的功能。</p>
<p>我们可以把 a + b 的问题拆分为 (a 和 b 的无进位结果) + (a 和 b 的进位结果)：</p>
<ul>
<li>无进位加法使用异或运算计算得出</li>
<li>进位结果使用与运算和移位运算计算得出</li>
</ul>
<p>循环此过程，直到进位为 0。</p>
<p>注意：由于Python整数不是32位，为了让负数结果能够正确表示，需要做一定处理。</p>
<h4 id="Python实现-11"><a href="#Python实现-11" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSum</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type a: int</span></span><br><span class="line"><span class="string">        :type b: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 2^32</span></span><br><span class="line">        MASK = <span class="number">0x100000000</span></span><br><span class="line">        <span class="comment"># 整型最大值</span></span><br><span class="line">        MAX_INT = <span class="number">0x7FFFFFFF</span></span><br><span class="line">        MIN_INT = <span class="number">0x80000000</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 不考虑进位加法</span></span><br><span class="line">            sums = a ^ b</span><br><span class="line">            <span class="comment"># 进位</span></span><br><span class="line">            carry = (a &amp; b) &lt;&lt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 取余范围限制在 [0, 2^32-1] 范围内</span></span><br><span class="line">            a = sums % MASK</span><br><span class="line">            b = carry % MASK</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理Python整数不是32位问题（负数的正确表示）</span></span><br><span class="line">        <span class="keyword">if</span> a &lt;= MAX_INT:</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ~((a % MIN_INT) ^ MAX_INT)</span><br></pre></td></tr></table></figure>


<h2 id="其他类型题目"><a href="#其他类型题目" class="headerlink" title="其他类型题目"></a>其他类型题目</h2><h3 id="693-交替位二进制数"><a href="#693-交替位二进制数" class="headerlink" title="693-交替位二进制数"></a>693-交替位二进制数</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个正整数，检查他是否为交替位二进制数：换句话说，就是他的二进制数相邻的两个位数永不相等。</p>
<p>示例 1:</p>
<ul>
<li>输入: 5</li>
<li>输出: True</li>
<li>解释: 5的二进制数是: 101</li>
</ul>
<p>示例 2:</p>
<ul>
<li>输入: 7</li>
<li>输出: False</li>
<li>解释: 7的二进制数是: 111</li>
</ul>
<h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><p>我们可以用把这个二进制和右移1位后的数进行<strong>异或</strong>，根据得到的数是否为全1来判断是否是交替二进制数。</p>
<h4 id="Python实现-12"><a href="#Python实现-12" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasAlternatingBits</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        a = n ^ (n &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 判断a是否为全1</span></span><br><span class="line">        <span class="keyword">if</span> a &amp; (a + <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>位运算</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>原码、反码、补码详解</title>
    <url>/archives/cfbbb02f.html</url>
    <content><![CDATA[<p>本文简单总结了原码、反码、补码的计算以及由来。</p>
<a id="more"></a>

<h2 id="机器数和真值"><a href="#机器数和真值" class="headerlink" title="机器数和真值"></a>机器数和真值</h2><h3 id="机器数"><a href="#机器数" class="headerlink" title="机器数"></a>机器数</h3><p>一个数在计算机中的<strong>二进制表示形式</strong>，叫做这个数的机器数。机器数是<strong>带符号</strong>的，在计算机用一个数的最高位存放符号，正数为0，负数为1。</p>
<p>比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是10000011。这里的 00000011 和 10000011 就是机器数。</p>
<h3 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h3><p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>
<h2 id="原码、反码、补码的基础概念和计算方法"><a href="#原码、反码、补码的基础概念和计算方法" class="headerlink" title="原码、反码、补码的基础概念和计算方法"></a>原码、反码、补码的基础概念和计算方法</h2><p>原码、反码、补码是机器存储一个具体数字的编码方式。</p>
<h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如如果是8位二进制：</p>
<ul>
<li><code>[+1]原 = 0000 0001</code></li>
<li><code>[-1]原 = 1000 0001</code></li>
</ul>
<p>因为第一位是符号位，所以8位二进制数的取值范围就是：<code>[1111 1111 , 0111 1111]</code>，即<code>[-127 , 127]</code>。</p>
<p>原码是人脑最容易理解和计算的表示方式。</p>
<h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><ul>
<li>正数的反码是其本身。</li>
<li>负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</li>
</ul>
<p>下面是一个例子：</p>
<ul>
<li><code>[+1] = [00000001]原 = [00000001]反</code></li>
<li><code>[-1] = [10000001]原 = [11111110]反</code></li>
</ul>
<p>可见如果一个反码表示的是负数，人脑无法直观的看出来它的数值，通常要将其转换成原码再计算。</p>
<h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><ul>
<li>正数的补码就是其本身。</li>
<li>负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(即在反码的基础上+1)</li>
</ul>
<p>下面是一个例子：</p>
<ul>
<li><code>[+1] = [00000001]原 = [00000001]反 = [00000001]补</code></li>
<li><code>[-1] = [10000001]原 = [11111110]反 = [11111111]补</code></li>
</ul>
<p>对于负数，补码表示方式也是人脑无法直观看出其数值的，通常也需要转换成原码再计算其数值。</p>
<h2 id="原码、反码、补码的由来"><a href="#原码、反码、补码的由来" class="headerlink" title="原码、反码、补码的由来"></a>原码、反码、补码的由来</h2><p>人脑可以知道第一位是符号位，在计算的时候我们会根据符号位，选择对真值区域的加减。但是对于计算机，加减乘数已经是最基础的运算，要设计的尽量简单。计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂！于是人们想出了将符号位也参与运算的方法。我们知道，根据运算法则减去一个正数等于加上一个负数，即: <code>1 - 1 = 1 + (-1) = 0</code>。因此，机器可以只有加法而没有减法，这样计算机运算的设计就更简单了。</p>
<p>原码：</p>
<table>
<thead>
<tr>
<th>正数</th>
<th>正数（原码）</th>
<th>负数</th>
<th>负数（原码）</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0000</td>
<td>0</td>
<td>1000</td>
</tr>
<tr>
<td>1</td>
<td>0001</td>
<td>-1</td>
<td>1001</td>
</tr>
<tr>
<td>2</td>
<td>0010</td>
<td>-2</td>
<td>1010</td>
</tr>
<tr>
<td>3</td>
<td>0011</td>
<td>-3</td>
<td>1011</td>
</tr>
<tr>
<td>4</td>
<td>0100</td>
<td>-4</td>
<td>1100</td>
</tr>
<tr>
<td>5</td>
<td>0101</td>
<td>-5</td>
<td>1101</td>
</tr>
<tr>
<td>6</td>
<td>0110</td>
<td>-6</td>
<td>1110</td>
</tr>
<tr>
<td>7</td>
<td>0111</td>
<td>-7</td>
<td>1111</td>
</tr>
</tbody></table>
<p>我们希望+1和-1相加是0，但计算机只能算出<code>0001+1001=1010 (-2)</code>。</p>
<p>为了解决“正负相加等于0”的问题，在“原码”的基础上，人们发明了“反码”：</p>
<table>
<thead>
<tr>
<th>正数</th>
<th>正数（反码）</th>
<th>负数</th>
<th>负数（反码）</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0000</td>
<td>0</td>
<td>1111</td>
</tr>
<tr>
<td>1</td>
<td>0001</td>
<td>-1</td>
<td>1110</td>
</tr>
<tr>
<td>2</td>
<td>0010</td>
<td>-2</td>
<td>1101</td>
</tr>
<tr>
<td>3</td>
<td>0011</td>
<td>-3</td>
<td>1100</td>
</tr>
<tr>
<td>4</td>
<td>0100</td>
<td>-4</td>
<td>1011</td>
</tr>
<tr>
<td>5</td>
<td>0101</td>
<td>-5</td>
<td>1010</td>
</tr>
<tr>
<td>6</td>
<td>0110</td>
<td>-6</td>
<td>1001</td>
</tr>
<tr>
<td>7</td>
<td>0111</td>
<td>-7</td>
<td>1000</td>
</tr>
</tbody></table>
<p>当“原码”变成“反码”时，完美的解决了“正负相加等于0”的问题，过去的+1和-1相加，变成了<code>0001+1101=1111</code>，刚好反码表示方式中，1111象征-0。</p>
<p>人们总是进益求精，历史遗留下来的问题—— 有两个零存在，+0 和 -0。我们希望只有一个0，所以发明了”补码”，同样是针对”负数”做处理的。从原来”反码”的基础上，补充一个新的代码，（+1）。</p>
<table>
<thead>
<tr>
<th>正数</th>
<th>正数（补码）</th>
<th>负数</th>
<th>负数（补码）</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0000</td>
<td><del>0</del></td>
<td><del>0000</del></td>
</tr>
<tr>
<td>1</td>
<td>0001</td>
<td>-1</td>
<td>1111</td>
</tr>
<tr>
<td>2</td>
<td>0010</td>
<td>-2</td>
<td>1110</td>
</tr>
<tr>
<td>3</td>
<td>0011</td>
<td>-3</td>
<td>1101</td>
</tr>
<tr>
<td>4</td>
<td>0100</td>
<td>-4</td>
<td>1100</td>
</tr>
<tr>
<td>5</td>
<td>0101</td>
<td>-5</td>
<td>1011</td>
</tr>
<tr>
<td>6</td>
<td>0110</td>
<td>-6</td>
<td>1010</td>
</tr>
<tr>
<td>7</td>
<td>0111</td>
<td>-7</td>
<td>1001</td>
</tr>
<tr>
<td></td>
<td></td>
<td>-8</td>
<td>1000</td>
</tr>
</tbody></table>
<p>有得必有失，在补一位1的时候，要丢掉最高位。我们要处理”反码”中的”-0”，当1111再补上一个1之后，变成了10000，丢掉最高位就是0000，刚好和左边正数的0完美融合。这样就解决了+0和-0同时存在的问题。</p>
<p>另外”正负数相加等于0”的问题，同样得到满足，举例，3和（-3）相加，<code>0011 + 1101 =10000</code>，丢掉最高位，就是0000（0）。</p>
<p>以上就是”补码”的存在方式。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html" target="_blank" rel="noopener external nofollow noreferrer">原码, 反码, 补码 详解</a></li>
<li><a href="https://www.zhihu.com/question/20159860" target="_blank" rel="noopener external nofollow noreferrer">原码、反码、补码的产生、应用以及优缺点有哪些？</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>计算机原理</category>
      </categories>
      <tags>
        <tag>计算机原理</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>VNC基本命令笔记</title>
    <url>/archives/14dedde.html</url>
    <content><![CDATA[<p>这里我整理了vnc的基本命令。</p>
<a id="more"></a>

<h2 id="vnc配置文件"><a href="#vnc配置文件" class="headerlink" title="vnc配置文件"></a>vnc配置文件</h2><p>vnc的配置文件在<code>/etc/sysconfig/vncservers</code>目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The VNCServerS variable is a list ofdisplay:user pairs.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Uncomment the lines below to start a VNCserver on display :2</span></span><br><span class="line"><span class="comment"># as my 'myusername’ (adjust this to yourown). You will also</span></span><br><span class="line"><span class="comment"># need to set a VNC password; run 'manvncpasswd’ to see how</span></span><br><span class="line"><span class="comment"># to do that.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># DO NOT RUN THIS SERVICE if your localarea network is</span></span><br><span class="line"><span class="comment"># untrusted! For a secure way of using VNC,see</span></span><br><span class="line"><span class="comment">#&lt;URL:http://www.uk.research.att.com/archive/vnc/sshvnc.html &gt;.</span></span><br><span class="line"><span class="comment"># Use "-nolisten tcp" to prevent Xconnections to your VNC server via TCP.</span></span><br><span class="line"><span class="comment"># Use "-nohttpd" to prevent web-based VNCclients connecting.</span></span><br><span class="line"><span class="comment"># Use "-localhost" to prevent remote VNCclients connecting except when</span></span><br><span class="line"><span class="comment"># doing so through a secure tunnel. See the "-via" option in the</span></span><br><span class="line"><span class="comment"># `man vncviewer’ manual page.</span></span><br><span class="line">VNCSERVERS=”1:root 2:leo”            <span class="comment">#此处添加用户，一般只添加一个1:root也就行了。</span></span><br><span class="line">VNCSERVERARGS[1]=”-geometry 1600×900-nolisten tcp -nohttpd -localhost”</span><br><span class="line">VNCSERVERARGS[2]=”-geometry 1024×768-nolisten tcp -nohttpd -localhost”</span><br></pre></td></tr></table></figure>

<p>注意：上面是分别设置的root和leo两个用户的分辨率，注意是用端口号区分的。</p>
<p>另外也可以通过命令行临时修改分辨率及色深，这种方式<strong>重启后就会丢失</strong>，命令如下（这个后面会讲）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncserver -geometry 800×600 :2 <span class="comment">#设置vncserver的分辨率</span></span><br><span class="line">vncserver -depth 16 :2         <span class="comment">#设置vncserver的色深</span></span><br></pre></td></tr></table></figure>

<h2 id="启动vnc服务器"><a href="#启动vnc服务器" class="headerlink" title="启动vnc服务器"></a>启动vnc服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncserver :2</span><br></pre></td></tr></table></figure>

<ul>
<li>每个用户都可以启动自己的VNCServer远程桌面。</li>
<li>每个用户可以启动多个VNCServer远程桌面，它们用ip加端口号：<code>ip:1、ip:2、ip:3</code> 来标识、区分。</li>
<li>使用同一端口会使另外登录的用户自动退出。</li>
<li>VNCServer的大部分配置文件及日志文件都在用户目录下<code>.vnc</code>目录下。</li>
</ul>
<p>启动后发现，与自己的电脑桌面相比界面比较小，点击全屏后，原来多余的部分都变成黑色的了。通过上面说的查看vnc进程命令后发现有个信息<code>-geometry 1024x768</code>，这说明vnc的默认分辨率是<code>1024x768</code>，而我的笔记本分辨率是<code>1366x768</code>。所以要全屏，只需要修改分辨率即可，修改分辨率的方法见后文。</p>
<h2 id="查看vnc进程"><a href="#查看vnc进程" class="headerlink" title="查看vnc进程"></a>查看vnc进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep vnc</span><br></pre></td></tr></table></figure>

<p>该命令可以列出当前系统上所有用户vnc界面的端口号，分辨率等信息。</p>
<h2 id="杀掉自己vnc端口对应的进程"><a href="#杀掉自己vnc端口对应的进程" class="headerlink" title="杀掉自己vnc端口对应的进程"></a>杀掉自己vnc端口对应的进程</h2><p>我的端口号是2，这里我杀掉vnc 2号端口的进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncserver -<span class="built_in">kill</span> :2</span><br></pre></td></tr></table></figure>

<h2 id="修改vnc分辨率"><a href="#修改vnc分辨率" class="headerlink" title="修改vnc分辨率"></a>修改vnc分辨率</h2><p>修改分辨率的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncserver -geometry 1366x768 :2</span><br></pre></td></tr></table></figure>

<p>在这里要注意一点，在你的<code>vnc server</code>运行期间，使用该命令是会报错的：<code>A VNC server is already running as :2</code>，所以，在修改vnc分辨率之前，我们需要先将vnc server关闭。用上面说过的<code>-kill</code>命令杀掉vnc端口对应的进程即可。 </p>
<p>然后再运行命令修改分辨率即可。之后登录vnc界面就可以看到界面的大小已经改变了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://xstarcd.github.io/wiki/Linux/vnc-server.html" target="_blank" rel="noopener external nofollow noreferrer">VNC简介</a></li>
<li><a href="https://blog.csdn.net/yingyujianmo/article/details/45201097" target="_blank" rel="noopener external nofollow noreferrer">vnc分辨率修改</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VNC</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法的Python实现以及时间复杂度分析</title>
    <url>/archives/58365ec3.html</url>
    <content><![CDATA[<p>我用Python实现了冒泡排序、选择排序、插入排序、归并排序、快速排序。然后简单讲了讲快速排序的优化，我们可以通过<strong>小数组采用插入排序</strong>来减少递归的开销；对于有一定顺序的数组，我采用<strong>三数取中</strong>来提高性能；对于包含大量重复数的数组，我用了<strong>三路快速排序</strong>来提高性能。</p>
<p>最后，我把这些排序算法应用在随机数组、升序数组、降序数组、包含大量重复数的数组上，比较了一下它们的耗时。</p>
<a id="more"></a>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序的大体思想就是通过与相邻元素的比较和交换来把小的数交换到最前面。这个过程类似于水泡向上升一样，因此而得名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(a,i,j)</span>:</span></span><br><span class="line">    temp = a[i]</span><br><span class="line">    a[i] = a[j]</span><br><span class="line">    a[j] = temp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BubbleSort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums)-i<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>]:</span><br><span class="line">                exchange(nums,j,j+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度O(n^2)</li>
</ul>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>首先，找到数组中最小的那个元素，然后将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。然后在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法叫做选择排序，因为它在<strong>不断地选择剩余元素之中的最小者</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(a,i,j)</span>:</span></span><br><span class="line">    temp = a[i]</span><br><span class="line">    a[i] = a[j]</span><br><span class="line">    a[j] = temp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SelectSort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i,len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &lt; nums[minIndex]:</span><br><span class="line">                minIndex = j</span><br><span class="line">        exchange(nums,i,minIndex)</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度O(n^2)</li>
</ul>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>通常人们整理桥牌的方法是一张一张的来，将每一张牌插入到其他已经有序的牌中的适当位置。在计算机的实现中，为了给要插入的元素腾出空间，我们需要将其余所有元素在插入之前都向右移动一位。这种算法叫做插入排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(a,i,j)</span>:</span></span><br><span class="line">    temp = a[i]</span><br><span class="line">    a[i] = a[j]</span><br><span class="line">    a[j] = temp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertSort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">        j = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt; nums[j]:</span><br><span class="line">            exchange(nums,i,j)</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            i -= <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度O(n^2)</li>
</ul>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序体现的是一种分治思想（Divide and conquer），下面是其排序的步骤：</p>
<ol>
<li>将数组一分为二（Divide array into two halves）</li>
<li>对每部分进行递归式地排序（Recursively sort each half）</li>
<li>合并两个部分（Merge two halves）</li>
</ol>
<h3 id="merge-函数"><a href="#merge-函数" class="headerlink" title="merge()函数"></a>merge()函数</h3><p>具体步骤如下：</p>
<ol>
<li>给出原数组a[]，该数组的low到mid，mid+1到high的子数组是各自有序的。</li>
<li>将数组复制到辅助数组（auxiliary array）中，两部分数组的首元素分别以i和j为下标，给原数组首元素以k为下标。</li>
<li>比较i下标和j下标的元素，将较小值赋到k下标位置的元素内，然后对k和赋值的下标进行递增。</li>
<li>重复上述过程，直到比较完全部元素。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(a,aux,low,mid,high)</span>:</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid+<span class="number">1</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(low,high+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt; mid:</span><br><span class="line">            a[k] = aux[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> j &gt; high:</span><br><span class="line">            a[k] = aux[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> aux[i] &gt; aux[j]:</span><br><span class="line">                a[k] = aux[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a[k] = aux[i]</span><br><span class="line">                i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="sort-函数"><a href="#sort-函数" class="headerlink" title="sort()函数"></a>sort()函数</h3><p>我们要对数组<code>a[low..high]</code>进行排序，先将它分为<code>a[low..mid]</code>和<code>a[mid+1..high]</code>两部分，分别<strong>递归调用</strong>将它们单独排序，最后将有序的子数组归并为最终的排序结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(a,aux,low,high)</span>:</span></span><br><span class="line">    <span class="comment"># 退出条件</span></span><br><span class="line">    <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    sort(a,aux,low,mid)</span><br><span class="line">    sort(a,aux,mid+<span class="number">1</span>,high)</span><br><span class="line">    merge(a,aux,low,mid,high)</span><br></pre></td></tr></table></figure>

<h3 id="MergeSort-函数"><a href="#MergeSort-函数" class="headerlink" title="MergeSort()函数"></a>MergeSort()函数</h3><p>为了保证归并排序函数MergeSort()输入只有未排序的数组，这里调用前面的辅助函数sort()：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MergeSort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    aux = nums.copy()</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(nums)<span class="number">-1</span></span><br><span class="line">    sort(nums,aux,low,high)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(nlogn)</li>
</ul>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是一种<strong>分治</strong>的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。</p>
<blockquote>
<p>分治策略指的是：将原问题分解为若干个规模更小但结构与原问题相似的子问题。递归地解这些子问题，然后将这些子问题的解组合为原问题的解。</p>
</blockquote>
<p>下面是一个示例：</p>
<img src="/archives/58365ec3/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-1.png" class="" title="快速排序-1">

<blockquote>
<p>来源：<a href="https://www.cnblogs.com/sfencs-hcy/p/10602598.html" target="_blank" rel="noopener external nofollow noreferrer">快速排序python实现</a></p>
</blockquote>
<h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>下面的代码短小利于理解，但是空间复杂度大，使用了三个列表解析式，而且每次选取进行比较时需要遍历整个序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">QuickSort</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(a) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = a[<span class="number">0</span>]</span><br><span class="line">        less_than_pivot = [x <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">if</span> x &lt; pivot]</span><br><span class="line">        more_than_pivot = [x <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">if</span> x &gt; pivot]</span><br><span class="line">        pivot_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">if</span> x == pivot]</span><br><span class="line">        <span class="keyword">return</span> QuickSort(less_than_pivot) + pivot_list + QuickSort(more_than_pivot)</span><br></pre></td></tr></table></figure>

<h3 id="原地排序实现"><a href="#原地排序实现" class="headerlink" title="原地排序实现"></a>原地排序实现</h3><ol>
<li>切分——partition()</li>
</ol>
<p>切分方法：先随意地取<code>a[low]</code>作为切分元素（即那个将会被排定的元素），然后我们从数组的左端开始向右扫描直到找到一个大于等于它的元素，再从数组的右端开始向左扫描直到找到一个小于等于它的元素。这两个元素是没有排定的，因此我们交换它们的位置。如此继续，当两个指针相遇时，我们只需要将切分元素<code>a[low]</code>和左子元素最右侧的元素<code>a[j]</code>交换然后返回j即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(a,low,high)</span>:</span></span><br><span class="line">    i = low       <span class="comment"># 循环内i=i+1</span></span><br><span class="line">    j = high + <span class="number">1</span>  <span class="comment"># 循环内j=j-1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 如果a[i]比基准数小,则后移一位直到有大于等于基准数的数出现</span></span><br><span class="line">        i += <span class="number">1</span>   <span class="comment"># 保证i每次循环都变化，不会陷入死循环（所有数都相等时这种情况）</span></span><br><span class="line">        <span class="keyword">while</span> a[i] &lt; a[low] <span class="keyword">and</span> i &lt; high:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果a[j]比基准数大,则前移一位直到有小于等于基准数的数出现</span></span><br><span class="line">        j -= <span class="number">1</span>   <span class="comment"># 保证j每次循环都变化，不会陷入死循环（所有数都相等时这种情况）</span></span><br><span class="line">        <span class="keyword">while</span> a[j] &gt; a[low] <span class="keyword">and</span> j &gt; low:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果两个指针交叉，说明已经排序完了</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        exchange(a,i,j)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 指针相遇后，j所在的元素小于low，进行互换</span></span><br><span class="line">    exchange(a,low,j)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure>

<p>这里有个细节需要注意下，这个代码相比我最初的代码改变了：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">def partition(a,low,high):</span><br><span class="line"><span class="deletion">-   i = low + 1</span></span><br><span class="line"><span class="addition">+   i = low       # 循环内i=i+1</span></span><br><span class="line"><span class="deletion">-   j = high</span></span><br><span class="line"><span class="addition">+   j = high + 1  # 循环内j=j-1</span></span><br><span class="line">    while True:</span><br><span class="line">        # 如果a[i]比基准数小,则后移一位直到有大于等于基准数的数出现</span><br><span class="line"><span class="addition">+       i += 1   # 保证i每次循环都变化，不会陷入死循环（所有数都相等时这种情况）</span></span><br><span class="line">        while a[i] &lt; a[low] and i &lt; high:</span><br><span class="line">            i += 1</span><br><span class="line">        # 如果a[j]比基准数大,则前移一位直到有小于等于基准数的数出现</span><br><span class="line"><span class="addition">+       j -= 1   # 保证j每次循环都变化，不会陷入死循环（所有数都相等时这种情况）</span></span><br><span class="line">        while a[j] &gt; a[low] and j &gt; low:</span><br><span class="line">            j -= 1</span><br><span class="line"></span><br><span class="line">        # 如果两个指针交叉，说明已经排序完了</span><br><span class="line">        if i &gt;= j:</span><br><span class="line">            break</span><br><span class="line">        </span><br><span class="line">        exchange(a,i,j)</span><br><span class="line">    </span><br><span class="line">    # 指针相遇后，j所在的元素小于low，进行互换</span><br><span class="line">    exchange(a,low,j)</span><br><span class="line">    </span><br><span class="line">    return j</span><br></pre></td></tr></table></figure>

<p>如果没有这些代码，当碰到<code>[2,2,2]</code>这样的情况时，i和j一直不会改变，永远无法满足<code>if i &gt;= j</code>，然后函数就一直在<code>while True</code>里边死循环。</p>
<ol start="2">
<li>sort()函数</li>
</ol>
<p>快速排序递归地将子数组<code>a[low..high]</code>排序，先用<code>partition()</code>方法将<code>a[j]</code>放到一个合适位置，然后再用递归调用将其他位置的元素排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(a,low,high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    j = partition(a,low,high)</span><br><span class="line">    sort(a,low,j<span class="number">-1</span>)</span><br><span class="line">    sort(a,j+<span class="number">1</span>,high)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>QuickSort()函数</li>
</ol>
<p>为了保证快速排序函数QuickSort()输入只有未排序的数组，这里调用前面的辅助函数sort()：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">QuickSort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(nums)<span class="number">-1</span></span><br><span class="line">    sort(nums,low,high)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>

<h3 id="快速排序的时间复杂度"><a href="#快速排序的时间复杂度" class="headerlink" title="快速排序的时间复杂度"></a>快速排序的时间复杂度</h3><ul>
<li>最优情况：每一次的基准值都正好为序列的中位数，时间复杂度为nlogn</li>
<li>最坏情况：<strong>每一次的基准值都恰好是序列的最大值或最小值，时间复杂度为n^2</strong>。有意思的是如果每次选第一个数做基准值，但每次这个数又是最小值，那么序列本身就是有序的，但时间复杂度也是最高的</li>
</ul>
<p>因此，要想优化时间复杂度，<strong>关键在于基准值的选择</strong>。</p>
<h3 id="快速排序的优化"><a href="#快速排序的优化" class="headerlink" title="快速排序的优化"></a>快速排序的优化</h3><ol>
<li>优化小数组效率</li>
</ol>
<p><strong>对于规模很小的情况，快速排序的优势并不明显（可能没有优势），而递归型的算法还会带来额外的开销</strong>。于是对于这类情况可以选择非递归型的算法来替代。</p>
<p>那就有两个问题：多小的数组算小数组？替换的算法是什么？</p>
<p>通常这个阈值设定为10，替换的算法一般是插入排序。</p>
<p>下面是Python实现，这里只需要在sort()函数中加一个数组大小判断即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CUTOFF = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(a,low,high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当数组大小小于CUTOFF时，调用插入排序</span></span><br><span class="line">    <span class="keyword">if</span> high - low &lt;= CUTOFF - <span class="number">1</span>:</span><br><span class="line">        InsertSort(a[low:high+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    j = partition(a,low,high)</span><br><span class="line">    sort(a,low,j<span class="number">-1</span>)</span><br><span class="line">    sort(a,j+<span class="number">1</span>,high)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>合理选择pivot</li>
</ol>
<p>前面也讨论过，直接选择分区的第一个或最后一个元素做 pivot 是不合适的。对于已经排好序，或者接近排好序的情况，会进入最差情况，时间复杂度退化到n^2。</p>
<p>pivot选取的理想情况是：让分区中比 pivot 小的元素数量和比 pivot 大的元素数量差不多。较常用的做法是三数取中（ median of three ），即从第一项、最后一项、中间一项中取中位数作为 pivot。当然这并不能完全避免最差情况的发生。所以很多时候会采取更小心、更严谨的 pivot 选择方案（对于大数组特别重要）。比如先把大数组平均切分成左中右三个部分，每个部分用三数取中得到一个中位数，再从得到的三个中位数中找出中位数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CUTOFF = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_median</span><span class="params">(nums,low,high)</span>:</span></span><br><span class="line">    <span class="comment"># 计算数组中间的元素的下标</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目标: arr[mid] &lt;= arr[high] </span></span><br><span class="line">    <span class="keyword">if</span> nums[mid] &gt; nums[high]:</span><br><span class="line">        exchange(nums,mid,high)</span><br><span class="line">    <span class="comment"># 目标: arr[low] &lt;= arr[high]</span></span><br><span class="line">    <span class="keyword">if</span> nums[low] &gt; nums[high]:</span><br><span class="line">        exchange(nums,low,high)</span><br><span class="line">    <span class="comment"># 目标: arr[low] &gt;= arr[mid]</span></span><br><span class="line">    <span class="keyword">if</span> nums[low] &lt; nums[mid]:</span><br><span class="line">        exchange(nums,low,mid)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 此时，arr[mid] &lt;= arr[low] &lt;= arr[high]，low的位置上保存这三个位置中间的值</span></span><br><span class="line">    <span class="keyword">return</span> nums[low]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(a,low,high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当数组大小小于CUTOFF时，调用插入排序</span></span><br><span class="line">    <span class="keyword">if</span> high - low &lt;= CUTOFF - <span class="number">1</span>:</span><br><span class="line">        InsertSort(a[low:high+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 三数取中(median of three)，low的位置上保存这三个位置中间的值</span></span><br><span class="line">    _ = get_median(a,low,high)</span><br><span class="line"></span><br><span class="line">    j = partition(a,low,high)</span><br><span class="line">    sort(a,low,j<span class="number">-1</span>)</span><br><span class="line">    sort(a,j+<span class="number">1</span>,high)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>处理重复元素问题</li>
</ol>
<p>当一个数组里的元素全部一样大（或者存在大量相同元素）会令快速排序进入最差情况，因为不管怎么选 pivot，都会使分区结果一边很大一边很小。</p>
<p>为了解决这个问题，我们需要修改分区过程，思路跟上面说的两路分区（基本的快排）类似，只是现在我们需要小于 pivot、等于 pivot、大于 pivot 三个分区。</p>
<p>举个例子，待分割序列：<code>6 4 6 7 1 6 7 6 8 6</code>，其中<code>pivot=6</code>：</p>
<ul>
<li>未对与key元素相等处理的划分结果：<code>1 4 6 6 7 6 7 6 8 6</code><ul>
<li>下次的两个子序列为：<code>1 4 6</code> 和 <code>7 6 7 6 8 6</code></li>
</ul>
</li>
<li>对与key元素相等处理的划分结果：<code>1 4 6 6 6 6 6 7 8 7</code><ul>
<li>下次的两个子序列为：<code>1 4</code> 和 <code>7 8 7</code></li>
</ul>
</li>
</ul>
<p>经过对比，我们可以看出，<strong>在一次划分后，把与key相等的元素聚在一起，能减少迭代次数，效率会提高不少</strong>。</p>
<p>具体过程：</p>
<p>如下图，我们可以设置四个游标，左端p、i，右端j、q。i、j的作用跟之前两路划分时候的左右游标相同，就是从两端向中间遍历序列，并将遍历到的元素与pivot比较，如果等于pivot，则移到两端（i对应的元素移到左端，j对应的元素移到右端。移动的方式就是拿此元素和a或d对应的元素进行交换，所以p和q的作用就是记录等于pivot的元素移动过后的边界），反之，如果大于或小于pivot，还按照之前两路划分的方式进行移动。这样一来，中间部分就和两路划分相同，两头是等于pivot的部分，我们只需要将这两部分移动到中间即可。</p>
<img src="/archives/58365ec3/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E4%B8%89%E8%B7%AF%E5%BF%AB%E6%8E%92.jpg" class="" title="三路快排">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(a,low,high)</span>:</span></span><br><span class="line">    p = low + <span class="number">1</span></span><br><span class="line">    i = low + <span class="number">1</span></span><br><span class="line">    j = high</span><br><span class="line">    q = high</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 如果a[i]比基准数小,则后移一位直到有大于等于基准数的数出现</span></span><br><span class="line">        <span class="keyword">while</span> a[i] &lt;= a[low] <span class="keyword">and</span> i &lt; high:</span><br><span class="line">            <span class="comment"># 与pivot相等的元素将其交换到p所在的位置</span></span><br><span class="line">            <span class="keyword">if</span> a[i] == a[low]:</span><br><span class="line">                exchange(a,p,i)</span><br><span class="line">                p += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果a[j]比基准数大,则前移一位直到有小于等于基准数的数出现</span></span><br><span class="line">        <span class="keyword">while</span> a[j] &gt;= a[low] <span class="keyword">and</span> j &gt; low:</span><br><span class="line">            <span class="comment"># 与pivot相等的元素将其交换到q所在的位置</span></span><br><span class="line">            <span class="keyword">if</span> a[j] == a[low]:</span><br><span class="line">                exchange(a,j,q)</span><br><span class="line">                q -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果两个指针交叉，说明已经排序完了</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        exchange(a,i,j)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 因为工作指针i指向的是当前需要处理元素的下一个元素，故而需要退回到当前元素的实际位置，然后将等于pivot元素交换到序列中间</span></span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">    p -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> p &gt;= low:</span><br><span class="line">        exchange(a, i, p)</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        p -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 因为工作指针j指向的是当前需要处理元素的上一个元素，故而需要退回到当前元素的实际位置，然后将等于pivot元素交换到序列中间</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">    q += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q &lt;= high:</span><br><span class="line">        exchange(a, q, j)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        q += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i,j</span><br></pre></td></tr></table></figure>

<p>下面是sort()函数，这里我只写了修改的部分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(a,low,high)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    i,j = partition(a,low,high)</span><br><span class="line">    sort(a,low,i)</span><br><span class="line">    sort(a,j,high)</span><br></pre></td></tr></table></figure>

<h3 id="整体代码实现"><a href="#整体代码实现" class="headerlink" title="整体代码实现"></a>整体代码实现</h3><p>下面是经过优化的快速排序代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CUTOFF = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(a,i,j)</span>:</span></span><br><span class="line">    temp = a[i]</span><br><span class="line">    a[i] = a[j]</span><br><span class="line">    a[j] = temp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertSort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">        j = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt; nums[j]:</span><br><span class="line">            exchange(nums,i,j)</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(a,low,high)</span>:</span></span><br><span class="line">    p = low + <span class="number">1</span></span><br><span class="line">    i = low + <span class="number">1</span></span><br><span class="line">    j = high</span><br><span class="line">    q = high</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 如果a[i]比基准数小,则后移一位直到有大于等于基准数的数出现</span></span><br><span class="line">        <span class="keyword">while</span> a[i] &lt;= a[low] <span class="keyword">and</span> i &lt; high:</span><br><span class="line">            <span class="comment"># 与pivot相等的元素将其交换到p所在的位置</span></span><br><span class="line">            <span class="keyword">if</span> a[i] == a[low]:</span><br><span class="line">                exchange(a,p,i)</span><br><span class="line">                p += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果a[j]比基准数大,则前移一位直到有小于等于基准数的数出现</span></span><br><span class="line">        <span class="keyword">while</span> a[j] &gt;= a[low] <span class="keyword">and</span> j &gt; low:</span><br><span class="line">            <span class="comment"># 与pivot相等的元素将其交换到q所在的位置</span></span><br><span class="line">            <span class="keyword">if</span> a[j] == a[low]:</span><br><span class="line">                exchange(a,j,q)</span><br><span class="line">                q -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果两个指针交叉，说明已经排序完了</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        exchange(a,i,j)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 因为工作指针i指向的是当前需要处理元素的下一个元素，故而需要退回到当前元素的实际位置，然后将等于pivot元素交换到序列中间</span></span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">    p -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> p &gt;= low:</span><br><span class="line">        exchange(a, i, p)</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        p -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 因为工作指针j指向的是当前需要处理元素的上一个元素，故而需要退回到当前元素的实际位置，然后将等于pivot元素交换到序列中间</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">    q += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q &lt;= high:</span><br><span class="line">        exchange(a, q, j)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        q += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i,j</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_median</span><span class="params">(nums,low,high)</span>:</span></span><br><span class="line">    <span class="comment"># 计算数组中间的元素的下标</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目标: arr[mid] &lt;= arr[high] </span></span><br><span class="line">    <span class="keyword">if</span> nums[mid] &gt; nums[high]:</span><br><span class="line">        exchange(nums,mid,high)</span><br><span class="line">    <span class="comment"># 目标: arr[low] &lt;= arr[high]</span></span><br><span class="line">    <span class="keyword">if</span> nums[low] &gt; nums[high]:</span><br><span class="line">        exchange(nums,low,high)</span><br><span class="line">    <span class="comment"># 目标: arr[low] &gt;= arr[mid]</span></span><br><span class="line">    <span class="keyword">if</span> nums[low] &lt; nums[mid]:</span><br><span class="line">        exchange(nums,low,mid)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 此时，arr[mid] &lt;= arr[low] &lt;= arr[high]，low的位置上保存这三个位置中间的值</span></span><br><span class="line">    <span class="keyword">return</span> nums[low]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(a,low,high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当数组大小小于CUTOFF时，调用插入排序</span></span><br><span class="line">    <span class="keyword">if</span> high - low &lt;= CUTOFF - <span class="number">1</span>:</span><br><span class="line">        InsertSort(a[low:high+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 三数取中(median of three)，low的位置上保存这三个位置中间的值</span></span><br><span class="line">    _ = get_median(a,low,high)</span><br><span class="line"></span><br><span class="line">    i,j = partition(a,low,high)</span><br><span class="line">    sort(a,low,i)</span><br><span class="line">    sort(a,j,high)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">QuickSort3Ways</span><span class="params">(nums)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(nums)<span class="number">-1</span></span><br><span class="line">    sort(nums,low,high)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(QuickSort(nums))</span><br></pre></td></tr></table></figure>

<h2 id="快速排序和归并排序对比"><a href="#快速排序和归并排序对比" class="headerlink" title="快速排序和归并排序对比"></a>快速排序和归并排序对比</h2><p>快速排序和归并排序是互补的：</p>
<ul>
<li>归并排序：<ol>
<li>将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；</li>
<li>递归调用发生在处理整个数组之前；</li>
<li>一个数组被等分为两半。</li>
</ol>
</li>
<li>快速排序：<ol>
<li>当两个子数组都有序时，整个数组也就自然有序了；</li>
<li>递归调用发生在处理整个数组之后；</li>
<li>切分（partition）的位置取决于数组的内容。</li>
</ol>
</li>
</ul>
<h2 id="各大排序算法测试"><a href="#各大排序算法测试" class="headerlink" title="各大排序算法测试"></a>各大排序算法测试</h2><p>下面我们对各大排序算法在不同数据集上进行对比，看看它们的优劣。</p>
<h3 id="计时函数"><a href="#计时函数" class="headerlink" title="计时函数"></a>计时函数</h3><p>不同数据集可以用同一个计时函数，具体如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计时函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_time</span><span class="params">(a,sortname)</span>:</span></span><br><span class="line">    time_start = time.time()</span><br><span class="line">    <span class="keyword">if</span> sortname == <span class="string">'BubbleSort'</span>:</span><br><span class="line">        BubbleSort(a)</span><br><span class="line">    <span class="keyword">if</span> sortname == <span class="string">'SelectSort'</span>:</span><br><span class="line">        SelectSort(a)</span><br><span class="line">    <span class="keyword">if</span> sortname == <span class="string">'InsertSort'</span>:</span><br><span class="line">        InsertSort(a)</span><br><span class="line">    <span class="keyword">if</span> sortname == <span class="string">'MergeSort'</span>:</span><br><span class="line">        MergeSort(a)</span><br><span class="line">    <span class="keyword">if</span> sortname == <span class="string">'QuickSort'</span>:</span><br><span class="line">        QuickSort(a)</span><br><span class="line">    <span class="keyword">if</span> sortname == <span class="string">'QuickSort3Ways'</span>:</span><br><span class="line">        QuickSort3Ways(a)</span><br><span class="line">    time_end = time.time()</span><br><span class="line">    <span class="keyword">return</span> (time_end - time_start)</span><br></pre></td></tr></table></figure>

<h3 id="随机数据集"><a href="#随机数据集" class="headerlink" title="随机数据集"></a>随机数据集</h3><p>随机数据生成器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeRandomInput</span><span class="params">(sortname,length,numberOfArrays)</span>:</span></span><br><span class="line">    totalTime = <span class="number">0</span></span><br><span class="line">    <span class="comment">#测试数组数</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(numberOfArrays):</span><br><span class="line">        <span class="comment">#数组大小</span></span><br><span class="line">        a = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(length):</span><br><span class="line">            a.append(random.randint(<span class="number">1</span>, <span class="number">1000000</span>))  <span class="comment"># 测试数据范围</span></span><br><span class="line">        totalTime += count_time(a,sortname)</span><br><span class="line">    <span class="keyword">return</span> totalTime</span><br></pre></td></tr></table></figure>

<p>这里我们生成一个长度为5000的数组，然后重复测试10次，最后计算各个排序算法用时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">length = <span class="number">5000</span></span><br><span class="line">numberOfArrays = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"BubbleSort's total time:"</span>)</span><br><span class="line">print(timeRandomInput(<span class="string">'BubbleSort'</span>,length,numberOfArrays))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"SelectSort's total time:"</span>)</span><br><span class="line">print(timeRandomInput(<span class="string">'SelectSort'</span>,length,numberOfArrays))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"InsertSort's total time:"</span>)</span><br><span class="line">print(timeRandomInput(<span class="string">'InsertSort'</span>,length,numberOfArrays))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"MergeSort's total time:"</span>)</span><br><span class="line">print(timeRandomInput(<span class="string">'MergeSort'</span>,length,numberOfArrays))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"QuickSort's total time:"</span>)</span><br><span class="line">print(timeRandomInput(<span class="string">'QuickSort'</span>,length,numberOfArrays))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"QuickSort3Ways's total time:"</span>)</span><br><span class="line">print(timeRandomInput(<span class="string">'QuickSort3Ways'</span>,length,numberOfArrays))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BubbleSort&#39;s total time:</span><br><span class="line">30.023681640625</span><br><span class="line">SelectSort&#39;s total time:</span><br><span class="line">11.03202223777771</span><br><span class="line">InsertSort&#39;s total time:</span><br><span class="line">24.185371160507202</span><br><span class="line">MergeSort&#39;s total time:</span><br><span class="line">0.1900651454925537</span><br><span class="line">QuickSort&#39;s total time:</span><br><span class="line">0.1554875373840332</span><br><span class="line">QuickSort3Ways&#39;s total time:</span><br><span class="line">0.19011521339416504</span><br></pre></td></tr></table></figure>

<h3 id="降序数据集"><a href="#降序数据集" class="headerlink" title="降序数据集"></a>降序数据集</h3><p>这里我们看下这些排序算法在降序数据集下的表现，首先改变数据生成函数：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">def timeRandomInput(sortname,length,numberOfArrays):</span><br><span class="line">    totalTime = 0</span><br><span class="line">    #测试数组数</span><br><span class="line">    for _ in range(numberOfArrays):</span><br><span class="line">        #数组大小</span><br><span class="line">        a = []</span><br><span class="line">        for _ in range(length):</span><br><span class="line">            a.append(random.randint(1, 1000000))  # 测试数据范围</span><br><span class="line"><span class="addition">+       a.sort(reverse = True)</span></span><br><span class="line">        totalTime += count_time(a,sortname)</span><br><span class="line">    return totalTime</span><br></pre></td></tr></table></figure>

<p>这里如果生成一个长度为10000的数组，快速排序会出现<code>RecursionError: maximum recursion depth exceeded in comparison</code>错误。这个因为Python中默认的最大递归深度是989。解决方案：<strong>手动设置递归调用深度</strong>，具体代码如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line"><span class="addition">+import sys</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+sys.setrecursionlimit(1000000)</span></span><br><span class="line"></span><br><span class="line">def timeRandomInput(sortname,length,numberOfArrays):</span><br><span class="line">    totalTime = 0</span><br><span class="line">    #测试数组数</span><br><span class="line">    for _ in range(numberOfArrays):</span><br><span class="line">        #数组大小</span><br><span class="line">        a = []</span><br><span class="line">        for _ in range(length):</span><br><span class="line">            a.append(random.randint(1, 1000000))  # 测试数据范围</span><br><span class="line">        a.sort(reverse = True)</span><br><span class="line">        totalTime += count_time(a,sortname)</span><br><span class="line">    return totalTime</span><br></pre></td></tr></table></figure>

<p>数组大小改变为5000，重复10次，下面是测试结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BubbleSort&#39;s total time:</span><br><span class="line">45.00776267051697</span><br><span class="line">SelectSort&#39;s total time:</span><br><span class="line">11.393858909606934</span><br><span class="line">InsertSort&#39;s total time:</span><br><span class="line">48.275355100631714</span><br><span class="line">MergeSort&#39;s total time:</span><br><span class="line">0.18087530136108398</span><br><span class="line">QuickSort&#39;s total time:</span><br><span class="line">14.895536661148071</span><br><span class="line">QuickSort3Ways&#39;s total time:</span><br><span class="line">0.10853052139282227</span><br></pre></td></tr></table></figure>

<h3 id="升序数据集"><a href="#升序数据集" class="headerlink" title="升序数据集"></a>升序数据集</h3><p>这里我们看下这些排序算法在升序数据集下的表现，首先改变数据生成函数：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(1000000)</span><br><span class="line"></span><br><span class="line">def timeRandomInput(sortname,length,numberOfArrays):</span><br><span class="line">    totalTime = 0</span><br><span class="line">    #测试数组数</span><br><span class="line">    for _ in range(numberOfArrays):</span><br><span class="line">        #数组大小</span><br><span class="line">        a = []</span><br><span class="line">        for _ in range(length):</span><br><span class="line">            a.append(random.randint(1, 1000000))  # 测试数据范围</span><br><span class="line"><span class="addition">+       a.sort(reverse = False)</span></span><br><span class="line">        totalTime += count_time(a,sortname)</span><br><span class="line">    return totalTime</span><br></pre></td></tr></table></figure>

<p>同样的，这里数组大小为5000，重复10次，下面是测试结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BubbleSort&#39;s total time:</span><br><span class="line">14.935291051864624</span><br><span class="line">SelectSort&#39;s total time:</span><br><span class="line">11.371372699737549</span><br><span class="line">InsertSort&#39;s total time:</span><br><span class="line">0.008459329605102539</span><br><span class="line">MergeSort&#39;s total time:</span><br><span class="line">0.15901756286621094</span><br><span class="line">QuickSort&#39;s total time:</span><br><span class="line">16.011647939682007</span><br><span class="line">QuickSort3Ways&#39;s total time:</span><br><span class="line">0.10053849220275879</span><br></pre></td></tr></table></figure>

<h3 id="含有大量重复数的数组"><a href="#含有大量重复数的数组" class="headerlink" title="含有大量重复数的数组"></a>含有大量重复数的数组</h3><p>这里我们看下这些排序算法在含有大量重复数的数据集下的表现，首先改变数据生成函数：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(1000000)</span><br><span class="line"></span><br><span class="line">def timeRandomInput(sortname,length,numberOfArrays):</span><br><span class="line">    totalTime = 0</span><br><span class="line">    #测试数组数</span><br><span class="line">    for _ in range(numberOfArrays):</span><br><span class="line">        #数组大小</span><br><span class="line">        a = []</span><br><span class="line">        for _ in range(length):</span><br><span class="line"><span class="deletion">-           a.append(random.randint(1, 1000000))  # 测试数据范围</span></span><br><span class="line"><span class="addition">+           a.append(random.randint(999990, 1000000))  # 测试数据范围            </span></span><br><span class="line">        totalTime += count_time(a,sortname)</span><br><span class="line">    return totalTime</span><br></pre></td></tr></table></figure>

<p>同样的，这里数组大小为5000，重复10次，下面是测试结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BubbleSort&#39;s total time:</span><br><span class="line">28.813392877578735</span><br><span class="line">SelectSort&#39;s total time:</span><br><span class="line">11.362754821777344</span><br><span class="line">InsertSort&#39;s total time:</span><br><span class="line">22.454782247543335</span><br><span class="line">MergeSort&#39;s total time:</span><br><span class="line">0.1563563346862793</span><br><span class="line">QuickSort&#39;s total time:</span><br><span class="line">0.15424251556396484</span><br><span class="line">QuickSort3Ways&#39;s total time:</span><br><span class="line">0.08862972259521484</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">BubbleSort</th>
<th>SelectSort</th>
<th>InsertSort</th>
<th>MergeSort</th>
<th>QuickSort</th>
<th>QuickSort3Ways</th>
</tr>
</thead>
<tbody><tr>
<td align="center">随机数据集</td>
<td align="center">30.023</td>
<td>11.032</td>
<td>24.185</td>
<td>0.190</td>
<td>0.155</td>
<td>0.190</td>
</tr>
<tr>
<td align="center">升序数据集</td>
<td align="center">14.935</td>
<td>11.371</td>
<td><strong>0.008</strong></td>
<td>0.159</td>
<td><strong>16.011</strong></td>
<td>0.100</td>
</tr>
<tr>
<td align="center">降序数据集</td>
<td align="center">45.007</td>
<td>11.393</td>
<td>48.275</td>
<td>0.180</td>
<td><strong>14.895</strong></td>
<td>0.108</td>
</tr>
<tr>
<td align="center">大量重复数的数据集</td>
<td align="center">28.813</td>
<td>11.362</td>
<td>22.454</td>
<td>0.156</td>
<td>0.154</td>
<td><strong>0.088</strong></td>
</tr>
</tbody></table>
<p>经过优化后的三路快速排序在升序、降序、包含大量重复数的情况下表现均非常优异。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5aa94ca6518825558252120c" target="_blank" rel="noopener external nofollow noreferrer">快速排序算法的优化思路总结</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/41859350" target="_blank" rel="noopener external nofollow noreferrer">快速排序C++及Python实现及优化</a></li>
<li><a href="https://www.cnblogs.com/zhoug2020/p/6780604.html" target="_blank" rel="noopener external nofollow noreferrer">快速排序 三平均划分</a></li>
<li><a href="https://www.cnblogs.com/vipchenwei/p/7460293.html" target="_blank" rel="noopener external nofollow noreferrer">快速排序一步一步优化</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>pip安装缓存文件清理</title>
    <url>/archives/fd45d7a5.html</url>
    <content><![CDATA[<p>这几天在清理Windows电脑C盘的时候，发现<code>C:\Users\dta05\AppData\pip\Cache</code>占用不少空间。本文分析并解决了这个问题。</p>
<a id="more"></a>

<h2 id="安装包时不缓存"><a href="#安装包时不缓存" class="headerlink" title="安装包时不缓存"></a>安装包时不缓存</h2><p>如果pip版本在6.0以上，我们可以在安装时使用<code>–no-cache-dir</code>参数。举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip --no-cache-dir install scipy</span><br></pre></td></tr></table></figure>

<p>如果pip版本在6.0以下，我们可以使用如下命令升级pip版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -U pip</span><br></pre></td></tr></table></figure>

<h2 id="删除已缓存文件"><a href="#删除已缓存文件" class="headerlink" title="删除已缓存文件"></a>删除已缓存文件</h2><p>我们需要根据各自不同的操作系统，<strong>直接删除对应目录的缓存文件即可</strong>。</p>
<h3 id="Linux-and-Unix"><a href="#Linux-and-Unix" class="headerlink" title="Linux and Unix"></a>Linux and Unix</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.cache/pip</span><br></pre></td></tr></table></figure>

<h3 id="OS-X"><a href="#OS-X" class="headerlink" title="OS X"></a>OS X</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/Library/Caches/pip</span><br></pre></td></tr></table></figure>

<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%LocalAppData%\pip\Cache</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/kangkanglou/article/details/78955298" target="_blank" rel="noopener external nofollow noreferrer">删除pip安装缓存</a></li>
<li><a href="https://stackoverflow.com/questions/9510474/removing-pips-cache" target="_blank" rel="noopener external nofollow noreferrer">Removing pip’s cache?</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>pip</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT添加打字特效、鼠标点击特效</title>
    <url>/archives/58cff12b.html</url>
    <content><![CDATA[<p>本文主要介绍<strong>评论框打字特效</strong>以及<strong>鼠标点击特效</strong>的实现。</p>
<a id="more"></a>

<h2 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h2><p>下面是四个比较常用的鼠标点击特效脚本，我们可以把它们放置在 <code>themes\next\source\js\cursor\</code> 目录下：</p>
<ul>
<li>礼花特效代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(&#123; origin, speed, color, angle, context &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin</span><br><span class="line">    <span class="keyword">this</span>.position = &#123; ...this.origin &#125;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">    <span class="keyword">this</span>.speed = speed</span><br><span class="line">    <span class="keyword">this</span>.angle = angle</span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.renderCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.fillStyle = <span class="keyword">this</span>.color</span><br><span class="line">    <span class="keyword">this</span>.context.beginPath()</span><br><span class="line">    <span class="keyword">this</span>.context.arc(<span class="keyword">this</span>.position.x, <span class="keyword">this</span>.position.y, <span class="number">2</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">this</span>.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    <span class="keyword">this</span>.position.x = (<span class="built_in">Math</span>.sin(<span class="keyword">this</span>.angle) * <span class="keyword">this</span>.speed) + <span class="keyword">this</span>.position.x</span><br><span class="line">    <span class="keyword">this</span>.position.y = (<span class="built_in">Math</span>.cos(<span class="keyword">this</span>.angle) * <span class="keyword">this</span>.speed) + <span class="keyword">this</span>.position.y + (<span class="keyword">this</span>.renderCount * <span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boom</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (&#123; origin, context, circleCount = <span class="number">16</span>, area &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin</span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.circleCount = circleCount</span><br><span class="line">    <span class="keyword">this</span>.area = area</span><br><span class="line">    <span class="keyword">this</span>.stop = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomArray(range) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = range.length</span><br><span class="line">    <span class="keyword">const</span> randomIndex = <span class="built_in">Math</span>.floor(length * <span class="built_in">Math</span>.random())</span><br><span class="line">    <span class="keyword">return</span> range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomColor() &#123;</span><br><span class="line">    <span class="keyword">const</span> range = [<span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomRange(start, end) &#123;</span><br><span class="line">    <span class="keyword">return</span> (end - start) * <span class="built_in">Math</span>.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.circleCount; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(&#123;</span><br><span class="line">        context: <span class="keyword">this</span>.context,</span><br><span class="line">        origin: <span class="keyword">this</span>.origin,</span><br><span class="line">        color: <span class="keyword">this</span>.randomColor(),</span><br><span class="line">        angle: <span class="keyword">this</span>.randomRange(<span class="built_in">Math</span>.PI - <span class="number">1</span>, <span class="built_in">Math</span>.PI + <span class="number">1</span>),</span><br><span class="line">        speed: <span class="keyword">this</span>.randomRange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    <span class="keyword">this</span>.circles.forEach(<span class="function">(<span class="params">circle, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (circle.position.x &gt; <span class="keyword">this</span>.area.width || circle.position.y &gt; <span class="keyword">this</span>.area.height) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.circles.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.circles.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.stop = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.circles.forEach(<span class="function"><span class="params">circle</span> =&gt;</span> circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CursorSpecialEffects</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.computerCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.computerContext = <span class="keyword">this</span>.computerCanvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderContext = <span class="keyword">this</span>.renderCanvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.globalWidth = <span class="built_in">window</span>.innerWidth</span><br><span class="line">    <span class="keyword">this</span>.globalHeight = <span class="built_in">window</span>.innerHeight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.booms = []</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseDown(e) &#123;</span><br><span class="line">    <span class="keyword">const</span> boom = <span class="keyword">new</span> Boom(&#123;</span><br><span class="line">      origin: &#123; <span class="attr">x</span>: e.clientX, <span class="attr">y</span>: e.clientY &#125;,</span><br><span class="line">      context: <span class="keyword">this</span>.computerContext,</span><br><span class="line">      area: &#123;</span><br><span class="line">        width: <span class="keyword">this</span>.globalWidth,</span><br><span class="line">        height: <span class="keyword">this</span>.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    <span class="keyword">this</span>.booms.push(boom)</span><br><span class="line">    <span class="keyword">this</span>.running || <span class="keyword">this</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handlePageHide() &#123;</span><br><span class="line">    <span class="keyword">this</span>.booms = []</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="keyword">this</span>.renderCanvas.style</span><br><span class="line">    style.position = <span class="string">'fixed'</span></span><br><span class="line">    style.top = style.left = <span class="number">0</span></span><br><span class="line">    style.zIndex = <span class="string">'999999999999999999999999999999999999999999'</span></span><br><span class="line">    style.pointerEvents = <span class="string">'none'</span></span><br><span class="line"></span><br><span class="line">    style.width = <span class="keyword">this</span>.renderCanvas.width = <span class="keyword">this</span>.computerCanvas.width = <span class="keyword">this</span>.globalWidth</span><br><span class="line">    style.height = <span class="keyword">this</span>.renderCanvas.height = <span class="keyword">this</span>.computerCanvas.height = <span class="keyword">this</span>.globalHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.append(<span class="keyword">this</span>.renderCanvas)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'mousedown'</span>, <span class="keyword">this</span>.handleMouseDown.bind(<span class="keyword">this</span>))</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'pagehide'</span>, <span class="keyword">this</span>.handlePageHide.bind(<span class="keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.booms.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.running = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(<span class="keyword">this</span>.run.bind(<span class="keyword">this</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.computerContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.globalWidth, <span class="keyword">this</span>.globalHeight)</span><br><span class="line">    <span class="keyword">this</span>.renderContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.globalWidth, <span class="keyword">this</span>.globalHeight)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.booms.forEach(<span class="function">(<span class="params">boom, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (boom.stop) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.booms.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.renderContext.drawImage(<span class="keyword">this</span>.computerCanvas, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.globalWidth, <span class="keyword">this</span>.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cursorSpecialEffects = <span class="keyword">new</span> CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br></pre></td></tr></table></figure>

<ul>
<li>爆炸特效代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">.1</span>,a.alpha=<span class="number">.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)e.animatables[t].target.draw()&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)n.push(createParticule(e,t));anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>浮出爱心特效代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>浮出文字特效代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"喜欢我"</span>, <span class="string">"不喜欢我"</span>);</span><br><span class="line">    <span class="keyword">var</span> $i = $(<span class="string">"&lt;span/&gt;"</span>).text(a[a_idx]);</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">    y = e.pageY;</span><br><span class="line">    $i.css(&#123;</span><br><span class="line">      <span class="string">"z-index"</span>: <span class="number">99999</span>,</span><br><span class="line">      <span class="string">"top"</span>: y - <span class="number">28</span>,</span><br><span class="line">      <span class="string">"left"</span>: x - a[a_idx].length * <span class="number">8</span>,</span><br><span class="line">      <span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">      <span class="string">"color"</span>: <span class="string">"#ff7a45"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"body"</span>).append($i);</span><br><span class="line">    $i.animate(&#123;</span><br><span class="line">      <span class="string">"top"</span>: y - <span class="number">180</span>,</span><br><span class="line">      <span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">1500</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $i.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">    a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后我们在主题自定义布局文件<code>themes\next\layout\_custom\custom.swig</code>中添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect == "fireworks" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/fireworks.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "explosion" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"fireworks"</span> <span class="attr">style</span>=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/explosion.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "love" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/love.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "text" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/text.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>custom.swig</code> 文件不存在，我们可以手动新建这个文件并在布局页面<code>themes\next\layout\_layout.swig</code>中 body 末尾引入：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>然后我们在主题配置文件中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love | text</span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br></pre></td></tr></table></figure>

<p>这样即可在配置文件中一键快速切换鼠标点击特效。</p>
<h2 id="打字特效"><a href="#打字特效" class="headerlink" title="打字特效"></a>打字特效</h2><p>我们需要添加下面这个脚本<code>activate-power-mode.min.js</code>，然后放置在 <code>themes\next\source\js\</code> 目录下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">webpackUniversalModuleDefinition</span>(<span class="params">root,factory</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> exports===<span class="string">'object'</span>&amp;&amp;<span class="keyword">typeof</span> <span class="built_in">module</span>===<span class="string">'object'</span>)<span class="built_in">module</span>.exports=factory();<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define===<span class="string">'function'</span>&amp;&amp;define.amd)define([],factory);<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports===<span class="string">'object'</span>)exports[<span class="string">"POWERMODE"</span>]=factory();<span class="keyword">else</span> root[<span class="string">"POWERMODE"</span>]=factory()&#125;)(<span class="keyword">this</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>)</span>&#123;<span class="keyword">var</span> installedModules=&#123;&#125;;<span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>)</span>&#123;<span class="keyword">if</span>(installedModules[moduleId])<span class="keyword">return</span> installedModules[moduleId].exports;<span class="keyword">var</span> <span class="built_in">module</span>=installedModules[moduleId]=&#123;<span class="attr">exports</span>:&#123;&#125;,<span class="attr">id</span>:moduleId,<span class="attr">loaded</span>:<span class="literal">false</span>&#125;;modules[moduleId].call(<span class="built_in">module</span>.exports,<span class="built_in">module</span>,<span class="built_in">module</span>.exports,__webpack_require__);<span class="built_in">module</span>.loaded=<span class="literal">true</span>;<span class="keyword">return</span> <span class="built_in">module</span>.exports&#125;__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p=<span class="string">""</span>;<span class="keyword">return</span> __webpack_require__(<span class="number">0</span>)&#125;)([<span class="function"><span class="keyword">function</span>(<span class="params">module,exports,__webpack_require__</span>)</span>&#123;<span class="string">'use strict'</span>;<span class="keyword">var</span> canvas=<span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);canvas.width=<span class="built_in">window</span>.innerWidth;canvas.height=<span class="built_in">window</span>.innerHeight;canvas.style.cssText=<span class="string">'position:fixed;top:0;left:0;pointer-events:none;z-index:999999'</span>;<span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvas.width=<span class="built_in">window</span>.innerWidth;canvas.height=<span class="built_in">window</span>.innerHeight&#125;);<span class="built_in">document</span>.body.appendChild(canvas);<span class="keyword">var</span> context=canvas.getContext(<span class="string">'2d'</span>);<span class="keyword">var</span> particles=[];<span class="keyword">var</span> particlePointer=<span class="number">0</span>;POWERMODE.shake=<span class="literal">true</span>;<span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min,max</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.random()*(max-min)+min&#125;<span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params">el</span>)</span>&#123;<span class="keyword">if</span>(POWERMODE.colorful)&#123;<span class="keyword">var</span> u=getRandom(<span class="number">0</span>,<span class="number">360</span>);<span class="keyword">return</span><span class="string">'hsla('</span>+getRandom(u<span class="number">-10</span>,u+<span class="number">10</span>)+<span class="string">', 100%, '</span>+getRandom(<span class="number">50</span>,<span class="number">80</span>)+<span class="string">'%, '</span>+<span class="number">1</span>+<span class="string">')'</span>&#125;<span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(el).color&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">getCaret</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> el=<span class="built_in">document</span>.activeElement;<span class="keyword">var</span> bcr;<span class="keyword">if</span>(el.tagName===<span class="string">'TEXTAREA'</span>||(el.tagName===<span class="string">'INPUT'</span>&amp;&amp;el.getAttribute(<span class="string">'type'</span>)===<span class="string">'text'</span>))&#123;<span class="keyword">var</span> offset=__webpack_require__(<span class="number">1</span>)(el,el.selectionStart);bcr=el.getBoundingClientRect();<span class="keyword">return</span>&#123;<span class="attr">x</span>:offset.left+bcr.left,<span class="attr">y</span>:offset.top+bcr.top,<span class="attr">color</span>:getColor(el)&#125;&#125;<span class="keyword">var</span> selection=<span class="built_in">window</span>.getSelection();<span class="keyword">if</span>(selection.rangeCount)&#123;<span class="keyword">var</span> range=selection.getRangeAt(<span class="number">0</span>);<span class="keyword">var</span> startNode=range.startContainer;<span class="keyword">if</span>(startNode.nodeType===<span class="built_in">document</span>.TEXT_NODE)&#123;startNode=startNode.parentNode&#125;bcr=range.getBoundingClientRect();<span class="keyword">return</span>&#123;<span class="attr">x</span>:bcr.left,<span class="attr">y</span>:bcr.top,<span class="attr">color</span>:getColor(startNode)&#125;&#125;<span class="keyword">return</span>&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">color</span>:<span class="string">'transparent'</span>&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticle</span>(<span class="params">x,y,color</span>)</span>&#123;<span class="keyword">return</span>&#123;<span class="attr">x</span>:x,<span class="attr">y</span>:y,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:color,<span class="attr">velocity</span>:&#123;<span class="attr">x</span>:<span class="number">-1</span>+<span class="built_in">Math</span>.random()*<span class="number">2</span>,<span class="attr">y</span>:<span class="number">-3.5</span>+<span class="built_in">Math</span>.random()*<span class="number">2</span>&#125;&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">POWERMODE</span>(<span class="params"></span>)</span>&#123;&#123;<span class="keyword">var</span> caret=getCaret();<span class="keyword">var</span> numParticles=<span class="number">5</span>+<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">10</span>);<span class="keyword">while</span>(numParticles--)&#123;particles[particlePointer]=createParticle(caret.x,caret.y,caret.color);particlePointer=(particlePointer+<span class="number">1</span>)%<span class="number">500</span>&#125;&#125;&#123;<span class="keyword">if</span>(POWERMODE.shake)&#123;<span class="keyword">var</span> intensity=<span class="number">1</span>+<span class="number">2</span>*<span class="built_in">Math</span>.random();<span class="keyword">var</span> x=intensity*(<span class="built_in">Math</span>.random()&gt;<span class="number">0.5</span>?<span class="number">-1</span>:<span class="number">1</span>);<span class="keyword">var</span> y=intensity*(<span class="built_in">Math</span>.random()&gt;<span class="number">0.5</span>?<span class="number">-1</span>:<span class="number">1</span>);<span class="built_in">document</span>.body.style.marginLeft=x+<span class="string">'px'</span>;<span class="built_in">document</span>.body.style.marginTop=y+<span class="string">'px'</span>;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.body.style.marginLeft=<span class="string">''</span>;<span class="built_in">document</span>.body.style.marginTop=<span class="string">''</span>&#125;,<span class="number">75</span>)&#125;&#125;&#125;;POWERMODE.colorful=<span class="literal">false</span>;<span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>)</span>&#123;requestAnimationFrame(loop);context.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;particles.length;++i)&#123;<span class="keyword">var</span> particle=particles[i];<span class="keyword">if</span>(particle.alpha&lt;=<span class="number">0.1</span>)<span class="keyword">continue</span>;particle.velocity.y+=<span class="number">0.075</span>;particle.x+=particle.velocity.x;particle.y+=particle.velocity.y;particle.alpha*=<span class="number">0.96</span>;context.globalAlpha=particle.alpha;context.fillStyle=particle.color;context.fillRect(<span class="built_in">Math</span>.round(particle.x<span class="number">-1.5</span>),<span class="built_in">Math</span>.round(particle.y<span class="number">-1.5</span>),<span class="number">3</span>,<span class="number">3</span>)&#125;&#125;requestAnimationFrame(loop);<span class="built_in">module</span>.exports=POWERMODE&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">module,exports</span>)</span>&#123;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> properties=[<span class="string">'direction'</span>,<span class="string">'boxSizing'</span>,<span class="string">'width'</span>,<span class="string">'height'</span>,<span class="string">'overflowX'</span>,<span class="string">'overflowY'</span>,<span class="string">'borderTopWidth'</span>,<span class="string">'borderRightWidth'</span>,<span class="string">'borderBottomWidth'</span>,<span class="string">'borderLeftWidth'</span>,<span class="string">'borderStyle'</span>,<span class="string">'paddingTop'</span>,<span class="string">'paddingRight'</span>,<span class="string">'paddingBottom'</span>,<span class="string">'paddingLeft'</span>,<span class="string">'fontStyle'</span>,<span class="string">'fontVariant'</span>,<span class="string">'fontWeight'</span>,<span class="string">'fontStretch'</span>,<span class="string">'fontSize'</span>,<span class="string">'fontSizeAdjust'</span>,<span class="string">'lineHeight'</span>,<span class="string">'fontFamily'</span>,<span class="string">'textAlign'</span>,<span class="string">'textTransform'</span>,<span class="string">'textIndent'</span>,<span class="string">'textDecoration'</span>,<span class="string">'letterSpacing'</span>,<span class="string">'wordSpacing'</span>,<span class="string">'tabSize'</span>,<span class="string">'MozTabSize'</span>];<span class="keyword">var</span> isFirefox=<span class="built_in">window</span>.mozInnerScreenX!=<span class="literal">null</span>;<span class="function"><span class="keyword">function</span> <span class="title">getCaretCoordinates</span>(<span class="params">element,position,options</span>)</span>&#123;<span class="keyword">var</span> debug=options&amp;&amp;options.debug||<span class="literal">false</span>;<span class="keyword">if</span>(debug)&#123;<span class="keyword">var</span> el=<span class="built_in">document</span>.querySelector(<span class="string">'#input-textarea-caret-position-mirror-div'</span>);<span class="keyword">if</span>(el)&#123;el.parentNode.removeChild(el)&#125;&#125;<span class="keyword">var</span> div=<span class="built_in">document</span>.createElement(<span class="string">'div'</span>);div.id=<span class="string">'input-textarea-caret-position-mirror-div'</span>;<span class="built_in">document</span>.body.appendChild(div);<span class="keyword">var</span> style=div.style;<span class="keyword">var</span> computed=<span class="built_in">window</span>.getComputedStyle?getComputedStyle(element):element.currentStyle;style.whiteSpace=<span class="string">'pre-wrap'</span>;<span class="keyword">if</span>(element.nodeName!==<span class="string">'INPUT'</span>)style.wordWrap=<span class="string">'break-word'</span>;style.position=<span class="string">'absolute'</span>;<span class="keyword">if</span>(!debug)style.visibility=<span class="string">'hidden'</span>;properties.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">prop</span>)</span>&#123;style[prop]=computed[prop]&#125;);<span class="keyword">if</span>(isFirefox)&#123;<span class="keyword">if</span>(element.scrollHeight&gt;<span class="built_in">parseInt</span>(computed.height))style.overflowY=<span class="string">'scroll'</span>&#125;<span class="keyword">else</span>&#123;style.overflow=<span class="string">'hidden'</span>&#125;div.textContent=element.value.substring(<span class="number">0</span>,position);<span class="keyword">if</span>(element.nodeName===<span class="string">'INPUT'</span>)div.textContent=div.textContent.replace(<span class="regexp">/\s/g</span>,<span class="string">"\u00a0"</span>);<span class="keyword">var</span> span=<span class="built_in">document</span>.createElement(<span class="string">'span'</span>);span.textContent=element.value.substring(position)||<span class="string">'.'</span>;div.appendChild(span);<span class="keyword">var</span> coordinates=&#123;<span class="attr">top</span>:span.offsetTop+<span class="built_in">parseInt</span>(computed[<span class="string">'borderTopWidth'</span>]),<span class="attr">left</span>:span.offsetLeft+<span class="built_in">parseInt</span>(computed[<span class="string">'borderLeftWidth'</span>])&#125;;<span class="keyword">if</span>(debug)&#123;span.style.backgroundColor=<span class="string">'#aaa'</span>&#125;<span class="keyword">else</span>&#123;<span class="built_in">document</span>.body.removeChild(div)&#125;<span class="keyword">return</span> coordinates&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">module</span>!=<span class="string">"undefined"</span>&amp;&amp;<span class="keyword">typeof</span> <span class="built_in">module</span>.exports!=<span class="string">"undefined"</span>)&#123;<span class="built_in">module</span>.exports=getCaretCoordinates&#125;<span class="keyword">else</span>&#123;<span class="built_in">window</span>.getCaretCoordinates=getCaretCoordinates&#125;&#125;())&#125;])&#125;);</span><br></pre></td></tr></table></figure>

<p>在主题自定义布局文件<code>themes\next\layout\_custom\custom.swig</code>中添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# 打字特效 #&#125;</span><br><span class="line">&#123;% if theme.typing_effect %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/activate-power-mode.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    POWERMODE.colorful = </span><span class="template-variable">&#123;&#123; theme.typing_effect.colorful &#125;&#125;</span><span class="xml">;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    POWERMODE.shake = </span><span class="template-variable">&#123;&#123; theme.typing_effect.shake &#125;&#125;</span><span class="xml">;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.addEventListener(<span class="string">'input'</span>, POWERMODE);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>custom.swig</code> 文件不存在，我们可以手动新建这个文件并在布局页面<code>themes\next\layout\_layout.swig</code>中 body 末尾引入：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>然后我们在主题配置文件中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># typing effect</span></span><br><span class="line"><span class="attr">typing_effect:</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span>  <span class="comment"># 礼花特效</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">false</span>  <span class="comment"># 震动特效</span></span><br></pre></td></tr></table></figure>

<p>这样即可在配置文件中一键快速切换打字特效。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://yearito.cn/posts/hexo-theme-beautify.html" target="_blank" rel="noopener external nofollow noreferrer">Hexo 搭建个人博客系列：主题美化篇</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT配置Valine</title>
    <url>/archives/ed8b904f.html</url>
    <content><![CDATA[<p>我之前用的是Disqus这个评论服务，但是它需要科学上网才能使用，不利于交流，所以我准备换用Valine这个评论服务。</p>
<a id="more"></a>

<h2 id="LeanCloud注册"><a href="#LeanCloud注册" class="headerlink" title="LeanCloud注册"></a>LeanCloud注册</h2><p>Valine用LeanCloud作为数据库，所以我们需要注册一个<a href="https://leancloud.cn" target="_blank" rel="noopener external nofollow noreferrer">LeanCloud账号</a>。</p>
<ol>
<li>注册完以后需要创建一个应用，然后 <strong>进入应用-&gt;设置-&gt;应用key</strong>，得到appid、appkey。</li>
<li>在<code>LeanCloud -&gt; 存储 -&gt; 创建Class -&gt; 无限制的Class</code>，class名称为：Comment，这是用来存放评论信息的。</li>
<li>在<code>LeanCloud-设置</code>，把除<strong>数据存储</strong>外其他选项都关闭。</li>
</ol>
<p>注意：我们需要在<code>Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名</code>把你的域名加进去。</p>
<h2 id="NexT配置"><a href="#NexT配置" class="headerlink" title="NexT配置"></a>NexT配置</h2><p>由于NexT 7.1.2已经内置了Valine，所以我们只需要进行简单的配置即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># More info available at https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span>  <span class="comment"># your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier, See: https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">'ヾﾉ≧∀≦)o来啊，快活啊!'</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-cn</span> <span class="comment"># language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># if false, comment count will only be displayed in post page, not in home page</span></span><br></pre></td></tr></table></figure>

<p>主要就是填入前一步得到的appid、appkey。然后由于我后面要用<strong>更完善的第三方邮件提醒Valine-Admin</strong>，所以这里我关闭了自带的邮件提醒<code>notify</code>。</p>
<p>由于自带的CDN加载很慢，所以这里我们在NexT配置文件<code>_config.yml</code>中改成第三方CDN：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># valine</span></span><br><span class="line">  <span class="comment"># See: https://github.com/xCss/Valine</span></span><br><span class="line">  <span class="comment"># Example:</span></span><br><span class="line">  <span class="comment"># valine: //cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js</span></span><br><span class="line">  <span class="comment"># valine: //cdnjs.cloudflare.com/ajax/libs/valine/1.3.4/Valine.min.js</span></span><br><span class="line">  <span class="attr">valine:</span> <span class="string">//cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure>

<p>到目前为止，我们就可以正常使用Valine了。</p>
<p>下面是一些可选的高级配置，比如我想要评论后得到邮件通知、垃圾邮件过滤，那就需要配置Valine Admin。</p>
<h2 id="Valine-Admin-配置"><a href="#Valine-Admin-配置" class="headerlink" title="Valine Admin 配置"></a>Valine Admin 配置</h2><blockquote>
<p>Valine Admin 是 Valine 评论系统的扩展和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。支持完全自定义的邮件通知模板。基于Akismet API实现准确的垃圾评论过滤。此外，使用云函数等技术解决了免费版云引擎休眠问题，支持云引擎自动唤醒，漏发邮件自动补发。兼容云淡风轻及Deserts维护的多版本Valine。</p>
</blockquote>
<h3 id="云引擎”一键”部署"><a href="#云引擎”一键”部署" class="headerlink" title="云引擎”一键”部署"></a>云引擎”一键”部署</h3><ol>
<li><p>在Leancloud云引擎<strong>设置</strong>界面，填写代码库并保存：<code>https://github.com/DesertsP/Valine-Admin.git</code></p>
</li>
<li><p>在设置页面，设置环境变量以及 Web 二级域名：</p>
</li>
</ol>
<p>环境变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>SITE_NAME</td>
<td>小丁的个人博客</td>
<td><code>[必填]</code>博客名称</td>
</tr>
<tr>
<td>SITE_URL</td>
<td><code>https://tding.top/</code></td>
<td><code>[必填]</code>首页地址</td>
</tr>
<tr>
<td>SMTP_SERVICE</td>
<td>QQ</td>
<td><code>[新版支持]</code>邮件服务提供商，支持 QQ、163、126、Gmail 以及 更多</td>
</tr>
<tr>
<td>SMTP_USER</td>
<td><a href="mailto:xxxxxx@qq.com" rel="external nofollow noreferrer">xxxxxx@qq.com</a></td>
<td><code>[必填]</code>SMTP登录用户</td>
</tr>
<tr>
<td>SMTP_PASS</td>
<td>ccxxxxxxxxch</td>
<td><code>[必填]</code>SMTP登录密码（QQ邮箱需要获取独立密码）</td>
</tr>
<tr>
<td>SENDER_NAME</td>
<td>tding</td>
<td><code>[必填]</code>发件人</td>
</tr>
<tr>
<td>SENDER_EMAIL</td>
<td><a href="mailto:xxxxxx@qq.com" rel="external nofollow noreferrer">xxxxxx@qq.com</a></td>
<td><code>[必填]</code>发件邮箱</td>
</tr>
<tr>
<td>ADMIN_URL</td>
<td><code>https://tding.avosapps.us/</code></td>
<td><code>[建议]</code>Web主机二级域名，用于自动唤醒</td>
</tr>
<tr>
<td>BLOGGER_EMAIL</td>
<td><a href="mailto:xxxxx@gmail.com" rel="external nofollow noreferrer">xxxxx@gmail.com</a></td>
<td><code>[可选]</code>博主通知收件地址，默认使用SENDER_EMAIL</td>
</tr>
<tr>
<td>AKISMET_KEY</td>
<td>xxxxxxxxxxxx</td>
<td><code>[可选]</code>Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td>
</tr>
</tbody></table>
<p>二级域名用于评论后台管理：例如<code>https://tding.avosapps.us/</code></p>
<ol start="3">
<li><p>切换到部署标签页，分支使用master，点击部署即可，第一次部署需要花点时间。</p>
</li>
<li><p>评论管理。访问设置的二级域名<code>https://二级域名.avosapps.us/sign-up</code>，注册管理员登录信息，如：<code>https://tding.avosapps.us/sign-up</code>。此后，可以通过<code>https://tding.avosapps.us/</code>管理评论。</p>
</li>
</ol>
<img src="/archives/ed8b904f/Web%E4%B8%BB%E6%9C%BA%E5%9F%9F%E5%90%8D%E8%AE%BE%E7%BD%AE.png" class="" title="Web主机域名设置">

<ol start="5">
<li>定时任务设置</li>
</ol>
<p>目前实现了两种云函数定时任务：</p>
<ul>
<li>(1)自动唤醒，定时访问Web APP二级域名防止云引擎休眠；</li>
<li>(2)每天定时检查24小时内漏发的邮件通知。</li>
</ul>
<p>进入云引擎-定时任务中，创建定时器，创建两个定时任务。</p>
<ul>
<li>选择<code>self-wake</code>云函数，Cron表达式为<code>0 0/30 7-23 * * ?</code>，表示每天早6点到晚23点每隔30分钟访问云引擎，<code>ADMIN_URL</code>环境变量务必设置正确</li>
<li>选择<code>resend-mails</code>云函数，Cron表达式为<code>0 0 8 * * ?</code>，表示每天早8点检查过去24小时内漏发的通知邮件并补发</li>
</ul>
<p>添加定时器后记得点击启动方可生效。</p>
<p>至此，Valine Admin 已经可以正常工作，更多以下是可选的进阶配置。</p>
<h3 id="邮件通知模板"><a href="#邮件通知模板" class="headerlink" title="邮件通知模板"></a>邮件通知模板</h3><p>邮件通知模板在<strong>云引擎环境变量</strong>中设定，可自定义通知邮件标题及内容模板。</p>
<table>
<thead>
<tr>
<th>环境变量</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>MAIL_SUBJECT</code></td>
<td><code>${PARENT_NICK}</code>，您在<code>${SITE_NAME}</code>上的评论收到了回复</td>
<td><code>[可选]</code>@通知邮件主题（标题）模板</td>
</tr>
<tr>
<td><code>MAIL_TEMPLATE</code></td>
<td>见下文</td>
<td><code>[可选]</code>@通知邮件内容模板</td>
</tr>
<tr>
<td><code>MAIL_SUBJECT_ADMIN</code></td>
<td><code>${SITE_NAME}</code>上有新评论了</td>
<td><code>[可选]</code>博主邮件通知主题模板</td>
</tr>
<tr>
<td><code>MAIL_TEMPLATE_ADMIN</code></td>
<td>见下文</td>
<td><code>[可选]</code>博主邮件通知内容模板</td>
</tr>
</tbody></table>
<p>邮件通知包含两种，分别是<code>被@通知</code>（上面的<code>MAIL_TEMPLATE</code>）和<code>博主通知</code>（上面的<code>MAIL_TEMPLATE_ADMIN</code>），这两种模板都可以完全自定义。默认使用经典的蓝色风格模板。</p>
<p>默认<code>被@通知</code>邮件内容模板如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;&gt;&lt;h2 style&#x3D;&quot;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;&gt;您在&lt;a style&#x3D;&quot;text-decoration:none;color: #12ADDB;&quot; href&#x3D;&quot;$&#123;SITE_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;            $&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;上的评论有了新的回复&lt;&#x2F;h2&gt; $&#123;PARENT_NICK&#125; 同学，您曾发表评论：&lt;div style&#x3D;&quot;padding:0 12px 0 12px;margin-top:18px&quot;&gt;&lt;div style&#x3D;&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt;            $&#123;PARENT_COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;&lt;strong&gt;$&#123;NICK&#125;&lt;&#x2F;strong&gt;回复说：&lt;&#x2F;p&gt;&lt;div style&#x3D;&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt; $&#123;COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;您可以点击&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot; href&#x3D;&quot;$&#123;POST_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;查看回复的完整內容&lt;&#x2F;a&gt;，欢迎再次光临&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot; href&#x3D;&quot;$&#123;SITE_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;$&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;。&lt;br&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>默认博主通知邮件内容模板如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;&gt;&lt;h2 style&#x3D;&quot;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;&gt;您在&lt;a style&#x3D;&quot;text-decoration:none;color: #12ADDB;&quot; href&#x3D;&quot;$&#123;SITE_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;$&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;上的文章有了新的评论&lt;&#x2F;h2&gt;&lt;p&gt;&lt;strong&gt;$&#123;NICK&#125;&lt;&#x2F;strong&gt;回复说：&lt;&#x2F;p&gt;&lt;div style&#x3D;&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt; $&#123;COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;您可以点击&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot; href&#x3D;&quot;$&#123;POST_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;查看回复的完整內容&lt;&#x2F;a&gt;&lt;br&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>这里还提供一个彩虹风格的<code>@通知</code>邮件模板代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border-radius: 10px 10px 10px 10px;font-size:13px;    color: #555555;width: 666px;font-family:&#39;Century Gothic&#39;,&#39;Trebuchet MS&#39;,&#39;Hiragino Sans GB&#39;,微软雅黑,&#39;Microsoft Yahei&#39;,Tahoma,Helvetica,Arial,&#39;SimSun&#39;,sans-serif;margin:50px auto;border:1px solid #eee;max-width:100%;background: #ffffff repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 1px 5px rgba(0, 0, 0, 0.15);&quot;&gt;&lt;div style&#x3D;&quot;width:100%;background:#49BDAD;color:#ffffff;border-radius: 10px 10px 0 0;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));background-image: -webkit-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;&quot;&gt;&lt;p style&#x3D;&quot;font-size:15px;word-break:break-all;padding: 23px 32px;margin:0;background-color: hsla(0,0%,100%,.4);border-radius: 10px 10px 0 0;&quot;&gt;您在&lt;a style&#x3D;&quot;text-decoration:none;color: #ffffff;&quot; href&#x3D;&quot;$&#123;SITE_URL&#125;&quot;&gt; $&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;上的留言有新回复啦！&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;div style&#x3D;&quot;margin:40px auto;width:90%&quot;&gt;&lt;p&gt;$&#123;PARENT_NICK&#125; 同学，您曾在文章上发表评论：&lt;&#x2F;p&gt;&lt;div style&#x3D;&quot;background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;&quot;&gt;$&#123;PARENT_COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;$&#123;NICK&#125; 给您的回复如下：&lt;&#x2F;p&gt;&lt;div style&#x3D;&quot;background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;&quot;&gt;$&#123;COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;您可以点击&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot; href&#x3D;&quot;$&#123;POST_URL&#125;#comments&quot;&gt;查看回复的完整內容&lt;&#x2F;a&gt;，欢迎再次光临&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot;                href&#x3D;&quot;$&#123;SITE_URL&#125;&quot;&gt; $&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;a:link&#123;text-decoration:none&#125;a:visited&#123;text-decoration:none&#125;a:hover&#123;text-decoration:none&#125;a:active&#123;text-decoration:none&#125;&lt;&#x2F;style&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="我的环境变量配置"><a href="#我的环境变量配置" class="headerlink" title="我的环境变量配置"></a>我的环境变量配置</h3><img src="/archives/ed8b904f/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" class="" title="环境变量">

<h2 id="Valine和“热榜”冲突问题"><a href="#Valine和“热榜”冲突问题" class="headerlink" title="Valine和“热榜”冲突问题"></a>Valine和“热榜”冲突问题</h2><p>这里Valine和热榜存在一定的冲突，导致了热榜中的文章无法正常显示。</p>
<p>我们可以不在 <strong>热榜</strong> 页面加载 Valine 的代码，反正 <strong>热榜</strong> 页面也没开启评论。</p>
<p>修改文件<code>~/blog/themes/next/layout/_third-party/comments/valine.swig</code>：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ &#123;% if theme.valine.enable and theme.valine.appid and theme.valine.appkey and page.title !=== '热榜' %&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% set leancloud_uri = '//cdn1.lncld.net/static/js/3.11.1/av-min.js' %&#125;</span><br><span class="line">&#123;% if theme.vendors.leancloud %&#125;</span><br><span class="line">  &#123;% set leancloud_uri = theme.vendors.leancloud %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;script src="&#123;&#123; leancloud_uri &#125;&#125;"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&#123;% set valine_uri = '//unpkg.com/valine/dist/Valine.min.js' %&#125;</span><br><span class="line">&#123;% if theme.vendors.valine %&#125;</span><br><span class="line">  &#123;% set valine_uri = theme.vendors.valine %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;script src="&#123;&#123; valine_uri &#125;&#125;"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var GUEST = ['nick', 'mail', 'link'];</span><br><span class="line">  var guest = '&#123;&#123; theme.valine.guest_info &#125;&#125;';</span><br><span class="line">  guest = guest.split(',').filter(function(item) &#123;</span><br><span class="line">    return GUEST.indexOf(item) &gt; -1;</span><br><span class="line">  &#125;);</span><br><span class="line">  new Valine(&#123;</span><br><span class="line">    el: '#comments',</span><br><span class="line">    verify: &#123;&#123; theme.valine.verify &#125;&#125;,</span><br><span class="line">    notify: &#123;&#123; theme.valine.notify &#125;&#125;,</span><br><span class="line">    appId: '&#123;&#123; theme.valine.appid &#125;&#125;',</span><br><span class="line">    appKey: '&#123;&#123; theme.valine.appkey &#125;&#125;',</span><br><span class="line">    placeholder: '&#123;&#123; theme.valine.placeholder &#125;&#125;',</span><br><span class="line">    avatar: '&#123;&#123; theme.valine.avatar &#125;&#125;',</span><br><span class="line">    meta: guest,</span><br><span class="line">    pageSize: '&#123;&#123; theme.valine.pageSize &#125;&#125;' || 10,</span><br><span class="line">    visitor: &#123;&#123; theme.valine.visitor &#125;&#125;,</span><br><span class="line">    lang: '&#123;&#123; theme.valine.language &#125;&#125;' || 'zh-cn'</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<p>上面的<code>热榜</code>要修改成你自己的标题名字。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://deserts.io/valine-admin-document/" target="_blank" rel="noopener external nofollow noreferrer">Valine Admin 配置手册</a></li>
<li><a href="https://io-oi.me/tech/use-valine-in-theme-next/" target="_blank" rel="noopener external nofollow noreferrer">在 NexT 中使用 Valine 评论系统</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>决策树介绍</title>
    <url>/archives/1059015.html</url>
    <content><![CDATA[<p>决策树算法既可以作为分类算法，也可以作为回归算法，同时也特别适合集成学习比如随机森林。</p>
<a id="more"></a>

<h2 id="一、什么是决策树"><a href="#一、什么是决策树" class="headerlink" title="一、什么是决策树"></a>一、什么是决策树</h2><p>下面是一个通俗的决策树例子：</p>
<blockquote>
<p>女儿：多大年纪了？<br>母亲：26。</p>
<p>女儿：长的帅不帅？<br>母亲：挺帅的。</p>
<p>女儿：收入高不？<br>母亲：不算很高，中等情况。</p>
<p>女儿：是公务员不？<br>母亲：是，在税务局上班呢。</p>
<p>女儿：那好，我去见见。</p>
</blockquote>
<p>这个女孩的决策过程就是典型的分类树决策。<strong>相当于通过年龄、长相、收入和是否公务员对将男人分为两个类别：见和不见</strong>。假设这个女孩对男人的要求是：30岁以下、长相中等以上并且是高收入者或中等以上收入的公务员，那么这个可以用下图表示女孩的决策逻辑：</p>
<img src="/archives/1059015/%E5%86%B3%E7%AD%96%E6%A0%91%E4%BE%8B%E5%AD%90.png" class="" title="决策树例子">

<p>上图完整表达了这个女孩决定是否见一个约会对象的策略，其中绿色节点表示判断条件，橙色节点表示决策结果，箭头表示在一个判断条件在不同情况下的决策路径，图中红色箭头表示了上面例子中女孩的决策过程。</p>
<p><strong>现在我们有那么多判断是否去见约会对象的条件，那么先判断哪个条件比较好呢？怎么准确的定量选择这个标准就是决策树算法的关键了。</strong></p>
<h2 id="二、决策树ID3算法"><a href="#二、决策树ID3算法" class="headerlink" title="二、决策树ID3算法"></a>二、决策树ID3算法</h2><blockquote>
<p>1970年代，一个叫昆兰的大牛找到了用信息论中的熵来度量决策树的决策选择过程，昆兰把这个算法叫做ID3。下面我们就看看ID3算法是怎么选择特征的。</p>
</blockquote>
<p>首先，我们需要熟悉信息论中熵的概念。熵度量了事物的不确定性，越不确定的事物，它的熵就越大。具体的，随机变量X的熵的表达式如下：</p>
<p>$$<br>H(X) = -\sum\limits_{i=1}^{n}p_i logp_i<br>$$</p>
<ul>
<li>n代表X的n种不同的离散取值</li>
<li>pi代表了X取值为i的概率</li>
<li>log为以2或者e为底的对数。</li>
</ul>
<p>举个例子，比如X有2个可能的取值，而这两个取值各为1/2时X的熵最大，此时X具有最大的不确定性，对应熵为：</p>
<p>$$<br>H(X) = -(\frac{1}{2}log\frac{1}{2} + \frac{1}{2}log\frac{1}{2}) = log2<br>$$</p>
<p>如果一个值概率大于1/2，另一个值概率小于1/2，则不确定性减少，对应的熵也会减少。比如一个概率1/3，一个概率2/3，则对应熵为：</p>
<p>$$<br>H(X) = -(\frac{1}{3}log\frac{1}{3} + \frac{2}{3}log\frac{2}{3}) = log3 - \frac{2}{3}log2 &lt; log2)<br>$$</p>
<p>然后我们很容易推广到多个变量的联合熵，这里给出两个变量X和Y的联合熵表达式：</p>
<p>$$<br>H(X,Y) = -\sum\limits_{i=1}^{n}p(x_i,y_i)logp(x_i,y_i)<br>$$</p>
<p>有了联合熵，又可以得到条件熵的表达式<code>H(X|Y)</code>，条件熵类似于条件概率,它度量了<strong>在知道Y以后X剩下的不确定性</strong>。表达式如下：</p>
<p>$$<br>H(X|Y) = -\sum\limits_{i=1}^{n}p(x_i,y_i)logp(x_i|y_i) = \sum\limits_{j=1}^{n}p(y_j)H(X|y_j)<br>$$</p>
<p>我们刚才提到<code>H(X)</code>度量了<strong>X的不确定性</strong>，条件熵<code>H(X|Y)</code>度量了我们<strong>在知道Y以后X剩下的不确定性</strong>，<code>H(X)-H(X|Y)</code>则度量了<strong>X在知道Y以后不确定性减少程度</strong>，这个度量我们在信息论中称为互信息，记为<code>I(X,Y)</code>。在决策树ID3算法中叫做信息增益。ID3算法就是用信息增益来判断当前节点应该用什么特征来构建决策树。信息增益大，则越适合用来分类。</p>
<h3 id="1、信息增益的一个示例"><a href="#1、信息增益的一个示例" class="headerlink" title="1、信息增益的一个示例"></a>1、信息增益的一个示例</h3><p>我们有如下数据：</p>
<table>
<thead>
<tr>
<th align="center">帅？</th>
<th align="center">性格好？</th>
<th align="center">身高？</th>
<th align="center">上进？</th>
<th align="center">嫁与否</th>
</tr>
</thead>
<tbody><tr>
<td align="center">帅</td>
<td align="center">不好</td>
<td align="center">矮</td>
<td align="center">不上进</td>
<td align="center">不嫁</td>
</tr>
<tr>
<td align="center">不帅</td>
<td align="center">好</td>
<td align="center">矮</td>
<td align="center">上进</td>
<td align="center">不嫁</td>
</tr>
<tr>
<td align="center">帅</td>
<td align="center">好</td>
<td align="center">矮</td>
<td align="center">上进</td>
<td align="center">嫁</td>
</tr>
<tr>
<td align="center">不帅</td>
<td align="center">爆好</td>
<td align="center">高</td>
<td align="center">上进</td>
<td align="center">嫁</td>
</tr>
<tr>
<td align="center">帅</td>
<td align="center">不好</td>
<td align="center">矮</td>
<td align="center">上进</td>
<td align="center">不嫁</td>
</tr>
<tr>
<td align="center">帅</td>
<td align="center">不好</td>
<td align="center">矮</td>
<td align="center">上进</td>
<td align="center">不嫁</td>
</tr>
<tr>
<td align="center">帅</td>
<td align="center">好</td>
<td align="center">高</td>
<td align="center">不上进</td>
<td align="center">嫁</td>
</tr>
<tr>
<td align="center">不帅</td>
<td align="center">好</td>
<td align="center">中</td>
<td align="center">上进</td>
<td align="center">嫁</td>
</tr>
<tr>
<td align="center">帅</td>
<td align="center">爆好</td>
<td align="center">中</td>
<td align="center">上进</td>
<td align="center">嫁</td>
</tr>
<tr>
<td align="center">不帅</td>
<td align="center">不好</td>
<td align="center">高</td>
<td align="center">上进</td>
<td align="center">嫁</td>
</tr>
<tr>
<td align="center">帅</td>
<td align="center">好</td>
<td align="center">矮</td>
<td align="center">不上进</td>
<td align="center">不嫁</td>
</tr>
<tr>
<td align="center">帅</td>
<td align="center">好</td>
<td align="center">矮</td>
<td align="center">不上进</td>
<td align="center">不嫁</td>
</tr>
</tbody></table>
<p>从数据中可以看出嫁的个数为6个，占1/2，可以求得随机变量X（嫁与不嫁）的信息熵为：</p>
<p>$$<br>H(X) = -(\frac{1}{2}log\frac{1}{2} + \frac{1}{2}log\frac{1}{2}) = log2 = 0.301<br>$$</p>
<p>现在假如我知道了一个男生的身高信息。身高有三个可能的取值<code>{矮，中，高}</code>：</p>
<ul>
<li>矮包括<code>{1,2,3,5,6,11,12}</code>，嫁的个数为1个，不嫁的个数为6个</li>
<li>中包括<code>{8,9}</code> ，嫁的个数为2个，不嫁的个数为0个</li>
<li>高包括<code>{4,7,10}</code>，嫁的个数为3个，不嫁的个数为0个</li>
</ul>
<p>那么我们可以求出：</p>
<p>$$<br>H(Y|X=矮) = -(\frac{1}{7}log\frac{1}{7} + \frac{6}{7}log\frac{6}{7}) = 0.178<br>$$</p>
<p>$$<br>H(Y|X=中) = -(1log1 + 0) = 0<br>$$</p>
<p>$$<br>H(Y|X=高) = -(1log1 + 0) = 0<br>$$</p>
<p>$$<br>P(X = 矮) = \frac{7}{12} , P(X = 中) = \frac{2}{12} , P(X = 高) = \frac{3}{12}<br>$$</p>
<p>则可以得出条件熵为：</p>
<p>$$<br>H(Y|X) = \frac{7}{12}<em>0.178 + \frac{2}{12}</em>0 + \frac{3}{12}*0 = 0.103<br>$$</p>
<p>我们知道<strong>信息熵与条件熵相减就是我们的信息增益</strong>，我们在知道了身高这个信息之后，信息增益是<code>0.301-0.103=0.198</code>。</p>
<p>如果我对一个男生什么都不知道的话，决定是否嫁给他的不确定性有0.301这么大。当我们知道他的身高信息后，不确定度减少了0.198。</p>
<p>假如其它特征我也全算了，信息增益是身高这个特征最大。那么身高对于我挑夫君是最重要的，知道了这个特征，嫁与不嫁的不确定度减少的是最多的。<strong>那么在这个决策树里面，身高就是最优特征，所以它被选作分裂特征。下面再进行递归计算信息增益，在此就不展示了</strong>。</p>
<h3 id="2、ID3算法的不足"><a href="#2、ID3算法的不足" class="headerlink" title="2、ID3算法的不足"></a>2、ID3算法的不足</h3><ul>
<li><strong>ID3算法没有考虑连续特征</strong>，比如长度，密度都是连续值，无法在ID3运用。这大大限制了ID3的用途。</li>
<li>ID3算法采用信息增益大的特征优先建立决策树的节点。但是<strong>在相同条件下，取值比较多的特征比取值少的特征信息增益大</strong>。比如一个变量有2个值，各为1/2，另一个变量为3个值，各为1/3，其实他们都是完全不确定的变量，但是取3个值的比取2个值的信息增益大。</li>
<li>ID3算法没有考虑缺失值的情况。</li>
<li>ID3算法没有考虑过拟合的问题。</li>
</ul>
<h2 id="三、决策树C4-5算法"><a href="#三、决策树C4-5算法" class="headerlink" title="三、决策树C4.5算法"></a>三、决策树C4.5算法</h2><blockquote>
<p>昆兰在C4.5算法中改进了ID3上述4个问题。</p>
</blockquote>
<h3 id="1、连续特征离散化"><a href="#1、连续特征离散化" class="headerlink" title="1、连续特征离散化"></a>1、连续特征离散化</h3><p>对于第一个<strong>不能处理连续特征</strong>的问题，C4.5的思路是将连续的特征离散化。</p>
<p>比如m个样本有m个连续特征A，从小到大排列为${a_1,a_2,…,a_m}$，则C4.5取相邻两样本值的平均数，一共取得m-1个划分点，其中第i个划分点Ti表示为：$T_i = \frac{a_i+a_{i+1}}{2}$。对于这m-1个点，分别计算以该点作为二元分类点时的信息增益。然后<strong>选择信息增益最大的点作为该连续特征的二元离散分类点</strong>。</p>
<blockquote>
<p>比如取到的增益最大的点为at,则小于at的值为类别1，大于at的值为类别2，这样我们就做到了连续特征的离散化。</p>
</blockquote>
<p>要注意的是，与离散属性不同的是，如果当前节点为连续属性，则该属性后面还可以参与子节点的产生选择过程。</p>
<h3 id="2、信息增益比"><a href="#2、信息增益比" class="headerlink" title="2、信息增益比"></a>2、信息增益比</h3><p>对于第二个<strong>信息增益作为标准容易偏向于取值较多的特征</strong>的问题。我们引入信息增益比，它是信息增益和特征熵的比值。</p>
<p>$$<br>I_R(D,A) = \frac{I(A,D)}{H_A(D)}<br>$$</p>
<p>其中D为样本特征输出的集合，A为样本特征，特征熵表达式如下：</p>
<p>$$<br>H_A(D) = -\sum\limits_{i=1}^{n}\frac{|D_i|}{|D|}log_2\frac{|D_i|}{|D|}<br>$$</p>
<p>其中n为特征A的类别数， Di为特征A的第i个取值对应的样本个数。|D|为样本个数。</p>
<p><strong>特征数越多的特征对应的特征熵越大，它作为分母，可以校正信息增益容易偏向于取值较多的特征的问题。</strong></p>
<h3 id="3、剪枝"><a href="#3、剪枝" class="headerlink" title="3、剪枝"></a>3、剪枝</h3><p>对于第四个<strong>过拟合</strong>的问题，C4.5引入了正则化系数进行初步的剪枝。</p>
<h3 id="4、C4-5算法的不足"><a href="#4、C4-5算法的不足" class="headerlink" title="4、C4.5算法的不足"></a>4、C4.5算法的不足</h3><ul>
<li><strong>由于决策树算法非常容易过拟合，因此对于生成的决策树必须要进行剪枝</strong>。剪枝的算法有非常多，C4.5的剪枝方法有优化的空间。思路主要是两种，一种是预剪枝，即在生成决策树的时候就决定是否剪枝。另一个是后剪枝，即先生成决策树，再通过交叉验证来剪枝。后面讲CART树的时候我们会专门讲决策树的减枝思路，主要采用的是后剪枝加上交叉验证选择最合适的决策树。</li>
<li><strong>C4.5生成的是多叉树</strong>，即一个父节点可以有多个节点。很多时候，在计算机中二叉树模型会比多叉树运算效率高。如果采用二叉树，可以提高效率。</li>
<li><strong>C4.5只能用于分类</strong>，如果能将决策树用于回归的话可以扩大它的使用范围。</li>
<li>C4.5由于使用了熵模型，里面有<strong>大量的耗时的对数运算</strong>,如果是连续值还有大量的排序运算。如果能够加以模型简化可以减少运算强度但又不牺牲太多准确性的话，那就更好了。</li>
</ul>
<h2 id="四、CART分类树算法"><a href="#四、CART分类树算法" class="headerlink" title="四、CART分类树算法"></a>四、CART分类树算法</h2><blockquote>
<p>无论是ID3还是C4.5,都是基于信息论的熵模型的，这里面会涉及大量的对数运算。能不能简化模型同时也不至于完全丢失熵模型的优点呢？</p>
</blockquote>
<p>CART分类树算法使用基尼系数来代替信息增益比，基尼系数代表了模型的不纯度，基尼系数越小，则不纯度越低，特征越好。</p>
<p>在分类问题中，假设有K个类别，第k个类别的概率为pk，则基尼系数的表达式为： </p>
<p>$$<br>Gini(p) = \sum\limits_{k=1}^{K}p_k(1-p_k) = 1- \sum\limits_{k=1}^{K}p_k^2<br>$$</p>
<p>如果是二类分类问题，计算就更加简单了，如果属于第一个样本输出的概率是p，则基尼系数的表达式为：</p>
<p>$$<br>Gini(p) = 2p(1-p)<br>$$</p>
<p>对于<strong>二类分类</strong>，基尼系数和熵之半的曲线如下：</p>
<img src="/archives/1059015/%E5%9F%BA%E5%B0%BC%E6%9B%B2%E7%BA%BF.jpg" class="" title="基尼曲线">

<p>从上图可以看出，基尼系数和熵之半的曲线非常接近，仅仅在45度角附近误差稍大。因此，基尼系数可以做为熵模型的一个近似替代。</p>
<h3 id="1、CART分类树多分类处理"><a href="#1、CART分类树多分类处理" class="headerlink" title="1、CART分类树多分类处理"></a>1、CART分类树多分类处理</h3><p>对于多分类的问题，CART分类树采用的思路是不停的二分离散特征。</p>
<p>回忆下ID3或者C4.5，如果某个特征A被选取建立决策树节点，如果它有A1,A2,A3三种类别，我们会在决策树上一下建立一个三叉的节点。这样导致决策树是多叉树。但是CART分类树使用的方法不同，他采用的是不停的二分，还是这个例子，CART分类树会考虑把A分成<code>{A1}</code>和<code>{A2,A3}</code>, <code>{A2}</code>和<code>{A1,A3}</code>, <code>{A3}</code>和<code>{A1,A2}</code>三种情况，找到基尼系数最小的组合，比如<code>{A2}</code>和<code>{A1,A3}</code>,然后建立二叉树节点，一个节点是<code>{A2}</code>对应的样本，另一个节点是<code>{A1,A3}</code>对应的节点。同时，由于这次没有把特征A的取值完全分开，后面我们还有机会在子节点继续选择到特征A来划分A1和A3。这和ID3或者C4.5不同，在ID3或者C4.5的一棵子树中，离散特征只会参与一次节点的建立。</p>
<h3 id="2、CART分类树连续值处理"><a href="#2、CART分类树连续值处理" class="headerlink" title="2、CART分类树连续值处理"></a>2、CART分类树连续值处理</h3><p>对于连续值处理，CART思想和C4.5是相同的，都是将<strong>连续的特征离散化</strong>。唯一的区别在于在选择划分点时的度量方式不同，C4.5使用的是信息增益比，则CART分类树使用的是基尼系数。</p>
<p>具体的思路如下，比如m个样本的连续特征A有m个，从小到大排列为${a_1,a_2,…,a_m}$,则CART算法取相邻两样本值的平均数，一共取得m-1个划分点，其中第i个划分点Ti表示为：$T_i = \frac{a_i+a_{i+1}}{2}$。对于这m-1个点，分别计算以该点作为二元分类点时的基尼系数。<strong>选择基尼系数最小的点作为该连续特征的二元离散分类点</strong>。</p>
<blockquote>
<p>比如取到的基尼系数最小的点为at,则小于at的值为类别1，大于at的值为类别2，这样我们就做到了连续特征的离散化。</p>
</blockquote>
<p>要注意的是，与ID3或者C4.5处理离散属性不同的是，如果当前节点为连续属性，则该属性后面还可以参与子节点的产生选择过程。</p>
<h2 id="五、sklearn实现决策树"><a href="#五、sklearn实现决策树" class="headerlink" title="五、sklearn实现决策树"></a>五、sklearn实现决策树</h2><p>这里我使用scikit-learn中的鸢尾花数据集作为例子来学习决策树算法。</p>
<h3 id="1、数据探索"><a href="#1、数据探索" class="headerlink" title="1、数据探索"></a>1、数据探索</h3><figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据集</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据特征：150行， 4列</span></span><br><span class="line">features = iris[<span class="string">'data'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应的鸢尾花种类: 150个，三种鸢尾花分别用 0,1,2 表示</span></span><br><span class="line">target = iris[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义4个特征的名称</span></span><br><span class="line">feature_names = iris.feature_names</span><br><span class="line">feature_names = [<span class="string">'花萼长度'</span>, <span class="string">'花萼宽度'</span>, <span class="string">'花瓣长度'</span>, <span class="string">'花瓣宽度'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义三种鸢尾花的名称</span></span><br><span class="line">class_names = iris.target_names</span><br><span class="line">class_names = [<span class="string">'山鸢尾花'</span>, <span class="string">'变色鸢尾花'</span>, <span class="string">'维吉尼亚鸢尾花'</span>]</span><br></pre></td></tr></table></figure>

<p>为了更好的识别出鸢尾花特征和种类之间的关系，我们先通过以下代码画出鸢尾花的四个特征分别与鸢尾花种类的散点图。</p>
<figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line">colors=<span class="string">'rgby'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成散点图</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.scatter(features[:,i], target, c=colors[i])</span><br><span class="line">    plt.xlabel(feature_names[i])</span><br><span class="line">    plt.ylabel(<span class="string">'花的种类'</span>)</span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">"特征和鸢尾花种类散点图"</span>)</span><br><span class="line">plt.tight_layout(pad=<span class="number">3</span>, w_pad=<span class="number">2</span>, h_pad=<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="2、sklearn实现决策树"><a href="#2、sklearn实现决策树" class="headerlink" title="2、sklearn实现决策树"></a>2、sklearn实现决策树</h3><p>下面我们通过 sklearn 自带的决策树函数训练样本并画出决策树的图。</p>
<figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把样本分成训练集和测试集两部分, 两者比例为： 7:3</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=<span class="number">0.3</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建决策树分类器</span></span><br><span class="line">clf = tree.DecisionTreeClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练决策树</span></span><br><span class="line">clf.fit(X=X_train, y=y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看特征比重</span></span><br><span class="line">print(<span class="string">"feature weight : "</span>, clf.feature_importances_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看决策树评分</span></span><br><span class="line">print(<span class="string">"decision tree score : "</span>, clf.score(X=X_test, y=y_test))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feature weight : [0. 0.01911002 0.42356658 0.5573234 ] </span><br><span class="line">decision tree score : 1.0</span><br></pre></td></tr></table></figure>

<p>下面使用 graphviz 出决策树的图：</p>
<figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> graphviz</span><br><span class="line"></span><br><span class="line">dot_data = tree.export_graphviz(</span><br><span class="line">    clf,</span><br><span class="line">    out_file=<span class="literal">None</span>,</span><br><span class="line">    feature_names=feature_names,</span><br><span class="line">    class_names=class_names,</span><br><span class="line">    filled=<span class="literal">True</span>,</span><br><span class="line">    rounded=<span class="literal">True</span>,</span><br><span class="line">    special_characters=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">graph = graphviz.Source(dot_data)</span><br><span class="line">graph.format = <span class="string">'svg'</span></span><br><span class="line">graph.render(<span class="string">'./DecisionTree.gv'</span>, view=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/1059015/DecisionTree.svg" class="" title="DecisionTree">

<h2 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h2><ul>
<li><a href="https://www.cnblogs.com/leoo2sk/archive/2010/09/19/decision-tree.html" target="_blank" rel="noopener external nofollow noreferrer">张洋-算法杂货铺——分类算法之决策树(Decision tree)</a></li>
<li><a href="https://www.cnblogs.com/pinard/p/6050306.html" target="_blank" rel="noopener external nofollow noreferrer">刘建平Pinard-决策树算法原理(上)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26596036" target="_blank" rel="noopener external nofollow noreferrer">忆臻-通俗理解决策树算法中的信息增益</a></li>
<li><a href="http://blog.lisp4fun.com/2018/03/03/decision-tree" target="_blank" rel="noopener external nofollow noreferrer">python 决策树算法</a></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>决策树</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>决策树</tag>
      </tags>
  </entry>
  <entry>
    <title>GBDT梯度提升树介绍</title>
    <url>/archives/7b6c662f.html</url>
    <content><![CDATA[<p>GBDT(Gradient Boosting Decision Tree) ,又叫 MART（Multiple Additive Regression Tree)，是一种迭代的决策树算法，该算法由多棵决策树组成，所有树的结论累加起来做最终答案。它在被提出之初就和SVM一起被认为是泛化能力较强的算法。</p>
<p><strong>GBDT中的树是回归树（不是分类树），GBDT用来做回归预测，调整后也可以用于分类。</strong></p>
<blockquote>
<p>决策树分为两大类，回归树和分类树。</p>
<ul>
<li>回归树用于预测实数值，如明天的温度、用户的年龄、网页的相关程度；</li>
<li>分类树用于分类标签值，如晴天/阴天/雾/雨、用户性别、网页是否是垃圾页面。</li>
</ul>
<p>这里要强调的是，回归树的结果加减是有意义的，如10岁+5岁-3岁=12岁，分类树则无意义，如男+男+女=到底是男是女？</p>
</blockquote>
<a id="more"></a>

<h2 id="回归树"><a href="#回归树" class="headerlink" title="回归树"></a>回归树</h2><h3 id="1、回归树原理简介"><a href="#1、回归树原理简介" class="headerlink" title="1、回归树原理简介"></a>1、回归树原理简介</h3><p>先说分类树，我们知道C4.5分类树在每次分枝时，是<strong>穷举每一个特征的每一个阈值</strong>，找到使得按照<code>特征&lt;=阈值</code>和<code>特征&gt;阈值</code>分成的两个分枝的熵最大的特征和阈值（熵最大的概念可理解成尽可能每个分枝的男女比例都远离1:1），按照该标准分枝得到两个新节点，用同样方法继续分枝直到<strong>所有人都被分入性别唯一的叶子节点，或达到预设的终止条件，若最终叶子节点中的性别不唯一，则以多数人的性别作为该叶子节点的性别</strong>。</p>
<p>回归树（Regression Decision Tree）总体流程类似于分类树，区别在于，回归树的每一个节点都会得一个预测值，以年龄为例，该预测值等于属于这个节点的所有人年龄的平均值。分枝时<strong>穷举每一个特征的每个阈值找最好的分割点</strong>，但衡量最好的标准不再是最大熵，而是<strong>最小化平方误差</strong>。也就是被预测出错的人数越多，错的越离谱，平方误差就越大，通过最小化平方误差能够找到最可靠的分枝依据。<strong>分枝直到每个叶子节点上人的年龄都唯一（这太难了）或者达到预设的终止条件(如叶子个数上限)，若最终叶子节点上人的年龄不唯一，则以该节点上所有人的平均年龄做为该叶子节点的预测年龄。</strong></p>
<img src="/archives/7b6c662f/%E5%9B%9E%E5%BD%92%E6%A0%91%E7%A4%BA%E4%BE%8B.png" class="" title="回归树示例">

<h3 id="2、回归树示例"><a href="#2、回归树示例" class="headerlink" title="2、回归树示例"></a>2、回归树示例</h3><p>下面是一个示例数据集：</p>
<table>
<thead>
<tr>
<th align="center">面积/平米</th>
<th align="center">价格/万</th>
</tr>
</thead>
<tbody><tr>
<td align="center">20</td>
<td align="center">40.1</td>
</tr>
<tr>
<td align="center">21</td>
<td align="center">40.3</td>
</tr>
<tr>
<td align="center">35</td>
<td align="center">70.4</td>
</tr>
<tr>
<td align="center">36</td>
<td align="center">70.2</td>
</tr>
</tbody></table>
<h4 id="1-、选择最优特征"><a href="#1-、选择最优特征" class="headerlink" title="(1)、选择最优特征"></a>(1)、选择最优特征</h4><ol>
<li><p>按特征<code>&quot;面积&quot; = 20</code>划分数据集：</p>
<ul>
<li>y1 均值为<code>40.1</code></li>
<li>y2 均值为<code>(40.3 + 70.4 + 70.2) / 3 = 60.3</code></li>
<li>平方误差为：<code>0 + (40.3 – 60.3)*2 + (70.4 – 60.3)*2 + (70.2 – 60.3)*2= 600.02</code></li>
</ul>
</li>
<li><p>按特征<code>&quot;面积&quot; = 21</code>划分数据集：</p>
<ul>
<li>y1 均值为<code>(40.1 + 40.3)/ 2 = 40.2</code></li>
<li>y2 均值为<code>(70.4 + 70.2) / 2 = 70.3</code></li>
<li>平方误差为：<code>(40.1 –40.2)*2 + (40.3 –40.2)*2 + (70.4 –70.3)*2 +(70.2 –70.3)*2 = 0.04</code></li>
</ul>
</li>
<li><p>按特征<code>&quot;面积&quot; = 35</code>划分数据集：</p>
<ul>
<li>y1 均值为<code>(40.1 + 40.3 + 70.4) / 3 = 50.27</code></li>
<li>y2 均值为<code>70.2</code></li>
<li>平方误差为：<code>(40.1 –50.27)*2 + (40.3 –50.27)*2 + (70.4 –50.27)*2 + 0 = 608.05</code></li>
</ul>
</li>
</ol>
<p>综上所述，由于按特征<code>&quot;面积&quot; = 21</code> 比特征<code>&quot;面积&quot; = 20</code>、<code>&quot;面积&quot; = 35</code>划分的平方误差小，所以特征<code>&quot;面积&quot; = 21</code>为切分点。</p>
<h3 id="2-、按最优特征划分数据集"><a href="#2-、按最优特征划分数据集" class="headerlink" title="(2)、按最优特征划分数据集"></a>(2)、按最优特征划分数据集</h3><p>以特征<code>&quot;面积&quot; = 21</code>为切分点，将数据切分为<code>{面积 = 20,价格 = 40.1; 面积 = 21, 价格 = 40.3}</code>， <code>{面积 = 35,价格 = 70.4; 面积 = 36, 价格 = 70.2}</code>两个子集。</p>
<p>其中子集<code>{面积 = 20,价格 = 40.1; 面积 = 21, 价格 = 40.3}</code>的目标变量非常接近，故不继续划分，得叶节点值<code>(40.1 + 40.3) / 2 = 40.2</code>； 同理得子集<code>{面积 = 35,价格 = 70.4; 面积 = 36, 价格 = 70.2}</code>的叶节点值为 <code>(70.4 + 70.2) / 2 = 70.3</code>。</p>
<h2 id="梯度提升树算法"><a href="#梯度提升树算法" class="headerlink" title="梯度提升树算法"></a>梯度提升树算法</h2><p>梯度提升树（Gradient Boosting Decision Tree）是迭代多棵回归树来共同决策。当采用平方误差损失函数时，每一棵回归树学习的是<strong>之前所有树的结论和残差</strong>，拟合得到一个当前的残差回归树，残差的意义如公式：<code>残差 = 真实值 - 预测值</code>。提升树即是整个迭代过程生成的回归树的累加。</p>
<h3 id="1、小例子"><a href="#1、小例子" class="headerlink" title="1、小例子"></a>1、小例子</h3><p>在这个例子里，我们通过<strong>传统的回归决策树</strong>和<strong>梯度提升树</strong>两种方式来预测年龄。</p>
<p>训练集是4个人，A，B，C，D，年龄分别是14，16，24，26。样本中有<code>购物金额</code>、<code>上网时长</code>、<code>经常到百度知道提问</code>等特征。</p>
<p>如果是用一棵传统的回归决策树来训练，会得到如下图所示结果：</p>
<img src="/archives/7b6c662f/GBDT-1.png" class="" title="GBDT-1">

<p>现在我们使用梯度提升树来做这件事，由于数据太少，我们限定叶子节点做多有两个，即每棵树都只有一个分枝，并且限定只学两棵树。我们会得到如下图所示结果：</p>
<img src="/archives/7b6c662f/GBDT-2.png" class="" title="GBDT-2">

<p>该例子很直观的能看到，<strong>梯度提升树的预测值等于所有树值得累加</strong>，如<code>A的预测值 = 树1左节点 值 15 + 树2左节点 -1 = 14</code>。</p>
<h3 id="2、Gradient体现在哪里"><a href="#2、Gradient体现在哪里" class="headerlink" title="2、Gradient体现在哪里"></a>2、Gradient体现在哪里</h3><blockquote>
<p>那么哪里体现了Gradient呢？</p>
</blockquote>
<p>其实回到第一棵树结束时想一想，无论此时的cost function是什么，是均方差还是均差，只要它以误差作为衡量标准，残差向量(-1, 1, -1, 1)都是它的全局最优方向，这就是Gradient。</p>
<h3 id="3、为何需要GBDT"><a href="#3、为何需要GBDT" class="headerlink" title="3、为何需要GBDT"></a>3、为何需要GBDT</h3><blockquote>
<p>既然传统的回归决策树和GBDT最终效果相同，为何还需要GBDT呢？</p>
</blockquote>
<p>答案是过拟合。过拟合是指为了让训练集精度更高，学到了很多<strong>仅在训练集上成立的规律</strong>，导致换一个数据集当前规律就不适用了。<strong>其实只要允许一棵树的叶子节点足够多，训练集总是能训练到100%准确率的（大不了最后一个叶子上只有一个instance)。在训练精度和实际精度（或测试精度）之间，后者才是我们想要真正得到的。</strong></p>
<p>我们发现传统的回归决策树为了达到100%精度使用了3个特征（上网时长、时段、网购金额），其中分枝“上网时长&gt;1.1h” 很显然已经过拟合了。相对来说，GBDT虽然用了两棵树 ，但其实只用了2个特征就搞定了，后一个特征是问答比例，其分枝依据更合乎逻辑（当然这里是相比较于上网时长特征而言）。</p>
<h3 id="4、GBDT适用范围"><a href="#4、GBDT适用范围" class="headerlink" title="4、GBDT适用范围"></a>4、GBDT适用范围</h3><ul>
<li>GBDT 可以适用于回归问题（线性和非线性），相对于 logistic regression 仅能用于线性回归，GBDT 适用面更广。</li>
<li>GBDT 也可用于二分类问题（设定阈值，大于为正，否则为负）和多分类问题。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://geosmart.github.io/2017/07/26/GBDT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener external nofollow noreferrer">GBDT学习笔记</a></li>
<li><a href="https://blog.csdn.net/suranxu007/article/details/49910323" target="_blank" rel="noopener external nofollow noreferrer">苏冉旭-GBDT（MART） 迭代决策树入门教程 | 简介</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/analytics/library/machine-learning-hands-on5-cart-tree/index.html" target="_blank" rel="noopener external nofollow noreferrer">CART 树简介</a></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>决策树</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>决策树</tag>
      </tags>
  </entry>
  <entry>
    <title>集成学习原理小结</title>
    <url>/archives/a2665b86.html</url>
    <content><![CDATA[<p>集成学习(ensemble learning)可以说是现在非常火爆的机器学习方法了。<strong>它本身不是一个单独的机器学习算法，而是通过构建并结合多个机器学习器来完成学习任务</strong>。也就是我们常说的“博采众长”。集成学习可以用于分类问题集成，回归问题集成，特征选取集成，异常点检测集成等等，可以说所有的机器学习领域都可以看到集成学习的身影。本文就对集成学习的原理做一个总结。</p>
<a id="more"></a>

<h2 id="一、集成学习概述"><a href="#一、集成学习概述" class="headerlink" title="一、集成学习概述"></a>一、集成学习概述</h2><p>从下图，我们可以对集成学习的思想做一个概括。对于训练集数据，我们通过训练若干个个体学习器，通过一定的结合策略，就可以最终形成一个强学习器，以达到博采众长的目的。</p>
<img src="/archives/a2665b86/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0.png" class="" title="集成学习">

<p>也就是说，集成学习有两个主要的问题需要解决，第一是如何得到若干个个体学习器，第二是如何选择一种结合策略，将这些个体学习器集合成一个强学习器。</p>
<h2 id="二、集成学习之个体学习器"><a href="#二、集成学习之个体学习器" class="headerlink" title="二、集成学习之个体学习器"></a>二、集成学习之个体学习器</h2><p>上一节我们讲到，集成学习的第一个问题就是如何得到若干个个体学习器。这里我们有两种选择。</p>
<ul>
<li><strong>第一种就是所有的个体学习器都是一个种类的，或者说是同质的</strong>。比如都是决策树个体学习器，或者都是神经网络个体学习器。</li>
<li><strong>第二种是所有的个体学习器不全是一个种类的，或者说是异质的</strong>。比如我们有一个分类问题，对训练集采用支持向量机个体学习器，逻辑回归个体学习器和朴素贝叶斯个体学习器来学习，再通过某种结合策略来确定最终的分类强学习器。</li>
</ul>
<p>目前来说，同质个体学习器的应用是最广泛的，一般我们常说的集成学习的方法都是指的同质个体学习器。而同质个体学习器使用最多的模型是CART决策树和神经网络。同质个体学习器按照个体学习器之间是否存在依赖关系可以分为两类：</p>
<ul>
<li><strong>第一个是个体学习器之间存在强依赖关系，一系列个体学习器基本都需要串行生成</strong>，代表算法是boosting系列算法。</li>
<li><strong>第二个是个体学习器之间不存在强依赖关系，一系列个体学习器可以并行生成</strong>，代表算法是bagging和随机森林（Random Forest）系列算法。</li>
</ul>
<p>下面就分别对这两类算法做一个概括总结。</p>
<h2 id="三、集成学习之boosting"><a href="#三、集成学习之boosting" class="headerlink" title="三、集成学习之boosting"></a>三、集成学习之boosting</h2><p>boosting的算法原理我们可以用一张图做一个概括如下：</p>
<img src="/archives/a2665b86/boosting.png" class="" title="boosting">

<p>从图中可以看出，Boosting算法的工作机制是首先从训练集用初始权重训练出一个弱学习器1，根据弱学习的学习误差率表现来更新训练样本的权重，使得之前弱学习器1学习误差率高的训练样本点的权重变高，使得这些误差率高的点在后面的弱学习器2中得到更多的重视。然后基于调整权重后的训练集来训练弱学习器2，如此重复进行，直到弱学习器数达到事先指定的数目T，最终将这T个弱学习器通过集合策略进行整合，得到最终的强学习器。</p>
<p>Boosting系列算法里最著名算法主要有AdaBoost算法和提升树(boosting tree)系列算法。提升树系列算法里面应用最广泛的是梯度提升树(Gradient Boosting Tree)。AdaBoost和提升树算法的原理在后面的文章中会专门来讲。</p>
<h2 id="四、集成学习之bagging"><a href="#四、集成学习之bagging" class="headerlink" title="四、集成学习之bagging"></a>四、集成学习之bagging</h2><p>Bagging的算法原理和 boosting不同，它的弱学习器之间没有依赖关系，可以并行生成，我们可以用一张图做一个概括如下：</p>
<img src="/archives/a2665b86/bagging.png" class="" title="bagging">

<p>从上图可以看出，bagging的个体弱学习器的训练集是通过随机采样得到的。通过T次的随机采样，我们就可以得到T个采样集，对于这T个采样集，我们可以分别独立的训练出T个弱学习器，再对这T个弱学习器通过集合策略来得到最终的强学习器。</p>
<p>对于这里的随机采样有必要做进一步的介绍，这里一般采用的是自助采样法（Bootstrap sampling），即对于m个样本的原始训练集，我们每次先随机采集一个样本放入采样集，接着把该样本放回，也就是说下次采样时该样本仍有可能被采集到，这样采集m次，最终可以得到m个样本的采样集，由于是随机采样，这样每次的采样集是和原始训练集不同的，和其他采样集也是不同的，这样得到多个不同的弱学习器。</p>
<p>随机森林是bagging的一个特化进阶版，所谓的特化是因为随机森林的弱学习器都是决策树。所谓的进阶是随机森林在bagging的样本随机采样基础上，又加上了特征的随机选择，其基本思想没有脱离bagging的范畴。bagging和随机森林算法的原理在后面的文章中会专门来讲。</p>
<h2 id="五、集成学习之结合策略"><a href="#五、集成学习之结合策略" class="headerlink" title="五、集成学习之结合策略"></a>五、集成学习之结合策略</h2><p>在上面几节里面我们主要关注于学习器，提到了学习器的结合策略但没有细讲，本节就对集成学习之结合策略做一个总结。我们假定我得到的T个弱学习器是${h_1,h_2,…h_T}$</p>
<h3 id="1、平均法"><a href="#1、平均法" class="headerlink" title="1、平均法"></a>1、平均法</h3><p><strong>对于数值类的回归预测问题，通常使用的结合策略是平均法</strong>，也就是说，对于若干个弱学习器的输出进行平均得到最终的预测输出。</p>
<p>最简单的平均是算术平均，也就是说最终预测是</p>
<p>$$<br>H(x) = \frac{1}{T}\sum\limits_{1}^{T}h_i(x)<br>$$</p>
<p>如果每个个体学习器有一个权重w，则最终预测是</p>
<p>$$<br>H(x) = \sum\limits_{i=1}^{T}w_ih_i(x)<br>$$</p>
<p>其中$w_i$是个体学习器$h_i$的权重，通常有</p>
<p>$$<br>w_i \geq 0 ,;;; \sum\limits_{i=1}^{T}w_i = 1<br>$$</p>
<h2 id="2、投票法"><a href="#2、投票法" class="headerlink" title="2、投票法"></a>2、投票法</h2><p><strong>对于分类问题的预测，我们通常使用的是投票法</strong>。假设我们的预测类别是${c_1,c_2,…c_K}$,对于任意一个预测样本x，我们的T个弱学习器的预测结果分别是$(h_1(x), h_2(x)…h_T(x))$。</p>
<p>最简单的投票法是相对多数投票法，也就是我们常说的少数服从多数，也就是T个弱学习器的对样本x的预测结果中，数量最多的类别ci为最终的分类类别。如果不止一个类别获得最高票，则随机选择一个做最终类别。</p>
<p>稍微复杂的投票法是绝对多数投票法，也就是我们常说的要票过半数。在相对多数投票法的基础上，不光要求获得最高票，还要求票过半数。否则会拒绝预测。</p>
<p>更加复杂的是加权投票法，和加权平均法一样，每个弱学习器的分类票数要乘以一个权重，最终将各个类别的加权票数求和，最大的值对应的类别为最终类别。</p>
<h3 id="3、学习法"><a href="#3、学习法" class="headerlink" title="3、学习法"></a>3、学习法</h3><p>上两节的方法都是对弱学习器的结果做平均或者投票，相对比较简单，但是可能学习误差较大，于是就有了学习法这种方法，对于学习法，代表方法是stacking，当使用stacking的结合策略时， 我们不是对弱学习器的结果做简单的逻辑处理，而是再加上一层学习器，也就是说，我们将训练集弱学习器的学习结果作为输入，将训练集的输出作为输出，重新训练一个学习器来得到最终结果。</p>
<p>在这种情况下，我们将弱学习器称为初级学习器，将用于结合的学习器称为次级学习器。对于测试集，我们首先用初级学习器预测一次，得到次级学习器的输入样本，再用次级学习器预测一次，得到最终的预测结果。</p>
<p>以上就是集成学习原理的一个总结，后面会分别对Adaboost, 提升树，bagging和随机森林的算法原理做一个总结，敬请期待。</p>
<blockquote>
<p>本文转载于：<a href="https://www.cnblogs.com/pinard/p/6131423.html" target="_blank" rel="noopener external nofollow noreferrer">刘建平Pinard-集成学习原理小结</a></p>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>集成学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>集成学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习笔记汇总</title>
    <url>/archives/97bf4f4.html</url>
    <content><![CDATA[<p>机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。</p>
<p>一个更精确的定义：如果计算机程序对于任务 T 的性能度量 P 通过经验 E 得到了提高，则认为此程序对经验 E 进行了学习。</p>
<p>为了便于理解，这里我整理了常见机器学习算法的通俗解释。</p>
<a id="more"></a>

<h2 id="机器学习算法分类"><a href="#机器学习算法分类" class="headerlink" title="机器学习算法分类"></a>机器学习算法分类</h2><p>机器学习可以分成<strong>监督学习</strong>与<strong>无监督学习</strong>：监督学习从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。<strong>监督学习和非监督学习的差别就是训练集目标是否人标注</strong>。</p>
<h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><ul>
<li><p>线性回归</p>
<ul>
<li><a href="https://tding.top/archives/fae43975.html">线性回归介绍和Python实现</a></li>
</ul>
</li>
<li><p>逻辑回归</p>
<ul>
<li><a href="https://tding.top/archives/2a97a967.html">逻辑回归介绍</a></li>
</ul>
</li>
<li><p>朴素贝叶斯</p>
<ul>
<li><a href="https://tding.top/archives/4b7871b.html">朴素贝叶斯介绍</a></li>
</ul>
</li>
<li><p>决策树</p>
<ul>
<li><a href="https://tding.top/archives/1059015.html">决策树介绍</a></li>
<li><a href="https://tding.top/archives/6096d2cd.html">随机森林通俗解释</a></li>
<li><a href="https://tding.top/archives/7b6c662f.html">GBDT梯度提升树介绍</a></li>
</ul>
</li>
</ul>
<p>上面的随机森林和GBDT其实是用了集成学习，通过构建并结合多个机器学习器来完成学习任务。集成学习原理可以见：<a href="https://tding.top/archives/a2665b86.html">集成学习原理小结</a></p>
<h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>无监督学习的简要介绍：<a href="https://tding.top/archives/7a4d6d3c.html">什么是无监督学习？</a></p>
<p>常见的无监督学习算法有聚类：</p>
<ul>
<li><a href="https://tding.top/archives/3e3c6c6a.html">KMeans聚类算法</a></li>
<li><a href="https://tding.top/archives/31ee8a52.html">层次聚类算法</a></li>
</ul>
<p>然后还有一个非常经典的无监督降维算法——主成分分析法：</p>
<ul>
<li><a href="https://tding.top/archives/8aecd656.html">PCA通俗解释</a></li>
</ul>
<h2 id="机器学习评价指标"><a href="#机器学习评价指标" class="headerlink" title="机器学习评价指标"></a>机器学习评价指标</h2><p>评价指标是机器学习任务中非常重要的一环。不同的机器学习任务有着不同的评价指标，同时同一种机器学习任务也有着不同的评价指标，每个指标的着重点不一样。</p>
<p>详细见：<a href="https://tding.top/archives/31315aab.html">机器学习评价指标</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>朴素贝叶斯介绍</title>
    <url>/archives/4b7871b.html</url>
    <content><![CDATA[<p>贝叶斯分类是一类分类算法的总称，这类算法均以<strong>贝叶斯定理</strong>为基础，故统称为<strong>贝叶斯分类</strong>。而朴素朴素贝叶斯分类是贝叶斯分类中最简单，也是常见的一种分类方法。</p>
<a id="more"></a>

<h2 id="一、分类的数学描述"><a href="#一、分类的数学描述" class="headerlink" title="一、分类的数学描述"></a>一、分类的数学描述</h2><ul>
<li>$C=y_{1}, y_{2}, \dots . y_{m}$：类别集合，每个y是一个类别</li>
<li>$I=x_{1}, x_{2}, \dots . x_{n}$：项集合，每个x是一个待分类项，每个待分类项有若干个特征</li>
</ul>
<p>构造一个f，使得$y_{i}=f(x_{i})$，其中f就是分类器。</p>
<h2 id="二、贝叶斯定理"><a href="#二、贝叶斯定理" class="headerlink" title="二、贝叶斯定理"></a>二、贝叶斯定理</h2><p>贝叶斯定理实际上就是计算”条件概率”的公式。</p>
<p>条件概率（Conditional Probability）是指在事件B发生的情况下，事件A发生的概率，用P(A|B)表示，读作在B条件下的A的概率。</p>
<img src="/archives/4b7871b/1.jpg" class="" title="图1">

<p>根据文氏图，可以很清楚地看到在事件B发生的情况下，事件A发生的概率就是P(A∩B)除以P(B)。</p>
<p>$$<br>P(A | B)=\frac{P(A \cap B)}{P(B)}<br>$$</p>
<p>同时，P(A∩B)又可以由$P(A \cap B)=P(B | A) P(A)$表示，然后我们就可以推得贝叶斯公式：</p>
<p>$$<br>P(A | B)=\frac{P(B | A) P(A)}{P(B)}<br>$$</p>
<p><strong>贝叶斯定理之所以有用，是因为我们在生活中经常遇到这种情况：我们可以很容易直接得出P(A|B)，P(B|A)则很难直接得出，但我们更关心P(B|A)，贝叶斯定理就为我们打通从P(A|B)获得P(B|A)的道路。</strong></p>
<p>在分类任务中，我们可以把贝叶斯定理换一个更清楚的形式：</p>
<p>$$<br>P(类别 | 特征)=\frac{P(特征 | 类别) P(类别)}{P(特征)}<br>$$</p>
<h2 id="三、朴素贝叶斯分类器"><a href="#三、朴素贝叶斯分类器" class="headerlink" title="三、朴素贝叶斯分类器"></a>三、朴素贝叶斯分类器</h2><h3 id="1、小例子"><a href="#1、小例子" class="headerlink" title="1、小例子"></a>1、小例子</h3><p>训练样本的属性集为$X={性别，年龄，婚姻}$，类别为$Y={Yes,No}$，表示是否购买产品，训练样本共有10条记录，购买记录有4条，不购买记录有6条。下面是具体的数据集：</p>
<table>
<thead>
<tr>
<th align="center">性别(A)</th>
<th align="center">年龄(B)</th>
<th align="center">婚姻状况(C)</th>
<th align="center">是否购买(Y)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">M</td>
<td align="center">小</td>
<td align="center">未婚</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">中</td>
<td align="center">已婚</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">小</td>
<td align="center">未婚</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">大</td>
<td align="center">已婚</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">中</td>
<td align="center">离异</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">中</td>
<td align="center">未婚</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">大</td>
<td align="center">已婚</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">大</td>
<td align="center">未婚</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">大</td>
<td align="center">未婚</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">中</td>
<td align="center">已婚</td>
<td align="center">No</td>
</tr>
</tbody></table>
<p>现在给定一个<strong>测试样本X′为性别=F,年龄=中,婚姻=离异</strong>，预测该用户是否会购买公司的产品。因此，我们需要计算概率：</p>
<p>$$<br>\left { \begin{aligned} &amp; P(Y=Yes|性别=F,年龄=中,婚姻=离异) \ &amp; P(Y=No|性别=F,年龄=中,婚姻=离异) \end{aligned} \right.<br>$$</p>
<p>根据贝叶斯定理：</p>
<p>$$<br>\begin{aligned} P_1 &amp;= P(Y=Yes|性别=F,年龄=中,婚姻=离异) \ &amp;= \frac{P(性别=F,年龄=中,婚姻=离异 | Y=Yes) P(Y=Yes)}{P(性别=F,年龄=中,婚姻=离异)} \ &amp;= \frac{P(性别=F|Yes) P(年龄=中|Yes) P(婚姻=离异|Yes) P(Y=Yes)}{P(性别=F) P(年龄=中) P(婚姻=离异)} \end{aligned}<br>$$</p>
<p>同时我们知道</p>
<p>$$<br>\left{ \begin{aligned} &amp; P(Y=Yes) = 4/10 \ &amp; P(性别=F|Yes)  = 1/4 \ &amp; P(年龄=中|Yes) = 1/4 \ &amp; P(婚姻=离异|Yes) = 0 \ \end{aligned} \right.<br>$$</p>
<p>我们可以求得$P(Y=Yes|性别=F,年龄=中,婚姻=离异)$为：</p>
<p>$$<br>\begin{aligned} P_1 &amp;= \frac{1}{4} \times \frac{1}{4} \times 0 \times \frac{4}{10} / \alpha = 0 \end{aligned}<br>$$</p>
<p>同理我们可以求得$P(Y=No|性别=F,年龄=中,婚姻=离异)$为：</p>
<p>$$<br>\begin{aligned} P_2 &amp;= \frac{4}{6} \times \frac{3}{6} \times \frac{1}{6} \times \frac{6}{10} / \alpha = 0.033 / \alpha \end{aligned}<br>$$</p>
<p>其中$\alpha = P(性别=F) P(年龄=中) P(婚姻=离异)$。</p>
<p>由于$P_1 &lt; P_2$，根据朴素贝叶斯算法，我们给出NO。</p>
<h3 id="2、朴素贝叶斯算法的朴素一词解释"><a href="#2、朴素贝叶斯算法的朴素一词解释" class="headerlink" title="2、朴素贝叶斯算法的朴素一词解释"></a>2、朴素贝叶斯算法的朴素一词解释</h3><p><strong>朴素贝叶斯算法是假设各个特征之间相互独立。</strong></p>
<p>正是这个特征之间相互独立的假设，使得上面那个例子可以把<code>P(Y=Yes|性别=F,年龄=中,婚姻=离异)</code>拆分成<code>P(性别=F|Yes) P(年龄=中|Yes) P(婚姻=离异|Yes)</code>。</p>
<blockquote>
<p>为什么需要假设特征之间相互独立呢？</p>
</blockquote>
<p>假如没有这个假设，那么我们对右边这些概率的估计其实是不可做的，我们这个例子有三个特征，其中性别包括<code>{M，F}</code>，年龄包括<code>{大，中，小}</code>，婚姻状态包括<code>{未婚，已婚}</code>，那么三个特征的联合概率分布总共是三维空间，总个数为<code>2*3*2=12</code>个。但是现实生活中，往往有非常多的特征，每一个特征的取值也是非常之多，那么我们统计的时候，就需要在整个特征空间中去找，比如统计<code>P(性别=F,年龄=中,婚姻=离异∣Y=Yes)</code>，我们就需要在YES的条件下，去找三种特征全满足的人的个数，这样的话，由于数据的稀疏性，很容易统计到0的情况。</p>
<h3 id="3、拉普拉斯校准"><a href="#3、拉普拉斯校准" class="headerlink" title="3、拉普拉斯校准"></a>3、拉普拉斯校准</h3><p>当某个类别下某个特征项划分没有出现时，比如例子里的<code>P(婚姻=离异|Yes)=0</code>就是产生这种现象，这会令分类器质量大大降低。为了解决这个问题，我们引入Laplace校准，它的思想非常简单，就是<strong>对每类别下所有划分的计数加1</strong>，这样如果训练样本集数量充分大时，并不会对结果产生影响，并且解决了上述频率为0的尴尬局面。</p>
<h3 id="4、朴素贝叶斯算法优缺点"><a href="#4、朴素贝叶斯算法优缺点" class="headerlink" title="4、朴素贝叶斯算法优缺点"></a>4、朴素贝叶斯算法优缺点</h3><ul>
<li><p>优点：</p>
<ul>
<li>朴素贝叶斯模型发源于古典数学理论，有稳定的分类效率</li>
<li>对小规模的数据表现很好，能个处理多分类任务，适合增量式训练，尤其是数据量超出内存时，我们可以一批批的去增量训练</li>
<li>对缺失数据不太敏感，算法也比较简单，常用于文本分类</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>理论上，朴素贝叶斯模型与其他分类方法相比具有最小的误差率。但是实际上并非总是如此，<strong>这是因为朴素贝叶斯模型给定输出类别的情况下，假设属性之间相互独立，这个假设在实际应用中往往是不成立的，在属性个数比较多或者属性之间相关性较大时，分类效果不好。而在属性相关性较小时，朴素贝叶斯性能最为良好</strong>。对于这一点，有半朴素贝叶斯之类的算法通过考虑部分关联性适度改进</li>
<li>需要知道先验概率，且先验概率很多时候取决于假设，假设的模型可以有很多种，因此在某些时候会由于假设的先验模型的原因导致预测效果不佳</li>
<li>由于我们是通过先验和数据来决定后验的概率从而决定分类，所以分类决策存在一定的错误率</li>
<li>对输入数据的表达形式很敏感</li>
</ul>
</li>
</ul>
<h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/26262151" target="_blank" rel="noopener external nofollow noreferrer">带你理解朴素贝叶斯分类算法</a></li>
<li><a href="https://www.cnblogs.com/leoo2sk/archive/2010/09/17/naive-bayesian-classifier.html" target="_blank" rel="noopener external nofollow noreferrer">算法杂货铺——分类算法之朴素贝叶斯分类(Naive Bayesian classification)</a></li>
<li><a href="https://sylvanassun.github.io/2017/12/20/2017-12-20-naive_bayes/" target="_blank" rel="noopener external nofollow noreferrer">朴素贝叶斯的那点事儿</a></li>
<li><a href="http://funhacks.net/2015/05/18/Bayesian-classifier/" target="_blank" rel="noopener external nofollow noreferrer">贝叶斯分类器（上）</a></li>
<li><a href="https://www.cnblogs.com/pinard/p/6069267.html" target="_blank" rel="noopener external nofollow noreferrer">刘建平Pinard-朴素贝叶斯算法原理小结</a></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>分类</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>分类</tag>
      </tags>
  </entry>
  <entry>
    <title>PCA通俗解释</title>
    <url>/archives/8aecd656.html</url>
    <content><![CDATA[<p>主成分分析（Principal Component Analysis，PCA）是非常经典的降维算法，属于无监督降维。</p>
<a id="more"></a>

<h2 id="一、为什么要进行PCA"><a href="#一、为什么要进行PCA" class="headerlink" title="一、为什么要进行PCA"></a>一、为什么要进行PCA</h2><p>桌子那边有一些红酒瓶。我们可以通过色泽、酒精度、年份等描述每瓶红酒。这样可以根据酒窖中每瓶红酒的不同特性编制一张完整的列表。<strong>但是其中很多属性是相关的，因此会出现一些冗余。因此我们可以通过更少的特性总结每瓶酒！这正是PCA做的</strong>。</p>
<p>PCA并没有选择一些特性然后丢弃其余。相反，<strong>它创建一些新特性</strong>，结果这些新特性能够很好地总结我们的红酒列表。当然，这些新特性是由旧特性构建的；例如，一个新特性可能通过计算年份减去酸度或其它类似的组合得出（我们称之为线性组合）。</p>
<h3 id="1、新特征具体是什么"><a href="#1、新特征具体是什么" class="headerlink" title="1、新特征具体是什么"></a>1、新特征具体是什么</h3><ul>
<li><p>第一个答案是你寻找一些在所有红酒中很不相同的属性（特性）。</p>
<p>红酒和红酒很不一样，如果你得到了一个对于大多数红酒而言都一样的特性，那么它们看起来都差不多了，这肯定是一个错误的总结。相反，PCA寻找能尽可能体现红酒差异的属性。</p>
</li>
<li><p>第二个答案是你寻找一些属性，这些属性允许你预测，或者说“重建”原本的红酒特性。</p>
<p>同样，如果你得出了一个和原本的特性没什么关系的属性；那么仅仅使用这一新属性，你不可能重建原本的特性，这又将是一个不好的总结。所以PCA寻找能够尽可能好地重建原本特性的属性。</p>
</li>
</ul>
<p><strong>注意：这两个目标是等效的。</strong></p>
<h3 id="2、为什么这两个目标是等效的"><a href="#2、为什么这两个目标是等效的" class="headerlink" title="2、为什么这两个目标是等效的"></a>2、为什么这两个目标是等效的</h3><p>下面我们看一个二维数据降维成一维的例子：</p>
<img src="/archives/8aecd656/PCA.png" class="" title="PCA">

<ul>
<li>红点：原始数据集</li>
<li>绿点：降维后的数据集</li>
<li>紫线 u1 ：二维的特征 x1, x2 降维后的一维特征（此时为最佳）</li>
<li>蓝线：投影（降维）造成的损失</li>
</ul>
<p>第一个目标是寻找尽可能体现差异的属性，在这个图上就是<strong>最大化投影后数据的方差，让数据在经过变换后更加分散，也就是图中绿色的点更加分散</strong>。</p>
<p>第二个目标是寻找能够尽可能好地重建原本特性的属性，在这个图上就是<strong>最小化投影造成的损失，也就是图中所有蓝色的线（投影造成的损失）加起来最小</strong>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.zhihu.com/question/41120789/answer/474222214" target="_blank" rel="noopener external nofollow noreferrer">如何通俗易懂地讲解什么是 PCA 主成分分析？</a></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>降维</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>降维</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑回归介绍</title>
    <url>/archives/2a97a967.html</url>
    <content><![CDATA[<p>逻辑回归(Logistic Regression, LR)模型其实仅在线性回归的基础上，套用了一个逻辑函数。因此，<strong>LR模型可以被认为是一个被Sigmoid函数（logistic方程）所归一化后的线性回归模型</strong>。</p>
<a id="more"></a>

<h2 id="为什么需要逻辑回归"><a href="#为什么需要逻辑回归" class="headerlink" title="为什么需要逻辑回归"></a>为什么需要逻辑回归</h2><p>首先要理解二分类问题，二分类问题是指预测的y值只有两个取值（0或1）。</p>
<p>例如：我们要做一个垃圾邮件过滤系统，X(i)是邮件的特征，预测的y值就是邮件的类别，是垃圾邮件还是正常邮件。对于类别我们通常称为正类（positive class）和负类（negative class），垃圾邮件的例子中，正类就是正常邮件，负类就是垃圾邮件。</p>
<p><strong>如果我们继续使用线性回归来预测y的取值。这样做会导致y的取值并不为0或1。</strong></p>
<p>逻辑回归使用一个函数来归一化y值，使y的取值在区间(0,1)内，称为Sigmoid函数：</p>
<p>$$<br>g(z)=\frac{1}{1+e^{-z}}<br>$$</p>
<p>当z趋近于无穷大时，g(z)趋近于1；当z趋近于无穷小时，g(z)趋近于0。</p>
<p>Sigmoid图形如下：</p>
<figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / (<span class="number">1.</span> + np.exp(-x))</span><br><span class="line"> </span><br><span class="line">x = np.arange(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y = sigmoid(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.axvline(<span class="number">0.0</span>,ls = <span class="string">'dotted'</span>, color=<span class="string">'k'</span>)</span><br><span class="line">plt.title(<span class="string">r'Sigmoid函数曲线'</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.text(<span class="number">5</span>,<span class="number">0.8</span>,<span class="string">r'$y = \frac&#123;1&#125;&#123;1+e^&#123;-z&#125;&#125;$'</span>, fontsize = <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/2a97a967/sigmoid.png" class="" title="sigmoid">

<blockquote>
<p>这里我们发现，函数中z无论取什么值，其结果y都在<code>[0,-1]</code>的区间内，回想一下，一个分类问题就有两种答案，一种是“是”，一种是“否”，那0对应着“否”，1对应着“是”，那又有人问了，你这不是<code>[0,1]</code>的区间吗，怎么做到只有0和1呢？</p>
</blockquote>
<p>我们可以假设分类的阈值是0.5，超过0.5的归为1分类，低于0.5的归为0分类。阈值是可以自己设定的。</p>
<blockquote>
<p>下面参考：<a href="https://zhuanlan.zhihu.com/p/44591359" target="_blank" rel="noopener external nofollow noreferrer">逻辑回归 logistics regression 公式推导</a></p>
</blockquote>
<p>我们不能直接拿了sigmoid函数就用，毕竟它连要训练的参数 $\theta$ 都没。我们结合sigmoid函数，线性回归函数，<strong>把线性回归模型的输出作为sigmoid函数的输入</strong>。于是最后就变成了逻辑回归模型：</p>
<p>$$<br>y=g(f({x}))=g\left({\theta}^{T} {x}\right)=\frac{1}{1+e^{-{\theta}^{T} {x}}}<br>$$</p>
<p>假设我们已经训练好了一组权值 $\theta^T$ 。只要把我们需要预测的 $\theta^T$ 代入到上面的方程，输出的y值就是这个标签为A的概率，我们就能够判断输入数据是属于哪个类别。</p>
<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>逻辑回归的损失函数如下所示：</p>
<p>$$<br>\operatorname{cost}\left(h_{\theta}(x), y\right)=\left{\begin{array}{cc}{-\log \left(h_{\theta}(x)\right)} &amp; {\text { if } y=1} \ {-\log \left(1-h_{\theta}(x)\right)} &amp; {\text { if } y=0}\end{array}\right.<br>$$</p>
<p>当真实值为1分类时，用第一个方程来表示损失函数；当真实值为0分类时，用第二个方程来表示损失函数，为什么要加上log函数呢？可以试想一下，当真实样本为1是，但h=0概率，那么log0=∞，这就对模型最大的惩罚力度；当h=1时，那么log1=0，相当于没有惩罚，也就是没有损失，达到最优结果。所以数学家就想出了用log函数来表示损失函数，把上述两式合并起来就是如下函数：</p>
<p>$$<br>\begin{aligned} J(\theta) &amp;=\frac{1}{m} \sum_{i=1}^{m} \operatorname{cost}\left(h_{\theta}\left(x^{(i)}\right), y^{(i)}\right) \ &amp;=-\frac{1}{m}\left[\sum_{i=1}^{m} y^{(i)} \log h_{\theta}\left(x^{(i)}\right)+\left(1-y^{(i)}\right) \log \left(1-h_{\theta}\left(x^{(i)}\right)\right)\right] \end{aligned}<br>$$</p>
<p>最后按照梯度下降法一样，求解极小值点，得到想要的模型效果。</p>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>梯度下降(Gradient Descent)又叫作最速梯度下降，是一种迭代求解的方法，通过在每一步选取使目标函数变化最快的一个方向调整参数的值来逼近最优值。基本步骤如下：</p>
<ul>
<li>选择下降方向（梯度方向，$\nabla {J(\theta)}$）</li>
<li>选择步长，更新参数 $\theta^i = \theta^{i-1} - \alpha^i \nabla {J(\theta^{i-1})}$</li>
<li>重复以上两步直到满足终止条件</li>
</ul>
<p>其中损失函数的梯度计算方法为：</p>
<p>$$<br>\frac{\partial{J}}{\partial{\theta}} = -\frac{1}{m}\sum_i (y^i - h_{\theta}\left(x^{(i)}\right))x^i<br>$$</p>
<p>沿梯度负方向选择一个较小的步长可以保证损失函数是减小的，另一方面，逻辑回归的损失函数是凸函数（加入正则项后是严格凸函数），可以保证我们找到的局部最优值同时是全局最优。</p>
<img src="/archives/2a97a967/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D.png" class="" title="梯度下降">

<blockquote>
<p><strong>为什么可以用梯度下降法？</strong></p>
<p>因为逻辑回归的损失函数L是一个连续的凸函数（conveniently convex）。这样的函数的特征是，它只会有一个全局最优的点，不存在局部最优。对于GD跟SGD最大的潜在问题就是它们可能会陷入局部最优。然而这个问题在逻辑回归里面就不存在了，因为它的损失函数的良好特性，导致它并不会有好几个局部最优。当我们的GD跟SGD收敛以后，我们得到的极值点一定就是全局最优的点，因此我们可以放心地用GD跟SGD来求解。</p>
</blockquote>
<h2 id="逻辑回归的优势"><a href="#逻辑回归的优势" class="headerlink" title="逻辑回归的优势"></a>逻辑回归的优势</h2><blockquote>
<p>本部分参考：<a href="https://www.jianshu.com/p/c68c064604fc" target="_blank" rel="noopener external nofollow noreferrer">逻辑回归本质</a></p>
</blockquote>
<ul>
<li><strong>模型非常简单</strong>。应用到线上时，prediction的计算非常容易做。在O(1)的时间复杂度之内就能够给出模型的预测值，这对于线上数据暴风雨般袭来的时候非常有用。</li>
<li><strong>模型可解释性强</strong>。对于逻辑回归模型，每个特征$x_i$的参数$\theta_i$就是该特征的权重，$\theta_i$越大，则特征权重越大；越小，则特征权重越小。因此逻辑回归模型往往非常直观，而且容易debug，而且也容易手动修改。</li>
<li><strong>模型的输出平滑</strong>。由于Logistic function的作用，逻辑回归输出值是(0,1)之间的连续值，更重要的是，这个值能从某种角度上表示样本x是正例的可能性，输出值越接近1，则样本是正例的可能性就越大,输出值越接近0，样本是负例的可能性就越大。注意这里的用词，是样本x是正例的可能性，而不是样本x是正例的概率。</li>
</ul>
<h2 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h2><p>其实我们可以从二分类问题过度到多分类问题，有多种扩展逻辑回归使其成为多分类器的方法，比如One-Vs-All、One-Vs-One，下面简单介绍下One-Vs-All。</p>
<h3 id="One-Vs-All"><a href="#One-Vs-All" class="headerlink" title="One-Vs-All"></a>One-Vs-All</h3><p>One-Vs-All（或者叫 One-Vs-Rest）的思想是把一个多分类的问题变成多个二分类的问题。</p>
<ol>
<li>将类型class1看作正样本，其他类型全部看作负样本，然后我们就可以得到样本标记类型为该类型的概率p1。</li>
<li>然后再将另外类型class2看作正样本，其他类型全部看作负样本，同理得到p2。</li>
<li>以此循环，我们可以得到该待预测样本的标记类型分别为类型class i时的概率pi，最后我们取pi中最大的那个概率对应的样本标记类型作为我们的待预测样本类型。</li>
</ol>
<img src="/archives/2a97a967/One-VS-All.png" class="" title="One-VS-All">

<h2 id="逻辑回归建立步骤"><a href="#逻辑回归建立步骤" class="headerlink" title="逻辑回归建立步骤"></a>逻辑回归建立步骤</h2><p>我们按照以下三个基本步骤，来分析和建立逻辑回归模型：</p>
<ul>
<li>构造假设函数（即 H 函数）</li>
<li>构造损失函数（即 J 函数）</li>
<li>通过某种方法使得损失函数最小，并求得此时的参数θ</li>
</ul>
<h2 id="sklearn实现逻辑回归"><a href="#sklearn实现逻辑回归" class="headerlink" title="sklearn实现逻辑回归"></a>sklearn实现逻辑回归</h2><h3 id="1、简单实现"><a href="#1、简单实现" class="headerlink" title="1、简单实现"></a>1、简单实现</h3><figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris   </span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据集</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据特征：150行， 4列</span></span><br><span class="line">features = iris[<span class="string">'data'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应的鸢尾花种类: 150个，三种鸢尾花分别用 0,1,2 表示</span></span><br><span class="line">target = iris[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义4个特征的名称</span></span><br><span class="line">feature_names = iris.feature_names</span><br><span class="line">feature_names = [<span class="string">'花萼长度'</span>, <span class="string">'花萼宽度'</span>, <span class="string">'花瓣长度'</span>, <span class="string">'花瓣宽度'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义三种鸢尾花的名称</span></span><br><span class="line">class_names = iris.target_names</span><br><span class="line">class_names = [<span class="string">'山鸢尾花'</span>, <span class="string">'变色鸢尾花'</span>, <span class="string">'维吉尼亚鸢尾花'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把样本分成训练集和测试集两部分, 两者比例为： 7:3</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=<span class="number">0.3</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">lr = LogisticRegression() </span><br><span class="line">lr.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">output = lr.predict(X_test) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line">acc = np.mean(output == y_test)*<span class="number">100</span></span><br><span class="line">print(<span class="string">"The accuracy of the logistic regression classifier is: \t"</span>, acc, <span class="string">"%"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The accuracy of the logistic regression classifier is: 	 97.77777777777777 %</span><br></pre></td></tr></table></figure>

<h3 id="2、可视化分类边界"><a href="#2、可视化分类边界" class="headerlink" title="2、可视化分类边界"></a>2、可视化分类边界</h3><p>这里使用matplotlib下的<code>pcolormesh()</code>方法来直观表现出分类边界，有效解决了单纯的绘制散点图看不出分类的边界的问题。</p>
<p>注：为了可视化，我仅取<strong>花萼长度</strong>和<strong>花萼宽度</strong>两个特征进行逻辑回归训练。</p>
<figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris   </span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据集</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据特征：150行， 4列</span></span><br><span class="line">features = iris[<span class="string">'data'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应的鸢尾花种类: 150个，三种鸢尾花分别用 0,1,2 表示</span></span><br><span class="line">target = iris[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义4个特征的名称</span></span><br><span class="line">feature_names = iris.feature_names</span><br><span class="line">feature_names = [<span class="string">'花萼长度'</span>, <span class="string">'花萼宽度'</span>, <span class="string">'花瓣长度'</span>, <span class="string">'花瓣宽度'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义三种鸢尾花的名称</span></span><br><span class="line">class_names = iris.target_names</span><br><span class="line">class_names = [<span class="string">'山鸢尾花'</span>, <span class="string">'变色鸢尾花'</span>, <span class="string">'维吉尼亚鸢尾花'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里仅取花萼长度和花萼宽度做特征</span></span><br><span class="line">X_train = features[:,:<span class="number">2</span>]</span><br><span class="line">y_train = target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">lr = LogisticRegression() </span><br><span class="line">lr.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出分类边界</span></span><br><span class="line">N, M = <span class="number">500</span>, <span class="number">500</span>  <span class="comment"># 横纵各采样多少个值</span></span><br><span class="line">x1_min, x2_min = X_train.min(axis=<span class="number">0</span>)</span><br><span class="line">x1_max, x2_max = X_train.max(axis=<span class="number">0</span>)</span><br><span class="line">t1 = np.linspace(x1_min, x1_max, N)</span><br><span class="line">t2 = np.linspace(x2_min, x2_max, M)</span><br><span class="line">x1, x2 = np.meshgrid(t1, t2)  <span class="comment"># 生成网格采样点</span></span><br><span class="line">x_show = np.stack((x1.flat, x2.flat), axis=<span class="number">1</span>)  <span class="comment"># 测试点</span></span><br><span class="line">y_predict=lr.predict(x_show)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置颜色</span></span><br><span class="line">cm_light = mpl.colors.ListedColormap([<span class="string">'#A0FFA0'</span>, <span class="string">'#FFA0A0'</span>, <span class="string">'#A0A0FF'</span>])</span><br><span class="line">cm_dark = mpl.colors.ListedColormap([<span class="string">'g'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制出分类图</span></span><br><span class="line">plt.xlim(x1_min, x1_max)</span><br><span class="line">plt.ylim(x2_min, x2_max)</span><br><span class="line">plt.pcolormesh(x1, x2, y_predict.reshape(x1.shape),cmap=cm_light)</span><br><span class="line">plt.scatter(X_train[:,<span class="number">0</span>],X_train[:,<span class="number">1</span>],c=y_train,cmap=cm_dark,marker=<span class="string">'o'</span>,edgecolors=<span class="string">'k'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'花萼长度'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'花瓣长度'</span>)</span><br><span class="line">plt.title(<span class="string">'鸢尾花分类'</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>,ls=<span class="string">':'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/2a97a967/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%86%E7%B1%BB%E8%BE%B9%E7%95%8C.png" class="" title="可视化分类边界">


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5c1859495188254ec27e79fc" target="_blank" rel="noopener external nofollow noreferrer">通俗易懂–逻辑回归算法讲解(算法+案例)</a></li>
<li><a href="https://blog.csdn.net/zsdust/article/details/79726118" target="_blank" rel="noopener external nofollow noreferrer">利用plt.pcolormesh绘制分类图</a></li>
<li><a href="https://www.jianshu.com/p/c68c064604fc" target="_blank" rel="noopener external nofollow noreferrer">逻辑回归本质</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/44591359" target="_blank" rel="noopener external nofollow noreferrer">逻辑回归 logistics regression 公式推导</a></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>分类</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>分类</tag>
      </tags>
  </entry>
  <entry>
    <title>线性回归介绍和Python实现</title>
    <url>/archives/fae43975.html</url>
    <content><![CDATA[<h2 id="一、线性回归介绍"><a href="#一、线性回归介绍" class="headerlink" title="一、线性回归介绍"></a>一、线性回归介绍</h2><p>线性回归是利用数理统计中回归分析来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。其表达形式为$y=w^{\prime} x+e$，e为误差（服从均值为0的正态分布），数学上e叫截距。</p>
<ul>
<li>当回归分析中只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，称为<strong>一元线性回归分析</strong>。</li>
<li>当回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为<strong>多元线性回归分析</strong>。</li>
</ul>
<a id="more"></a>

<h3 id="1、回归分析流程"><a href="#1、回归分析流程" class="headerlink" title="1、回归分析流程"></a>1、回归分析流程</h3><p>线性回归属于回归问题。回归问题的流程如下：</p>
<ol>
<li>给定数据集中每个样本及其正确答案。</li>
<li>选择一个模型函数h，这里的h代表hypothesis（假设）。</li>
<li>为h找到此数据集的（未必是全局）最优解，即找出最优解下的h的参数。</li>
</ol>
<p>这里给定的数据集是训练集（Training Set）。不能所有数据都拿来训练，要留一部分验证模型的准确率，这部分叫测试集。</p>
<h3 id="2、典型的线性回归模型"><a href="#2、典型的线性回归模型" class="headerlink" title="2、典型的线性回归模型"></a>2、典型的线性回归模型</h3><p>下面是几个典型的线性回归模型：</p>
<ul>
<li>最基本的单变量线性回归：   <ul>
<li>$y=b x + e$</li>
</ul>
</li>
<li>多变量线性回归：   <ul>
<li>$\hat{h}=\theta_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}+\cdots+\theta_{n} x_{n}+e$</li>
</ul>
</li>
<li>多项式回归（Polynomial Regression）：   <ul>
<li>$\hat{h}=\theta_{0}+\theta_{1} x^{1}+\ldots+\theta_{n-1} x^{n-1}+\theta_{n} x^{n}$  </li>
<li>我们可以令$x_{2}=x^{2}$，$x_{3}=x^{3}$将其转化为了线性回归模型。</li>
</ul>
</li>
</ul>
<p>最终通用表达式就是：$\hat{h}=\theta^{T}X=\theta_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}+\cdots+\theta_{n} x_{n}+e$ </p>
<h2 id="二、sklearn实现简单线性回归"><a href="#二、sklearn实现简单线性回归" class="headerlink" title="二、sklearn实现简单线性回归"></a>二、sklearn实现简单线性回归</h2><p>在进行多元线性回归之间通过简单线性回归来展现线性回归的特性和结果，后面再延伸至多元线性回归。</p>
<h3 id="1、包导入"><a href="#1、包导入" class="headerlink" title="1、包导入"></a>1、包导入</h3><p>这里导入进行线性回归的包，我们利用pandas和numpy对数据进行操作，使用matplotlib进行图像化，使用sklearn进行数据集训练与模型导入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br></pre></td></tr></table></figure>

<h3 id="2、数据集创建"><a href="#2、数据集创建" class="headerlink" title="2、数据集创建"></a>2、数据集创建</h3><p>这里我们创建一个数据集来描述学生学习时间与成绩的关系并且做简单的线性回归。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建数据集</span></span><br><span class="line">examDict  = &#123;<span class="string">'学习时间'</span>:[<span class="number">0.50</span>,<span class="number">0.75</span>,<span class="number">1.00</span>,<span class="number">1.25</span>,<span class="number">1.50</span>,<span class="number">1.75</span>,<span class="number">1.75</span>,<span class="number">2.00</span>,<span class="number">2.25</span>,<span class="number">2.50</span>,<span class="number">2.75</span>,<span class="number">3.00</span>,<span class="number">3.25</span>,<span class="number">3.50</span>,<span class="number">4.00</span>,<span class="number">4.25</span>,<span class="number">4.50</span>,<span class="number">4.75</span>,<span class="number">5.00</span>,<span class="number">5.50</span>],</span><br><span class="line">             <span class="string">'分数'</span>:[<span class="number">10</span>,<span class="number">22</span>,<span class="number">13</span>,<span class="number">43</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">50</span>,<span class="number">62</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">75</span>,<span class="number">62</span>,<span class="number">73</span>,<span class="number">81</span>,<span class="number">76</span>,<span class="number">64</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">93</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换为DataFrame的数据格式</span></span><br><span class="line">examDf = pd.DataFrame(examDict)</span><br><span class="line">examDf.head()</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">分数</th>
<th align="center">学习时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">10</td>
<td align="center">0.50</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">22</td>
<td align="center">0.75</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">13</td>
<td align="center">1.00</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">43</td>
<td align="center">1.25</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">20</td>
<td align="center">1.50</td>
</tr>
</tbody></table>
<p>从上面的数据可以看到数据的<strong>特征值</strong>与<strong>标签</strong>，学生的<strong>学习时间</strong>就是所需要的特征值，而<strong>分数</strong>就是通过特征值所反应的标签。</p>
<h3 id="3、数据集散点图"><a href="#3、数据集散点图" class="headerlink" title="3、数据集散点图"></a>3、数据集散点图</h3><p>这里我们利用散点图来简单看下学习时间与成绩的情况。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#绘制散点图</span></span><br><span class="line">plt.scatter(examDf[<span class="string">'分数'</span>],examDf[<span class="string">'学习时间'</span>],color = <span class="string">'b'</span>,label = <span class="string">"Exam Data"</span>)</span><br><span class="line"><span class="comment">#添加图的标签（x轴、y轴）</span></span><br><span class="line">plt.xlabel(<span class="string">"Hours"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Score"</span>)</span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/fae43975/output_9_0.png" class="" title="图1">

<p>从上图可以看到，分数和时间存在一定的相关性。下面我们看下两个变量因素的相关密切程度。</p>
<h3 id="4、相关系数"><a href="#4、相关系数" class="headerlink" title="4、相关系数"></a>4、相关系数</h3><p>相关系数的公式如下：</p>
<p>$$<br>P_{x y}=\frac{\operatorname{cov}(X, Y)}{\sigma_{x} \sigma_{y}}<br>$$</p>
<p>我们可以简单的认为：</p>
<ul>
<li>0~0.3 弱相关</li>
<li>0.3~0.6  中等程度相关</li>
<li>0.6~1  强相关</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rDf = examDf.corr()</span><br><span class="line">print(rDf)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">分数</th>
<th align="center">学习时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分数</td>
<td align="center">1.000000</td>
<td align="center">0.923985</td>
</tr>
<tr>
<td align="center">学习时间</td>
<td align="center">0.923985</td>
<td align="center">1.000000</td>
</tr>
</tbody></table>
<p>pandas中的数学统计函数<code>DataFrame.corr()</code>可以反应数据间的相关性关系，可从表值中反应出学习时间与分数之间的相关性为强相关（0.6~1）。</p>
<h3 id="5、最小二乘法"><a href="#5、最小二乘法" class="headerlink" title="5、最小二乘法"></a>5、最小二乘法</h3><p>简单回归方程为：<code>y = a + b*x</code>，而这个最佳拟合线是通过最小二乘法来得到。</p>
<p>最小二乘法的几个概念：</p>
<ul>
<li><strong>点误差</strong>：<code>点误差 = 实际值 - 预测值</code></li>
<li><strong>误差平方和(Sum of square error)</strong>：<code>SSE = Σ（实际值-预测值）^2</code></li>
</ul>
<p>最小二乘法就是使得<strong>误差平方和</strong>最小来得到最佳拟合。</p>
<h3 id="6、训练集、测试集划分"><a href="#6、训练集、测试集划分" class="headerlink" title="6、训练集、测试集划分"></a>6、训练集、测试集划分</h3><p>这里使用sklearn中的<code>train_test_split</code>函数来划分训练、测试集。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exam_X = examDf[<span class="string">'学习时间'</span>]</span><br><span class="line">exam_Y = examDf[<span class="string">'分数'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原数据集拆分训练集和测试集</span></span><br><span class="line">X_train,X_test,Y_train,Y_test = train_test_split(exam_X,exam_Y,train_size = <span class="number">0.8</span>,test_size = <span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"原始数据特征:"</span>,exam_X.shape,<span class="string">",训练数据特征:"</span>,X_train.shape,<span class="string">",测试数据特征:"</span>,X_test.shape)</span><br><span class="line">print(<span class="string">"原始数据标签:"</span>,exam_Y.shape,<span class="string">",训练数据标签:"</span>,Y_train.shape,<span class="string">",测试数据标签:"</span>,Y_test.shape)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原始数据特征: (20,) ,训练数据特征: (16,) ,测试数据特征: (4,)</span><br><span class="line">原始数据标签: (20,) ,训练数据标签: (16,) ,测试数据标签: (4,)</span><br></pre></td></tr></table></figure>

<p>下面是可视化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#散点图</span></span><br><span class="line">plt.scatter(X_train, Y_train, color=<span class="string">"blue"</span>, label=<span class="string">"train data"</span>)</span><br><span class="line">plt.scatter(X_test, Y_test, color=<span class="string">"red"</span>, label=<span class="string">"test data"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#添加图标标签</span></span><br><span class="line">plt.legend(loc=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Hours"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Pass"</span>)</span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/fae43975/output_15_0.png" class="" title="图2">

<p><strong>注意：由于训练集随机分配，每一次运行的结果（点的分布情况，训练集内的情况，测试集内的情况）不都相同。</strong></p>
<h3 id="7、模型训练"><a href="#7、模型训练" class="headerlink" title="7、模型训练"></a>7、模型训练</h3><p>在创建数据集之后我们需要将训练集放入skleran中的线性回归模型<code>LinearRegression()</code>进行训练，使用函数中的<code>.fit</code>方法进行模型的训练。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = LinearRegression()</span><br><span class="line"></span><br><span class="line">X_train = X_train.values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">X_test = X_test.values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">model.fit(X_train,Y_train)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LinearRegression(copy_X&#x3D;True, fit_intercept&#x3D;True, n_jobs&#x3D;1, normalize&#x3D;False)</span><br></pre></td></tr></table></figure>

<p><strong>注意：因为model需要二维的数组来进行拟合但是这里只有一个特征所以需要reshape来转换为二维数组。</strong></p>
<p>在模型训练完成之后会得到所对应的方程式（线性回归方程式）需要利用函数中的<code>intercept_</code>与<code>coef_</code>来得到。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = model.intercept_  <span class="comment">#截距</span></span><br><span class="line">b = model.coef_       <span class="comment">#回归系数</span></span><br><span class="line">print(<span class="string">"最佳拟合线：截距"</span>,a,<span class="string">",回归系数："</span>,b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳拟合线：截距 6.837689362410515 ,回归系数： [17.11669719]</span><br></pre></td></tr></table></figure>

<p>由上述的最佳拟合线的截距和回归系数可以算出其线性回归线方程：<code>y = 7.56 + 16.28*x</code>。</p>
<h3 id="8、模型评价"><a href="#8、模型评价" class="headerlink" title="8、模型评价"></a>8、模型评价</h3><p>接下来需要对模型进行预测并评价。<strong>决定系数是反映模型拟合优度的重要的统计量</strong>。下面是决定系数的简单介绍。</p>
<blockquote>
<p>假设一数据集包括<code>y1,...,yn</code>共n个观察值，相对应的模型预测值分别为<code>f1,...,fn</code>。定义残差<code>ei = yi − fi</code>，然后可以推得：</p>
<ul>
<li>平均观察值：$\overline{y}=\frac{1}{n} \sum_{i=1}^{n} y_{i}$</li>
<li>总平方和（总波动）：$S S_{\mathrm{tot}}=\sum_{i}\left(y_{i}-\overline{y}\right)^{2}$</li>
<li>回归平方和：$S S_{\mathrm{reg}}=\sum_{i}\left(f_{i}-\overline{y}\right)^{2}$</li>
<li>残差平方和：$S S_{\mathrm{res}}=\sum_{i}\left(y_{i}-f_{i}\right)^{2}=\sum_{i} e_{i}^{2}$</li>
</ul>
<p>由此，决定系数可定义为</p>
<p>$$<br>R^{2} \equiv 1-\frac{S S_{\mathrm{res}}}{S S_{\mathrm{tot}}}<br>$$</p>
<img src="/archives/fae43975/%E5%86%B3%E5%AE%9A%E7%B3%BB%E6%95%B0.png" class="" title="图3">

<p><strong>线性回归（右侧）的效果比起平均值（左侧）越好，决定系数的值就越接近于1。 蓝色正方形表示线性回归的残差的平方，红色正方形数据表示对于平均值的残差的平方</strong>。</p>
<p>从上述定义可以看出，R2取值在0到1之间，且无单位，其数值大小反映了回归贡献的相对程度，即在因变量Y的总变异中回归关系所能解释的百分比。R2是最常用于评价回归模型优劣程度的指标，R2越大（接近于1），所拟合的回归方程越优。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#训练数据的预测值</span></span><br><span class="line">y_train_pred = model.predict(X_train)</span><br><span class="line"><span class="comment">#绘制最佳拟合线：标签用的是训练数据的预测值y_train_pred</span></span><br><span class="line">plt.plot(X_train, y_train_pred, color=<span class="string">'black'</span>, linewidth=<span class="number">3</span>, label=<span class="string">"best line"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试数据散点图</span></span><br><span class="line">plt.scatter(X_train, Y_train, color=<span class="string">"blue"</span>, label=<span class="string">"train data"</span>)</span><br><span class="line">plt.scatter(X_test, Y_test, color=<span class="string">'red'</span>, label=<span class="string">"test data"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加图标标签</span></span><br><span class="line">plt.legend(loc=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Hours"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Score"</span>)</span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/fae43975/output_21_0.png" class="" title="图4">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = model.score(X_test,Y_test)</span><br><span class="line">print(score)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.8161998892697531</span><br></pre></td></tr></table></figure>

<h2 id="三、sklearn实现多元线性回归"><a href="#三、sklearn实现多元线性回归" class="headerlink" title="三、sklearn实现多元线性回归"></a>三、sklearn实现多元线性回归</h2><p>上面我们了解了线性回归相关的分析流程，接下来对多元线性回归进行分析。</p>
<h3 id="1、数据导入"><a href="#1、数据导入" class="headerlink" title="1、数据导入"></a>1、数据导入</h3><p>下面我们从<a href="http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv" target="_blank" rel="noopener external nofollow noreferrer">http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv</a> 来下载数据集<code>Advertising.csv</code>，其数据描述了一个产品的销量与广告媒体的投入之间影响。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">adv_data = pd.read_csv(<span class="string">"../Advertising.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#清洗不需要的数据</span></span><br><span class="line">new_adv_data = adv_data.iloc[:,<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">print(new_adv_data.head())</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      TV  radio  newspaper  sales</span><br><span class="line">0  230.1   37.8       69.2   22.1</span><br><span class="line">1   44.5   39.3       45.1   10.4</span><br><span class="line">2   17.2   45.9       69.3    9.3</span><br><span class="line">3  151.5   41.3       58.5   18.5</span><br><span class="line">4  180.8   10.8       58.4   12.9</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'\nShape:'</span>,new_adv_data.shape)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Shape: (200, 4)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>标签值（sales）：</p>
<ul>
<li>Sales：对应产品的销量</li>
</ul>
</li>
<li><p>特征值（TV，Radio，Newspaper）：</p>
<ul>
<li>TV：对于一个给定市场中单一产品，用于电视上的广告费用（以千为单位）</li>
<li>Radio：在广播媒体上投资的广告费用</li>
<li>Newspaper：用于报纸媒体的广告费用</li>
</ul>
</li>
</ul>
<p>在这个案例中，通过不同的广告投入，预测产品销量。因为响应变量是一个连续的值，所以这个问题是一个回归问题。数据集一共有200个观测值，每一组观测对应一个市场的情况。</p>
<p><strong>接下来我们对数据进行描述性统计，以及寻找缺失值（缺失值对模型的影响较大，如发现缺失值应替换或删除）,且利用箱图来可视化查看数据集，在描述统计之后对数据进行相关性分析，以此来查找数据中特征值与标签值之间的关系。</strong></p>
<h3 id="2、数据描述"><a href="#2、数据描述" class="headerlink" title="2、数据描述"></a>2、数据描述</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据描述</span></span><br><span class="line">new_adv_data.describe()</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">TV</th>
<th align="center">radio</th>
<th align="center">newspaper</th>
<th align="center">sales</th>
</tr>
</thead>
<tbody><tr>
<td align="center">count</td>
<td align="center">200.000000</td>
<td align="center">200.000000</td>
<td align="center">200.000000</td>
<td align="center">200.000000</td>
</tr>
<tr>
<td align="center">mean</td>
<td align="center">147.042500</td>
<td align="center">23.264000</td>
<td align="center">30.554000</td>
<td align="center">14.022500</td>
</tr>
<tr>
<td align="center">std</td>
<td align="center">85.854236</td>
<td align="center">14.846809</td>
<td align="center">21.778621</td>
<td align="center">5.217457</td>
</tr>
<tr>
<td align="center">min</td>
<td align="center">0.700000</td>
<td align="center">0.000000</td>
<td align="center">0.300000</td>
<td align="center">1.600000</td>
</tr>
<tr>
<td align="center">25%</td>
<td align="center">74.375000</td>
<td align="center">9.975000</td>
<td align="center">12.750000</td>
<td align="center">10.375000</td>
</tr>
<tr>
<td align="center">50%</td>
<td align="center">149.750000</td>
<td align="center">22.900000</td>
<td align="center">25.750000</td>
<td align="center">12.900000</td>
</tr>
<tr>
<td align="center">75%</td>
<td align="center">218.825000</td>
<td align="center">36.525000</td>
<td align="center">45.100000</td>
<td align="center">17.400000</td>
</tr>
<tr>
<td align="center">max</td>
<td align="center">296.400000</td>
<td align="center">49.600000</td>
<td align="center">114.000000</td>
<td align="center">27.000000</td>
</tr>
</tbody></table>
<h3 id="3、缺失值检验"><a href="#3、缺失值检验" class="headerlink" title="3、缺失值检验"></a>3、缺失值检验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#缺失值检验</span></span><br><span class="line">new_adv_data[new_adv_data.isnull()==<span class="literal">True</span>].count()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TV           0</span><br><span class="line">radio        0</span><br><span class="line">newspaper    0</span><br><span class="line">sales        0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>

<h3 id="4、箱形图"><a href="#4、箱形图" class="headerlink" title="4、箱形图"></a>4、箱形图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_adv_data.boxplot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/fae43975/output_31_0.png" class="" title="图5">

<h3 id="5、相关系数"><a href="#5、相关系数" class="headerlink" title="5、相关系数"></a>5、相关系数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_adv_data.corr()</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">TV</th>
<th align="center">radio</th>
<th align="center">newspaper</th>
<th align="center">sales</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TV</td>
<td align="center">1.000000</td>
<td align="center">0.054809</td>
<td align="center">0.056648</td>
<td align="center">0.782224</td>
</tr>
<tr>
<td align="center">radio</td>
<td align="center">0.054809</td>
<td align="center">1.000000</td>
<td align="center">0.354104</td>
<td align="center">0.576223</td>
</tr>
<tr>
<td align="center">newspaper</td>
<td align="center">0.056648</td>
<td align="center">0.354104</td>
<td align="center">1.000000</td>
<td align="center">0.228299</td>
</tr>
<tr>
<td align="center">sales</td>
<td align="center">0.782224</td>
<td align="center">0.576223</td>
<td align="center">0.228299</td>
<td align="center">1.000000</td>
</tr>
</tbody></table>
<p>从corr表中看出，TV特征和销量是有比较强的线性关系的，而Radio和Sales线性关系弱一些但是也是属于强相关的，Newspaper和Sales线性关系更弱。</p>
<p>接下来建立散点图来查看数据间的关系，这里使用seaborn的pairplot来绘画3种不同的因素对标签值的影响。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过加入一个参数kind='reg'，seaborn可以添加一条最佳拟合直线和95%的置信带。</span></span><br><span class="line">sns.pairplot(new_adv_data, x_vars=[<span class="string">'TV'</span>,<span class="string">'radio'</span>,<span class="string">'newspaper'</span>], y_vars=<span class="string">'sales'</span>, size=<span class="number">7</span>, aspect=<span class="number">0.8</span>,kind = <span class="string">'reg'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/fae43975/output_35_0.png" class="" title="图6">

<p>如上图所示，可以了解到不同的因素对销量的预测线（置信度= 95 %），也可以大致看出不同特征对于标签值的影响。</p>
<h3 id="6、建立模型"><a href="#6、建立模型" class="headerlink" title="6、建立模型"></a>6、建立模型</h3><p>在了解了数据的各种情况后需要对数据集建立模型，建立模型的第一步就是建立训练集与测试集，同样的我们将会使用sklearn中的<code>train_test_split</code>函数来创建。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train,X_test,Y_train,Y_test = train_test_split(new_adv_data.iloc[:,:<span class="number">3</span>],new_adv_data.sales,train_size = <span class="number">0.8</span>,test_size = <span class="number">0.2</span>)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"原始数据特征:"</span>,new_adv_data.iloc[:,:<span class="number">3</span>].shape,<span class="string">",训练数据特征:"</span>,X_train.shape,<span class="string">",测试数据特征:"</span>,X_test.shape)</span><br><span class="line">print(<span class="string">"原始数据标签:"</span>,new_adv_data.sales.shape,<span class="string">",训练数据标签:"</span>,Y_train.shape,<span class="string">",测试数据标签:"</span>,Y_test.shape)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原始数据特征: (200, 3) ,训练数据特征: (160, 3) ,测试数据特征: (40, 3)</span><br><span class="line">原始数据标签: (200,) ,训练数据标签: (160,) ,测试数据标签: (40,)</span><br></pre></td></tr></table></figure>

<p>建立初步的数据集模型之后将训练集中的特征值与标签值放入<code>LinearRegression()</code>模型中且使用fit函数进行训练,在模型训练完成之后会得到所对应的线性回归方程式的截距<code>intercept_</code>与回归系数<code>coef_</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X_train,Y_train)</span><br><span class="line"></span><br><span class="line">a = model.intercept_   <span class="comment">#截距 </span></span><br><span class="line">b = model.coef_        <span class="comment">#回归系数</span></span><br><span class="line">print(<span class="string">"最佳拟合线:截距"</span>,a,<span class="string">",回归系数："</span>,b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳拟合线:截距 2.7283555357741935 ,回归系数： [ 0.04665892  0.19082797 -0.00099623]</span><br></pre></td></tr></table></figure>

<p>这里我们得到的多元线性回归模型的函数为：<code>y = 2.79 + 0.04 * TV + 0.187 * Radio - 0.002 * Newspaper</code></p>
<p>对于给定了Radio和Newspaper的广告投入，如果在TV广告上每多投入1个单位，对应销量将增加0.04711个单位。就是加入其它两个媒体投入固定，在TV广告上每增加1000美元，销量将增加47.11。但是大家注意这里的newspaper的系数居然是负数，所以我们可以考虑不使用newspaper这个特征。</p>
<h3 id="7、模型评估"><a href="#7、模型评估" class="headerlink" title="7、模型评估"></a>7、模型评估</h3><p>接下来对数据集进行预测与模型测评。同样使用predict与score函数来获取所需要的预测值与得分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = model.score(X_test,Y_test) </span><br><span class="line">print(score)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.9028750733729708</span><br></pre></td></tr></table></figure>

<p>下面简单看下这个训练好的模型的预测值，然后和实际值进行可视化对比：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Y_pred = model.predict(X_test)</span><br><span class="line">print(Y_pred)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ 5.88658387 19.04199354 19.52640033 17.70822778 10.71716318  5.2030417</span><br><span class="line"> 24.26646035 12.76256323  9.82255698 18.52225153 21.3759422   7.45340113</span><br><span class="line">  4.28180262 19.73124396 20.7434211  20.46565901  8.02140753 21.32827151</span><br><span class="line"> 15.59515058  8.76729192 18.44116227 10.52302626 13.16705012 15.18864077</span><br><span class="line">  9.9417295  15.2734619  12.1230943  10.46509366 11.64698928 13.9265036</span><br><span class="line"> 15.06236293  6.66457005 12.6079046  18.00988685 17.10350626  9.24127309</span><br><span class="line"> 11.36598772 18.937225    6.43101507  6.89520345]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(range(len(Y_pred)),Y_pred,<span class="string">'b'</span>,label=<span class="string">"predict"</span>)</span><br><span class="line">plt.plot(range(len(Y_test)),Y_test,<span class="string">'r'</span>,label=<span class="string">"test"</span>)</span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line"><span class="comment">#添加图标标签</span></span><br><span class="line">plt.legend(loc=<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/fae43975/output_43_0.png" class="" title="图7">

<h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><ul>
<li><a href="https://blog.csdn.net/weixin_40014576/article/details/79918819" target="_blank" rel="noopener external nofollow noreferrer">Python实现多元线性回归</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%86%B3%E5%AE%9A%E7%B3%BB%E6%95%B0" target="_blank" rel="noopener external nofollow noreferrer">决定系数</a></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>回归</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>回归</tag>
      </tags>
  </entry>
  <entry>
    <title>层次聚类介绍</title>
    <url>/archives/31ee8a52.html</url>
    <content><![CDATA[<p>层次聚类(Hierarchical Clustering)是聚类算法的一种，通过计算不同类别数据点间的相似度来创建一棵有层次的嵌套聚类树。在聚类树中，不同类别的原始数据点是树的最低层，树的顶层是一个聚类的根节点。创建聚类树有自下而上合并和自上而下分裂两种方法，本篇文章介绍合并方法。</p>
<a id="more"></a>

<img src="/archives/31ee8a52/1.png" class="" title="图1">

<h2 id="层次聚类的合并算法"><a href="#层次聚类的合并算法" class="headerlink" title="层次聚类的合并算法"></a>层次聚类的合并算法</h2><p>层次聚类的合并算法通过计算两类数据点间的相似性，对所有数据点中最为相似的两个数据点进行组合，并反复迭代这一过程。简单的说层次聚类的合并算法是通过计算每一个类别的数据点与所有数据点之间的距离来确定它们之间的相似性，距离越小，相似度越高。并将距离最近的两个数据点或类别进行组合，生成聚类树。</p>
<h2 id="欧几里德距离矩阵"><a href="#欧几里德距离矩阵" class="headerlink" title="欧几里德距离矩阵"></a>欧几里德距离矩阵</h2><p>层次聚类使用欧式距离来计算不同类别数据点间的距离（相似度）。我们在前面的几篇文章中都曾经介绍过欧氏距离的计算方法，本篇文章将通过创建一个欧式距离矩阵来计算和对比不同类别数据点间的距离，并对距离值最小的数据点进行组合。以下是欧式距离的计算公式。</p>
<p>$$<br>D=\sqrt{\left(x_{1}-y_{1}\right)^{2}+\left(x_{2}-y_{2}\right)^{2}}<br>$$</p>
<p>以下为示例数据，我们通过欧氏距离计算下面A到G的欧式距离矩阵，并通过合并的方法将相似度最高的数据点进行组合，并创建聚类树。</p>
<table>
<thead>
<tr>
<th>数据点</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>16.9</td>
</tr>
<tr>
<td>B</td>
<td>38.5</td>
</tr>
<tr>
<td>C</td>
<td>39.5</td>
</tr>
<tr>
<td>D</td>
<td>80.8</td>
</tr>
<tr>
<td>E</td>
<td>82</td>
</tr>
<tr>
<td>F</td>
<td>34.6</td>
</tr>
<tr>
<td>G</td>
<td>116.1</td>
</tr>
</tbody></table>
<p>创建欧式距离矩阵的方法很简单，将每个类别的数据点分别与A-G中的每个数据点计算距离值，其中A—&gt;B表示数据点A到数据点B的距离，B—&gt;A则代表数据点B到数据点A的距离。这两个距离值是相同的，因此欧式距离矩阵呈对角线对称（绿色部分和蓝色部分）。其中对角线的0值是数据点与自己的距离值。我们将所有数据点间的距离结果进行对比，选择其中距离最近的两个数据点进行组合，并迭代这一过程。下图显示了欧式矩阵的逻辑和计算方法。</p>
<img src="/archives/31ee8a52/4.png" class="" title="图4">

<h2 id="数据点之间的距离"><a href="#数据点之间的距离" class="headerlink" title="数据点之间的距离"></a>数据点之间的距离</h2><p>对于示例中的数据点，我们通过计算获得了下面的欧式距离矩阵。其中数据点B到数据点C的距离在所有的距离值中最小，为1.00。以下为数据点间距离值的计算公式。</p>
<p>$$<br>D=\sqrt{(B-C)^{2}}=\sqrt{(38.5-39.5)^{2}}<br>$$</p>
<p>经过计算数据点B和数据点C与其他数据点相比有最高的相似度。因此，我们将数据点B和数据点C进行组合。并再次计算其他数据点间的距离。</p>
<img src="/archives/31ee8a52/6.png" class="" title="图6">

<h2 id="数据点与组合数据点间的距离"><a href="#数据点与组合数据点间的距离" class="headerlink" title="数据点与组合数据点间的距离"></a>数据点与组合数据点间的距离</h2><p>将数据点B与数据点C进行组合后，重新计算各类别数据点间的距离矩阵。数据点间的距离计算方式与之前的方法一样。这里需要说明的是组合数据点(B,C)与其他数据点间的计算方法。当我们计算(B,C)到A的距离时，需要分别计算B到A和C到A的距离均值。</p>
<p>$$<br>D=\frac{\sqrt{(B-A)^{2}}+\sqrt{(C-A)^{2}}}{2}=\frac{21.6+22.6}{2}<br>$$</p>
<p>经过计算数据点D到数据点E的距离在所有的距离值中最小，为1.20。这表示在当前的所有数据点中（包含组合数据点），D和E的相似度最高。因此我们将数据点D和数据点E进行组合。并再次计算其他数据点间的距离。</p>
<img src="/archives/31ee8a52/8.png" class="" title="图8">

<p>后面的工作就是不断的重复计算数据点与数据点，数据点与组合数据点间的距离。这个步骤应该由程序来完成。这里由于数据量较小，我们手工计算并列出每一步的距离计算和数据点组合的结果。</p>
<p>这一步中，数据点A和数据点F的距离值在所有距离值中最小，因此我们将A和F进行组合，生成组合数据点（A,F）。</p>
<img src="/archives/31ee8a52/9.png" class="" title="图9">

<p>到此为止除了数据点G以外，其他的数据点都已经根据距离值（相似度）进行了组合。聚类树的最底层已经完成。下面我们将继续计算组合数据点间的距离，并对相似度最高的组合数据点进行合并。</p>
<h2 id="两个组合数据点间的距离"><a href="#两个组合数据点间的距离" class="headerlink" title="两个组合数据点间的距离"></a>两个组合数据点间的距离</h2><p>计算两个组合数据点间距离的方法有三种，分别为Single Linkage，Complete Linkage和Average Linkage。在开始计算之前，我们先来介绍下这三种计算方法以及各自的优缺点。</p>
<h3 id="Single-Linkage"><a href="#Single-Linkage" class="headerlink" title="Single Linkage"></a>Single Linkage</h3><p>Single Linkage的计算方法是将两个组合数据点中距离最近的两个数据点间的距离作为这两个组合数据点的距离。这种方法容易受到极端值的影响。两个很相似的组合数据点可能由于其中的某个极端的数据点距离较近而组合在一起。</p>
<h3 id="Complete-Linkage"><a href="#Complete-Linkage" class="headerlink" title="Complete Linkage"></a>Complete Linkage</h3><p>Complete Linkage的计算方法与Single Linkage相反，将两个组合数据点中距离最远的两个数据点间的距离作为这两个组合数据点的距离。Complete Linkage的问题也与Single Linkage相反，两个不相似的组合数据点可能由于其中的极端值距离较远而无法组合在一起。</p>
<h3 id="Average-Linkage"><a href="#Average-Linkage" class="headerlink" title="Average Linkage"></a>Average Linkage</h3><p>Average Linkage的计算方法是计算两个组合数据点中的每个数据点与其他所有数据点的距离。将所有距离的均值作为两个组合数据点间的距离。这种方法计算量比较大，但结果比前两种方法更合理。</p>
<p>我们使用Average Linkage计算组合数据点间的距离。下面是计算组合数据点(A,F)到(B,C)的距离，这里分别计算了(A,F)和(B,C)两两间距离的均值。</p>
<p>$$<br>D=\frac{\sqrt{(A-B)^{2}}+\sqrt{(A-C)^{2}}+\sqrt{(F-B)^{2}}+\sqrt{(F-C)^{2}}}{4}<br>$$</p>
<p>通过计算及对比不同组合数据点间间的距离。(A,F)到(B,C)的距离在所有组合数据点间最小，为13.25。说明(A,F)到(B,C)相似度最高。因此，将(A,F)到(B,C)组合为(A,F,B,C)。</p>
<img src="/archives/31ee8a52/11.png" class="" title="图11">

<p>使用与之前相同的方法计算出组合数据点(D,E)和G的距离在目前所有组合数据点中最小。为34.70。将(D,E)和G组合为(D,E,G)。</p>
<img src="/archives/31ee8a52/12.png" class="" title="图12">

<p>最终，通过计算和合并，我们获得了两个组合数据点(A,F,B,C)和(D,E,G)。这也是聚类树的最顶层的两个数据点。下面，我们按之前的计算步骤来构建聚类树。</p>
<img src="/archives/31ee8a52/13.png" class="" title="图13">

<h2 id="层次聚类树状图"><a href="#层次聚类树状图" class="headerlink" title="层次聚类树状图"></a>层次聚类树状图</h2><p>将前面的每一步的计算结果以树状图的形式展现出来就是层次聚类树。最底层是原始A到G的7个数据点。依照7个数据点间的相似度组合为聚类树的第二层(A,F),(B,C),(D,E)和G。以此类推生成完整的层次聚类树状图。以下为简单的示意图。</p>
<img src="/archives/31ee8a52/14.png" class="" title="图14">

<blockquote>
<p>本文转载于：<a href="http://bluewhale.cc/2016-04-19/hierarchical-clustering.html#ixzz58ZXsykA1" target="_blank" rel="noopener external nofollow noreferrer">层次聚类算法的原理及实现Hierarchical Clustering</a></p>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>聚类</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>聚类</tag>
      </tags>
  </entry>
  <entry>
    <title>KMeans聚类算法介绍</title>
    <url>/archives/3e3c6c6a.html</url>
    <content><![CDATA[<p>聚类算法是一种非监督算法，当你拥有大量的无标签数据的时候，最方便的做法就是对这些数据用聚类算法进行分类，打上标签。</p>
<a id="more"></a>

<h2 id="一、KMeans算法的应用"><a href="#一、KMeans算法的应用" class="headerlink" title="一、KMeans算法的应用"></a>一、KMeans算法的应用</h2><ul>
<li>图像分割</li>
<li>基因片段分类</li>
<li>文章标签归类</li>
<li>物种种群分类</li>
<li>异常数据检测</li>
</ul>
<h2 id="二、KMeans算法步骤"><a href="#二、KMeans算法步骤" class="headerlink" title="二、KMeans算法步骤"></a>二、KMeans算法步骤</h2><ul>
<li>第一步 - 随机选择 K 个点作为点的聚类中心，这表示我们要将数据分为 K 类。</li>
<li>第二步 - 遍历所有的点 P, 算出 P 到每个聚类中心的距离，将 P 放到最近的聚类中心的点集中。遍历结束后我们将得到 K 个点集。</li>
<li>第三步 - 遍历每一个点集，算出每一个点集的中心位置，将其作为新的聚类中心。</li>
<li>第四步 - 重复步骤 2 和步骤 3，直到聚类中心位置不再移动。最后的结果是点和质心之间的均方差达到最小。</li>
</ul>
<h2 id="三、KMeans算法的Python实现"><a href="#三、KMeans算法的Python实现" class="headerlink" title="三、KMeans算法的Python实现"></a>三、KMeans算法的Python实现</h2><p>下面我们以 <code>k = 3</code> 为例演示这个过程。</p>
<h3 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">'x'</span>: [<span class="number">12</span>, <span class="number">20</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">29</span>, <span class="number">33</span>, <span class="number">24</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">53</span>, <span class="number">55</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">69</span>, <span class="number">72</span>],</span><br><span class="line">    <span class="string">'y'</span>: [<span class="number">39</span>, <span class="number">36</span>, <span class="number">30</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">55</span>, <span class="number">59</span>, <span class="number">63</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">58</span>, <span class="number">23</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">24</span>]&#125;)</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">3</span></span><br><span class="line">centroids = &#123;i+<span class="number">1</span>: [np.random.randint(<span class="number">0</span>, <span class="number">80</span>), np.random.randint(<span class="number">0</span>, <span class="number">80</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(k)&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize = (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">plt.scatter(df[<span class="string">'x'</span>], df[<span class="string">'y'</span>], color = <span class="string">'k'</span>) <span class="comment"># 画出所有的（x, y）</span></span><br><span class="line">colmap = &#123;<span class="number">1</span>: <span class="string">'r'</span>, <span class="number">2</span>: <span class="string">'g'</span>, <span class="number">3</span>: <span class="string">'b'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> centroids.keys():</span><br><span class="line">    plt.scatter(*centroids[i], color = colmap[i]) <span class="comment"># 画出3个聚类中心点</span></span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/3e3c6c6a/output_4_0.png" class="" title="图1">


<h3 id="2、分配"><a href="#2、分配" class="headerlink" title="2、分配"></a>2、分配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assignment</span><span class="params">(df, centroids)</span>:</span></span><br><span class="line">    <span class="comment"># 计算每个点到聚类中心点的距离</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> centroids.keys():</span><br><span class="line">        df[<span class="string">"distance_from_&#123;&#125;"</span>.format(i)] = (np.sqrt((df[<span class="string">'x'</span>] - centroids[i][<span class="number">0</span>])**<span class="number">2</span> + (df[<span class="string">'y'</span>] - centroids[i][<span class="number">1</span>])**<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每个点都计算其离三个中心点的距离，取出最短的那个，归类为它</span></span><br><span class="line">    centroid_distance_cols = [<span class="string">"distance_from_&#123;&#125;"</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> centroids.keys()]</span><br><span class="line">    df[<span class="string">'closest'</span>] = df.loc[:, centroid_distance_cols].idxmin(axis = <span class="number">1</span>)</span><br><span class="line">    df[<span class="string">'closest'</span>] = df[<span class="string">'closest'</span>].map(<span class="keyword">lambda</span> x: int(x.lstrip(<span class="string">'distance_from_'</span>)))</span><br><span class="line">    df[<span class="string">'color'</span>] = df[<span class="string">'closest'</span>].map(<span class="keyword">lambda</span> x: colmap[x])</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = assignment(df, centroids)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th></th>
<th>x</th>
<th>y</th>
<th>distance_from_1</th>
<th>distance_from_2</th>
<th>distance_from_3</th>
<th>closest</th>
<th>color</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>12</td>
<td>39</td>
<td>26.925824</td>
<td>56.080300</td>
<td>56.727418</td>
<td>1</td>
<td>r</td>
</tr>
<tr>
<td>1</td>
<td>20</td>
<td>36</td>
<td>20.880613</td>
<td>48.373546</td>
<td>53.150729</td>
<td>1</td>
<td>r</td>
</tr>
<tr>
<td>2</td>
<td>28</td>
<td>30</td>
<td>14.142136</td>
<td>41.761226</td>
<td>53.338541</td>
<td>1</td>
<td>r</td>
</tr>
<tr>
<td>3</td>
<td>18</td>
<td>52</td>
<td>36.878178</td>
<td>50.990195</td>
<td>44.102154</td>
<td>1</td>
<td>r</td>
</tr>
<tr>
<td>4</td>
<td>29</td>
<td>54</td>
<td>38.118237</td>
<td>40.804412</td>
<td>34.058773</td>
<td>3</td>
<td>b</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">plt.scatter(df[<span class="string">'x'</span>], df[<span class="string">'y'</span>], color=df[<span class="string">'color'</span>], alpha=<span class="number">0.5</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> centroids.keys():</span><br><span class="line">    plt.scatter(*centroids[i], color=colmap[i])</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/3e3c6c6a/output_8_0.png" class="" title="图2">

<h3 id="3、更新"><a href="#3、更新" class="headerlink" title="3、更新"></a>3、更新</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(k)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> centroids.keys():</span><br><span class="line">        centroids[i][<span class="number">0</span>] = np.mean(df[df[<span class="string">'closest'</span>] == i][<span class="string">'x'</span>])</span><br><span class="line">        centroids[i][<span class="number">1</span>] = np.mean(df[df[<span class="string">'closest'</span>] == i][<span class="string">'y'</span>])</span><br><span class="line">    <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">old_centroids = copy.deepcopy(centroids)</span><br><span class="line">centroids = update(centroids)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">ax = plt.axes()</span><br><span class="line">plt.scatter(df[<span class="string">'x'</span>], df[<span class="string">'y'</span>], color=df[<span class="string">'color'</span>], alpha=<span class="number">0.5</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> centroids.keys():</span><br><span class="line">    plt.scatter(*centroids[i], color=colmap[i])</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> old_centroids.keys():</span><br><span class="line">    old_x = old_centroids[i][<span class="number">0</span>]</span><br><span class="line">    old_y = old_centroids[i][<span class="number">1</span>]</span><br><span class="line">    dx = (centroids[i][<span class="number">0</span>] - old_centroids[i][<span class="number">0</span>]) * <span class="number">0.75</span></span><br><span class="line">    dy = (centroids[i][<span class="number">1</span>] - old_centroids[i][<span class="number">1</span>]) * <span class="number">0.75</span></span><br><span class="line">    ax.arrow(old_x, old_y, dx, dy, head_width=<span class="number">2</span>, head_length=<span class="number">3</span>, fc=colmap[i], ec=colmap[i])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/3e3c6c6a/output_12_0.png" class="" title="图3">


<h3 id="4、重新分配"><a href="#4、重新分配" class="headerlink" title="4、重新分配"></a>4、重新分配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = assignment(df, centroids)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">plt.scatter(df[<span class="string">'x'</span>], df[<span class="string">'y'</span>], color=df[<span class="string">'color'</span>], alpha=<span class="number">0.5</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> centroids.keys():</span><br><span class="line">    plt.scatter(*centroids[i], color=colmap[i])</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/3e3c6c6a/output_15_0.png" class="" title="图4">


<p>可以看到一个红色的点，变成了绿色的；一个蓝色的点变成了红色的。我们更加接近最终目标了。  </p>
<h3 id="5、继续这个过程"><a href="#5、继续这个过程" class="headerlink" title="5、继续这个过程"></a>5、继续这个过程</h3><p>现在重复这个过程，直到每一个集群都没有变化为止。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    closest_centroids = df[<span class="string">'closest'</span>].copy(deep = <span class="literal">True</span>)</span><br><span class="line">    centroids = update(centroids)</span><br><span class="line">    df = assignment(df, centroids)</span><br><span class="line">    <span class="keyword">if</span> closest_centroids.equals(df[<span class="string">'closest'</span>]):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">plt.scatter(df[<span class="string">'x'</span>], df[<span class="string">'y'</span>], color=df[<span class="string">'color'</span>], alpha=<span class="number">0.5</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> centroids.keys():</span><br><span class="line">    plt.scatter(*centroids[i], color=colmap[i])</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/3e3c6c6a/output_18_0.png" class="" title="图5">

<p>现在得到3个清晰地集群和3个质点在这三个集群的中间。</p>
<h2 id="四、KMeans算法的scikit-learn实现"><a href="#四、KMeans算法的scikit-learn实现" class="headerlink" title="四、KMeans算法的scikit-learn实现"></a>四、KMeans算法的scikit-learn实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">'x'</span>: [<span class="number">12</span>, <span class="number">20</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">29</span>, <span class="number">33</span>, <span class="number">24</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">53</span>, <span class="number">55</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">69</span>, <span class="number">72</span>],</span><br><span class="line">    <span class="string">'y'</span>: [<span class="number">39</span>, <span class="number">36</span>, <span class="number">30</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">55</span>, <span class="number">59</span>, <span class="number">63</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">58</span>, <span class="number">23</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">24</span>]&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kmeans = KMeans(n_clusters = <span class="number">3</span>)</span><br><span class="line">kmeans.fit(df)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KMeans(algorithm&#x3D;&#39;auto&#39;, copy_x&#x3D;True, init&#x3D;&#39;k-means++&#39;, max_iter&#x3D;300,n_clusters&#x3D;3, n_init&#x3D;10, n_jobs&#x3D;1, precompute_distances&#x3D;&#39;auto&#39;,random_state&#x3D;None, tol&#x3D;0.0001, verbose&#x3D;0)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">labels = kmeans.predict(df)</span><br><span class="line">centroids = kmeans.cluster_centers_</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">colors = list(map(<span class="keyword">lambda</span> x: colmap[x+<span class="number">1</span>], labels)) <span class="comment"># colors只是一个迭代子，需要加一个list()来得到结果</span></span><br><span class="line"></span><br><span class="line">plt.scatter(df[<span class="string">'x'</span>], df[<span class="string">'y'</span>], color=colors, alpha=<span class="number">0.5</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line"><span class="keyword">for</span> idx, centroid <span class="keyword">in</span> enumerate(centroids):</span><br><span class="line">    plt.scatter(*centroid, color=colmap[idx+<span class="number">1</span>])</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/3e3c6c6a/output_25_0.png" class="" title="图6">


<h2 id="五、手肘法寻找最佳K值"><a href="#五、手肘法寻找最佳K值" class="headerlink" title="五、手肘法寻找最佳K值"></a>五、手肘法寻找最佳K值</h2><p>以上已经介绍了 KMeans 方法的具体流程，但是我们还面临一个问题，如何确定 K 值。</p>
<h3 id="1、手肘法原理"><a href="#1、手肘法原理" class="headerlink" title="1、手肘法原理"></a>1、手肘法原理</h3><p>手肘法的评价K值好坏的标准是SSE（sum of the squared errors）：</p>
<p>$$<br>SSE= \sum_{p\in C_i}|p-m_i|^2<br>$$</p>
<p>其中 <code>Ci</code>代表第i个簇，p是簇<code>Ci</code>里的样本点，<code>mi</code>是簇的质心。</p>
<p>随着聚类数k的增大，样本划分会更加精细，每个簇的聚合程度会逐渐提高，那么误差平方和SSE自然会逐渐变小。并且，当k小于最佳聚类数时，由于k的增大会大幅增加每个簇的聚合程度，故SSE的下降幅度会很大，而当k到达最佳聚类数时，再增加k所得到的聚合程度回报会迅速变小，所以SSE的下降幅度会骤减，然后随着k值的继续增大而趋于平缓，也就是说SSE和k的关系图是一个手肘的形状，而这个肘部对应的k值就是数据的最佳聚类数。这也是该方法被称为手肘法的原因。</p>
<h3 id="2、scikit-learn实现"><a href="#2、scikit-learn实现" class="headerlink" title="2、scikit-learn实现"></a>2、scikit-learn实现</h3><p>现在我们使用 sklearn 库中的 KMeans 方法来跑一下聚类过程，然后将到聚类中心的平均值变化作图。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = []</span><br><span class="line">point_number = len(df)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    kmeans = KMeans(n_clusters=i, max_iter=<span class="number">100</span>).fit(df)</span><br><span class="line">    loss.append(kmeans.inertia_ / point_number)</span><br><span class="line">    </span><br><span class="line">plt.plot(range(<span class="number">1</span>, <span class="number">10</span>), loss)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/archives/3e3c6c6a/output_27_0.png" class="" title="图7">

<h2 id="六、KMeans的优缺点"><a href="#六、KMeans的优缺点" class="headerlink" title="六、KMeans的优缺点"></a>六、KMeans的优缺点</h2><h3 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h3><ol>
<li>原理简单</li>
<li>实现容易</li>
<li>聚类效果中上（依赖K的选择）</li>
</ol>
<h3 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h3><ol>
<li>无法确定K的个数 （根据什么指标确定K）</li>
<li>对离群点敏感 （容易导致中心点偏移）</li>
<li>算法复杂度不易控制 O(NKm)， 迭代次数可能较多 （m可能会比较大）</li>
<li>局部最优解而不是全局优 （这个和初始点选谁有关）</li>
</ol>
<h2 id="七、参考文章"><a href="#七、参考文章" class="headerlink" title="七、参考文章"></a>七、参考文章</h2><ul>
<li><a href="http://benalexkeen.com/k-means-clustering-in-python/" target="_blank" rel="noopener external nofollow noreferrer">K-MEANS聚类 的 PYTHON 实现</a> </li>
<li><a href="https://zhuanlan.zhihu.com/p/35959301" target="_blank" rel="noopener external nofollow noreferrer">从零开始教你 KMeans 算法</a></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>聚类</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>聚类</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是无监督学习？</title>
    <url>/archives/7a4d6d3c.html</url>
    <content><![CDATA[<p>这个问题可以回答得很简单：<strong>是否有监督（supervised），就看输入数据是否有标签（label）。输入数据有标签，则为有监督学习，没标签则为无监督学习</strong>。</p>
<a id="more"></a>

<p>首先看什么是学习（learning）？一个成语就可概括：举一反三。</p>
<blockquote>
<p>此处以高考为例，高考的题目在上考场前我们未必做过，但在高中三年我们做过很多很多题目，懂解题方法，因此考场上面对陌生问题也可以算出答案。</p>
</blockquote>
<p>机器学习的思路也类似：我们能不能利用一些训练数据（已经做过的题），使机器能够利用它们（解题方法）分析未知数据（高考的题目）？</p>
<p>最简单也最普遍的一类机器学习算法就是分类（classification）。对于分类，输入的训练数据有特征（feature），有标签（label）。所谓的学习，其本质就是找到特征和标签间的关系（mapping）。这样当有特征而无标签的未知数据输入时，我们就可以通过已有的关系得到未知数据标签。</p>
<p>在上述的分类过程中，如果所有训练数据都有标签，则为有监督学习（supervised learning）。如果数据没有标签，显然就是无监督学习（unsupervised learning）了，也即聚类（clustering）。</p>
<p>目前分类算法的效果还是不错的，但相对来讲，聚类算法就有些惨不忍睹了。确实，无监督学习本身的特点使其难以得到如分类一样近乎完美的结果。这也正如我们在高中做题，答案（标签）是非常重要的，假设两个完全相同的人进入高中，一个正常学习，另一人做的所有题目都没有答案，那么想必第一个人高考会发挥更好，第二个人会发疯。</p>
<p>这时各位可能要问，既然分类如此之好，聚类如此之不靠谱，那为何我们还可以容忍聚类的存在？<strong>因为在实际应用中，标签的获取常常需要极大的人工工作量，有时甚至非常困难</strong>。例如在自然语言处理（NLP）中，Penn Chinese Treebank在2年里只完成了4000句话的标签……</p>
<p>这时有人可能会想，难道有监督学习和无监督学习就是非黑即白的关系吗？有没有灰呢？Good idea。灰是存在的。二者的中间带就是半监督学习（semi-supervised learning）。对于半监督学习，其训练数据的一部分是有标签的，另一部分没有标签，而没标签数据的数量常常极大于有标签数据数量（这也是符合现实情况的）。隐藏在半监督学习下的基本规律在于：数据的分布必然不是完全随机的，通过一些有标签数据的局部特征，以及更多没标签数据的整体分布，就可以得到可以接受甚至是非常好的分类结果。（此处大量忽略细节）</p>
<p>因此，learning家族的整体构造是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有监督学习（分类，回归）</span><br><span class="line">↕</span><br><span class="line">半监督学习（分类，回归），transductive learning（分类，回归）</span><br><span class="line">↕</span><br><span class="line">半监督聚类（有标签数据的标签不是确定的，类似于：肯定不是xxx，很可能是yyy）</span><br><span class="line">↕</span><br><span class="line">无监督学习（聚类）</span><br></pre></td></tr></table></figure>


<blockquote>
<p>本文转载于：<a href="https://www.zhihu.com/question/23194489/answer/25028661" target="_blank" rel="noopener external nofollow noreferrer">什么是无监督学习？</a></p>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>无监督学习</tag>
      </tags>
  </entry>
  <entry>
    <title>随机森林通俗介绍</title>
    <url>/archives/6096d2cd.html</url>
    <content><![CDATA[<p><strong>随机森林是用随机的方式建立一个森林，森林里面有很多的决策树组成，随机森林的每一棵决策树之间是没有关联的</strong>。在得到森林之后，当有一个新的输入样本进入的时候，就让森林中的每一棵决策树分别进行一下判断，看看这个样本应该属于哪一类（对于分类算法），然后看看哪一类被选择最多，就预测这个样本为那一类。随机森林可以既可以处理属性为离散值的量，比如ID3算法，也可以处理属性为连续值的量，比如C4.5算法。另外，随机森林还可以用来进行无监督学习聚类和异常点检测。</p>
<a id="more"></a>

<h2 id="一、随机森林构造过程"><a href="#一、随机森林构造过程" class="headerlink" title="一、随机森林构造过程"></a>一、随机森林构造过程</h2><p>下面是随机森林的构造过程：</p>
<ol>
<li><p>假如有N个样本，则有放回的随机选择N个样本(每次随机选择一个样本，然后返回继续选择)。这选择好了的N个样本用来训练一个决策树，作为决策树根节点处的样本。</p>
</li>
<li><p>当每个样本有M个属性时，在决策树的每个节点需要分裂时，随机从这M个属性中选取出m个属性，满足条件<code>m &lt;&lt; M</code>。然后从这m个属性中采用某种策略（比如说信息增益）来选择1个属性作为该节点的分裂属性。</p>
</li>
<li><p>决策树形成过程中每个节点都要按照步骤2来分裂（很容易理解，如果下一次该节点选出来的那一个属性是刚刚其父节点分裂时用过的属性，则该节点已经达到了叶子节点，无须继续分裂了）。一直到不能够再分裂为止。注意整个决策树形成过程中没有进行剪枝。</p>
</li>
<li><p>按照步骤1~3建立大量的决策树，这样就构成了随机森林了。</p>
</li>
</ol>
<h2 id="二、随机森林的注意点"><a href="#二、随机森林的注意点" class="headerlink" title="二、随机森林的注意点"></a>二、随机森林的注意点</h2><p>在建立每一棵决策树的过程中，有两点需要注意：<strong>采样</strong>与<strong>完全分裂</strong>。</p>
<h3 id="1、随机采样"><a href="#1、随机采样" class="headerlink" title="1、随机采样"></a>1、随机采样</h3><p>首先是两个随机采样的过程，随机森林对输入的数据要进行<strong>行、列</strong>的采样。</p>
<ul>
<li>对于行采样，采用<strong>有放回</strong>的方式，也就是在采样得到的样本集合中，可能有重复的样本。假设输入样本为N个，那么采样的样本也为N个。<strong>这样使得在训练的时候，每一棵树的输入样本都不是全部的样本，使得相对不容易出现过拟合</strong>。</li>
<li>对于列采样，从M个属性中，选择m个（<code>m &lt;&lt; M</code>）。</li>
</ul>
<h3 id="2、完全分裂"><a href="#2、完全分裂" class="headerlink" title="2、完全分裂"></a>2、完全分裂</h3><p>然后对采样之后的数据使用完全分裂的方式建立出决策树，这样决策树的某一个叶子节点要么是<strong>无法继续分裂的</strong>，要么<strong>里面所有样本都是指向的同一个分类</strong>。</p>
<p>一般很多的决策树算法都一个重要的步骤——剪枝，但是这里不这样干，<strong>由于之前的两个随机采样的过程保证了随机性，所以就算不剪枝，也不会出现过拟合</strong>。</p>
<h2 id="三、随机森林的优缺点"><a href="#三、随机森林的优缺点" class="headerlink" title="三、随机森林的优缺点"></a>三、随机森林的优缺点</h2><h3 id="1、随机森林的优点"><a href="#1、随机森林的优点" class="headerlink" title="1、随机森林的优点"></a>1、随机森林的优点</h3><ol>
<li>两个随机性的引入，使得随机森林<strong>不容易陷入过拟合</strong></li>
<li>两个随机性的引入，使得随机森林<strong>具有很好的抗噪声能力</strong></li>
<li>它能够处理<strong>很高维度（特征很多）的数据，并且不用做特征选择</strong>，对数据集的适应能力强，既能处理离散型数据，也能处理连续型数据，数据集无需规范化</li>
<li>可生成一个Proximities=（pij）矩阵，用于度量样本之间的相似性，pij=aij/N, aij表示样本i和j出现在随机森林中同一个叶子结点的次数，N随机森林中树的颗数</li>
<li>在创建随机森林的时候，对泛化误差使用的是无偏估计</li>
<li>训练速度快，可以得到变量重要性排序（两种：基于OOB误分率的增加量和基于分裂时的GINI下降量）</li>
<li>在训练过程中，能够检测到特征间的互相影响</li>
<li><strong>训练时树与树之间是相互独立的，容易做成并行化方法</strong></li>
<li>实现比较简单</li>
</ol>
<h3 id="2、随机森林的缺点："><a href="#2、随机森林的缺点：" class="headerlink" title="2、随机森林的缺点："></a>2、随机森林的缺点：</h3><ol>
<li>随机森林在解决回归问题时，并没有像它在分类中表现的那么好，这是因为它并不能给出一个连续的输出。当进行回归时，随机森林不能够做出超越训练集数据范围的预测，这可能导致在某些特定噪声的数据进行建模时出现过度拟合。（PS:随机森林已经被证明在某些噪音较大的分类或者回归问题上回过拟合）。</li>
<li>对于许多统计建模者来说，随机森林给人的感觉就像一个黑盒子，你无法控制模型内部的运行。只能在不同的参数和随机种子之间进行尝试。</li>
<li>可能有很多相似的决策树，掩盖了真实的结果。</li>
<li>对于小数据或者低维数据（特征较少的数据），可能不能产生很好的分类。（处理高维数据，处理特征遗失数据，处理不平衡数据是随机森林的长处）。</li>
<li>执行数据虽然比boosting等快（随机森林属于bagging），但比单只决策树慢多了。</li>
</ol>
<h2 id="四、sklearn实现随机森林"><a href="#四、sklearn实现随机森林" class="headerlink" title="四、sklearn实现随机森林"></a>四、sklearn实现随机森林</h2><h3 id="1、一个简单例子"><a href="#1、一个简单例子" class="headerlink" title="1、一个简单例子"></a>1、一个简单例子</h3><p>这里我使用scikit-learn中的鸢尾花数据集作为例子来学习随机森林算法。</p>
<figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据集</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据特征：150行， 4列</span></span><br><span class="line">features = iris[<span class="string">'data'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应的鸢尾花种类: 150个，三种鸢尾花分别用 0,1,2 表示</span></span><br><span class="line">target = iris[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义4个特征的名称</span></span><br><span class="line">feature_names = iris.feature_names</span><br><span class="line">feature_names = [<span class="string">'花萼长度'</span>, <span class="string">'花萼宽度'</span>, <span class="string">'花瓣长度'</span>, <span class="string">'花瓣宽度'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义三种鸢尾花的名称</span></span><br><span class="line">class_names = iris.target_names</span><br><span class="line">class_names = [<span class="string">'山鸢尾花'</span>, <span class="string">'变色鸢尾花'</span>, <span class="string">'维吉尼亚鸢尾花'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把样本分成训练集和测试集两部分, 两者比例为： 7:3</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=<span class="number">0.3</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义决策树的个数为100</span></span><br><span class="line">clf = RandomForestClassifier(n_estimators=<span class="number">100</span>) </span><br><span class="line">model = clf.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">output = model.predict(X_test)</span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line">acc = np.mean(output == y_test)*<span class="number">100</span></span><br><span class="line">print(<span class="string">"The accuracy of the pure RandomForest classifier is: \t"</span>, acc, <span class="string">"%"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The accuracy of the pure RandomForest classifier is: 	 100.0 %</span><br></pre></td></tr></table></figure>

<p>下面计算一下特征重要性：</p>
<figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line">df_feature = pd.DataFrame(&#123;<span class="string">'feature'</span>: feature_names,<span class="string">'importance'</span>: model.feature_importances_&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  feature  importance</span><br><span class="line">0    花萼长度    0.119307</span><br><span class="line">1    花萼宽度    0.040993</span><br><span class="line">2    花瓣长度    0.458942</span><br><span class="line">3    花瓣宽度    0.380758</span><br></pre></td></tr></table></figure>

<h3 id="2、调参说明"><a href="#2、调参说明" class="headerlink" title="2、调参说明"></a>2、调参说明</h3><ul>
<li><p><code>n_estimators</code>：表示森林里树的个数。一般来说<code>n_estimators</code>太小，容易欠拟合，<code>n_estimators</code>太大，计算量会太大，并且<code>n_estimators</code>到一定的数量后，再增大<code>n_estimators</code>获得的模型提升会很小，所以一般选择一个适中的数值。默认是100。</p>
</li>
<li><p><code>max_features</code>：最大特征数。一般我们用默认的”auto”就可以了，如果特征数非常多，我们可以灵活使用下面描述的其他取值来控制划分时考虑的最大特征数，以控制决策树的生成时间。</p>
<ul>
<li>默认是”auto”，意味着划分时最多考虑$\sqrt{N}$个特征</li>
<li>如果是”log2”，意味着划分时最多考虑$log_2N$个特征</li>
<li>如果是”sqrt”，意味着划分时最多考虑$\sqrt{N}$个特征</li>
<li>如果是整数，代表考虑的特征绝对数</li>
<li>如果是浮点数，代表考虑特征百分比，即考虑（百分比xN）取整后的特征数，其中N为样本总特征数</li>
</ul>
</li>
<li><p><code>max_depth</code>: 决策树最大深度。默认可以不输入，如果不输入的话，决策树在建立子树的时候不会限制子树的深度。一般来说，数据少或者特征少的时候可以不管这个值。如果模型样本量多，特征也多的情况下，推荐限制这个最大深度，具体的取值取决于数据的分布。常用的可以取值10-100之间。</p>
</li>
<li><p><code>min_samples_split</code>: 内部节点再划分所需最小样本数。这个值限制了子树继续划分的条件，如果某节点的样本数少于<code>min_samples_split</code>，则不会继续再尝试选择最优特征来进行划分。默认是2。如果样本量不大，不需要管这个值。如果样本量数量级非常大，则推荐增大这个值。</p>
</li>
<li><p><code>min_samples_leaf</code>: 叶子节点最少样本数。这个值限制了叶子节点最少的样本数，如果某叶子节点数目小于样本数，则会和兄弟节点一起被剪枝。 默认是1,可以输入最少的样本数的整数，或者最少样本数占样本总数的百分比。如果样本量不大，不需要管这个值。如果样本量数量级非常大，则推荐增大这个值。</p>
</li>
<li><p><code>min_weight_fraction_leaf</code>：叶子节点最小的样本权重和。这个值限制了叶子节点所有样本权重和的最小值，如果小于这个值，则会和兄弟节点一起被剪枝。 默认是0，就是不考虑权重问题。一般来说，如果我们有较多样本有缺失值，或者分类树样本的分布类别偏差很大，就会引入样本权重，这时我们就要注意这个值了。</p>
</li>
<li><p><code>max_leaf_nodes</code>: 最大叶子节点数。通过限制最大叶子节点数，可以防止过拟合，默认是”None”，即不限制最大的叶子节点数。如果加了限制，算法会建立在最大叶子节点数内最优的决策树。如果特征不多，可以不考虑这个值，但是如果特征分成多的话，可以加以限制，具体的值可以通过交叉验证得到。</p>
</li>
<li><p><code>min_impurity_split</code>: 节点划分最小不纯度。这个值限制了决策树的增长，如果某节点的不纯度(基于基尼系数，均方差)小于这个阈值，则该节点不再生成子节点。即为叶子节点。一般不推荐改动默认值1e-7。</p>
</li>
</ul>
<p>上面决策树参数中最重要的包括最大特征数<code>max_features</code>， 最大深度<code>max_depth</code>， 内部节点再划分所需最小样本数<code>min_samples_split</code>和叶子节点最少样本数<code>min_samples_leaf</code>。</p>
<h2 id="五、参考"><a href="#五、参考" class="headerlink" title="五、参考"></a>五、参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/22097796" target="_blank" rel="noopener external nofollow noreferrer">说说随机森林</a></li>
<li><a href="https://www.cnblogs.com/pinard/p/6160412.html" target="_blank" rel="noopener external nofollow noreferrer">刘建平Pinard-scikit-learn随机森林调参小结</a></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>决策树</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>决策树</tag>
      </tags>
  </entry>
  <entry>
    <title>Python内建容器类型</title>
    <url>/archives/8a9ed930.html</url>
    <content><![CDATA[<p>在 Python 中，有四类最常见的内建容器类型：列表（list）、元组（tuple）、字典（dict）、集合（set）。通过单独或是组合使用它们，可以高效的完成很多事情。</p>
<blockquote>
<p>Python 是一门高级编程语言，它所提供的内置容器类型，都是经过高度封装和抽象后的结果。和“链表”、“红黑树”、“哈希表”这些名字相比，所有 Python 内建类型的名字，都只描述了这个类型的功能特点，其他人完全没法只通过这些名字了解它们的哪怕一丁点内部细节。这是 Python 编程语言的优势之一。相比 C 语言这类更接近计算机底层的编程语言，Python 重新设计并实现了对编程者更友好的内置容器类型，屏蔽掉了内存管理等额外工作。为我们提供了更好的开发体验。</p>
</blockquote>
<a id="more"></a>

<h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表-list"></a>列表-list</h2><p>列表的特性：</p>
<ol>
<li>有序的集合</li>
<li>通过偏移来索引，从而读取数据</li>
<li>支持嵌套</li>
<li>可变的类型</li>
<li><strong>查找和插入元素的时间随元素增多而变慢，时间复杂度O(n)</strong></li>
</ol>
<h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组-tuple"></a>元组-tuple</h2><p>下面是元组和列表的几个区别。</p>
<h3 id="1、元组是不可变的"><a href="#1、元组是不可变的" class="headerlink" title="1、元组是不可变的"></a>1、元组是不可变的</h3><blockquote>
<p>The key difference is that tuples are immutable. This means that you cannot change the values in a tuple once you have created it.</p>
</blockquote>
<p><strong>最重要的区别：元组是不可变的，而列表是可变的</strong>。</p>
<p>下面两点是元组的优点。</p>
<h3 id="2、大小不同"><a href="#2、大小不同" class="headerlink" title="2、大小不同"></a>2、大小不同</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tuple(range(<span class="number">1000</span>))</span><br><span class="line">b = list(range(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">print(a.__sizeof__()) <span class="comment"># 8024</span></span><br><span class="line">print(b.__sizeof__()) <span class="comment"># 9088</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Due to the smaller size of a tuple operation, it becomes a bit faster, but not that much to mention about until you have a huge number of elements.</p>
</blockquote>
<p>由于元组支持的操作比列表小， 所以元组会比列表稍稍快上那么一丢丢。但是除非你有巨量的数据要去处理，否者这一点不需要特别强调。</p>
<h3 id="3、元组可以作为字典的key"><a href="#3、元组可以作为字典的key" class="headerlink" title="3、元组可以作为字典的key"></a>3、元组可以作为字典的key</h3><blockquote>
<p>You can’t use list as a dictionary identifier.</p>
</blockquote>
<p>你不能将列表当作字典的key，而元组可以（<strong>因为元组是不可变的</strong>）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>] </span><br><span class="line"></span><br><span class="line">c = &#123;a: <span class="number">1</span>&#125;     <span class="comment"># OK</span></span><br><span class="line">c = &#123;b: <span class="number">1</span>&#125;     <span class="comment"># Error (TypeError: unhashable type: 'list')</span></span><br></pre></td></tr></table></figure>

<h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典-dict"></a>字典-dict</h2><p>下面是字典的几个特点。</p>
<h3 id="1、查找速度快"><a href="#1、查找速度快" class="headerlink" title="1、查找速度快"></a>1、查找速度快</h3><p>无论dict有10个元素还是10万个元素，查找速度都一样。而list的查找速度随着元素增加而逐渐下降。不过dict的查找速度快不是没有代价的，dict的缺点是占用内存大，还会浪费很多内容，list正好相反，占用内存小，但是查找速度慢。由于dict是按 key 查找，所以，在一个dict中，key不能重复。</p>
<h3 id="2、存储的key-value序对没有顺序"><a href="#2、存储的key-value序对没有顺序" class="headerlink" title="2、存储的key-value序对没有顺序"></a>2、存储的key-value序对没有顺序</h3><p>这一点和list不一样。</p>
<p>当我们打印下面这个dict会得到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="string">'Adam'</span>: <span class="number">95</span>,</span><br><span class="line">    <span class="string">'Lisa'</span>: <span class="number">85</span>,</span><br><span class="line">    <span class="string">'Bart'</span>: <span class="number">59</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;Lisa&#39;: 85, &#39;Adam&#39;: 95, &#39;Bart&#39;: 59&#125;</span><br></pre></td></tr></table></figure>

<p>打印的顺序不一定是我们创建时的顺序，而且，不同的机器打印的顺序都可能不同，这说明<strong>dict内部是无序的，不能用dict存储有序的集合</strong>。</p>
<h3 id="3、作为-key-的元素必须不可变"><a href="#3、作为-key-的元素必须不可变" class="headerlink" title="3、作为 key 的元素必须不可变"></a>3、作为 key 的元素必须不可变</h3><p>Python的基本类型如字符串、整数、浮点数都是不可变的，都可以作为 key。但是list是可变的，就不能作为 key。不可变这个限制仅作用于key，value是否可变是无所谓的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">'123'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  <span class="comment"># key 是 str，value是list</span></span><br><span class="line">    <span class="number">123</span>: <span class="string">'123'</span>,        <span class="comment"># key 是 int，value 是 str</span></span><br><span class="line">    (<span class="string">'a'</span>, <span class="string">'b'</span>): <span class="literal">True</span>   <span class="comment"># key 是 tuple，并且tuple的每个元素都是不可变对象，value是 boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最常用的key还是字符串，因为用起来最方便。</p>
<h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合-set"></a>集合-set</h2><p>dict的作用是建立一组 key 和一组 value 的映射关系，dict的key是不能重复的。有的时候，我们只想要 dict 的 key，不关心 key 对应的 value，目的就是保证这个集合的元素不会重复，这时，set就派上用场了。set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。</p>
<p>set的特点：</p>
<ol>
<li>set的内部结构和dict很像，唯一区别是不存储value，因此，判断一个元素是否在set中速度很快。</li>
<li>set存储的元素和dict的key类似，必须是不变对象，因此，任何可变对象是不能放入set中的。</li>
<li>set存储的元素也是没有顺序的。</li>
<li>set不能包含重复的元素（set会自动去掉重复的元素）。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.zlovezl.cn/articles/mastering-container-types/" target="_blank" rel="noopener external nofollow noreferrer">Python 工匠：容器的门道</a></li>
<li><a href="https://www.zhihu.com/question/37368039/answer/71678495" target="_blank" rel="noopener external nofollow noreferrer">Python 中列表和元组有哪些区别？</a></li>
<li><a href="https://stackoverflow.com/questions/626759/whats-the-difference-between-lists-and-tuples" target="_blank" rel="noopener external nofollow noreferrer">What’s the difference between lists and tuples?</a></li>
<li><a href="https://blog.csdn.net/qingqingpiaoguo/article/details/65434217" target="_blank" rel="noopener external nofollow noreferrer">Python中dict与set的对比</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解递归</title>
    <url>/archives/98f0aad7.html</url>
    <content><![CDATA[<p>递归是很多算法都使用的一种编程方法。</p>
<a id="more"></a>

<h2 id="递归的思想"><a href="#递归的思想" class="headerlink" title="递归的思想"></a>递归的思想</h2><p>以此类推是递归的基本思想。</p>
<p><strong>具体来讲就是把规模大的问题转化为规模小的相似的子问题来解决</strong>。在函数实现时，因为解决大问题的方法和解决小问题的方法往往是同一个方法，所以就产生了函数调用它自身的情况。另外这个解决问题的函数必须有明显的结束条件，这样就不会产生无限递归的情况了。</p>
<h2 id="递归的两个条件"><a href="#递归的两个条件" class="headerlink" title="递归的两个条件"></a>递归的两个条件</h2><p>编写递归函数时，必须告诉它何时停止递归。正因为如此，每个递归函数都有两部分：基线条件（base case）和递归条件（recursive case）。递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己，从而避免形成无限循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">if</span> i &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        countdown(i<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

<p>其中 <code>i &lt;= 0</code> 就是基线条件，而 <code>else</code> 是递归条件。</p>
<h2 id="递归的过程"><a href="#递归的过程" class="headerlink" title="递归的过程"></a>递归的过程</h2><p>在求解6的阶乘时，递归过程如下所示。</p>
<img src="/archives/98f0aad7/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97.png" class="" title="斐波那契数列">

<p>我们会惊奇的发现这个过程和栈的工作原理一致对，递归调用就是通过栈这种数据结构完成的。整个过程实际上就是一个栈的入栈和出栈问题。然而我们并不需要关心这个栈的实现，这个过程是由系统来完成的。</p>
<p><strong>其中递归中的“递”就是入栈，递进；“归”就是出栈，回归</strong>。</p>
<p>下面是其Python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self,n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/klguang/p/5463137.html" target="_blank" rel="noopener external nofollow noreferrer">深入理解递归</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数组和链表的区别</title>
    <url>/archives/5c8792e.html</url>
    <content><![CDATA[<ul>
<li>数组：内存上是连续的存储空间； </li>
<li>链表：内存地址可以是不连续的，每个链表的节点包括原来的内存和下一节点的信息（单向链表一个；双向链表两个）。</li>
</ul>
<a id="more"></a>

<h2 id="数组、链表优劣势对比"><a href="#数组、链表优劣势对比" class="headerlink" title="数组、链表优劣势对比"></a>数组、链表优劣势对比</h2><h3 id="读取元素"><a href="#读取元素" class="headerlink" title="读取元素"></a>读取元素</h3><p>当我们需要读取元素时，数组和链表哪个更好呢？</p>
<ul>
<li>链表：在读取链表的最后一个元素时，你不能直接读取，因为你不知道它所处的地址，必须先访问元素<code>#1</code>，从中获取元素<code>#2</code>的地址，再访问元素<code>#2</code>并从中获取元素<code>#3</code>的地址，以此类推，直到访问最后一个元素。</li>
<li>数组：知道其中每个元素的地址。因此数组的效率很高，可迅速找到数组中的任何元素。</li>
</ul>
<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>当我们需要在中间插入元素时，数组和链表哪个更好呢？</p>
<ul>
<li>链表：插入元素很简单，只需修改它前面的那个元素指向的地址。</li>
<li>数组：必须将后面的元素都向后移。<strong>如果没有足够的空间，可能还得将整个数组复制到其他地方！</strong></li>
</ul>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>当我们需要删除元素时，数组和链表哪个更好呢？</p>
<ul>
<li>链表：只需修改前一个元素指向的地址即可。</li>
<li>数组：删除元素后，必须将后面的元素都向前移。</li>
</ul>
<p>不同于插入，删除元素总能成功。如果内存中没有足够的空间，插入操作可能失败，但在任何情况下都能够将元素删除。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下面是数组和链表的不同操作的时间复杂度：</p>
<table>
<thead>
<tr>
<th></th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody><tr>
<td>读取</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>插入</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
<tr>
<td>删除</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<blockquote>
<p>《算法图解》读书笔记</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客文章汇总</title>
    <url>/archives/aad98408.html</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<a id="more"></a>

<h2 id="1、Hexo建站"><a href="#1、Hexo建站" class="headerlink" title="1、Hexo建站"></a>1、Hexo建站</h2><p>首先我们可以在GitHub Pages上搭建个人博客。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/7f189df5.html">Hexo建站教程</a></li>
</ul>
<h2 id="2、Hexo部署到VPS"><a href="#2、Hexo部署到VPS" class="headerlink" title="2、Hexo部署到VPS"></a>2、Hexo部署到VPS</h2><p>搭建完博客后，我们需要进行搜索引擎优化（SEO）。现在我们的博客是托管在GitHub Pages上，但是GitHub屏蔽了百度的爬虫，对于中文网站来说，百度带来的流量是非常可观的，因此，我需要一个办法让百度收录我的博客。</p>
<p>这里一个比较简单的办法就是把Hexo博客部署到自己的VPS上。</p>
<h3 id="第一步：购买个性域名"><a href="#第一步：购买个性域名" class="headerlink" title="第一步：购买个性域名"></a>第一步：购买个性域名</h3><p>这里我推荐Namesilo这个平台，价格比较便宜，而且提供免费的域名隐私保护。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/b48e2719.html">GitHub Pages绑定域名</a></li>
</ul>
<h3 id="第二步：部署到VPS"><a href="#第二步：部署到VPS" class="headerlink" title="第二步：部署到VPS"></a>第二步：部署到VPS</h3><p>我们将 Hexo 在本地通过 <code>hexo generate</code> 生成静态文件，在通过 <code>hexo deploy</code> 部署到 VPS 上面，使用 Nginx 直接做 Web 服务器。</p>
<p>这里我使用的是<code>Git Hooks</code>进行自动部署。</p>
<p><strong>部署原理</strong>：我们在本地编辑文本，然后使用 Git 远程部署到 VPS 的 Git 仓库。<code>hexo d</code> 命令实际上只 deploy 了本地的 public 文件夹，<code>Git Hooks</code> 实际上就是当 Git 仓库收到最新的 push 时，将 Git 仓库接受到的内容复制到 VPS 上的网站目录内。相当于完成了手动将 public 文件夹复制到 VPS 的网站根目录里。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/12a4e7e6.html">Hexo博客部署到VPS</a></li>
</ul>
<p><strong>注意：现在需要我们修改下DNSPod的解析地址，把域名解析到VPS的IP地址而不是GitHub的IP地址</strong>。</p>
<h3 id="第三步：免费升级HTTPS"><a href="#第三步：免费升级HTTPS" class="headerlink" title="第三步：免费升级HTTPS"></a>第三步：免费升级HTTPS</h3><p>为了鼓励 https 的普及，EFF 成立了免费证书最大的提供商为 Let’s Encrypt，可以提供免费证书。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/21caa4d0.html">Hexo 升级 HTTPS</a></li>
</ul>
<h3 id="第四步：提交搜索引擎收录"><a href="#第四步：提交搜索引擎收录" class="headerlink" title="第四步：提交搜索引擎收录"></a>第四步：提交搜索引擎收录</h3><p>通过上面三步，我们已经完成了Hexo在VPS上的部署并且开启了HTTPS，下面我们只需要注册一个百度站长账号，然后提交sitemap，静等百度收录我们的个人网站。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/4ea54752.html">Hexo-NexT 博客提交搜索引擎收录</a></li>
</ul>
<h2 id="3、Hexo双线部署在GitHub-Pages和Coding-Pages"><a href="#3、Hexo双线部署在GitHub-Pages和Coding-Pages" class="headerlink" title="3、Hexo双线部署在GitHub Pages和Coding Pages"></a>3、Hexo双线部署在GitHub Pages和Coding Pages</h2><p>下面是双线部署的过程：</p>
<ul>
<li><a href="https://tding.top/archives/e09249d2.html">Hexo 博客部署到 Coding</a></li>
</ul>
<p>完成双线部署后，境外访问就会走 GitHub，境内就会走 Coding，大大提升了访问速度。</p>
<h2 id="4、Hexo博客部署在GitHub-Pages上并且配置CDN进行加速"><a href="#4、Hexo博客部署在GitHub-Pages上并且配置CDN进行加速" class="headerlink" title="4、Hexo博客部署在GitHub Pages上并且配置CDN进行加速"></a>4、Hexo博客部署在GitHub Pages上并且配置CDN进行加速</h2><p>由于Coding Pages的服务并不是那么稳定，近期出现多次不能正常部署或访问Pages的问题，所以我现在采用了<strong>博客部署在GitHub Pages上并且配置CDN进行加速</strong>的方法。</p>
<p>国内的CDN服务提供商有不少，但是基本都需要备案，因此我用了Cloudflare这个国外的CDN服务提供商。</p>
<p>配置CDN的过程见：</p>
<ul>
<li><a href="https://tding.top/archives/12c6c559.html">Hexo配置Cloudflare免费CDN</a></li>
</ul>
<h2 id="5、Hexo主题选择"><a href="#5、Hexo主题选择" class="headerlink" title="5、Hexo主题选择"></a>5、Hexo主题选择</h2><p>Hexo有很多简洁美观的主题，大家可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener external nofollow noreferrer">Hexo-Themes</a>去选择自己喜欢的主题。</p>
<p>我使用过Yilia和NexT这两款主题，下面是我美化过程的一个记录。</p>
<h3 id="Hexo-NexT主题美化"><a href="#Hexo-NexT主题美化" class="headerlink" title="Hexo NexT主题美化"></a>Hexo NexT主题美化</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>下面是NexT主题的基本配置以及内置的Tag插件使用说明：</p>
<ul>
<li><a href="https://tding.top/archives/42c38b10.html">Hexo-NexT(v7.0+)主题配置</a></li>
<li><a href="https://tding.top/archives/29bfe8c9.html">Hexo-NexT Tag 插件的使用</a></li>
</ul>
<h4 id="自定义子页面"><a href="#自定义子页面" class="headerlink" title="自定义子页面"></a>自定义子页面</h4><p>NexT主题自带的子页面很少，只有首页、标签、分类、归档、关于等子页面。为了记录更多的内容，我添加了<strong>豆瓣读书、豆瓣电影、画廊、热榜</strong>等子页面，具体过程以及效果见下面：</p>
<ul>
<li><a href="https://tding.top/archives/c7ba3a41.html">Hexo加入豆瓣读书页面</a><ul>
<li>具体效果见：<a href="https://tding.top/books/">小丁的个人博客-豆瓣电影</a></li>
</ul>
</li>
<li><a href="https://tding.top/archives/607c3b85.html">Hexo-NexT实现相册</a><ul>
<li>具体效果见：<a href="https://tding.top/gallery/">小丁的个人博客-画廊</a></li>
</ul>
</li>
<li><a href="https://tding.top/archives/baf1ffd.html">Hexo-NexT新增阅读排行页面</a><ul>
<li>具体效果见：<a href="https://tding.top/top/">小丁的个人博客-热榜</a></li>
</ul>
</li>
<li><a href="https://tding.top/archives/73ce4e7.html">Hexo-NexT新增友链</a><ul>
<li>具体效果见：<a href="https://tding.top/about/links.html">小丁的个人博客-友链</a></li>
</ul>
</li>
</ul>
<h4 id="第三方服务配置"><a href="#第三方服务配置" class="headerlink" title="第三方服务配置"></a>第三方服务配置</h4><p>有一些服务，包括评论、在线聊天、文章评分、分享等功能无法通过静态页面实现，所以我用了第三方服务商提供上述服务，具体配置过程如下：</p>
<ul>
<li><a href="https://tding.top/archives/7696c13f.html">Hexo-NexT 添加第三方服务</a></li>
</ul>
<p>由于Disqus这个评论服务需要科学上网才能使用，不利于交流，因此我换用了Valine，配置过程如下：</p>
<ul>
<li><a href="https://tding.top/archives/ed8b904f.html">Hexo-NexT 配置 Valine</a></li>
</ul>
<p>有时候，我们想要在个人博客的<a href="https://tding.top/about/">“关于”</a>栏目下展示自己的GitHub Chart，如下图所示：</p>
<p><img src="https://ghchart.rshah.org/dta0502" alt=""></p>
<p>具体设置过程可以见：</p>
<ul>
<li><a href="https://tding.top/archives/90b9ba07.html">Hexo 博客展示 GitHub Chart</a></li>
</ul>
<p>更多第三方服务配置：</p>
<ul>
<li><a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a></li>
</ul>
<h4 id="页面加载性能优化"><a href="#页面加载性能优化" class="headerlink" title="页面加载性能优化"></a>页面加载性能优化</h4><ul>
<li><a href="https://tding.top/archives/7e5b094d.html">Hexo-NexT 加载性能优化</a></li>
</ul>
<h4 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h4><p>下面是一些自定义样式美化：</p>
<ul>
<li><a href="https://tding.top/archives/761b6f4d.html">Hexo-NexT 设置博客背景图片</a></li>
<li><a href="https://tding.top/archives/dd68b70.html">Hexo-NexT 增加 canvas 粒子时钟</a></li>
<li><a href="https://tding.top/archives/58cff12b.html">Hexo-NexT 添加打字特效、鼠标点击特效</a></li>
<li><a href="https://tding.top/archives/bd4d996d.html">Hexo-NexT 代码块折叠</a></li>
<li><a href="https://tding.top/archives/dfac1e9c.html">Hexo-NexT 主题样式美化 - 动画设置</a></li>
</ul>
<p>字体设置：</p>
<ul>
<li><a href="https://tding.top/archives/3cdfe265.html">Hexo-NexT 支持简体繁体一键切换</a></li>
</ul>
<h4 id="NexT版本更新记录"><a href="#NexT版本更新记录" class="headerlink" title="NexT版本更新记录"></a>NexT版本更新记录</h4><ul>
<li><a href="https://tding.top/archives/2bd6d82.html">Hexo-NexT版本更新记录</a></li>
</ul>
<h3 id="Hexo-Yilia主题美化"><a href="#Hexo-Yilia主题美化" class="headerlink" title="Hexo Yilia主题美化"></a>Hexo Yilia主题美化</h3><ul>
<li><a href="https://tding.top/archives/9a232bbe.html">Hexo-Yilia进阶笔记</a></li>
</ul>
<blockquote>
<p>我的个人博客地址：<a href="https://tding.top/">小丁的个人博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>NexT</tag>
        <tag>Yilia</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT代码块折叠</title>
    <url>/archives/bd4d996d.html</url>
    <content><![CDATA[<p>有些时候，代码块很长，我们可以通过代码块折叠来减少全文的长度，使得阅读全文更加方便。</p>
<p>主题版本：NexT-7.1.2</p>
<p>2020-03-01更新：现在NexT主题已经更新到7.7.1，在最新主题下配置这个代码块折叠的方法详见：<a href="https://tding.top/archives/2bd6d82.html">Hexo-NexT 版本更新记录</a>。</p>
<a id="more"></a>

<h2 id="新建内建标签"><a href="#新建内建标签" class="headerlink" title="新建内建标签"></a>新建<code>内建标签</code></h2><p>新建<code>hexo-theme-next/scripts/custom/fold_tag.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="comment">// Usage: &#123;% fold 点击显/隐内容 %&#125; Something &#123;% endfold %&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fold</span> (<span class="params">args, content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> text = args[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span>(!text) text = <span class="string">"点击显/隐"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;div&gt;&lt;div class="fold_hider"&gt;&lt;div class="close hider_title"&gt;'</span> + text + <span class="string">'&lt;/div&gt;&lt;/div&gt;&lt;div class="fold"&gt;\n'</span> + hexo.render.renderSync(&#123;<span class="attr">text</span>: content, <span class="attr">engine</span>: <span class="string">'markdown'</span>&#125;) + <span class="string">'\n&lt;/div&gt;&lt;/div&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.extend.tag.register(<span class="string">'fold'</span>, fold, &#123;<span class="attr">ends</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="添加折叠代码块js"><a href="#添加折叠代码块js" class="headerlink" title="添加折叠代码块js"></a>添加折叠代码块js</h2><p>新建<code>hexo-theme-next/source/custom/fold_action.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'.fold_hider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'&gt;.fold'</span>, <span class="keyword">this</span>.parentNode).slideToggle();</span><br><span class="line">        $(<span class="string">'&gt;:first'</span>, <span class="keyword">this</span>).toggleClass(<span class="string">'open'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//默认情况下折叠</span></span><br><span class="line">    $(<span class="string">"div.fold"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后创建文件<code>hexo-theme-next/layout/_custom/post-details.swig</code>如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# hexo-theme-next/layout/_custom/post-details.swig</span><br><span class="line">add to: themes/hexo-theme-next/layout/_scripts/pages/post-details.swig</span><br><span class="line">#&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.custom) &#125;&#125;/fold_action.js?v=&#123;&#123; version &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并在<code>themes/hexo-theme-next/layout/_scripts/pages/post-details.swig</code>的末尾加上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% include '../../_custom/post-details.swig' %&#125;</span><br></pre></td></tr></table></figure>

<p>注意：还需修改主题下的<code>_config.yml</code>如下，即加入<code>custom: custom</code>(其实是配置了source目录下的文件夹)</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># Assets</span><br><span class="line">css: css</span><br><span class="line">js: js</span><br><span class="line">images: images</span><br><span class="line"><span class="addition">+custom: custom</span></span><br></pre></td></tr></table></figure>

<h2 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h2><p>最后，修改<code>hexo-theme-next/source/css/_custom/custom.styl</code>配置风格：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 代码折叠功能添加</span><br><span class="line"><span class="selector-class">.hider_title</span>&#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ef4a05</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.close</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"▼"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.open</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"▲"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>代码块折叠使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% fold 点击显&#x2F;隐内容 %&#125;</span><br><span class="line">something you want to fold, include code block.</span><br><span class="line">&#123;% endfold %&#125;</span><br></pre></td></tr></table></figure>

<p>实际显示效果：</p>
<div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<p>something you want to fold, include code block.</p>

</div></div>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.rmiao.top/hexo-fold-block/" target="_blank" rel="noopener external nofollow noreferrer">Hexo next博客添加折叠块功能添加折叠代码块</a></li>
<li><a href="https://www.oyohyee.com/post/Note/fold/" target="_blank" rel="noopener external nofollow noreferrer">jQuery 实现内容折叠功能</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>24点解题技巧</title>
    <url>/archives/384ceeb9.html</url>
    <content><![CDATA[<p>24点，以其简洁的规则、无穷的变化深受大家的喜爱，甚至有网友感叹：很难想象念过书的人会没有算过或见过或听说过24点。虽然大多数人都没有对24点做过深入的研究，但只要懂得加、减、乘、除四则运算，大多数题目还是能迎刃而解。</p>
<a id="more"></a>

<h2 id="难题破解技巧"><a href="#难题破解技巧" class="headerlink" title="难题破解技巧"></a>难题破解技巧</h2><p>事实上，确实有少量的难题，用常规的思路无法解出，但正是这些难题，成就了24点的魅力。</p>
<p>所谓的难题，就是指计算过程中出现分数（小数）的算式，以1～10数字算24为例，将会出现以下四种情况（A、B、C、D分别表示四个数）。</p>
<ul>
<li><code>（A÷B＋C）×D</code>　　　　例：<code>（10÷7＋2）×7＝24</code></li>
<li><code>（A－B÷C）×D</code>　　　　例：<code>（5－1÷5）×5＝24</code></li>
<li><code>A÷（B÷C－D）</code>　　　　例：<code>4÷（7÷6－1）＝24</code></li>
<li><code>A÷（B－C÷D）</code>　　　　例：<code>6÷（1－3÷4）＝24</code></li>
</ul>
<p>倘若我们对题目的四个数，用常规思路确实无法算出24点时，就要考虑用上述四个公式，看看那个公式适合，相信会很快找到答案。</p>
<h2 id="几个经典例题"><a href="#几个经典例题" class="headerlink" title="几个经典例题"></a>几个经典例题</h2><h3 id="1、3、4、6"><a href="#1、3、4、6" class="headerlink" title="1、3、4、6"></a>1、3、4、6</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<p><code>6 / (1 - 3/4) =24</code></p>

</div></div>

<h3 id="1、5、5、5"><a href="#1、5、5、5" class="headerlink" title="1、5、5、5"></a>1、5、5、5</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<p><code>(5 - 1/5) * 5 =24</code></p>

</div></div>

<h3 id="2、2、2、9"><a href="#2、2、2、9" class="headerlink" title="2、2、2、9"></a>2、2、2、9</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<p><code>(2 + 9) * 2 + 2 =24</code></p>

</div></div>

<h3 id="3、3、7、7"><a href="#3、3、7、7" class="headerlink" title="3、3、7、7"></a>3、3、7、7</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<p><code>(3 + 3/7) * 7 =24</code></p>

</div></div>

<h3 id="3、3、8、8"><a href="#3、3、8、8" class="headerlink" title="3、3、8、8"></a>3、3、8、8</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<p><code>8 / (3 - 8/3)=24</code></p>

</div></div>

<h3 id="4、4、7、7"><a href="#4、4、7、7" class="headerlink" title="4、4、7、7"></a>4、4、7、7</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<p><code>(4 - 4/7) * 7 = 24</code></p>

</div></div>

<h3 id="4、4、10、10"><a href="#4、4、10、10" class="headerlink" title="4、4、10、10"></a>4、4、10、10</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<p><code>(10 * 10 - 4) / 4 = 24</code></p>

</div></div>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.sina.com.cn/s/blog_043f74080100bgl4.html" target="_blank" rel="noopener external nofollow noreferrer">24点难题破解技巧</a></li>
</ul>
]]></content>
      <categories>
        <category>思维</category>
        <category>24点</category>
      </categories>
      <tags>
        <tag>24点</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与系统基础知识</title>
    <url>/archives/a4f70622.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c0bd2adc850c581cacaaf1b5dd6252e67ddc7ac55f6e684be5e6907320c08a3c"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>RF</category>
        <category>信号与系统</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>射频微波基础知识（二）</title>
    <url>/archives/17d05ce0.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="e833ac6c8b1b676ad0ddf1edb6cc45e7349985f40591aa158b3b26f9647bcff0"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>RF</category>
        <category>射频电路</category>
      </categories>
      <tags>
        <tag>射频电路</tag>
      </tags>
  </entry>
  <entry>
    <title>射频微波基础知识（一）</title>
    <url>/archives/ddedad91.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="741d2056741e32662e3117cea7ace43390aace3fe6a4e447f67e93c57404d501"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>RF</category>
        <category>射频电路</category>
      </categories>
      <tags>
        <tag>射频电路</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟电路基础知识</title>
    <url>/archives/6b52e484.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="bd18651f659af68279d158455f7a6383b42df8069eb4a08a629abb77c7bfcc1d"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>RF</category>
        <category>模拟电路</category>
      </categories>
      <tags>
        <tag>模拟电路</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT新增阅读排行页面</title>
    <url>/archives/baf1ffd.html</url>
    <content><![CDATA[<p>本文基于 leancloud 的数据实现了一个<a href="https://tding.top/top/">阅读排行页面</a>。</p>
<a id="more"></a>

<h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><p><code>hexo n page top</code> 新建页面，会生成 top 目录，编辑其中自动生成的 <code>index.md</code> 文件，将其中的代码替换如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">AV.initialize(<span class="string">"leancloud_appid"</span>, <span class="string">"leancloud_appkey"</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> time=<span class="number">0</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> title=<span class="string">""</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> url=<span class="string">""</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);</span></span><br><span class="line"><span class="actionscript">  query.notEqualTo(<span class="string">'id'</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">  query.descending(<span class="string">'time'</span>);</span></span><br><span class="line">  query.limit(1000);</span><br><span class="line"><span class="actionscript">  query.find().then(<span class="function"><span class="keyword">function</span> <span class="params">(todo)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> result=todo[i].attributes;</span></span><br><span class="line">      time=result.time;</span><br><span class="line">      title=result.title;</span><br><span class="line">      url=result.url;</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> content=<span class="string">"&lt;p&gt;"</span>+<span class="string">"&lt;font color='#1C1C1C'&gt;"</span>+<span class="string">"【文章热度:"</span>+time+<span class="string">"℃】"</span>+<span class="string">"&lt;/font&gt;"</span>+<span class="string">"&lt;a href='"</span>+<span class="string">"https://tding.top"</span>+url+<span class="string">"'&gt;"</span>+title+<span class="string">"&lt;/a&gt;"</span>+<span class="string">"&lt;/p&gt;"</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">"top"</span>).innerHTML+=content</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">  &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"error"</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并将其中的 <code>leancloud_appid</code>、<code>leancloud_appkey</code> 和<strong>页面链接</strong>替换为你的。</p>
<p>由于一些因素，我后面迁移到了Leancloud国际版，然后阅读排行榜就无法正常显示了，报出如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to load resource: the server responded with a status of 403 () us.leancloud.cn&#x2F;1.1&#x2F;classes&#x2F;Counter?redirectByAPI&#x3D;cn:1</span><br></pre></td></tr></table></figure>

<p>最后发现，美国节点需要调用 <code>AV.useAVCloudUS()</code>，因此以上代码需要修改为：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;div id="top"&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src="https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"&gt;&lt;/script&gt;</span><br><span class="line"><span class="deletion">-&lt;script&gt;AV.initialize("leancloud_appid", "leancloud_appkey");&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+&lt;script&gt;AV.initialize("leancloud_appid", "leancloud_appkey");AV.useAVCloudUS();&lt;/script&gt;</span></span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">  var time=0</span><br><span class="line">  var title=""</span><br><span class="line">  var url=""</span><br><span class="line">  var query = new AV.Query('Counter');</span><br><span class="line">  query.notEqualTo('id',0);</span><br><span class="line">  query.descending('time');</span><br><span class="line">  query.limit(1000);</span><br><span class="line">  query.find().then(function (todo) &#123;</span><br><span class="line">    for (var i=0;i&lt;1000;i++)&#123;</span><br><span class="line">      var result=todo[i].attributes;</span><br><span class="line">      time=result.time;</span><br><span class="line">      title=result.title;</span><br><span class="line">      url=result.url;</span><br><span class="line">      var content="&lt;p&gt;"+"&lt;font color='#1C1C1C'&gt;"+"【文章热度:"+time+"℃】"+"&lt;/font&gt;"+"&lt;a href='"+"https://tding.top"+url+"'&gt;"+title+"&lt;/a&gt;"+"&lt;/p&gt;";</span><br><span class="line">      document.getElementById("top").innerHTML+=content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    console.log("error");</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="配置菜单显示"><a href="#配置菜单显示" class="headerlink" title="配置菜单显示"></a>配置菜单显示</h2><p>编辑主题配置文件 themes\next_config.yml，添加 top：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">top:</span> <span class="string">/top/</span> <span class="string">||</span> <span class="string">signal</span></span><br></pre></td></tr></table></figure>

<p>新增菜单栏的显示名称 <code>hexo/theme/next/languages/zh-CN.yml</code>，同样新增 top 对应的中文：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">top:</span> <span class="string">阅读排行</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://hoxis.github.io/hexo-next-read-rank.html" target="_blank" rel="noopener external nofollow noreferrer">hexo next 新增阅读排行页面</a></li>
<li><a href="https://forum.avoscloud.com/t/web-403-forbidden/9433" target="_blank" rel="noopener external nofollow noreferrer">WEB 安全域名设置后调用返回403 Forbidden 怎么破？</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT博客提交搜索引擎收录</title>
    <url>/archives/4ea54752.html</url>
    <content><![CDATA[<p>如果你不主动提交你的博客地址给各大搜索引擎，那么即使你站内优化做得再好，搜索引擎根本都不知道你的博客的存在。本文简单介绍如何在各大搜索引擎提交博客。</p>
<a id="more"></a>

<h2 id="站点地图生成"><a href="#站点地图生成" class="headerlink" title="站点地图生成"></a>站点地图生成</h2><p>站点地图即sitemap，是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p>
<h3 id="安装百度和Google的站点地图生成插件"><a href="#安装百度和Google的站点地图生成插件" class="headerlink" title="安装百度和Google的站点地图生成插件"></a>安装百度和Google的站点地图生成插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改站点配置文件<code>_config.yml</code>，添加以下内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<p><code>hexo g</code>生成后进入public目录，你会发现里面有<code>sitemap.xml</code>和<code>baidusitemap.xml</code>两个文件，这就是生成的站点地图。里面包含了网站上所有页面的链接，搜索引擎通过这两个文件来抓取网站页面。</p>
<ul>
<li><code>sitemap.xml</code>用来提交给Google</li>
<li><code>baidusitemap.xml</code>用来提交给百度</li>
</ul>
<h2 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a>Google Search Console</h2><h3 id="查看是否被收录"><a href="#查看是否被收录" class="headerlink" title="查看是否被收录"></a>查看是否被收录</h3><p>首先查看你的博客地址是否已经被Google收录，在Google的搜索栏中搜索：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:https:&#x2F;&#x2F;tding.top</span><br></pre></td></tr></table></figure>

<h3 id="搜索资源提交"><a href="#搜索资源提交" class="headerlink" title="搜索资源提交"></a>搜索资源提交</h3><p>进入Google Web Master Search Console，首先需要进行站点验证，由于NexT-7.1.2已经内置了这个方法，所以这里只需要在主题配置文件<code>_config.yml</code>把验证代码写上去就可以：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">smrzctX4--4QKjd_jAPttPxWy06c4SLQo2v1sHBA5rE</span></span><br></pre></td></tr></table></figure>

<p>然后提交sitemap即可。</p>
<h2 id="百度站长平台"><a href="#百度站长平台" class="headerlink" title="百度站长平台"></a>百度站长平台</h2><h3 id="添加、验证站点"><a href="#添加、验证站点" class="headerlink" title="添加、验证站点"></a>添加、验证站点</h3><p>由于NexT-7.1.2已经内置了这个方法，所以这里只需要在主题配置文件<code>_config.yml</code>把验证代码写上去就可以：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span> <span class="string">bfzCl5Q4EF</span></span><br></pre></td></tr></table></figure>

<p>生成、部署后进行验证即可。</p>
<h3 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h3><p>百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。</p>
<h4 id="主动推送（实时）"><a href="#主动推送（实时）" class="headerlink" title="主动推送（实时）"></a>主动推送（实时）</h4><p>主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送的实现原理如下：</p>
<ul>
<li>新链接的产生， <code>hexo generate</code> 会产生一个文本文件，里面包含最新的链接</li>
<li>新链接的提交， <code>hexo deploy</code> 会从上述文件中读取链接，提交至百度搜索引擎</li>
</ul>
<p>下面是具体的实现：</p>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure>

<p>然后在站点配置文件<code>_config.yml</code>添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">5</span> 				     <span class="comment">## 提交最新的五个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">tding.top</span>	     <span class="comment">## 百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">xxxxxxxxxxx</span>	 <span class="comment">## 准入秘钥</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>

<p>准入秘钥可以在<code>链接提交-自动提交-主动推送（实时）</code>中查看。</p>
<p>然后我们需要保证站点<code>_config.yml</code>文件中url的值是百度站长平台注册的域名， 比如:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://tding.top/</span></span><br></pre></td></tr></table></figure>

<p>最后，加入新的deployer-baidu_url_submitter:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:dta0502/dta0502.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="comment"># other deployer</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">leancloud_counter_security_sync</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure>

<h4 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h4><p>修改主题配置文件把<code>baidu_push</code>设置为true。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>然后就会将一下代码自动推送到百度，位置是<code>themes\next\layout_scripts\baidu_push.swig</code>,这样每次访问博客中的页面就会自动向百度提交sitemap。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.baidu_push %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span></span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="sitemap提交"><a href="#sitemap提交" class="headerlink" title="sitemap提交"></a>sitemap提交</h4><p>首先访问之前生成的sitemap文件测试是否成功：<code>https://tding.top/baidusitemap.xml</code></p>
<p>然后我们可以在<code>链接提交-自动提交-sitemap提交</code>中进行站点地图的提交。</p>
<p>输入验证码后提交即可，一般情况下，百度会在一小时内处理该文件，并提取其中的url。</p>
<h3 id="部署Hexo到VPS并且开启HTTPS"><a href="#部署Hexo到VPS并且开启HTTPS" class="headerlink" title="部署Hexo到VPS并且开启HTTPS"></a>部署Hexo到VPS并且开启HTTPS</h3><p>由于百度蜘蛛采集链接信息之前需要访问 <code>baidusitemap.xml</code> 文件，而这个文件是在 GitHub Pages 里面的，但是 GitHub Pages 是禁止百度蜘蛛爬取的，所以百度蜘蛛在获取 <code>baidusitemap.xml</code> 文件这一步骤就被禁止了，GitHub Pages 返回 403 错误，因此抓取失败（哪怕获取到 <code>baidusitemap.xml</code> 文件也不行，因为后续需要采集的静态网页全部是放在 GitHub Pages 中的，全部都会被禁止）。</p>
<p>我们可以通过百度站长的抓取诊断来验证是否出现以上情况：</p>
<img src="/archives/4ea54752/%E6%8A%93%E5%8F%96%E8%AF%8A%E6%96%AD.png" class="" title="抓取诊断">

<p>这里基本可以确定 GitHub Pages 拒绝了百度 Spider 的爬取请求。</p>
<blockquote>
<p>下面是GitHub的一个回复：</p>
<p>I’ve confirmed that we are currently blocking the Baidu user agent from crawling GitHub Pages sites. We took this action in response to this user agent being responsible for an excessive amount of requests, which was causing availability issues for other GitHub customers. This is unlikely to change any time soon, so if you need the Baidu user agent to be able to crawl your site you will need to host it elsewhere.</p>
</blockquote>
<p>因此我需要把Hexo部署到自己的VPS上，具体的部署过程见：<a href="https://tding.top/archives/12a4e7e6.html">Hexo 博客部署到 VPS</a>。</p>
<p>为了能够部署到VPS，那就需要绑定一个个性域名，具体过程见<a href="https://tding.top/archives/b48e2719.html">GitHub Pages绑定域名</a>。</p>
<p>然后再把Hexo升级HTTPS，具体步骤见：<a href="https://tding.top/archives/21caa4d0.html">Hexo升级HTTPS</a></p>
<p>同时由于我们知道了百度爬虫的用户代理，那么就可以直接使用 curl 命令来模拟百度爬虫的请求，观察返回的 http 结果是否正常：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -A <span class="string">"Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)"</span> https://tding.top/baidusitemap.xml</span><br></pre></td></tr></table></figure>

<p>结果看出模拟请求的结果是正常的。</p>
<h2 id="搜狗站长平台"><a href="#搜狗站长平台" class="headerlink" title="搜狗站长平台"></a>搜狗站长平台</h2><p>文件路径：<code>~\themes\next\layout\_partials\head\head.swig</code>，添加以下代码：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.google_site_verification %&#125;</span><br><span class="line">  &lt;meta name="google-site-verification" content="&#123;&#123; theme.google_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.bing_site_verification %&#125;</span><br><span class="line">  &lt;meta name="msvalidate.01" content="&#123;&#123; theme.bing_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.yandex_site_verification %&#125;</span><br><span class="line">  &lt;meta name="yandex-verification" content="&#123;&#123; theme.yandex_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.baidu_site_verification %&#125;</span><br><span class="line">  &lt;meta name="baidu-site-verification" content="&#123;&#123; theme.baidu_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+&#123;% if theme.sogou_site_verification %&#125;</span></span><br><span class="line"><span class="addition">+  &lt;meta name="sogou_site_verification" content="&#123;&#123; theme.sogou_site_verification &#125;&#125;"/&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<p>主题配置文件<code>_config.yml</code>添加：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+# Sougou Webmaster tools verification.</span></span><br><span class="line"><span class="addition">+sogou_site_verification: YXFDrGSL8d</span></span><br></pre></td></tr></table></figure>

<h2 id="360搜索站长平台"><a href="#360搜索站长平台" class="headerlink" title="360搜索站长平台"></a>360搜索站长平台</h2><p>文件路径：<code>~\themes\next\layout\_partials\head\head.swig</code>，添加以下代码：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.google_site_verification %&#125;</span><br><span class="line">  &lt;meta name="google-site-verification" content="&#123;&#123; theme.google_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.bing_site_verification %&#125;</span><br><span class="line">  &lt;meta name="msvalidate.01" content="&#123;&#123; theme.bing_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.yandex_site_verification %&#125;</span><br><span class="line">  &lt;meta name="yandex-verification" content="&#123;&#123; theme.yandex_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.baidu_site_verification %&#125;</span><br><span class="line">  &lt;meta name="baidu-site-verification" content="&#123;&#123; theme.baidu_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.sogou_site_verification %&#125;</span><br><span class="line">  &lt;meta name="sogou_site_verification" content="&#123;&#123; theme.sogou_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+&#123;% if theme.so_site_verification %&#125;</span></span><br><span class="line"><span class="addition">+  &lt;meta name="360-site-verification" content="&#123;&#123; theme.so_site_verification &#125;&#125;"/&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<p>主题配置文件<code>_config.yml</code>添加：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+# 360 Webmaster tools verification.</span></span><br><span class="line"><span class="addition">+so_site_verification: b2195ba72e4870178be78acf3163b3ce</span></span><br></pre></td></tr></table></figure>

<h2 id="神马站长平台"><a href="#神马站长平台" class="headerlink" title="神马站长平台"></a>神马站长平台</h2><p>文件路径：<code>~\themes\next\layout\_partials\head\head.swig</code>，添加以下代码：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.google_site_verification %&#125;</span><br><span class="line">  &lt;meta name="google-site-verification" content="&#123;&#123; theme.google_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.bing_site_verification %&#125;</span><br><span class="line">  &lt;meta name="msvalidate.01" content="&#123;&#123; theme.bing_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.yandex_site_verification %&#125;</span><br><span class="line">  &lt;meta name="yandex-verification" content="&#123;&#123; theme.yandex_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.baidu_site_verification %&#125;</span><br><span class="line">  &lt;meta name="baidu-site-verification" content="&#123;&#123; theme.baidu_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.sogou_site_verification %&#125;</span><br><span class="line">  &lt;meta name="sogou_site_verification" content="&#123;&#123; theme.sogou_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.so_site_verification %&#125;</span><br><span class="line">  &lt;meta name="360-site-verification" content="&#123;&#123; theme.so_site_verification &#125;&#125;"/&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+&#123;% if theme.shenma_site_verification %&#125;</span></span><br><span class="line"><span class="addition">+  &lt;meta name="shenma-site-verification" content="&#123;&#123; theme.shenma_site_verification &#125;&#125;"/&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<p>主题配置文件<code>_config.yml</code>添加：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+# shenma Webmaster tools verification.</span></span><br><span class="line"><span class="addition">+shenma_site_verification: 0febefc87224a8e180455c8bfbf8044a_1566192856</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo升级HTTPS</title>
    <url>/archives/21caa4d0.html</url>
    <content><![CDATA[<p>本文主要介绍如何设置Hexo支持https访问以及遇到的相关问题说明。</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>DNSPOD中添加VPS IP的解析：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ A 默认 VPSIP</span><br></pre></td></tr></table></figure>

<p>然后暂停其中的GitHub的IP地址的解析。</p>
<h2 id="获取免费证书"><a href="#获取免费证书" class="headerlink" title="获取免费证书"></a>获取免费证书</h2><p>为了鼓励https的普及，EFF成立了免费证书最大的提供商为Let’s Encrypt，可以提供免费证书。那么小型的网站，就可以使用免费证书升级为https啦。</p>
<p>当然Let’s Encrypt生成的证书，只能是单域名的，而且只有最低级的域名验证。</p>
<h3 id="克隆letsencrypt客户端"><a href="#克隆letsencrypt客户端" class="headerlink" title="克隆letsencrypt客户端"></a>克隆letsencrypt客户端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/letsencrypt/letsencrypt /opt/letsencrypt</span><br></pre></td></tr></table></figure>

<p>如果遇到权限问题，记得先创建<code>/opt/letsencrypt</code>文件夹再更改文件夹权限为可写入。</p>
<h2 id="注册证书-Nginx指向静态路径"><a href="#注册证书-Nginx指向静态路径" class="headerlink" title="注册证书-Nginx指向静态路径"></a>注册证书-Nginx指向静态路径</h2><p>注册一个域名证书非常简单,使用letsencrypt就能生成https所需的证书。当然，用letsencrypt生成的证书只支持域名验证，只需要用letsenctypt的自动注册证书命令，证明这个域名是自己的是用的即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/letsencrypt</span><br><span class="line">./letsencrypt-auto certonly -a webroot --webroot-path=/var/www/blog -d tding.top</span><br></pre></td></tr></table></figure>

<p>后续将会让你继续输入邮箱信息。</p>
<p>然后出现了如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Saving debug log to &#x2F;var&#x2F;log&#x2F;letsencrypt&#x2F;letsencrypt.log</span><br><span class="line">Plugins selected: Authenticator webroot, Installer None</span><br><span class="line">Obtaining a new certificate</span><br><span class="line">Performing the following challenges:</span><br><span class="line">http-01 challenge for tding.top</span><br><span class="line">Using the webroot path &#x2F;var&#x2F;www&#x2F;blog for all unmatched domains.</span><br><span class="line">Waiting for verification...</span><br><span class="line">Challenge failed for domain tding.top</span><br><span class="line">http-01 challenge for tding.top</span><br><span class="line">Cleaning up challenges</span><br><span class="line">Some challenges have failed.</span><br><span class="line"></span><br><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - The following errors were reported by the server:</span><br><span class="line"></span><br><span class="line">   Domain: tding.top</span><br><span class="line">   Type:   connection</span><br><span class="line">   Detail: Fetching</span><br><span class="line">   http:&#x2F;&#x2F;tding.top&#x2F;.well-known&#x2F;acme-challenge&#x2F;-OO3Ftn96u4kKPKKUkyFHxa6ntdZioOfEF-x5_CwKpY:</span><br><span class="line">   Connection refused</span><br><span class="line"></span><br><span class="line">   To fix these errors, please make sure that your domain name was</span><br><span class="line">   entered correctly and the DNS A&#x2F;AAAA record(s) for that domain</span><br><span class="line">   contain(s) the right IP address. Additionally, please check that</span><br><span class="line">   your computer has a publicly routable IP address and that no</span><br><span class="line">   firewalls are preventing the server from communicating with the</span><br><span class="line">   client. If you&#39;re using the webroot plugin, you should also verify</span><br><span class="line">   that you are serving files from the webroot path you provided.</span><br></pre></td></tr></table></figure>

<p><strong>这个问题的解决办法：配置nginx，启动nginx，保证能够正常访问nginx，如果跟换了域名，需要将原来https配置都先注释掉，先保证能够通过http正常访问nginx服务</strong>。</p>
<p>然后再次运行注册证书代码成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Saving debug log to &#x2F;var&#x2F;log&#x2F;letsencrypt&#x2F;letsencrypt.log</span><br><span class="line">Plugins selected: Authenticator webroot, Installer None</span><br><span class="line">Obtaining a new certificate</span><br><span class="line">Performing the following challenges:</span><br><span class="line">http-01 challenge for tding.top</span><br><span class="line">Using the webroot path &#x2F;var&#x2F;www&#x2F;blog for all unmatched domains.</span><br><span class="line">Waiting for verification...</span><br><span class="line">Cleaning up challenges</span><br><span class="line"></span><br><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class="line">   &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;tding.top&#x2F;fullchain.pem</span><br><span class="line">   Your key file has been saved at:</span><br><span class="line">   &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;tding.top&#x2F;privkey.pem</span><br><span class="line">   Your cert will expire on 2019-11-18. To obtain a new or tweaked</span><br><span class="line">   version of this certificate in the future, simply run</span><br><span class="line">   letsencrypt-auto again. To non-interactively renew *all* of your</span><br><span class="line">   certificates, run &quot;letsencrypt-auto renew&quot;</span><br><span class="line"> - If you like Certbot, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating to ISRG &#x2F; Let&#39;s Encrypt:   https:&#x2F;&#x2F;letsencrypt.org&#x2F;donate</span><br><span class="line">   Donating to EFF:                    https:&#x2F;&#x2F;eff.org&#x2F;donate-le</span><br></pre></td></tr></table></figure>

<h2 id="Nginx配置-指向静态文件"><a href="#Nginx配置-指向静态文件" class="headerlink" title="Nginx配置-指向静态文件"></a>Nginx配置-指向静态文件</h2><p>直到这一步，证书已经就绪，只要配置好Nginx即可完美升级https。</p>
<p>Nginx配置各有各的配置方法，这里只要保证四点：</p>
<ul>
<li>域名配置正确</li>
<li>静态文件目录路径、本地服务目录路径配置正确</li>
<li><code>.well-known/acme-challenge</code>目录配置正确</li>
<li>要保证80默认端口和443ssl端口都有配置</li>
</ul>
<p>下面是一个Nginx配置例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name tding.top; # 这里写你的域名</span><br><span class="line">    location ^~ &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span><br><span class="line">        default_type &quot;text&#x2F;plain&quot;;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;blog; # 这里写你的静态文件目录</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x3D; &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    # SSL Configuration</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name tding.top;  # 这里写你的域名</span><br><span class="line">    # specify cert files</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;tding.top&#x2F;fullchain.pem;  # 中间写你的域名</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;tding.top&#x2F;privkey.pem;  # 中间写你的域名</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root  &#x2F;var&#x2F;www&#x2F;blog; # 这里写你的静态文件目录</span><br><span class="line">        index index.html index.htm; # 这里写你暴露的静态文件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自动更新证书"><a href="#自动更新证书" class="headerlink" title="自动更新证书"></a>自动更新证书</h2><p>letsencrypt证书最多只有90天，90天之后我们需要重新注册证书，当然这个可以交给服务器自己做啦。</p>
<p>验证自己的证书是否可以更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/letsencrypt</span><br><span class="line">./letsencrypt-auto renew --dry-run</span><br></pre></td></tr></table></figure>

<p>此命令只是验证，不会更新证书。</p>
<p>如果出现<code>Congratulations!</code>字样或者已经更新字样则证明可以自动更新。如果出现错误，或者说路径找不到的情况，大多数情况是<code>.well-known/acme-challenge</code>目录配置没有正确的配置成功。</p>
<p>编写crontab脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>脚本内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30 2 * * 1 &#x2F;opt&#x2F;letsencrypt&#x2F;letsencrypt-auto renew &gt;&gt; &#x2F;var&#x2F;log&#x2F;le-renew.log</span><br></pre></td></tr></table></figure>

<p>如果遇到权限问题，可先创建<code>/var/log</code>目录再设置其权限为可写入。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://segmentfault.com/a/1190000015641918" target="_blank" rel="noopener external nofollow noreferrer">升级你的hexo为https</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT添加第三方服务</title>
    <url>/archives/7696c13f.html</url>
    <content><![CDATA[<p>本文主要记录了Hexo-NexT博客添加第三方服务的过程，其中包括<strong>添加AddThis分享功能</strong>、<strong>添加网页音乐播放器</strong>、<strong>添加在线聊天</strong>、<strong>添加文章评分功能</strong>、<strong>支持ECharts动态图表</strong>。</p>
<a id="more"></a>

<h2 id="添加AddThis分享功能"><a href="#添加AddThis分享功能" class="headerlink" title="添加AddThis分享功能"></a>添加AddThis分享功能</h2><h3 id="AddThis官网配置"><a href="#AddThis官网配置" class="headerlink" title="AddThis官网配置"></a>AddThis官网配置</h3><h4 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h4><p>首先点击AddThis至官网注册账号，然后国家可以选择China。</p>
<h4 id="选择工具类型-Select-a-Tool"><a href="#选择工具类型-Select-a-Tool" class="headerlink" title="选择工具类型(Select a Tool)"></a>选择工具类型(Select a Tool)</h4><p>这里我选择<strong>分享按钮（Share Button）</strong>。</p>
<h4 id="选择显示样式-Select-a-Tool-Type"><a href="#选择显示样式-Select-a-Tool-Type" class="headerlink" title="选择显示样式(Select a Tool Type)"></a>选择显示样式(Select a Tool Type)</h4><p>AddThis提供了7种显示样式，你可以在左边菜单栏点击,右边会自动显示你选择的相应样式。右上角可以切换PC和Phone显示。</p>
<img src="/archives/7696c13f/%E6%98%BE%E7%A4%BA%E6%A0%B7%E5%BC%8F.png" class="" title="显示样式">

<h4 id="分享设计界面"><a href="#分享设计界面" class="headerlink" title="分享设计界面"></a>分享设计界面</h4><p>选择Continue之后进入分享样式设计界面。</p>
<ul>
<li>第一个设置<strong>你要显示的主要应用</strong></li>
<li>第二个设置在手机上的显示样式和大小</li>
<li>第三个设置分享计数器针对个人等选项</li>
<li>第四个设置分享组合的位置，宽度，偏移量</li>
<li>第五个设置该分享<strong>是否要显示在主页上</strong>等配置</li>
</ul>
<img src="/archives/7696c13f/%E5%88%86%E4%BA%AB%E6%A0%B7%E5%BC%8F%E8%AE%BE%E8%AE%A1%E7%95%8C%E9%9D%A2.png" class="" title="分享样式设计界面">

<h4 id="代码视图"><a href="#代码视图" class="headerlink" title="代码视图"></a>代码视图</h4><p>设置完成后进入该页面选择仅代码视图打开，可以看到生成的代码，从而获取主题配置文件所需<code>add_this_id</code>也就是当前页面的pubid。</p>
<img src="/archives/7696c13f/%E4%BB%A3%E7%A0%81%E8%A7%86%E5%9B%BE.png" class="" title="代码视图">

<h3 id="配置主题文件"><a href="#配置主题文件" class="headerlink" title="配置主题文件"></a>配置主题文件</h3><p>在主题配置文件<code>_config.yml</code>文件<code>add_this_id</code>配置官网中获得的pubid。</p>
<h2 id="添加网页音乐播放器"><a href="#添加网页音乐播放器" class="headerlink" title="添加网页音乐播放器"></a>添加网页音乐播放器</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>访问Aplayer网站：<a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener external nofollow noreferrer">GitHub Aplayer</a>。下载源码到本地，解压后将dist文件夹复制到<code>themes\next\source</code>文件夹下。</p>
<h3 id="添加music-js"><a href="#添加music-js" class="headerlink" title="添加music.js"></a>添加music.js</h3><p>新建<code>themes\next\source\dist\music.js</code>文件，添加内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span><br><span class="line">    fixed: <span class="literal">true</span>,</span><br><span class="line">    autoplay: <span class="literal">false</span>,</span><br><span class="line">    audio: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"灰色头像"</span>,</span><br><span class="line">        artist: <span class="string">'许嵩'</span>,</span><br><span class="line">        url: <span class="string">'http://www.ytmp3.cn/down/59697.mp3'</span>,</span><br><span class="line">        cover: <span class="string">'http://img.ytmp3.cn/image/79.jpg'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'多余的解释'</span>,</span><br><span class="line">        artist: <span class="string">'许嵩'</span>,</span><br><span class="line">        url: <span class="string">'http://www.ytmp3.cn/down/60447.mp3'</span>,</span><br><span class="line">        cover: <span class="string">'http://img.ytmp3.cn/image/78.jpg'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>audio对应的便是音频文件，音乐播放器需要播放的音乐信息需要自己添加（如歌曲链接、歌词、封面等）的配置。这里放一个mp3音乐外链网站：<a href="http://up.mcyt.net/" target="_blank" rel="noopener external nofollow noreferrer">http://up.mcyt.net/</a> ，搜索对应的音乐，然后复制url和右击封面图片链接粘贴到对应的位置上就行了。</p>
<h3 id="配置-layout-swig"><a href="#配置-layout-swig" class="headerlink" title="配置_layout.swig"></a>配置_layout.swig</h3><p>打开<code>themes\next\layout\_layout.swig</code>文件，将</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/APlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/music.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加到<code>&lt;body itemscope ...&gt;</code>后面，即在<code>&lt;body&gt;&lt;/body&gt;</code>里面。</p>
<p>然后我们就能看到左下角的音乐播放器了。</p>
<h2 id="添加在线聊天"><a href="#添加在线聊天" class="headerlink" title="添加在线聊天"></a>添加在线聊天</h2><p>在线聊天算是一个比较成熟的 SaaS 商业应用了，业内产品如 <a href="https://www.tidiochat.com/" target="_blank" rel="noopener external nofollow noreferrer">Tidio</a>、 <a href="https://talkjs.com/" target="_blank" rel="noopener external nofollow noreferrer">TalkJS</a>、<a href="https://www.intercom.com/" target="_blank" rel="noopener external nofollow noreferrer">Intercom</a>、<a href="https://www.tawk.to/" target="_blank" rel="noopener external nofollow noreferrer">tawk.to</a> 等，使用体验都很好，交互界面也很干净别致。经过比较，本站最终选择了 Tidio：</p>
<ul>
<li>在个人博客这种业务场景中，几乎用不到它的收费功能，可以算是终身免费了。</li>
<li>Tidio 提供了多种消息回复渠道，包括网页、桌面应用、iOS/Android APP（需要 Google play 服务支持）。</li>
<li>除了在线聊天，Tidio 还可以在线发送邮件，以及关联接收 Fackbook 消息。</li>
</ul>
<p>首先需要注册 Tidio 账号，根据引导填写应用信息。进入控制台后，在 <code>SETTINGS -&gt; Developer -&gt; Project data</code> 中获取到 <code>Public Key</code>：</p>
<p>在主题配置文件下配置如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">chat:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#service: chatra</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">tidio</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">comment</span> <span class="comment"># icon in Font Awesome 4, set false to disable icon</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">Chat</span> <span class="comment"># button text, change it as you wish</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">你的key</span> <span class="comment"># Public Key, get it from Dashboard, See: https://www.tidiochat.com/panel/settings/developer</span></span><br></pre></td></tr></table></figure>

<p>刷新页面即可在右下角看到 Tidio 的会话标志了。接下来可以在 Tidio 控制台的 <code>Channel -&gt; Live chat -&gt; Appearance</code> 中根据提示定制聊天对话框的主题外观和语言包：</p>
<h2 id="添加文章评分功能"><a href="#添加文章评分功能" class="headerlink" title="添加文章评分功能"></a>添加文章评分功能</h2><p>修改主题配置文件<code>_config.yml</code>，修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Star rating support to each article.</span><br><span class="line"># To get your ID visit https:&#x2F;&#x2F;widgetpack.com</span><br><span class="line">rating:</span><br><span class="line">  enable: true</span><br><span class="line">  id:     </span><br><span class="line">  color: f79533</span><br></pre></td></tr></table></figure>

<p>再打开 <a href="https://widgetpack.com" target="_blank" rel="noopener external nofollow noreferrer">https://widgetpack.com</a> ，首页点 Rating, 注册一个账号，完成后左上角有一个 ID，填入即可。</p>
<ul>
<li>可以配置评分方式，<code>侧栏 &gt; Rating &gt; Setting</code>，建议用 IP address 或 Device (cookie)，免登录</li>
<li>建议 <code>侧栏 &gt; Site &gt; Setting</code> 中勾选 Private 选项。</li>
</ul>
<h2 id="支持ECharts动态图表"><a href="#支持ECharts动态图表" class="headerlink" title="支持ECharts动态图表"></a>支持ECharts动态图表</h2><p>ECharts，一个纯 Javascript 的图表库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari 等）。</p>
<h3 id="插件的安装"><a href="#插件的安装" class="headerlink" title="插件的安装"></a>插件的安装</h3><p>Hexo 的 ECharts 插件是博主 KChen 根据周旅军的原型插件开发的。进入博客根目录安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-echarts --save</span><br></pre></td></tr></table></figure>

<h3 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h3><p>在文章中使用 ECharts 时，格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% echarts 400 &#39;85%&#39; %&#125;</span><br><span class="line">\\TODO option goes here</span><br><span class="line">&#123;% endecharts %&#125;</span><br></pre></td></tr></table></figure>

<p>其中echarts是标签名，不需要更改，400是图表容器的高度，85%是图表容器的相对宽度。而在tag之间的部分，则是需要自己填充的图表数据了。</p>
<p>比如，在文章中输入以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% echarts <span class="number">400</span> <span class="string">'85%'</span> %&#125;</span><br><span class="line">&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">"某站点用户访问来源"</span>,</span><br><span class="line">        subtext: <span class="string">"ECharts示例"</span>,</span><br><span class="line">        x: <span class="string">"center"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">"item"</span>,</span><br><span class="line">        formatter: <span class="string">"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        orient: <span class="string">"vertical"</span>,</span><br><span class="line">        x: <span class="string">"left"</span>,</span><br><span class="line">        data: [<span class="string">"直接访问"</span>, <span class="string">"邮件营销"</span>, <span class="string">"联盟广告"</span>, <span class="string">"视频广告"</span>, <span class="string">"搜索引擎"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        feature: &#123;</span><br><span class="line">            mark: &#123;</span><br><span class="line">                show: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            dataView: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                readOnly: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            restore: &#123;</span><br><span class="line">                show: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            saveAsImage: &#123;</span><br><span class="line">                show: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    calculable: <span class="literal">true</span>,</span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">"访问来源"</span>,</span><br><span class="line">            type: <span class="string">"pie"</span>,</span><br><span class="line">            radius: <span class="string">"55%"</span>,</span><br><span class="line">            center: [<span class="string">"50%"</span>, <span class="string">"60%"</span>],</span><br><span class="line">            data: [</span><br><span class="line">                &#123;</span><br><span class="line">                    value: <span class="number">335</span>,</span><br><span class="line">                    name: <span class="string">"直接访问"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    value: <span class="number">310</span>,</span><br><span class="line">                    name: <span class="string">"邮件营销"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    value: <span class="number">234</span>,</span><br><span class="line">                    name: <span class="string">"联盟广告"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    value: <span class="number">135</span>,</span><br><span class="line">                    name: <span class="string">"视频广告"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    value: <span class="number">1548</span>,</span><br><span class="line">                    name: <span class="string">"搜索引擎"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endecharts %&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码渲染出来的 ECharts 图表如下：</p>
<div id="echarts4395" style="width: 85%;height: 400px;margin: 0 auto"></div>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/china.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/hubei.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/guangdong.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/map/js/province/zhejiang.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts4395'));

        // 指定图表的配置项和数据
        var option = {
    title: {
        text: "某站点用户访问来源",
        subtext: "ECharts示例",
        x: "center"
    },
    tooltip: {
        trigger: "item",
        formatter: "{a} <br/>{b} : {c} ({d}%)"
    },
    legend: {
        orient: "vertical",
        x: "left",
        data: ["直接访问", "邮件营销", "联盟广告", "视频广告", "搜索引擎"]
    },
    toolbox: {
        show: true,
        feature: {
            mark: {
                show: true
            },
            dataView: {
                show: true,
                readOnly: true
            },
            restore: {
                show: true
            },
            saveAsImage: {
                show: true
            }
        }
    },
    calculable: true,
    series: [
        {
            name: "访问来源",
            type: "pie",
            radius: "55%",
            center: ["50%", "60%"],
            data: [
                {
                    value: 335,
                    name: "直接访问"
                },
                {
                    value: 310,
                    name: "邮件营销"
                },
                {
                    value: 234,
                    name: "联盟广告"
                },
                {
                    value: 135,
                    name: "视频广告"
                },
                {
                    value: 1548,
                    name: "搜索引擎"
                }
            ]
        }
    ]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<p>如果按照上例不能正确绘制图表，请照下面的指导修改一下 ECharts 的模板文件。</p>
<p>用编辑器打开博客目录下 <code>~/node_modules/hexo-tag-echarts/echarts-template.html</code> 文件。</p>
<p>作如下修改：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;div id="&lt;%- id %&gt;" style="width: &lt;%- width %&gt;;height: &lt;%- height %&gt;px;margin: 0 auto"&gt;&lt;/div&gt;</span><br><span class="line"><span class="addition">+ &lt;script src="https://echarts.baidu.com/dist/echarts.common.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://jasonssun.github.io/2019/06/15/Hexo搭建博客NexT主题之AddThis分享文章的配置/" target="_blank" rel="noopener external nofollow noreferrer">Hexo搭建博客NexT主题之AddThis分享文章的配置</a></li>
<li><a href="https://www.guanqr.com/2019/05/04/hexo-next-1/" target="_blank" rel="noopener external nofollow noreferrer">Hexo-NexT 主题：文章内容美化</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL窗口函数</title>
    <url>/archives/c6e31643.html</url>
    <content><![CDATA[<p>MySQL从8.0开始支持窗口函数，这个功能在大多商业数据库和部分开源数据库中早已支持，有的也叫分析函数。</p>
<a id="more"></a>

<h2 id="窗口函数简介"><a href="#窗口函数简介" class="headerlink" title="窗口函数简介"></a>窗口函数简介</h2><h3 id="什么叫窗口"><a href="#什么叫窗口" class="headerlink" title="什么叫窗口?"></a>什么叫窗口?</h3><p>窗口的概念非常重要，它可以理解为记录集合，<strong>窗口函数也就是在满足某种条件的记录集合上执行的特殊函数</strong>。对于每条记录都要在此窗口内执行函数，有的函数随着记录不同，窗口大小都是固定的，这种属于<strong>静态窗口</strong>；有的函数则相反，不同的记录对应着不同的窗口，这种动态变化的窗口叫<strong>滑动窗口</strong>。</p>
<h3 id="窗口函数和普通聚合函数的区别"><a href="#窗口函数和普通聚合函数的区别" class="headerlink" title="窗口函数和普通聚合函数的区别"></a>窗口函数和普通聚合函数的区别</h3><p>窗口函数和普通聚合函数也很容易混淆，二者区别如下：</p>
<ul>
<li><strong>聚合函数是将多条记录聚合为一条；而窗口函数是每条记录都会执行，有几条记录执行完还是几条</strong>。</li>
<li>聚合函数也可以用于窗口函数中。</li>
</ul>
<h3 id="窗口函数的类别"><a href="#窗口函数的类别" class="headerlink" title="窗口函数的类别"></a>窗口函数的类别</h3><p>按照功能划分，可以把MySQL支持的窗口函数分为如下几类：</p>
<ul>
<li>序号函数：row_number() / rank() / dense_rank()</li>
<li>分布函数：percent_rank() / cume_dist()</li>
<li>前后函数：lag() / lead()</li>
<li>头尾函数：first_val() / last_val()</li>
<li>其他函数：nth_value() / nfile()</li>
</ul>
<h3 id="窗口函数基本用法"><a href="#窗口函数基本用法" class="headerlink" title="窗口函数基本用法"></a>窗口函数基本用法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数名([expr]) over子句</span><br></pre></td></tr></table></figure>

<p>其中，over是关键字，用来指定函数执行的窗口范围，如果后面括号中什么都不写，则意味着窗口包含满足where条件的所有行，窗口函数基于所有行进行计算；如果不为空，则支持以下四种语法来设置窗口：</p>
<ul>
<li><p>window_name：给窗口指定一个别名，如果SQL中涉及的窗口较多，采用别名可以看起来更清晰易读。如果指定一个别名w，则改写如下：</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> row_number()<span class="keyword">over</span> w <span class="keyword">as</span> row_num,</span><br><span class="line">    order_id,user_no,amount,create_date</span><br><span class="line">    <span class="keyword">from</span> order_info</span><br><span class="line">    <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> amount <span class="keyword">desc</span>)</span><br><span class="line">) <span class="keyword">as</span> t;</span><br></pre></td></tr></table></figure>
</li>
<li><p>partition子句：<strong>窗口按照那些字段进行分组，窗口函数在不同的分组上分别执行</strong>。上面的例子就按照用户id进行了分组。在每个用户id上，按照order by的顺序分别生成从1开始的顺序编号。</p>
</li>
<li><p>order by子句：<strong>按照哪些字段进行排序，窗口函数将按照排序后的记录顺序进行编号</strong>。可以和partition子句配合使用，也可以单独使用。上例中二者同时使用，如果没有partition子句，则会按照所有用户的订单金额排序来生成序号。</p>
</li>
<li><p>frame子句：frame是当前分区的一个子集，子句用来定义子集的规则，通常用来作为<strong>滑动窗口</strong>使用。比如要根据每个订单动态计算包括本订单和按时间顺序前后两个订单的平均订单金额，则可以设置如下frame子句来创建滑动窗口：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">    order_id,user_no,amount,</span><br><span class="line">    <span class="keyword">avg</span>(amount)<span class="keyword">over</span> w <span class="keyword">as</span> avg_num,</span><br><span class="line">    create_date</span><br><span class="line">    <span class="keyword">from</span> order_info</span><br><span class="line">    <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_date <span class="keyword">desc</span> <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">PRECEDING</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="keyword">FOLLOWING</span>)</span><br><span class="line">) <span class="keyword">as</span> t;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------+---------+--------+----------+---------------------+</span><br><span class="line">| order_id | user_no | amount | avg_num  | create_date         |</span><br><span class="line">+----------+---------+--------+----------+---------------------+</span><br><span class="line">|        5 | u0001   |    900 | 850.0000 | 2018-01-20 00:00:00 |</span><br><span class="line">|        4 | u0001   |    800 | 666.6667 | 2018-01-10 00:00:00 |</span><br><span class="line">|        2 | u0001   |    300 | 466.6667 | 2018-01-02 00:00:00 |</span><br><span class="line">|        3 | u0001   |    300 | 233.3333 | 2018-01-02 00:00:00 |</span><br><span class="line">|        1 | u0001   |    100 | 200.0000 | 2018-01-01 00:00:00 |</span><br><span class="line">|       10 | u0002   |    800 | 800.0000 | 2018-01-22 00:00:00 |</span><br><span class="line">|        9 | u0002   |    800 | 633.3333 | 2018-01-16 00:00:00 |</span><br><span class="line">|        8 | u0002   |    300 | 566.6667 | 2018-01-10 00:00:00 |</span><br><span class="line">|        7 | u0002   |    600 | 466.6667 | 2018-01-06 00:00:00 |</span><br><span class="line">|        6 | u0002   |    500 | 550.0000 | 2018-01-05 00:00:00 |</span><br><span class="line">+----------+---------+--------+----------+---------------------+</span><br></pre></td></tr></table></figure>

<p>从结果可以看出，order_id为5订单属于边界值，没有前一行，因此平均订单金额为(900+800)/2=850；order_id为4的订单前后都有订单，所以平均订单金额为（900+800+300）/3=666.6667，以此类推可以得到一个基于滑动窗口的动态平均订单值。此例中，窗口函数用到了传统的聚合函数avg()，用来计算动态的平均值。</p>
<p>对于滑动窗口的范围指定，有两种方式，基于行和基于范围，具体区别如下：</p>
<ul>
<li><p><strong>基于行：通常使用BETWEEN frame_start AND frame_end语法来表示行范围</strong>，frame_start和frame_end可以支持如下关键字，来确定不同的动态行记录：</p>
<ul>
<li><code>CURRENT ROW</code> 边界是当前行，一般和其他范围关键字一起使用</li>
<li><code>UNBOUNDED PRECEDING</code> 边界是分区中的第一行</li>
<li><code>UNBOUNDED FOLLOWING</code> 边界是分区中的最后一行</li>
<li><code>expr PRECEDING</code>  边界是当前行减去expr的值</li>
<li><code>expr FOLLOWING</code>  边界是当前行加上expr的值</li>
</ul>
<p>比如，下面都是合法的范围：</p>
<ul>
<li><code>rows BETWEEN 1 PRECEDING AND 1 FOLLOWING</code> 窗口范围是当前行、前一行、后一行一共三行记录。</li>
<li><code>rows  UNBOUNDED FOLLOWING</code> 窗口范围是当前行到分区中的最后一行。</li>
<li><code>rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</code> 窗口范围是当前分区中所有行，等同于不写。</li>
</ul>
</li>
<li><p>基于范围：和基于行类似，但<strong>有些范围不是直接可以用行数来表示的，比如希望窗口范围是一周前的订单开始，截止到当前行，则无法使用rows来直接表示，此时就可以使用范围来表示窗口：INTERVAL 7 DAY PRECEDING。</strong>Linux中常见的最近1分钟、5分钟负载是一个典型的应用场景。</p>
</li>
</ul>
<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_info</span><br><span class="line">(</span><br><span class="line">    order_id <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    user_no <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    amount <span class="built_in">int</span>,</span><br><span class="line">    create_date datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'u0001'</span>,<span class="number">100</span>,<span class="string">'2018-1-1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">'u0001'</span>,<span class="number">300</span>,<span class="string">'2018-1-2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">'u0001'</span>,<span class="number">300</span>,<span class="string">'2018-1-2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">4</span>,<span class="string">'u0001'</span>,<span class="number">800</span>,<span class="string">'2018-1-10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">5</span>,<span class="string">'u0001'</span>,<span class="number">900</span>,<span class="string">'2018-1-20'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">6</span>,<span class="string">'u0002'</span>,<span class="number">500</span>,<span class="string">'2018-1-5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">7</span>,<span class="string">'u0002'</span>,<span class="number">600</span>,<span class="string">'2018-1-6'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">8</span>,<span class="string">'u0002'</span>,<span class="number">300</span>,<span class="string">'2018-1-10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">9</span>,<span class="string">'u0002'</span>,<span class="number">800</span>,<span class="string">'2018-1-16'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="number">10</span>,<span class="string">'u0002'</span>,<span class="number">800</span>,<span class="string">'2018-1-22'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="窗口函数使用实例"><a href="#窗口函数使用实例" class="headerlink" title="窗口函数使用实例"></a>窗口函数使用实例</h2><h3 id="序号函数"><a href="#序号函数" class="headerlink" title="序号函数"></a>序号函数</h3><h4 id="row-number"><a href="#row-number" class="headerlink" title="row_number()"></a>row_number()</h4><p>应用场景：求每个用户的最新的一个订单。</p>
<p>思路：使用<code>row_number() over(partition by user_no order by create_date desc) as row_num</code>给原始记录编一个号，然后取第一个编号的数据，自然就是“用户的最新的一条订单”。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_date <span class="keyword">desc</span>) <span class="keyword">as</span> row_num,order_id,user_no,amount,create_date</span><br><span class="line">    <span class="keyword">from</span> order_info</span><br><span class="line">) <span class="keyword">as</span> t </span><br><span class="line"><span class="keyword">where</span> row_num=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+----------+---------+--------+---------------------+</span><br><span class="line">| row_num | order_id | user_no | amount | create_date         |</span><br><span class="line">+---------+----------+---------+--------+---------------------+</span><br><span class="line">|       1 |        5 | u0001   |    900 | 2018-01-20 00:00:00 |</span><br><span class="line">|       1 |       10 | u0002   |    800 | 2018-01-22 00:00:00 |</span><br><span class="line">+---------+----------+---------+--------+---------------------+</span><br></pre></td></tr></table></figure>

<p><code>row_number()</code>：(分组)排序编号。</p>
<p>正如上面的例子， <code>row_number()over(partition by user_no order by create_date desc) as row_num</code>，按照用户分组，按照create_date排序，对已有数据生成一个编号。当然也可以不分组，对整体进行排序。任何一个窗口函数，都可以分组统计或者不分组统计（也即可以不要partition by ***都可以，看你的需求了）。</p>
<h4 id="rank"><a href="#rank" class="headerlink" title="rank()"></a>rank()</h4><p>类似于 row_number()，也是排序功能，但是rank()有什么不一样？</p>
<p>如果再往测试表中写入一条数据：<code>insert into order_info values (11,&#39;u0002&#39;,800,&#39;2018-1-22&#39;);</code>对于测试表中的U002用户来说，有两条create_date完全一样的数据（假设有这样的数据），那么在row_number()编号的时候，这两条数据却被编了两个不同的号。理论上讲，这两条的数据的排名是并列最新的。因此rank()就是为了解决这个问题的，也即：排序条件一样的情况下，其编号也一样。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_date <span class="keyword">desc</span>) <span class="keyword">as</span> row_num,order_id,user_no,amount,create_date</span><br><span class="line">    <span class="keyword">from</span> order_info</span><br><span class="line">) <span class="keyword">as</span> t;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+----------+---------+--------+---------------------+</span><br><span class="line">| row_num | order_id | user_no | amount | create_date         |</span><br><span class="line">+---------+----------+---------+--------+---------------------+</span><br><span class="line">|       1 |        5 | u0001   |    900 | 2018-01-20 00:00:00 |</span><br><span class="line">|       2 |        4 | u0001   |    800 | 2018-01-10 00:00:00 |</span><br><span class="line">|       3 |        2 | u0001   |    300 | 2018-01-02 00:00:00 |</span><br><span class="line">|       3 |        3 | u0001   |    300 | 2018-01-02 00:00:00 |</span><br><span class="line">|       5 |        1 | u0001   |    100 | 2018-01-01 00:00:00 |</span><br><span class="line">|       1 |       10 | u0002   |    800 | 2018-01-22 00:00:00 |</span><br><span class="line">|       2 |        9 | u0002   |    800 | 2018-01-16 00:00:00 |</span><br><span class="line">|       3 |        8 | u0002   |    300 | 2018-01-10 00:00:00 |</span><br><span class="line">|       4 |        7 | u0002   |    600 | 2018-01-06 00:00:00 |</span><br><span class="line">|       5 |        6 | u0002   |    500 | 2018-01-05 00:00:00 |</span><br><span class="line">+---------+----------+---------+--------+---------------------+</span><br></pre></td></tr></table></figure>

<h4 id="dense-rank"><a href="#dense-rank" class="headerlink" title="dense_rank()"></a>dense_rank()</h4><p>dense_rank()的出现是为了解决rank()编号存在的问题的，rank()编号的时候存在跳号的问题，如果有两个并列第1，那么下一个名次的编号就是3，结果就是没有编号为2的数据。如果不想跳号，可以使用dense_rank()替代。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_date <span class="keyword">desc</span>) <span class="keyword">as</span> row_num,order_id,user_no,amount,create_date</span><br><span class="line">    <span class="keyword">from</span> order_info</span><br><span class="line">) <span class="keyword">as</span> t;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+----------+---------+--------+---------------------+</span><br><span class="line">| row_num | order_id | user_no | amount | create_date         |</span><br><span class="line">+---------+----------+---------+--------+---------------------+</span><br><span class="line">|       1 |        5 | u0001   |    900 | 2018-01-20 00:00:00 |</span><br><span class="line">|       2 |        4 | u0001   |    800 | 2018-01-10 00:00:00 |</span><br><span class="line">|       3 |        2 | u0001   |    300 | 2018-01-02 00:00:00 |</span><br><span class="line">|       3 |        3 | u0001   |    300 | 2018-01-02 00:00:00 |</span><br><span class="line">|       4 |        1 | u0001   |    100 | 2018-01-01 00:00:00 |</span><br><span class="line">|       1 |       10 | u0002   |    800 | 2018-01-22 00:00:00 |</span><br><span class="line">|       2 |        9 | u0002   |    800 | 2018-01-16 00:00:00 |</span><br><span class="line">|       3 |        8 | u0002   |    300 | 2018-01-10 00:00:00 |</span><br><span class="line">|       4 |        7 | u0002   |    600 | 2018-01-06 00:00:00 |</span><br><span class="line">|       5 |        6 | u0002   |    500 | 2018-01-05 00:00:00 |</span><br><span class="line">+---------+----------+---------+--------+---------------------+</span><br></pre></td></tr></table></figure>

<h3 id="分布函数cume-dist"><a href="#分布函数cume-dist" class="headerlink" title="分布函数cume_dist()"></a>分布函数cume_dist()</h3><p>用途：分组内大于等于当前rank值的行数/分组内总行数。</p>
<p>应用场景：大于等于当前订单金额的订单比例有多少。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">rank</span>() <span class="keyword">over</span> w <span class="keyword">as</span> row_num,</span><br><span class="line"><span class="keyword">cume_dist</span>() <span class="keyword">over</span> w <span class="keyword">as</span> <span class="keyword">percent</span>,</span><br><span class="line">order_id,user_no,amount,create_date</span><br><span class="line"><span class="keyword">from</span> order_info</span><br><span class="line"><span class="keyword">window</span> w <span class="keyword">as</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> amount <span class="keyword">desc</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+---------+----------+---------+--------+---------------------+</span><br><span class="line">| row_num | percent | order_id | user_no | amount | create_date         |</span><br><span class="line">+---------+---------+----------+---------+--------+---------------------+</span><br><span class="line">|       1 |     0.2 |        5 | u0001   |    900 | 2018-01-20 00:00:00 |</span><br><span class="line">|       2 |     0.4 |        4 | u0001   |    800 | 2018-01-10 00:00:00 |</span><br><span class="line">|       3 |     0.8 |        2 | u0001   |    300 | 2018-01-02 00:00:00 |</span><br><span class="line">|       3 |     0.8 |        3 | u0001   |    300 | 2018-01-02 00:00:00 |</span><br><span class="line">|       5 |       1 |        1 | u0001   |    100 | 2018-01-01 00:00:00 |</span><br><span class="line">|       1 |     0.4 |        9 | u0002   |    800 | 2018-01-16 00:00:00 |</span><br><span class="line">|       1 |     0.4 |       10 | u0002   |    800 | 2018-01-22 00:00:00 |</span><br><span class="line">|       3 |     0.6 |        7 | u0002   |    600 | 2018-01-06 00:00:00 |</span><br><span class="line">|       4 |     0.8 |        6 | u0002   |    500 | 2018-01-05 00:00:00 |</span><br><span class="line">|       5 |       1 |        8 | u0002   |    300 | 2018-01-10 00:00:00 |</span><br><span class="line">+---------+---------+----------+---------+--------+---------------------+</span><br></pre></td></tr></table></figure>

<h3 id="聚合函数avg-、sum-、max-、min"><a href="#聚合函数avg-、sum-、max-、min" class="headerlink" title="聚合函数avg()、sum()、max()、min()"></a>聚合函数avg()、sum()、max()、min()</h3><p>我们可以在聚合函数中使用窗口功能，比如<code>sum(amount)over(partition by user_no order by create_date) as sum_amont</code>，达到一个累积计算sum的功能。这种需求在没有窗口函数的情况下，用纯sql写起来很麻烦。</p>
<p>应用场景：每个用户按照订单id，截止到当前的累计订单金额/平均订单金额/最大订单金额/最小订单金额/订单数是多少？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">order_id,user_no,amount,create_date,</span><br><span class="line"><span class="keyword">sum</span>(amount) <span class="keyword">over</span> w <span class="keyword">as</span> sum_amount,</span><br><span class="line"><span class="keyword">avg</span>(amount) <span class="keyword">over</span> w <span class="keyword">as</span> avg_amount,</span><br><span class="line"><span class="keyword">max</span>(amount) <span class="keyword">over</span> w <span class="keyword">as</span> max_amount,</span><br><span class="line"><span class="keyword">min</span>(amount) <span class="keyword">over</span> w <span class="keyword">as</span> min_amount</span><br><span class="line"><span class="keyword">from</span> order_info</span><br><span class="line"><span class="keyword">window</span> w <span class="keyword">as</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_date <span class="keyword">desc</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------+---------+--------+---------------------+------------+------------+------------+------------+</span><br><span class="line">| order_id | user_no | amount | create_date         | sum_amount | avg_amount | max_amount | min_amount |</span><br><span class="line">+----------+---------+--------+---------------------+------------+------------+------------+------------+</span><br><span class="line">|        5 | u0001   |    900 | 2018-01-20 00:00:00 |        900 |   900.0000 |        900 |        900 |</span><br><span class="line">|        4 | u0001   |    800 | 2018-01-10 00:00:00 |       1700 |   850.0000 |        900 |        800 |</span><br><span class="line">|        2 | u0001   |    300 | 2018-01-02 00:00:00 |       2300 |   575.0000 |        900 |        300 |</span><br><span class="line">|        3 | u0001   |    300 | 2018-01-02 00:00:00 |       2300 |   575.0000 |        900 |        300 |</span><br><span class="line">|        1 | u0001   |    100 | 2018-01-01 00:00:00 |       2400 |   480.0000 |        900 |        100 |</span><br><span class="line">|       10 | u0002   |    800 | 2018-01-22 00:00:00 |        800 |   800.0000 |        800 |        800 |</span><br><span class="line">|        9 | u0002   |    800 | 2018-01-16 00:00:00 |       1600 |   800.0000 |        800 |        800 |</span><br><span class="line">|        8 | u0002   |    300 | 2018-01-10 00:00:00 |       1900 |   633.3333 |        800 |        300 |</span><br><span class="line">|        7 | u0002   |    600 | 2018-01-06 00:00:00 |       2500 |   625.0000 |        800 |        300 |</span><br><span class="line">|        6 | u0002   |    500 | 2018-01-05 00:00:00 |       3000 |   600.0000 |        800 |        300 |</span><br><span class="line">+----------+---------+--------+---------------------+------------+------------+------------+------------+</span><br></pre></td></tr></table></figure>

<h3 id="前后函数lag-、lead"><a href="#前后函数lag-、lead" class="headerlink" title="前后函数lag()、lead()"></a>前后函数lag()、lead()</h3><ul>
<li>lag(column,n)获取当前数据行按照某种排序规则的上n行数据的某个字段</li>
<li>lead(column,n)获取当前数据行按照某种排序规则的下n行数据的某个字段</li>
</ul>
<p>应用场景：按照时间排序，获取当前订单的上一笔订单发生时间和下一笔订单发生时间，（可以计算订单的时间上的间隔度或者说买买买的频繁程度）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">order_id,user_no,amount,create_date,</span><br><span class="line">lag(create_date,<span class="number">1</span>) <span class="keyword">over</span> w <span class="string">'last_transaction_time'</span>,</span><br><span class="line"><span class="keyword">lead</span>(create_date,<span class="number">1</span>) <span class="keyword">over</span> w <span class="string">'next_transaction_time'</span></span><br><span class="line"><span class="keyword">from</span> order_info</span><br><span class="line"><span class="keyword">window</span> w <span class="keyword">as</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_date <span class="keyword">asc</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------+---------+--------+---------------------+-----------------------+-----------------------+</span><br><span class="line">| order_id | user_no | amount | create_date         | last_transaction_time | next_transaction_time |</span><br><span class="line">+----------+---------+--------+---------------------+-----------------------+-----------------------+</span><br><span class="line">|        1 | u0001   |    100 | 2018-01-01 00:00:00 | NULL                  | 2018-01-02 00:00:00   |</span><br><span class="line">|        2 | u0001   |    300 | 2018-01-02 00:00:00 | 2018-01-01 00:00:00   | 2018-01-02 00:00:00   |</span><br><span class="line">|        3 | u0001   |    300 | 2018-01-02 00:00:00 | 2018-01-02 00:00:00   | 2018-01-10 00:00:00   |</span><br><span class="line">|        4 | u0001   |    800 | 2018-01-10 00:00:00 | 2018-01-02 00:00:00   | 2018-01-20 00:00:00   |</span><br><span class="line">|        5 | u0001   |    900 | 2018-01-20 00:00:00 | 2018-01-10 00:00:00   | NULL                  |</span><br><span class="line">|        6 | u0002   |    500 | 2018-01-05 00:00:00 | NULL                  | 2018-01-06 00:00:00   |</span><br><span class="line">|        7 | u0002   |    600 | 2018-01-06 00:00:00 | 2018-01-05 00:00:00   | 2018-01-10 00:00:00   |</span><br><span class="line">|        8 | u0002   |    300 | 2018-01-10 00:00:00 | 2018-01-06 00:00:00   | 2018-01-16 00:00:00   |</span><br><span class="line">|        9 | u0002   |    800 | 2018-01-16 00:00:00 | 2018-01-10 00:00:00   | 2018-01-22 00:00:00   |</span><br><span class="line">|       10 | u0002   |    800 | 2018-01-22 00:00:00 | 2018-01-16 00:00:00   | NULL                  |</span><br><span class="line">+----------+---------+--------+---------------------+-----------------------+-----------------------+</span><br></pre></td></tr></table></figure>

<h3 id="头尾函数first-value-、last-value"><a href="#头尾函数first-value-、last-value" class="headerlink" title="头尾函数first_value()、last_value()"></a>头尾函数first_value()、last_value()</h3><p>头尾函数可以得到分区中的第一个/最后一个指定参数的值。</p>
<p>应用场景：查询截止到当前订单，按照日期排序第一个订单和最后一个订单的订单金额。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">order_id,user_no,amount,create_date,</span><br><span class="line"><span class="keyword">first_value</span>(create_date) <span class="keyword">over</span> w <span class="string">'first_transaction_time'</span>,</span><br><span class="line"><span class="keyword">last_value</span>(create_date) <span class="keyword">over</span> w <span class="string">'last_transaction_time'</span></span><br><span class="line"><span class="keyword">from</span> order_info</span><br><span class="line"><span class="keyword">window</span> w <span class="keyword">as</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_date <span class="keyword">asc</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------+---------+--------+---------------------+------------------------+-----------------------+</span><br><span class="line">| order_id | user_no | amount | create_date         | first_transaction_time | last_transaction_time |</span><br><span class="line">+----------+---------+--------+---------------------+------------------------+-----------------------+</span><br><span class="line">|        1 | u0001   |    100 | 2018-01-01 00:00:00 | 2018-01-01 00:00:00    | 2018-01-01 00:00:00   |</span><br><span class="line">|        2 | u0001   |    300 | 2018-01-02 00:00:00 | 2018-01-01 00:00:00    | 2018-01-02 00:00:00   |</span><br><span class="line">|        3 | u0001   |    300 | 2018-01-02 00:00:00 | 2018-01-01 00:00:00    | 2018-01-02 00:00:00   |</span><br><span class="line">|        4 | u0001   |    800 | 2018-01-10 00:00:00 | 2018-01-01 00:00:00    | 2018-01-10 00:00:00   |</span><br><span class="line">|        5 | u0001   |    900 | 2018-01-20 00:00:00 | 2018-01-01 00:00:00    | 2018-01-20 00:00:00   |</span><br><span class="line">|        6 | u0002   |    500 | 2018-01-05 00:00:00 | 2018-01-05 00:00:00    | 2018-01-05 00:00:00   |</span><br><span class="line">|        7 | u0002   |    600 | 2018-01-06 00:00:00 | 2018-01-05 00:00:00    | 2018-01-06 00:00:00   |</span><br><span class="line">|        8 | u0002   |    300 | 2018-01-10 00:00:00 | 2018-01-05 00:00:00    | 2018-01-10 00:00:00   |</span><br><span class="line">|        9 | u0002   |    800 | 2018-01-16 00:00:00 | 2018-01-05 00:00:00    | 2018-01-16 00:00:00   |</span><br><span class="line">|       10 | u0002   |    800 | 2018-01-22 00:00:00 | 2018-01-05 00:00:00    | 2018-01-22 00:00:00   |</span><br><span class="line">+----------+---------+--------+---------------------+------------------------+-----------------------+</span><br></pre></td></tr></table></figure>

<p><strong>注意：如果不加<code>order by</code>, 就没有窗口，计算范围是整个分区；如果加上<code>order by</code>, 默认窗口是<code>range between unbounded preceding and  current row</code>，就是排序后从分区第一行一直到当前行为止</strong>。</p>
<p>由于我们需要求的是每个用户的第一个和最后一个订单，所以这里要指定窗口：从第一行<code>unbounded preceding</code>到最后一行<code>unbounded following</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">order_id,user_no,amount,create_date,</span><br><span class="line"><span class="keyword">first_value</span>(create_date) <span class="keyword">over</span> w <span class="string">'first_transaction_time'</span>,</span><br><span class="line"><span class="keyword">last_value</span>(create_date) <span class="keyword">over</span> w <span class="string">'last_transaction_time'</span></span><br><span class="line"><span class="keyword">from</span> order_info</span><br><span class="line"><span class="keyword">window</span> w <span class="keyword">as</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_date <span class="keyword">asc</span> <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">unbounded</span> <span class="keyword">following</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------+---------+--------+---------------------+------------------------+-----------------------+</span><br><span class="line">| order_id | user_no | amount | create_date         | first_transaction_time | last_transaction_time |</span><br><span class="line">+----------+---------+--------+---------------------+------------------------+-----------------------+</span><br><span class="line">|        1 | u0001   |    100 | 2018-01-01 00:00:00 | 2018-01-01 00:00:00    | 2018-01-20 00:00:00   |</span><br><span class="line">|        2 | u0001   |    300 | 2018-01-02 00:00:00 | 2018-01-01 00:00:00    | 2018-01-20 00:00:00   |</span><br><span class="line">|        3 | u0001   |    300 | 2018-01-02 00:00:00 | 2018-01-01 00:00:00    | 2018-01-20 00:00:00   |</span><br><span class="line">|        4 | u0001   |    800 | 2018-01-10 00:00:00 | 2018-01-01 00:00:00    | 2018-01-20 00:00:00   |</span><br><span class="line">|        5 | u0001   |    900 | 2018-01-20 00:00:00 | 2018-01-01 00:00:00    | 2018-01-20 00:00:00   |</span><br><span class="line">|        6 | u0002   |    500 | 2018-01-05 00:00:00 | 2018-01-05 00:00:00    | 2018-01-22 00:00:00   |</span><br><span class="line">|        7 | u0002   |    600 | 2018-01-06 00:00:00 | 2018-01-05 00:00:00    | 2018-01-22 00:00:00   |</span><br><span class="line">|        8 | u0002   |    300 | 2018-01-10 00:00:00 | 2018-01-05 00:00:00    | 2018-01-22 00:00:00   |</span><br><span class="line">|        9 | u0002   |    800 | 2018-01-16 00:00:00 | 2018-01-05 00:00:00    | 2018-01-22 00:00:00   |</span><br><span class="line">|       10 | u0002   |    800 | 2018-01-22 00:00:00 | 2018-01-05 00:00:00    | 2018-01-22 00:00:00   |</span><br><span class="line">+----------+---------+--------+---------------------+------------------------+-----------------------+</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://dbaplus.cn/news-11-2258-1.html" target="_blank" rel="noopener external nofollow noreferrer">MySQL 8.0 窗口函数：用非常规思维简易实现SQL需求</a></li>
<li><a href="https://www.linuxidc.com/Linux/2018-03/151389.htm" target="_blank" rel="noopener external nofollow noreferrer">MySQL 8.0 新增SQL语法对窗口函数和CTE的支持</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客部署到VPS</title>
    <url>/archives/12a4e7e6.html</url>
    <content><![CDATA[<p>网上大部分教程都是将Hexo部署到GitHub Pages上面，本文主要介绍如何部署到VPS。</p>
<p>VPS环境：Ubuntu 16.04。</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>网上流传的武功秘籍分为两种：</p>
<ul>
<li>将Hexo项目上传到VPS上面后执行 <code>hexo server</code>，之后配置Nginx反向代理，让域名指向 <a href="http://localhost:4000" target="_blank" rel="noopener external nofollow noreferrer">http://localhost:4000</a>。</li>
<li>将Hexo在本地通过 <code>hexo generate</code> 生成静态文件，在通过 <code>hexo deploy</code> 部署到VPS上面，使用Nginx直接做Web服务器。</li>
</ul>
<p>相比第二种方式，第一种每次写博客与更新博客时候的操作会很繁琐。所以我们使用第二种方式进行部署，这样既可以将静态文件deploy到VPS上，也可以上传到Github上用作备份，操作性和安全性上都要胜于前者。</p>
<p>而对于第二种方式而言，常用的又有 <code>git hook</code> 和 <code>rsync</code> 两种自动部署解决方案。</p>
<p>本文主要介绍<code>git hook</code>部署过程。</p>
<h2 id="Git-Hooks自动部署"><a href="#Git-Hooks自动部署" class="headerlink" title="Git Hooks自动部署"></a>Git Hooks自动部署</h2><h3 id="部署原理"><a href="#部署原理" class="headerlink" title="部署原理"></a>部署原理</h3><p>我们在本地编辑文本，然后使用Git远程部署到VPS的Git仓库。<code>hexo d</code>命令实际上只deploy了本地的public文件夹，Git Hooks实际上就是当Git仓库收到最新的push时，将Git仓库接受到的内容复制到VPS上的网站目录内。相当于完成了手动将public文件夹复制到VPS的网站根目录里。</p>
<h3 id="安装配置Git"><a href="#安装配置Git" class="headerlink" title="安装配置Git"></a>安装配置Git</h3><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>通过SSH连接VPS，执行：<code>apt-get install git</code>，完成后通过<code>git --version</code>查看Git版本，若显示版本信息则说明安装成功。</p>
<h4 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h4><p>执行：<code>adduser git</code>，根据提示设置密码。</p>
<h4 id="赋予git用户sudo权限"><a href="#赋予git用户sudo权限" class="headerlink" title="赋予git用户sudo权限"></a>赋予git用户sudo权限</h4><p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>找到以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># User privilege specification</span><br><span class="line">root    ALL&#x3D;(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>

<p>在<code>root ALL=(ALL:ALL) ALL</code>这一行下面添加<code>git ALL=(ALL:ALL) ALL</code></p>
<p>保存退出后，修改回文件权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 440 /etc/sudoers</span><br></pre></td></tr></table></figure>

<h4 id="关闭git用户shell权限"><a href="#关闭git用户shell权限" class="headerlink" title="关闭git用户shell权限"></a>关闭git用户shell权限</h4><p>我们也可以通过：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@VPS IP</span><br></pre></td></tr></table></figure>

<p>ssh连接服务器，登录到服务器上，对服务器进行各种操作，这通常很不安全,也不合适，我们只需要能对仓库操作就可以了，不需要更大的权限。</p>
<p>因此我们关闭git用户shell权限，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/passwd</span><br></pre></td></tr></table></figure>

<p>将最后一行的<code>git:x:1001:1001:,,,:/home/git:/bin/bash</code>修改为<code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></p>
<p><strong>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出</strong>。</p>
<h4 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化git仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git                //切换到git用户目录</span><br><span class="line">mkdir blog.git              //创建git仓库文件夹，以blog.git为例</span><br><span class="line"><span class="built_in">cd</span> blog.git                 //进入仓库目录</span><br><span class="line">git init --bare             //使用--bare参数初始化为裸仓库，这样创建的仓库不包含工作区</span><br></pre></td></tr></table></figure>

<p>注意：裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。</p>
<h4 id="创建网站目录"><a href="#创建网站目录" class="headerlink" title="创建网站目录"></a>创建网站目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/                //切换目录</span><br><span class="line">mkdir blog                  //创建网站目录，以blog为例</span><br></pre></td></tr></table></figure>

<h4 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git                //切换到git用户目录</span><br><span class="line">mkdir .ssh                  //创建.ssh目录</span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">vim authorized_keys</span><br></pre></td></tr></table></figure>

<p>然后将本地的公钥复制到<code>authorized_keys</code>文件里(公钥即本地执行<code>cat ~/.ssh/id_rsa.pub</code>查看的内容)。</p>
<p>注意：收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p>
<h4 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll /home/git/</span><br><span class="line">ll /var/www/</span><br></pre></td></tr></table></figure>

<p>确保<code>blog.git</code>、<code>.ssh</code>、<code>blog</code>目录的用户组权限为<code>git:git</code>，若不是，执行下列命令：</p>
<blockquote>
<p>修改用户权限的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;chown -R 用户名.组名 /目录</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R git.git /home/git/blog.git/</span><br><span class="line">chown -R git.git /home/git/.ssh/</span><br><span class="line">chown -R git.git /var/www/blog/</span><br></pre></td></tr></table></figure>

<h3 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h3><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>执行：<code>apt-get install nginx</code>，若输入<code>nginx -V</code>可以看到nginx版本信息，则安装成功。</p>
<h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-available               //切换目录</span><br><span class="line">cp default default.bak                  //备份默认配置</span><br><span class="line">vim default                     //修改配置</span><br></pre></td></tr></table></figure>

<p>参考配置文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default;              #默认监听80端口</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;blog;             #网站根目录</span><br><span class="line">    server_name tding.top, www.tding.top;  #网址</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_access.log;</span><br><span class="line">    error_log   &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_error.log;</span><br><span class="line">    error_page 404 &#x3D;  &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">    location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;blog;</span><br><span class="line">        access_log   off;</span><br><span class="line">        expires      1d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;blog;</span><br><span class="line">        access_log   off;</span><br><span class="line">        expires      10m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;blog;</span><br><span class="line">        if (-f $request_filename) &#123;</span><br><span class="line">        rewrite ^&#x2F;(.*)$  &#x2F;$1 break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;nginx_status &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存退出后，启动nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>

<p>设置开机自动启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>

<p>查看运行状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>

<p>显示running表示成功运行。</p>
<h3 id="配置Git-Hooks"><a href="#配置Git-Hooks" class="headerlink" title="配置Git Hooks"></a>配置Git Hooks</h3><h4 id="创建post-receive文件"><a href="#创建post-receive文件" class="headerlink" title="创建post-receive文件"></a>创建post-receive文件</h4><p>git用户下执行（这里我用root用户执行上述命令，然后更改了文件所有者为<code>git.git</code>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/blog.git/hooks     //切换到hooks目录下</span><br><span class="line">vim post-receive            //创建文件</span><br></pre></td></tr></table></figure>

<p>复制下面的内容到<code>post-receive</code>文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo &quot;post-receive hook is running...&quot;</span><br><span class="line"></span><br><span class="line">GIT_REPO&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git</span><br><span class="line">TMP_GIT_CLONE&#x3D;&#x2F;tmp&#x2F;blog</span><br><span class="line">PUBLIC_WWW&#x3D;&#x2F;var&#x2F;www&#x2F;blog</span><br><span class="line"></span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;&#x2F;*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;&#x2F;* $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么不直接将裸仓库克隆到 Web 根目录下呢？我之前也一直被这个问题困扰，感觉先克隆到 tmp 目录再拷贝到 Web 根目录是多此一举。后来我觉得可能是出于项目安全的考虑，在执行 cp 命令的时候，<code>.git</code> 作为隐藏目录不会被拷贝到 Web 根目录下，也就避免了将整个仓库历史暴露在 Web 服务中。</p>
</blockquote>
<p>赋予可执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>

<h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><h4 id="尝试连接"><a href="#尝试连接" class="headerlink" title="尝试连接"></a>尝试连接</h4><p>在本地打开Git Bash：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@VPS的ip</span><br></pre></td></tr></table></figure>

<p>若默认端口不是22，则需要在后面加上<code>-p 端口号</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@VPS的ip -p 2022</span><br></pre></td></tr></table></figure>

<p>或者在<code>.ssh</code>文件夹下创建一个<code>config</code>文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host 服务器IP</span><br><span class="line">HostName 服务器IP</span><br><span class="line">User git</span><br><span class="line">Port 端口号</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>

<p>这里可能会出现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:NgaCW7iTlWetUGGkX1uHepNs88G&#x2F;pCYa9zrDouTQvhM.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in &#x2F;c&#x2F;Users&#x2F;dta05&#x2F;.ssh&#x2F;known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in &#x2F;c&#x2F;Users&#x2F;dta05&#x2F;.ssh&#x2F;known_hosts:6</span><br><span class="line">ECDSA host key for [167.xxx.xxx.xxx]:2022 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure>

<p>原因分析：</p>
<p>It is also possible that a host key has just been changed.</p>
<p>我之前对ssh服务器重装了系统，导致所有与原系统建立过ssh连接的系统都无法再建立连接，因为在于原系统建立首次连接时，双方相互记录了对方的公钥（ssh基于非对称密钥技术），在ssh服务主机重装系统后，公钥改变了，任以旧版本公钥的主机自然是无法与新系统连接的。</p>
<p>网上还有分析为ssh主机被人黑了，并在消除入侵记录时对known_hosts文件做了改动。</p>
<p>解决方案：</p>
<p>删除<code>~/.ssh/known_hosts</code>文件，或者如果你可以判断出<code>known_hosts</code>中原ssh服务器的公钥，删去那部分，</p>
<p>然后再次建立新的连接，即可获得新的公钥。</p>
<h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><p>打开本地博客根目录下的<code>_config.yml</code>文件，找到最后的deploy配置，修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    # repo: git@VPS IP:&#x2F;~&#x2F;blog.git  # 默认端口生效使用</span><br><span class="line">    # repo: ssh:&#x2F;&#x2F;git@VPS IP:端口&#x2F;~&#x2F;blog.git # 默认端口不生效使用，设置端口</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>

<p>到此，Hexo建站就全部配置部署完毕了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.peiyingchi.com/2017/03/20/deploy-hexo-blog-to-VPS/" target="_blank" rel="noopener external nofollow noreferrer">Deploy Hexo Blog to VPS |部署Hexo博客到VPS</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664" target="_blank" rel="noopener external nofollow noreferrer">搭建Git服务器</a></li>
<li><a href="https://www.jianshu.com/p/b926ecf1c6f6" target="_blank" rel="noopener external nofollow noreferrer">Hexo搭建个人博客并使用Git部署到VPS</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>VPS</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT设置博客背景图片</title>
    <url>/archives/761b6f4d.html</url>
    <content><![CDATA[<p>NexT主题本身是没有背景图片的，显得有点单调，一个个性化的背景图片，会让博客变得美观不少。</p>
<p>Hexo-NexT主题版本：7.1.2</p>
<a id="more"></a>

<h2 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h2><p>将想要的背景图片放入<code>themes/next/source/images</code>。打开<code>themes/next/source/css/ _custom/custom.styl</code>文件，这个是Next故意留给用户自己个性化定制一些样式的文件，添加以下代码即可：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(/images/yourbackground.jpg);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    background-attachment:fixed; //不重复</span><br><span class="line">    background-size: cover;      //填充</span><br><span class="line">    <span class="selector-tag">background-position</span><span class="selector-pseudo">:50</span>% 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>background:url</code>为图片路径，也可以直接使用链接。</li>
<li><code>background-repeat</code>：若果背景图片不能全屏，那么是否平铺显示，充满屏幕</li>
<li><code>background-attachment</code>：背景是否随着网页上下滚动而滚动，fixed为固定</li>
<li><code>background-size</code>：图片展示大小，这里设置100%，100%的意义为：如果背景图片不能全屏，那么是否通过拉伸的方式将背景强制拉伸至全屏显示。</li>
</ul>
<h2 id="博客内容透明化"><a href="#博客内容透明化" class="headerlink" title="博客内容透明化"></a>博客内容透明化</h2><p>NexT主题的博客文章均是不透明的，这样读者就不能好好欣赏背景图片了，下面的方法可以使博客内容透明化：</p>
<p>在<code>themes/next/source/css/_custom/custom.styl</code>中添加以下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//博客内容透明化</span><br><span class="line">//文章内容的透明度设置</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：其中<code>header-inner</code>不能使用opacity进行配置。因为<code>header-inner</code>包含<code>header.swig</code>中的所有内容。若使用opacity进行配置，子结点会出很多问题。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.bill.moe/hexo-theme-next-config-optimization/" target="_blank" rel="noopener external nofollow noreferrer">Hexo-NexT主题自定义配置高阶教程</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT实现相册</title>
    <url>/archives/607c3b85.html</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>本节内容是基于实现本地保存图片功能前提记录的笔记，如果是用图床外链，可以跳过所有涉及到<code>img</code>文件夹以及<code>img/s</code>文件夹的步骤。</li>
<li>本相册的所有功能均仅测试了在<code>hexo-theme-next</code>下实现的效果，使用其它主题时部分布局尺寸数据可能会出现偏差，需要自行根据主题设置修改。</li>
</ul>
<a id="more"></a>

<h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><ul>
<li>在 <code>git bash</code> 中输入命令<code>hexo new page gallery</code>；</li>
<li>在<code>hexo/sourse/gallery</code>目录下建立你需要的分类相册文件夹；</li>
<li>进入<code>hexo/sourse/gallery</code>目录，新建<code>img</code>文件夹用来存放相册封面；</li>
<li>在每个相册文件夹中创建<code>img</code>文件夹用来存放大图，以及<code>img/s</code>文件夹用来存放缩略图。</li>
</ul>
<p>注意：<code>img/s</code>文件夹可以省略不建，用<code>文件名-s.jpg</code>的格式重命名缩略图即可。</p>
<h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><h3 id="原图处理"><a href="#原图处理" class="headerlink" title="原图处理"></a>原图处理</h3><ul>
<li>将需要上传的图片放入<code>gallery/相册名/img</code>文件夹中，为了加载速度建议压缩至 1mb 以下，使用 jpg 格式保存；</li>
<li>除了文件大小以外没有其它要求，但是为了方便后续页面编辑，建议将文件以容易辨识的方式重命名，例如<code>日期-图片名.jpg</code>。</li>
</ul>
<h3 id="缩略图处理"><a href="#缩略图处理" class="headerlink" title="缩略图处理"></a>缩略图处理</h3><ul>
<li>将<code>gallery/相册名/img</code>下的所有图片复制到<code>gallery/相册名/img/s</code>文件夹中，使用 PS 等其它处理工具压缩图片大小；</li>
<li>建议宽度为 300px，最终输出文件大小在 30kb 左右，高度无要求。</li>
</ul>
<h3 id="封面图处理"><a href="#封面图处理" class="headerlink" title="封面图处理"></a>封面图处理</h3><ul>
<li>从每个相册的缩略图中挑选需要的封面，复制到<code>gallery/img</code>文件夹中；</li>
<li>建议重命名为<code>相册名.jpg</code>。</li>
</ul>
<h2 id="相册主界面"><a href="#相册主界面" class="headerlink" title="相册主界面"></a>相册主界面</h2><ul>
<li>打开<code>gallery/index.md</code>，将title设置成你需要的相册页面名称；</li>
<li>（可选）在日期下方加上<code>comments: false</code>关闭评论；</li>
<li>复制以下代码粘贴至正文，并按需求修改相册描述、相册名、相册文件夹名以及封面图文件名：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>！相册描述【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>自定义分隔符【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-page"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-list"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-item"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"【！相册文件夹名】"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/【！封面图文件名】.jpg"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>- ！相册1 -<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-item"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"【！相册文件夹名】"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/【！封面图文件名】.jpg"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>- ！相册2 -<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-item"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sample"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/sample.jpg"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>- 相册名 -<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-item"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sample"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/sample.jpg"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>- 相册名 -<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>自定义分割线【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>需要使用外链的场合，将<code>&lt;img src=&quot;img/【封面图文件名】.jpg&quot;&gt;</code>中的内容替换为图床外链地址即可；</li>
<li>代码中<code>&lt;div class=&quot;gallery-column&quot;&gt;</code>元素为分列显示相册的列数，可按需要增减；</li>
<li>新增相册时请确认代码添加在<code>&lt;div class=&quot;gallery-column&quot;&gt;</code>元素内部，否则会造成显示错误。</li>
</ol>
<h2 id="分类相册界面"><a href="#分类相册界面" class="headerlink" title="分类相册界面"></a>分类相册界面</h2><ul>
<li>打开<code>gallery/相册名/index.md</code>，将title设置成你需要的相册页面名称；</li>
<li>（可选）在日期下方加上<code>comments: false</code>关闭评论；</li>
<li>复制以下代码粘贴至正文，并按需求修改相册描述、图片名以及缩略图文件名：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>！相册描述【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>自定义分隔符【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-page"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-list"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/【！图片名1】.jpg"</span> <span class="attr">target</span>=<span class="string">"_Blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/s/【！缩略图文件名1】.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/【！图片名2】.jpg"</span> <span class="attr">target</span>=<span class="string">"_Blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/s/【！缩略图文件名2】.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/sample.jpg"</span> <span class="attr">target</span>=<span class="string">"_Blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/s/sample.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/sample.jpg"</span> <span class="attr">target</span>=<span class="string">"_Blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/s/sample.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>自定义分割线【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>需要使用外链的场合，将<code>&lt;img src=&quot;img/【图片名】.jpg&quot;&gt;</code>中的内容替换为图床外链地址即可，如果图床加载速度够快可以用同一个链接填充缩略图部分；</li>
<li>代码中<code>&lt;div class=&quot;img-column&quot;&gt;</code>元素为分列显示图片的列数，可按需要增减；</li>
<li>添加图片时请确认代码添加在<code>&lt;div class=&quot;img-column&quot;&gt;</code>元素内部，否则会造成显示错误。</li>
</ol>
<h2 id="CSS-样式"><a href="#CSS-样式" class="headerlink" title="CSS 样式"></a>CSS 样式</h2><p>在<code>custom.styl</code>中加入如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*gallery*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery-page</span> &#123;</span><br><span class="line">	<span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-list</span>,</span><br><span class="line"><span class="selector-class">.gallery-list</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="attribute">flex-direction</span>: row;</span><br><span class="line">	<span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">	<span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-column</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-column</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.gallery-column</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gallery-item</span> &#123;</span><br><span class="line">	<span class="attribute">margin-bottom</span>: -<span class="number">50px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gallery-item</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: -<span class="number">25px</span> auto -<span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">max-width</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">	<span class="attribute">color</span>: $black-deep;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid $black-deep;</span><br><span class="line">	<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">20px</span> -<span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-class">.gallery-column</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">767px</span>)&#123;</span><br><span class="line">	<span class="selector-class">.gallery-item</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">		<span class="attribute">min-width</span>: <span class="number">75px</span>;</span><br><span class="line">		<span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>@media</code>标签内的样式是防止移动端浏览时相册名被强制换行的，建议保留；</li>
<li>其余样式除了 flex 相关行与object-fit样式以外，均可根据需要自行更改，在此不作赘述。</li>
</ol>
<h2 id="模板文档"><a href="#模板文档" class="headerlink" title="模板文档"></a>模板文档</h2><p>为了更好地普及本相册做了一个模板文档，用的是 google Drive 链接，<a href="https://drive.google.com/open?id=1Ghcvxm29TnwKAveiE9uZLQAQIEbW-SvR" target="_blank" rel="noopener external nofollow noreferrer">【点我下载】</a>。</p>
<blockquote>
<p>本文转载于：<a href="https://co5.me/2018/181112-gallerry2.html" target="_blank" rel="noopener external nofollow noreferrer">css+markdown 实现 hexo 相册【进阶篇】</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT Tag 插件的使用</title>
    <url>/archives/29bfe8c9.html</url>
    <content><![CDATA[<p>Tag Plugin 是一种使 Hexo 支持特殊样式内容的方法。例如，我们无法在标准 Markdown 中显示具有自定义尺寸的图像。然后我们可以使用标签插件来解决它。 Hexo 有很多可以帮助用户的标签。 Hexo 还具有主题接口，使主题能够创建自己的标签。</p>
<a id="more"></a>

<h2 id="文本居中引用-Centered-Quote"><a href="#文本居中引用-Centered-Quote" class="headerlink" title="文本居中引用-Centered Quote"></a>文本居中引用-Centered Quote</h2><p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;世间所有的相遇，都是久别重逢&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<blockquote class="blockquote-center">
            <p>世间所有的相遇，都是久别重逢</p>

          </blockquote>

<h2 id="提示块-Note"><a href="#提示块-Note" class="headerlink" title="提示块-Note"></a>提示块-Note</h2><p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<p>主题配置文件中可以修改风格：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Note tag (bs-callout).</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  # 风格</span><br><span class="line">  style: flat</span><br><span class="line">  # 要不要图标</span><br><span class="line">  icons: true</span><br><span class="line">  # 圆角矩形</span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<div class="note default">
            <p>default 提示块标签</p>
          </div>

<div class="note primary">
            <p>primary 提示块标签</p>
          </div>

<div class="note success">
            <p>success 提示块标签</p>
          </div>

<div class="note info">
            <p>info 提示块标签</p>
          </div>

<div class="note warning">
            <p>warning 提示块标签</p>
          </div>

<div class="note danger">
            <p>danger 提示块标签</p>
          </div>

<h2 id="标签-Label"><a href="#标签-Label" class="headerlink" title="标签-Label"></a>标签-Label</h2><p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label default@默认 %&#125; &#123;% label primary@主要 %&#125; &#123;% label success@成功 %&#125; &#123;% label info@信息 %&#125; &#123;% label warning@警告 %&#125; &#123;% label danger@危险 %&#125; </span><br><span class="line">&#123;% label success@这是成功的信息%&#125;</span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<span class="label default">默认</span> <span class="label primary">主要</span> <span class="label success">成功</span> <span class="label info">信息</span> <span class="label warning">警告</span> <span class="label danger">危险</span> 

<span class="label success">这是成功的信息</span>

<h2 id="选项卡-Tabs"><a href="#选项卡-Tabs" class="headerlink" title="选项卡-Tabs"></a>选项卡-Tabs</h2><p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs tab,1 %&#125; 名字为tab，默认在第1个选项卡，如果是-1则隐藏</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**选项卡 1** </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**选项卡 2**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab A --&gt;</span><br><span class="line">**选项卡 3** 名字为A</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>主题配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Tabs tag</span><br><span class="line">tabs:</span><br><span class="line">  enable: true</span><br><span class="line">  transition:</span><br><span class="line">    tabs: true</span><br><span class="line">    labels: true</span><br><span class="line">  border_radius: 0</span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">tab 1</a></li><li class="tab"><a href="#tab-2">tab 2</a></li><li class="tab"><a href="#tab-3">A</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><p><strong>选项卡 1</strong> </p></div><div class="tab-pane" id="tab-2"><p><strong>选项卡 2</strong></p></div><div class="tab-pane" id="tab-3"><p><strong>选项卡 3</strong> 名字为A</p></div></div></div>

<h2 id="按钮-Button"><a href="#按钮-Button" class="headerlink" title="按钮-Button"></a>按钮-Button</h2><p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>url</code>     : 绝对或相对URL</li>
<li><code>text</code>    : 按钮文字，如果未指定图标则为必须</li>
<li><code>icon</code>    : FontAwesome图标名称（开头没有’fa-‘）。如果未指定文本，则为必需</li>
<li><code>[class]</code> : FontAwesome类：<code>fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X</code> ，可选参数。</li>
<li><code>[title]</code> : 鼠标悬停时的工具提示，可选参数。</li>
</ul>
<p>注意：最好添加<code>&lt;div&gt;</code>标签，测试时没加 div，下面显示不完全，加上非常美观。</p>
<p>一个示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;% button https:&#x2F;&#x2F;tding.top&#x2F; ,首页,home fa-fw,这是小丁的个人博客首页%&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<div><a class="btn" href="https://tding.top/ " title="这是小丁的个人博客首页">
            <i class="fa fa-home fa-fw"></i>首页
          </a></div>

<p>多个按钮居中显示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;text-center&quot;&gt;&lt;div&gt;&#123;% button https:&#x2F;&#x2F;tding.top&#x2F; ,首页,home fa-fw,这是小丁的个人博客首页%&#125; &#123;% button https:&#x2F;&#x2F;tding.top&#x2F;movies&#x2F; ,观影,film fa-fw,豆瓣电影%&#125; &#123;% button https:&#x2F;&#x2F;tding.top&#x2F;books&#x2F; ,阅读,book fa-fw,豆瓣读书%&#125;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<div class="text-center"><div><a class="btn" href="https://tding.top/ " title="这是小丁的个人博客首页">
            <i class="fa fa-home fa-fw"></i>首页
          </a> <a class="btn" href="https://tding.top/movies/ " title="豆瓣电影">
            <i class="fa fa-film fa-fw"></i>观影
          </a> <a class="btn" href="https://tding.top/books/ " title="豆瓣读书">
            <i class="fa fa-book fa-fw"></i>阅读
          </a></div></div>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Python推导式</title>
    <url>/archives/47bf1d93.html</url>
    <content><![CDATA[<p>推导式（又称解析式）是Python的一种独有特性。推导式是可以从一个数据序列构建另一个新的数据序列的结构体。一共有三种推导式：</p>
<ul>
<li>列表(list)推导式</li>
<li>字典(dict)推导式</li>
<li>集合(set)推导式</li>
</ul>
<a id="more"></a>

<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>列表推导式（又称列表解析式）提供了一种简明扼要的方法来创建列表。</p>
<p>它的结构是在一个中括号里包含一个表达式，然后是一个for语句，然后是0个或多个for或者if语句。那个表达式可以是任意的，意思是你可以在列表中放入任意类型的对象。返回结果将是一个新的列表，在这个以if和for语句为上下文的表达式运行完成之后产生。</p>
<h3 id="规范形式"><a href="#规范形式" class="headerlink" title="规范形式"></a>规范形式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">variable = [out_exp <span class="keyword">for</span> out_exp <span class="keyword">in</span> input_list <span class="keyword">if</span> out_exp == <span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h3 id="不使用列表推导式的例子"><a href="#不使用列表推导式的例子" class="headerlink" title="不使用列表推导式的例子"></a>不使用列表推导式的例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    a.append(x**<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure>

<h3 id="列表推导式例子"><a href="#列表推导式例子" class="headerlink" title="列表推导式例子"></a>列表推导式例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure>

<h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><p>字典推导和列表推导的使用方法是类似的。</p>
<h3 id="快速对换一个字典的键和值的例子"><a href="#快速对换一个字典的键和值的例子" class="headerlink" title="快速对换一个字典的键和值的例子"></a>快速对换一个字典的键和值的例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_dict = &#123;<span class="string">'a'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">34</span>&#125;</span><br><span class="line"></span><br><span class="line">b_dict = &#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> a_dict.items()&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;10: &#39;a&#39;, 34: &#39;b&#39;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h2><p>集合推导式跟列表推导式也是类似的。 唯一的区别在于它们使用大括号{}。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 4&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://eastlakeside.gitbooks.io/interpy-zh/content/Comprehensions/" target="_blank" rel="noopener external nofollow noreferrer">各种推导式(comprehensions)</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL求中位数、众数</title>
    <url>/archives/53e2b511.html</url>
    <content><![CDATA[<p>MySQL并未内置计算中位数、众数的函数。因此，我们需要自己创建查询。</p>
<a id="more"></a>

<h2 id="MySQL插入测试数据"><a href="#MySQL插入测试数据" class="headerlink" title="MySQL插入测试数据"></a>MySQL插入测试数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`income`</span> (</span><br><span class="line">  <span class="string">`name`</span>   <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`income`</span> <span class="built_in">INT</span>(<span class="number">11</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span></span><br><span class="line">)</span><br><span class="line">  <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.income (<span class="keyword">name</span>, income) <span class="keyword">VALUES</span> (<span class="string">'麻子'</span>, <span class="number">20000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.income (<span class="keyword">name</span>, income) <span class="keyword">VALUES</span> (<span class="string">'李四'</span>, <span class="number">12000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.income (<span class="keyword">name</span>, income) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>, <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.income (<span class="keyword">name</span>, income) <span class="keyword">VALUES</span> (<span class="string">'王二'</span>, <span class="number">16000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.income (<span class="keyword">name</span>, income) <span class="keyword">VALUES</span> (<span class="string">'王五'</span>, <span class="number">16000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.income (<span class="keyword">name</span>, income) <span class="keyword">VALUES</span> (<span class="string">'土豪'</span>, <span class="number">40000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------+--------+</span><br><span class="line">| name   | income |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 麻子   |  20000 |</span><br><span class="line">| 李四   |  12000 |</span><br><span class="line">| 张三   |  10000 |</span><br><span class="line">| 王二   |  16000 |</span><br><span class="line">| 土豪   |  40000 |</span><br><span class="line">| 王五   |  16000 |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure>

<h2 id="中位数查询"><a href="#中位数查询" class="headerlink" title="中位数查询"></a>中位数查询</h2><h3 id="具体题目分析"><a href="#具体题目分析" class="headerlink" title="具体题目分析"></a>具体题目分析</h3><p>假如我们想从“income”列中查找中位数。来看看我们要创建的查询是什么算法：</p>
<ul>
<li>对“income”排序并为排序后的每一行附加序号(行号)</li>
<li>如果总行数是奇数，找到位于有序列表中间位置的值。</li>
<li>如果总行数是偶数，找到位于有序列表中间两个位置的值。</li>
<li>计算上面第 (2) 步和第 (3) 取得值的平均值。</li>
<li>返回这个平均值，它就是中位数。</li>
</ul>
<h3 id="MySQL实现中位数查询"><a href="#MySQL实现中位数查询" class="headerlink" title="MySQL实现中位数查询"></a>MySQL实现中位数查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> @<span class="keyword">rownum</span> := <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(t.income)</span><br><span class="line"><span class="keyword">FROM</span>  </span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span> @<span class="keyword">rownum</span>:=@<span class="keyword">rownum</span> + <span class="number">1</span> <span class="keyword">AS</span> rowindex,income.income <span class="keyword">AS</span> income</span><br><span class="line">    <span class="keyword">FROM</span> income</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> income.income</span><br><span class="line">  ) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">WHERE</span> t.rowindex <span class="keyword">IN</span> (<span class="keyword">FLOOR</span>(@<span class="keyword">rownum</span> / <span class="number">2</span>) , <span class="keyword">CEIL</span>(@<span class="keyword">rownum</span> / <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------+</span><br><span class="line">| AVG(t.income) |</span><br><span class="line">+---------------+</span><br><span class="line">|    16000.0000 |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure>

<p>下面解释一下上面的代码：</p>
<ul>
<li>先从内部的一个子查询开始 —— 为 @rowindex 赋值的子查询会为每个收入赋予一个自增后的序号，并对 income 排序。</li>
<li>有了排好序的收入列表之后，外层查询会获取位中间位置的值。如果数组元素是奇数个，两个值都是取的位于正中那个值。</li>
<li>然后，外层查询的 SELECT 子句返回上述两个值的平均值作为中位数。</li>
</ul>
<h2 id="众数查询"><a href="#众数查询" class="headerlink" title="众数查询"></a>众数查询</h2><h3 id="MySQL实现众数查询"><a href="#MySQL实现众数查询" class="headerlink" title="MySQL实现众数查询"></a>MySQL实现众数查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> income,<span class="keyword">COUNT</span>(income)</span><br><span class="line"><span class="keyword">FROM</span> income</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> income</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(income) &gt;= </span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(t1.cnt) </span><br><span class="line">    <span class="keyword">FROM</span> </span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> cnt</span><br><span class="line">      <span class="keyword">FROM</span> income</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> income</span><br><span class="line">    ) <span class="keyword">AS</span> t1</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------+---------------+</span><br><span class="line">| income | COUNT(income) |</span><br><span class="line">+--------+---------------+</span><br><span class="line">|  16000 |             2 |</span><br><span class="line">+--------+---------------+</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>样本均值分布与中心极限定理</title>
    <url>/archives/318992ca.html</url>
    <content><![CDATA[<p>本文简单介绍正态分布的样本均值分布和中心极限定理。</p>
<a id="more"></a>

<h2 id="一、正态分布的样本均值分布"><a href="#一、正态分布的样本均值分布" class="headerlink" title="一、正态分布的样本均值分布"></a>一、正态分布的样本均值分布</h2><p>$\overline{X}$的抽样分布（sampling distribution）仍为正态分布，$\overline{X}$的数学期望为$\mu$, 方差为$\sigma^{2} / n$，则 </p>
<p>$$<br>\overline{X} \sim N\left(\mu, \frac{\sigma^{2}}{n}\right)<br>$$</p>
<p>上面的结果表明，$\overline{X}$的期望值与总体均值相同，而方差则缩小为总体方差的 1/n。这说明当用样本均值$\overline{X}$去估计总体均值$\mu$时，平均来说没有偏差（这一点 称为无偏性）；当n越来越大时，$\overline{X}$的散布程度越来越小，即用$\overline{X}$估计$\mu$越来越准确。</p>
<p>然而在实际问题中，总体的分布并不总是正态分布或近似正态分布，此时$\overline{X}$的分布也将取决于总体分布的情况。值得庆幸的是，当抽样个数n比较大时，人们证明了如下的中心极限定理。该定理告诉我们不管总体的分布是什么，此时样本均值$\overline{X}$的分布总是近似正态分布，只要总体的方差$\sigma^{2}$有限。因为无论对什么总体分布，设总体均值为$\mu$,，总体方差为$\sigma^{2}$，总有</p>
<p>$$<br>E(\overline{X})=E\left(\frac{1}{n} \sum_{i=1}^{n} X_{i}\right)=\frac{1}{n} \sum_{i=1}^{n} E\left(X_{i}\right)=\mu<br>$$</p>
<p>$$<br>D(\overline{\boldsymbol{X}})=D\left(\frac{1}{n} \sum_{i=1}^{n} X_{i}\right)=\frac{1}{n^{2}} \sum_{i=1}^{n} D\left(X_{i}\right)=\frac{\sigma^{2}}{n}<br>$$</p>
<p>所以当n比较大时，$\overline{X}$近似服从$N\left(\mu, \frac{\sigma^{2}}{n}\right)$，等价地有$\frac{X-\mu}{\sigma / \sqrt{n}} \sim N(0,1)$。 </p>
<h2 id="二、中心极限定理"><a href="#二、中心极限定理" class="headerlink" title="二、中心极限定理"></a>二、中心极限定理</h2><h3 id="2-1-中心极限定理定义"><a href="#2-1-中心极限定理定义" class="headerlink" title="2.1 中心极限定理定义"></a>2.1 中心极限定理定义</h3><p>中心极限定理（central limit theorem)：设从均值为$\mu$、方差为$\sigma^{2}$（有限）的任意一个总体中抽取样本量为n的样本，当n充分大时，样本均值$\overline{X}$的抽样分布近似服从均值为$\mu$、方差为$\sigma^{2}/n$的正态分布。</p>
<h3 id="2-2-n-gt-30一般为大样本的分界线"><a href="#2-2-n-gt-30一般为大样本的分界线" class="headerlink" title="2.2 n&gt;30一般为大样本的分界线"></a>2.2 n&gt;30一般为大样本的分界线</h3><p>中心极限定理要求n必须充分大，那么多大才叫充分大呢？</p>
<p>这与总体的分布形状有关。<strong>总体偏离正态越远．则要求n越大</strong>。然而在实际应用中，总体的分布未知。此时，我们常要求n&gt;=30。顺便指出，大样本、小样本之间并不是以样本容量大小来区分的。在样本容量固定的条件下所进行的统计推断、问题分析，不管样本容量有多大，都称为小样本问题；而在样本容量$n \rightarrow \infty$的条件下进行的统计推断、问题分析则称为大样本问题。一般统计学中的n&gt;=30为大样本，n&lt;30为小样本只是一种经验说法。</p>
]]></content>
      <categories>
        <category>统计</category>
        <category>概率</category>
      </categories>
      <tags>
        <tag>概率</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习评价指标</title>
    <url>/archives/31315aab.html</url>
    <content><![CDATA[<p>评价指标是机器学习任务中非常重要的一环。不同的机器学习任务有着不同的评价指标，同时同一种机器学习任务也有着不同的评价指标，每个指标的着重点不一样。</p>
<a id="more"></a>

<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="混淆矩阵-1"><a href="#混淆矩阵-1" class="headerlink" title="混淆矩阵^1"></a>混淆矩阵<a href="统计学习方法">^1</a></h3><ul>
<li>True Positive(真正, TP)：将正类预测为正类数.</li>
<li>True Negative(真负 , TN)：将负类预测为负类数.</li>
<li>False Positive(假正, FP)：将负类预测为正类数 $\rightarrow$ <strong>误报</strong> (Type I error).</li>
<li>False Negative(假负 , FN)：将正类预测为负类数 $\rightarrow$ <strong>漏报</strong> (Type II error).</li>
</ul>
<img src="/archives/31315aab/%E6%B7%B7%E6%B7%86%E7%9F%A9%E9%98%B5.png" class="" title="混淆矩阵">

<p><strong>精确率</strong>(precision)定义为：</p>
<p>$$<br>P = \frac{TP}{TP+FP} \tag{1}<br>$$</p>
<p>需要注意的是<strong>精确率</strong>(precision)和<strong>准确率</strong>(accuracy)是不一样的，</p>
<p>$$<br>ACC = \frac{TP + TN}{TP+TN+FP+FN}<br>$$</p>
<blockquote>
<p>在正负样本不平衡的情况下，准确率这个评价指标有很大的缺陷。比如在互联网广告里面，点击的数量是很少的，一般只有千分之几，如果用acc，即使全部预测成负类（不点击）acc 也有 99% 以上，没有意义。</p>
</blockquote>
<p><strong>召回率</strong>(recall,sensitivity,true positive rate)定义为：</p>
<p>$$<br>R = \frac{TP}{TP+FN} \tag{2}<br>$$</p>
<p>此外，还有 $F_1$ 值，是精确率和召回率的<strong>调和均值</strong>，</p>
<p>$$<br>\frac{2}{F_1} = \frac{1}{P} + \frac{1}{R}<br>$$</p>
<p>$$<br>F_1 = \frac{2TP}{2TP + FP + FN} \tag{3}<br>$$</p>
<blockquote>
<p>精确率和准确率都高的情况下，$F_1$ 值也会高。</p>
</blockquote>
<h3 id="通俗版本"><a href="#通俗版本" class="headerlink" title="通俗版本"></a>通俗版本</h3><p>刚开始接触这两个概念的时候总搞混，时间一长就记不清了。</p>
<p>实际上非常简单，<strong>精确率</strong>是针对我们<strong>预测结果</strong>而言的，它表示的是预测为正的样本中有多少是对的。那么预测为正就有两种可能了，一种就是把正类预测为正类(TP)，另一种就是把负类预测为正类(FP)。</p>
<p>而<strong>召回率</strong>是针对我们原来的<strong>样本</strong>而言的，它表示的是样本中的正例有多少被预测正确了。那也有两种可能，一种是把原来的正类预测成正类(TP)，另一种就是把原来的正类预测为负类(FN)。</p>
<img src="/archives/31315aab/%E9%80%9A%E4%BF%97%E7%89%88%E6%9C%AC.jpg" class="" title="通俗版本">

<p>在信息检索领域，精确率和召回率又被称为<strong>查准率</strong>和<strong>查全率</strong>，</p>
<p>$$<br>\text{查准率}＝\frac{\text{检索出的相关信息量}}{\text{检索出的信息总量}}<br>$$</p>
<p>$$<br>\text{查全率}＝\frac{\text{检索出的相关信息量}}{\text{系统中的相关信息总量}}<br>$$</p>
<h3 id="ROC-曲线"><a href="#ROC-曲线" class="headerlink" title="ROC 曲线"></a>ROC 曲线</h3><p>我们先来看下维基百科的定义，</p>
<blockquote>
<p>In signal detection theory, a receiver operating characteristic (ROC), or simply ROC curve, is a graphical plot which illustrates the performance of a binary classifier system <strong>as its discrimination threshold is varied</strong>.</p>
</blockquote>
<p>比如在逻辑回归里面，我们会设一个阈值，大于这个值的为正类，小于这个值为负类。如果我们减小这个阀值，那么更多的样本会被识别为正类。这会提高正类的识别率，但同时也会使得更多的负类被错误识别为正类。为了形象化这一变化，在此引入 ROC ，ROC 曲线可以用于评价一个分类器好坏。</p>
<p>ROC 关注两个指标，</p>
<p>$$<br>\text{true positive rate}: \qquad TPR = \cfrac{TP}{TP+FN}<br>$$</p>
<p>$$<br>\text{false positive rate}: \qquad FPR = \cfrac{FP}{FP + TN}<br>$$</p>
<p>直观上，TPR 代表能将正例分对的概率，FPR 代表将负例错分为正例的概率。在 ROC 空间中，每个点的横坐标是 FPR，纵坐标是 TPR，这也就描绘了分类器在 TP（<strong>真正率</strong>）和 FP（<strong>假正率</strong>）间的 trade-off<a href="[ROC和AUC介绍以及如何计算AUC](http://alexkong.net/2013/06/introduction-to-auc-and-roc/)">^3</a>。</p>
<img src="/archives/31315aab/ROC.png" class="" title="ROC">

<h3 id="AUC"><a href="#AUC" class="headerlink" title="AUC"></a>AUC</h3><p>AUC（Area Under Curve）被定义为ROC曲线下的面积，显然这个面积的数值不会大于1。</p>
<blockquote>
<p>The AUC value is equivalent to the probability that a randomly chosen positive example is ranked higher than a randomly chosen negative example.      </p>
</blockquote>
<p>翻译过来就是，随机挑选一个正样本以及一个负样本，分类器判定正样本的值高于负样本的概率就是 AUC 值。</p>
<p>简单说：AUC值越大的分类器，正确率越高<a href="[AUC与ROC-衡量分类器的好坏](http://beader.me/2013/12/15/auc-roc/)">^2</a>。</p>
<ul>
<li>$AUC = 1$，<strong>完美分类器</strong>，采用这个预测模型时，不管设定什么阈值都能得出完美预测。绝大多数预测的场合，不存在完美分类器。</li>
<li>$0.5 &lt; AUC &lt; 1$，优于<strong>随机猜测</strong>。这个分类器（模型）妥善设定阈值的话，能有预测价值。</li>
<li>$AUC = 0.5$，跟<strong>随机猜测一样</strong>（例：丢铜板），模型没有预测价值。</li>
<li>$AUC &lt; 0.5$，比<strong>随机猜测</strong>还差；但只要总是反预测而行，就优于随机猜测，因此不存在 $AUC &lt; 0.5$ 的情况。</li>
</ul>
<img src="/archives/31315aab/AUC.png" class="" title="AUC">

<blockquote>
<p>既然已经这么多评价标准，为什么还要使用ROC和AUC呢？因为ROC曲线有个很好的特性：当测试集中的正负样本的分布变化的时候，ROC曲线能够保持不变。在实际的数据集中经常会出现类不平衡（class imbalance）现象，即负样本比正样本多很多（或者相反）</p>
</blockquote>
<h2 id="回归-4"><a href="#回归-4" class="headerlink" title="回归^4"></a>回归<a href="[机器学习评价指标大汇总](http://www.zhaokv.com/2016/03/ml-metric.html)">^4</a></h2><h3 id="平均绝对误差"><a href="#平均绝对误差" class="headerlink" title="平均绝对误差"></a>平均绝对误差</h3><p>平均绝对误差MAE（Mean Absolute Error）又被称为 $l_1$ 范数损失（l1-norm loss）：</p>
<p>$$<br>{\rm MAE}(y, \hat{y})=\frac{1}{n_{\rm samples}}\sum\limits_{i=1}^{n_{\rm samples}}|y_i-\hat{y}_i|<br>$$</p>
<h3 id="平均平方误差"><a href="#平均平方误差" class="headerlink" title="平均平方误差"></a>平均平方误差</h3><p>平均平方误差 MSE（Mean Squared Error）又被称为 $l_2$ 范数损失（l2-norm loss）：</p>
<p>$$<br>{\rm MSE}(y, \hat{y})=\frac{1}{n_{\rm samples}}\sum\limits_{i=1}^{n_{\rm samples}}(y_i-\hat{y}_i)^2<br>$$</p>
<blockquote>
<p>本文转载于：<a href="http://charleshm.github.io/2016/03/Model-Performance/" target="_blank" rel="noopener external nofollow noreferrer">机器学习性能评估指标</a></p>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>评价指标</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo加入豆瓣读书页面</title>
    <url>/archives/c7ba3a41.html</url>
    <content><![CDATA[<p>在Hexo博客个性化定制中，加入豆瓣读书界面是一个很不错的功能。GitHub上已经有人写好了这个模块：<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener external nofollow noreferrer">hexo-douban</a>，我们只需要安装模块，然后配置一下就可以了。</p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将下面的配置写入站点的配置文件<code>_config.yml</code>里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">douban:</span><br><span class="line">  user: mythsman</span><br><span class="line">  builtin: false</span><br><span class="line">  book:</span><br><span class="line">    title: &#39;This is my book title&#39;</span><br><span class="line">    quote: &#39;This is my book quote&#39;</span><br><span class="line">  movie:</span><br><span class="line">    title: &#39;This is my movie title&#39;</span><br><span class="line">    quote: &#39;This is my movie quote&#39;</span><br><span class="line">  game:</span><br><span class="line">    title: &#39;This is my game title&#39;</span><br><span class="line">    quote: &#39;This is my game quote&#39;</span><br><span class="line">  timeout: 10000</span><br></pre></td></tr></table></figure>

<ul>
<li>user: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<code>https://www.douban.com/people/xxxxxx/</code>“ ，其中的”xxxxxx”就是你的个人ID了。</li>
<li>builtin: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是false,另一可选项为true(1.x.x版本新增配置项)。</li>
<li>title: 该页面的标题。</li>
<li>quote: 写在页面开头的一段话,支持html语法。</li>
<li>timeout: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li>
</ul>
<p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>我们只需要在Git Bash中输入以下命令：<code>hexo clean &amp;&amp; hexo douban -bgm &amp;&amp; hexo g &amp;&amp; hexo s</code>即可，注意其中开启hexo-douban的命令中，-bgm代表的是book、game、movie三个参数，如果只需要其中的一部分就只带你想要的那些参数。</p>
<p><strong>注意：由于hexo douban的简写也是hexo d，与hexo deploy的简写指令hexo d冲突，因此在进行二者部署的时候，只能都打全名而不能打简写形式</strong>。</p>
<blockquote>
<ul>
<li>在0.x.x版本中，文章的更新和豆瓣页面的爬取操作是绑定在一起的，无法支持单独更新文章或者单独爬取文章。</li>
<li>在1.x.x版本中，使用hexo douban命令即可生成指定页面，如果不加参数，那么默认参数为-bgm。如果配置了builtin参数为true，那么除了可以使用hexo douban命令之外，hexo g或hexo s也内嵌了生成页面的功能。因此，还是按照<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>就可以。</li>
</ul>
</blockquote>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>上面都没问题之后，我们只需要在站点目录下测试<code>http://localhost:4000/books</code>或者<code>http://localhost:4000/movies</code>等，如果看到页面了就说明成功了。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>如果上述都没有问题，我们就可以在菜单栏中添加按钮了，打开主题配置文件<code>_config.yml</code>，找到菜单按钮，添加下面内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  movies: &#x2F;movies&#x2F; || film</span><br><span class="line">  books: &#x2F;books&#x2F; || book</span><br></pre></td></tr></table></figure>

<p>然后在<code>next/language/zh-CN.yml</code>文件中添加对应的中文参数信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  movies: 观影</span><br><span class="line">  books: 阅读</span><br></pre></td></tr></table></figure>

<p>至此，我们就完成了豆瓣读书页面的添加。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://bestzuo.cn/posts/hexo-douban.html" target="_blank" rel="noopener external nofollow noreferrer">在Hexo博客中加入豆瓣读书页面</a></li>
<li><a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener external nofollow noreferrer">hexo-douban</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数args与kwargs的用法</title>
    <url>/archives/27d1188f.html</url>
    <content><![CDATA[<h2 id="表达式"><a href="#表达式" class="headerlink" title="*表达式"></a>*表达式</h2><p>在讨论<code>*args</code>和<code>**kwargs</code>之前，我们需要先介绍一下Python中的<code>*表达式</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_info = (<span class="string">'snowball'</span>, <span class="string">'USTC'</span>, <span class="string">'183xxxx1966'</span>, <span class="string">'188xxxx7604'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name, school, *phone_number = user_info</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">'snowball'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>school</span><br><span class="line"><span class="string">'USTC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>phone_number</span><br><span class="line">[<span class="string">'183xxxx1966'</span>, <span class="string">'188xxxx7604'</span>]</span><br></pre></td></tr></table></figure>

<p><code>*phone_number</code>表示的是一个列表，它将存储元组中剩下的所有元素。即使元组中剩下元素的个数为0，代码也不会报错，因为此时<code>*表达式</code>所对应的是一个空列表。</p>
<a id="more"></a>

<h2 id="args和-kwargs"><a href="#args和-kwargs" class="headerlink" title="*args和**kwargs"></a><code>*args</code>和<code>**kwargs</code></h2><p><code>*args</code>和<code>**kwargs</code>的写法只是约定俗称的，我们完全可以按照自己的喜好来给参数变量命名，例如<code>*var</code>和<code>**vars</code>。</p>
<p><code>*args</code>和<code>**kwargs</code>都主要用于函数定义，表示的是可将不定数量的参数传递给一个函数。这里不定数量的含义是指，我们预先并不清楚，函数的使用者究竟会传递多少个参数给函数。这时，使用<code>*args</code>和<code>**kwargs</code>将会帮助我们处理这种情况。</p>
<h3 id="args的用法"><a href="#args的用法" class="headerlink" title="*args的用法"></a><code>*args</code>的用法</h3><p><code>*args</code>用来向函数传递一个<strong>非键值对的可变长度的参数列表</strong>。</p>
<h3 id="kwargs的用法"><a href="#kwargs的用法" class="headerlink" title="**kwargs的用法"></a><code>**kwargs</code>的用法</h3><p><code>**kwargs</code>中的kw的含义是key-word pairs，也就是键值对。<code>**kwargs</code>用来向函数传递一个<strong>不定长度的键值对</strong>。如果我们想要我们的函数能够处理带名字的参数，我们应该使用<code>**kwargs</code>。</p>
<p>注意：当我们同时使用<code>*args</code>和<code>**kwargs</code>时，<code>*args</code>参数必须要在<code>**kwargs</code>前。</p>
<h3 id="一个小例子"><a href="#一个小例子" class="headerlink" title="一个小例子"></a>一个小例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'args='</span>, args)</span><br><span class="line">    print(<span class="string">'kwargs='</span>,kwargs)</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,A=<span class="string">'a'</span>,B=<span class="string">'b'</span>,C=<span class="string">'c'</span>,D=<span class="string">'d'</span>)</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">args&#x3D; (1, 2, 3, 4)</span><br><span class="line">kwargs&#x3D; &#123;&#39;A&#39;: &#39;a&#39;, &#39;B&#39;: &#39;b&#39;, &#39;C&#39;: &#39;c&#39;, &#39;D&#39;: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://wangjieqiang.com/2018/04/30/%E7%90%86%E8%A7%A3Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0-args%E5%92%8C-kwargs/" target="_blank" rel="noopener external nofollow noreferrer">理解Python函数参数<em>args和*</em>kwargs</a></li>
<li><a href="https://blog.csdn.net/u010758410/article/details/71727822" target="_blank" rel="noopener external nofollow noreferrer">Python函数args与kwargs的用法</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>美女猜硬币</title>
    <url>/archives/e69ee20f.html</url>
    <content><![CDATA[<p>你在酒吧独自喝闷酒，旁边来了个美女，手里拿两个硬币，要你陪她玩这么个游戏: </p>
<p>每人一个硬币，每次两人一起给出正反面 </p>
<p>如果: </p>
<ol>
<li>两个正面，你赢 3 块钱 </li>
<li>两个反面，你赢 1 块钱 </li>
<li>一正一反，你输 2 块钱 </li>
</ol>
<p>那么是不是又不花钱，还有美女陪你玩挺不错的？那么作为一个守财如命的小青年，我是应该跟美女玩，还是不玩呢？</p>
<a id="more"></a>

<h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p>现在我们假设：</p>
<ul>
<li>你出正面的概率是X，那么反面的概率是1-X；</li>
<li>美女出正面的概率是Y，那么反面的概率是1-Y</li>
</ul>
<p>赢的概率乘以赢的金额，等于赢的预期，而你赢美女的预期公式就是，<code>你赢的预期-美女的赢的预期</code>。</p>
<p>下面我们分别算出你和美女的预期。只要哪一方的概率高出哪一方，那么谁就可以赢：</p>
<ul>
<li>你的盈利是3块和1块两种，概率也有两组“双正面3(XY)，或者双反面1(1-x)(1-Y)”<ul>
<li>你的赢面 = 3(XY)+1(1-x)(1-Y)</li>
</ul>
</li>
<li>美女的盈利是2块和2块，概率也有两组“正面+反面”2X(1-Y)，或者“反面+正面”2Y(1-X)：<ul>
<li>美女的赢面 = 2X(1-Y)+2Y(1-X)</li>
</ul>
</li>
</ul>
<p>你的赢面-美女的赢面，等于你的赢面。</p>
<p>3(XY)+1(1-x)(1-Y) - 2X(1-Y)+2Y(1-X)</p>
<p>经过展开，最后公式可以简化为：</p>
<p>8XY-3X-3Y+1</p>
<p>注意，既然XY都是概率，那么他们的数值就是介于0-1之间。<strong>如果你的赢面预期&lt;0（就是前面的减法），那么你就是一直输钱的</strong>。</p>
<p>这个美女就在想，<strong>我需要调整Y的概率，让你不管是出正面还是反面，都是输钱，也就是让你期望值小于0</strong>。</p>
<p>我们可以将最后公式中的Y（女人的概率）提取出来：</p>
<p>(8X-3)Y - 3X+1 &lt; 0</p>
<p>只要这个不等式小于0，那美女就可以一直赢！</p>
<p>这时候问题就很简单了，只要(8X-3)Y &lt; 3X+1，小数减大数，永远是负数，不会大于0。</p>
<p>结果是当Y处于“1/3到2/5”之间的时候，男人的期望值都是负数。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://bihu.com/article/1845835271" target="_blank" rel="noopener external nofollow noreferrer">非理性行为—和美女猜硬币怎么样才能一直赢</a></li>
</ul>
]]></content>
      <categories>
        <category>统计</category>
        <category>概率</category>
      </categories>
      <tags>
        <tag>概率</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages绑定域名</title>
    <url>/archives/b48e2719.html</url>
    <content><![CDATA[<h2 id="域名选购"><a href="#域名选购" class="headerlink" title="域名选购"></a>域名选购</h2><p>域名注册商有很多，国内的万网，国外的GoDaddy等等。区别在于国内域名注册后需要备案，因为政策因素也可能随时被停用，相对的，国外注册域名在交流和沟通方面不如国内方便，而因为没有国内的政策限制，域名注册商通常会给予用户域名的完全控制权与转移权，在安全性方面可能比国内稍差。</p>
<p>本站域名申请使用国外域名平台Namesilo，是目前价格较便宜的域名平台，支持支付宝、Paypal、Visa等多种付款方式，提供免费的域名隐私保护，性价比较高，用户评价也不错。</p>
<a id="more"></a>

<h2 id="NS修改"><a href="#NS修改" class="headerlink" title="NS修改"></a>NS修改</h2><p>国外的域名使用默认的域名服务器（NS）解析可能较慢，网上很多人推荐转到DNSPod，也就是说指派DNSPod进行域名的解析工作。</p>
<h3 id="1、注册DNSPod账号"><a href="#1、注册DNSPod账号" class="headerlink" title="1、注册DNSPod账号"></a>1、注册DNSPod账号</h3><p>在DNSPod官网注册账号，在域名解析页面选择添加域名，添加已购买的域名。</p>
<img src="/archives/b48e2719/1.png" class="" title="图1">

<p>完成后点击查看，DNSPod提供两条默认的NS记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f1g1ns1.dnspod.net</span><br><span class="line">f1g1ns2.dnspod.net</span><br></pre></td></tr></table></figure>

<img src="/archives/b48e2719/2.png" class="" title="图2">

<h3 id="2、修改Namesilo中NS记录"><a href="#2、修改Namesilo中NS记录" class="headerlink" title="2、修改Namesilo中NS记录"></a>2、修改Namesilo中NS记录</h3><p>登录Namesilo，选择Manage My Domains，进入域名管理页面。勾选你的域名，点击选项栏中的Change Nameservers。</p>
<img src="/archives/b48e2719/3.png" class="" title="图3">

<p>将NS1，NS2改为DNSPod提供的两条NS记录，删除第三条NS记录，点击提交。</p>
<img src="/archives/b48e2719/4.png" class="" title="图4">

<p>NS的修改需要一段时间，一般最长48小时生效，个人情况来看，10分钟左右即可完成更改。</p>
<img src="/archives/b48e2719/5.png" class="" title="图5">

<img src="/archives/b48e2719/6.png" class="" title="图6">

<h3 id="3、DNSPod解析服务"><a href="#3、DNSPod解析服务" class="headerlink" title="3、DNSPod解析服务"></a>3、DNSPod解析服务</h3><blockquote>
<p>自 2018 年 5 月 1 日，Github 支持自定义域名的 HTTPS 请求了。</p>
<p>配置也相当简单，只需要更新 DNS 配置里的 A 记录，将其指向以下4个 IP 地址中的至少一个。</p>
<ul>
<li>185.199.108.153</li>
<li>185.199.109.153</li>
<li>185.199.110.153</li>
<li>185.199.111.153</li>
</ul>
<p>HTTPS 让你的网站和网站访客更安全，并且 Github 提供的这些 IP 地址自动将你的站点加入了 CDN，提高了访问速度。你还可以在 GiHub Pages 仓库的设置里勾选 ‘Enforce HTTPS’，这样所有访问你站点的请求都会走 HTTPS。</p>
</blockquote>
<p>下面我们添加三个数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ A 185.199.108.153</span><br><span class="line">@ A 185.199.109.153</span><br><span class="line">www CNAME username.github.io</span><br></pre></td></tr></table></figure>

<img src="/archives/b48e2719/7.png" class="" title="图7">

<p>其中 <code>185.199.108.153</code> 和 <code>185.199.109.153</code> 都是 GitHub 的地址。</p>
<p>上述设置的解释：</p>
<ul>
<li>设置 A 记录的意思是，当我输入 <code>tding.top</code> 这个域名的时候，访问的是 <code>185.199.108.153</code> 这个地址；</li>
<li>设置 CNAME 的意思是，当我访问 <code>dta0502.github.io</code> 这个地址的时候，会跳转到 <code>tding.top</code>，之后的过程就和 A 记录相同了，即访问 <code>185.199.108.153</code>。</li>
</ul>
<h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><p>在Hexo本地目录中的source文件夹里，添加一个命名为CNAME的无后缀文件，文件中的填写你的域名。</p>
<p>如果你想让地址栏的域名显示www前缀就输入<code>www.xxxxx.com</code>，否则输入<code>xxxxx.com</code>即可。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tding.top</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="Github-Pages对自定义域上Https"><a href="#Github-Pages对自定义域上Https" class="headerlink" title="Github Pages对自定义域上Https"></a>Github Pages对自定义域上Https</h2><p>然后我们在 Github Pages 项目中 Settings 选项卡 Github Pages 选项：在 Custom domain 添加你的自定义域名。 </p>
<blockquote>
<p>例如我配置apex domain「tding.top」点击 save 保存 </p>
</blockquote>
<p>刷新页面 如果能勾选 Enforce HTTPS 即完成。</p>
<img src="/archives/b48e2719/8.png" class="" title="图8">

<p>现在，我们就可以通过https访问自定义域了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://indexmoon.com/articles/1318032967/" target="_blank" rel="noopener external nofollow noreferrer">Hexo基础教程(二)：个人域名绑定</a></li>
<li><a href="https://www.zhihu.com/question/31377141/answer/103056861" target="_blank" rel="noopener external nofollow noreferrer">github怎么绑定自己的域名？</a></li>
<li><a href="http://cps.ninja/2016/10/09/customize-your-blog-domain/" target="_blank" rel="noopener external nofollow noreferrer">为 Github 上的 Hexo 博客绑定个性域名</a></li>
<li><a href="https://help.github.com/cn/articles/troubleshooting-custom-domains" target="_blank" rel="noopener external nofollow noreferrer">自定义域故障排除</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT(v7.0+)主题配置</title>
    <url>/archives/42c38b10.html</url>
    <content><![CDATA[<p><strong>写在前面：本文配置适用于NexT-7.1.2，现在（2020年1月13日）NexT主题已经更新至7.7.0，不少配置已经改变，大家可以结合一下这两篇文章：<a href="https://tding.top/archives/2bd6d82.html">Hexo-NexT 版本更新记录</a>、<a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a></strong>。</p>
<a id="more"></a>

<h2 id="一、获取NexT"><a href="#一、获取NexT" class="headerlink" title="一、获取NexT"></a>一、获取NexT</h2><h3 id="1、下载最新-release-版本"><a href="#1、下载最新-release-版本" class="headerlink" title="1、下载最新 release 版本"></a>1、下载<a href="https://github.com/theme-next/hexo-theme-next/releases/latest" target="_blank" rel="noopener external nofollow noreferrer">最新 release 版本</a></h3><p>通常情况下请选择 stable 版本。推荐不熟悉的用户按此方式进行。</p>
<p>这种方式将仅提供最新的 release 版本（其中不附带 <code>.git</code> 目录）。因此，你无法通过 git 更新这一方式安装的主题。</p>
<blockquote>
<p><strong>更新：推荐使用独立的配置文件（数据文件）而不在主题源代码进行更改，便于后续的更新（下载最新版本，替换掉旧版本）</strong>。</p>
</blockquote>
<h2 id="二、站点配置"><a href="#二、站点配置" class="headerlink" title="二、站点配置"></a>二、站点配置</h2><h3 id="1、设置hexo的next主题"><a href="#1、设置hexo的next主题" class="headerlink" title="1、设置hexo的next主题"></a>1、设置hexo的next主题</h3><p>我们在站点的配置文件<code>_config.yml</code>中找到theme后添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span>  <span class="comment"># 配置成刚下载的next主题</span></span><br></pre></td></tr></table></figure>

<h3 id="2、配置hexo网站相关信息"><a href="#2、配置hexo网站相关信息" class="headerlink" title="2、配置hexo网站相关信息"></a>2、配置hexo网站相关信息</h3><p>我们在站点的配置文件<code>_config.yml</code>中，修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span>          <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span>       <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span>    <span class="comment"># 描述，介绍网站的</span></span><br><span class="line"><span class="attr">keywords:</span>       <span class="comment"># 网站的关键字</span></span><br><span class="line"><span class="attr">author:</span>         <span class="comment"># 博主姓名</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 语言：zh-CN 是简体中文</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">UTC</span>   <span class="comment"># 时区</span></span><br></pre></td></tr></table></figure>

<p>注意：博客框架默认的语言是英文，我们需要到<code>/themes/next/languages</code>目录下，查看当前NexT版本简体中文对照文件的名称是<code>zh-Hans</code>还是<code>zh-CN</code>。这里是<code>zh-CN</code>。</p>
<h3 id="3、设置hexo永久链接"><a href="#3、设置hexo永久链接" class="headerlink" title="3、设置hexo永久链接"></a>3、设置hexo永久链接</h3><p>我们在站点的配置文件<code>_config.yml</code>中，修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://tding.top/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure>

<p>注：这个文章永久链接设置需要安装插件，详细安装配置过程见：<a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a>中的<strong>Hexo 文章永久链接插件</strong>。</p>
<h3 id="4、nofollow标签的使用"><a href="#4、nofollow标签的使用" class="headerlink" title="4、nofollow标签的使用"></a>4、nofollow标签的使用</h3><p>减少出站链接能够有效防止权重分散，hexo有很方便的自动为出站链接添加<code>nofollow</code>标签的插件。</p>
<p>首先安装<code>hexo-filter-nofollow</code>插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure>

<p>然后我们在站点的配置文件<code>_config.yml</code>中添加配置，将<code>nofollow</code>设置为<code>true</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 外部链接优化</span></span><br><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'exclude1.com'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'exclude2.com'</span></span><br></pre></td></tr></table></figure>

<p>其中<code>exclude</code>（例外的链接，比如友链）将不会被加上<code>nofollow</code>属性。 </p>
<h2 id="三、主题配置"><a href="#三、主题配置" class="headerlink" title="三、主题配置"></a>三、主题配置</h2><h3 id="1、配置hexo中的about、tag、categories、sitemap菜单"><a href="#1、配置hexo中的about、tag、categories、sitemap菜单" class="headerlink" title="1、配置hexo中的about、tag、categories、sitemap菜单"></a>1、配置hexo中的about、tag、categories、sitemap菜单</h3><p>默认的主题配置文件<code>_config.yml</code>中，菜单只开启了首页和归档，我们根据需要，可以添加about、tag、categories、sitemap等菜单，所以把它们也取消注释。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 菜单设置为 菜单名: /菜单目录 || 菜单图标名字</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">sitemap</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">/404/</span> <span class="string">||</span> <span class="string">heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span>   <span class="comment"># 显示图标</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span>  <span class="comment"># 显示统计信息</span></span><br></pre></td></tr></table></figure>

<p>注：hexo所有图标均来自fontawesome，其中<code>||</code>后面是你想要设置的图标的名字。</p>
<h3 id="2、手动生成hexo菜单对应文件"><a href="#2、手动生成hexo菜单对应文件" class="headerlink" title="2、手动生成hexo菜单对应文件"></a>2、手动生成hexo菜单对应文件</h3><p>新菜单开启后是没有对应文件的，所以要手动生成about、tags、categories、404页面。</p>
<h4 id="新建about页面"><a href="#新建about页面" class="headerlink" title="新建about页面"></a>新建about页面</h4><p><code>about</code>页面一般用来介绍站点信息和博主信息。</p>
<p>我们可以在博客根目录下输入以下命令新建页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<p>然后你会发现多了一个<code>hexo/source/about</code>文件夹，里面有一个<code>index.md</code>文件，你可以根据自己的需要在这个Markdown文件中写一些内容（同文章一样，用Markdown语法）。</p>
<h4 id="新建一个tags页面"><a href="#新建一个tags页面" class="headerlink" title="新建一个tags页面"></a>新建一个tags页面</h4><p>同样的，我们可以新建<code>tags</code>页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>在<code>tags</code>页面文件<code>hexo/source/tags/index.md</code>的头部修改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-06</span><span class="number">-29</span> <span class="number">11</span><span class="string">:35:42</span>   <span class="comment"># 时间随意</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span>                <span class="comment"># 类型一定要为tags</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span>             <span class="comment"># 提示这个页面不需要加载评论</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="新建一个categories页面"><a href="#新建一个categories页面" class="headerlink" title="新建一个categories页面"></a>新建一个categories页面</h4><p>同样的，我们可以新建<code>categories</code>页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>在<code>categories</code>页面文件<code>hexo/source/categories/index.md</code>的头部修改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-10</span><span class="number">-15</span> <span class="number">00</span><span class="string">:03:57</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="新建一个404页面"><a href="#新建一个404页面" class="headerlink" title="新建一个404页面"></a>新建一个404页面</h4><p>这里我们将404替换成腾讯的公益页面。</p>
<p>首先我们在<code>hexo/source</code>目录下创建自己的<code>404.html</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span> <span class="attr">homePageName</span>=<span class="string">"返回"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：Hexo博客的基本内容是一些Markdown文件，放在<code>source/_post</code>文件夹下，每个文件对应一篇文章。除此之外，放在source文件夹下的所有开头不是下划线的文件，在<code>hexo generate</code>的时候，都会被拷贝到public文件夹下。但是，<strong>Hexo默认会渲染所有的HTML和Markdown文件</strong>。</p>
</blockquote>
<p>因此我们可以简单地在文件开头加上<code>layout: false</code>一行来避免渲染：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+layout: false</span></span><br><span class="line"><span class="addition">+---</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset="UTF-8"&gt;</span><br><span class="line">        &lt;title&gt;404&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script type="text/javascript" src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="返回"&gt;&lt;/script&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>这样我们就完成了404页面的创建。</p>
<p>注意：本地测试不出来，发布出来就可以了。</p>
<h3 id="3、配置hexo本地搜索"><a href="#3、配置hexo本地搜索" class="headerlink" title="3、配置hexo本地搜索"></a>3、配置hexo本地搜索</h3><h4 id="本地搜索的原理"><a href="#本地搜索的原理" class="headerlink" title="本地搜索的原理"></a>本地搜索的原理</h4><p>对于动态网站来说，可以通过php实现。但是，Hexo博客是静态网站，用不了php。</p>
<p>NexT主题已经实现这个功能，它用了Hexo的拓展包 <code>hexo-generator-searchdb</code>，预先生成了一个文本库 <code>search.xml</code>，然后传到了网站里面。在本地搜索的时候，NexT直接用javascript调用了这个文件，从而实现了静态网站的本地搜索。</p>
<h4 id="设置过程"><a href="#设置过程" class="headerlink" title="设置过程"></a>设置过程</h4><p>安装插件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>然后我们修改站点配置<code>_config.yml</code>文件，添加如下内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<ul>
<li>path：索引文件的路径，相对于站点根目录</li>
<li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li>
<li>limit：限制搜索的条目数</li>
</ul>
<p>然后修改主题配置文件<code>_config.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="4、设置hexo中的rss订阅"><a href="#4、设置hexo中的rss订阅" class="headerlink" title="4、设置hexo中的rss订阅"></a>4、设置hexo中的rss订阅</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件<code>_config.yml</code>中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure>


<h3 id="5、配置hexo站点的footer信息"><a href="#5、配置hexo站点的footer信息" class="headerlink" title="5、配置hexo站点的footer信息"></a>5、配置hexo站点的footer信息</h3><p>底部<code>footer</code>可以开关显示hexo信息、theme信息、建站时间等个性化配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2018</span>        <span class="comment"># 建站开始时间</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user</span>       <span class="comment"># 设置 建站初始时间和至今时间中间的图标，默认是一个'小人像'，更改user为heart可以变成一个心</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">"#808080"</span> <span class="comment"># 更改图标的颜色，红色为'#ff0000'</span></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>     <span class="comment"># 开启hexo驱动</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">true</span>    <span class="comment"># 开启hexo版本号</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>     <span class="comment"># 开启主题驱动</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">true</span>    <span class="comment"># 开启主题版本号</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">Hosted</span> <span class="string">by</span> <span class="string">&lt;a</span> <span class="string">target="_blank"</span> <span class="string">rel="external</span> <span class="string">nofollow"</span> <span class="string">href="https://pages.coding.me"&gt;&lt;b&gt;Coding</span> <span class="string">Pages&lt;/b&gt;&lt;/a&gt;</span> <span class="comment"># 这里的底部标识是为了添加coding page服务时的版权声明 打开注释就可以看到底部有一个 hosted by coding pages</span></span><br></pre></td></tr></table></figure>

<h3 id="6、配置hexo中next主题样式选择"><a href="#6、配置hexo中next主题样式选择" class="headerlink" title="6、配置hexo中next主题样式选择"></a>6、配置hexo中next主题样式选择</h3><p>NexT一共提供了4种首页样式，按照自己喜好选择一个，选择一个其他主题样式后其他的主题前一定要加上注释<code>#</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h3 id="7、头像信息设置"><a href="#7、头像信息设置" class="headerlink" title="7、头像信息设置"></a>7、头像信息设置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span>  <span class="comment"># 设置头像资源的位置</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>            <span class="comment"># 开启圆形头像</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span>               <span class="comment"># 不透明的比例：0就是完全透明</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span>           <span class="comment"># 不开启旋转</span></span><br></pre></td></tr></table></figure>

<h3 id="8、社交信息和友链配置"><a href="#8、社交信息和友链配置" class="headerlink" title="8、社交信息和友链配置"></a>8、社交信息和友链配置</h3><p>这里和菜单设置格式一样，<code>社交名字: 社交url || 社交图标</code>，图标信息来自<a href="https://fontawesome.com/v4.7.0/icons" target="_blank" rel="noopener external nofollow noreferrer">fontawesome</a>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span> </span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:yourname@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="attr">Google:</span> <span class="string">https://plus.google.com/yourname</span> <span class="string">||</span> <span class="string">google</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>      <span class="comment"># 显示社交图标</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span> <span class="comment"># 只显示图标，不显示文字</span></span><br></pre></td></tr></table></figure>

<p>友链配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span>          <span class="comment"># 友链的图标 参考上文</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span>        <span class="comment"># 友链的title  比如你可以更改为 友情链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">block</span>       <span class="comment"># 友链摆放的样式：按块（一行一个）</span></span><br><span class="line"><span class="comment">#links_layout: inline     # 友链摆放的样式：按线摆放（一行很多个），注意，同时只能一种样式</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">Title:</span> <span class="string">http://example.com/</span>  <span class="comment"># 友链的地址</span></span><br></pre></td></tr></table></figure>

<p><strong>官方提供的友链放在侧边栏下面，视觉上比较臃肿。这里我新建了一个友链页面：<a href="https://tding.top/about/links.html">友情链接</a>，设置教程见：<a href="https://tding.top/archives/73ce4e7.html">Hexo-NexT 新增友链</a>。</strong></p>
<h3 id="9、首页文章不展示全文显示摘要"><a href="#9、首页文章不展示全文显示摘要" class="headerlink" title="9、首页文章不展示全文显示摘要"></a>9、首页文章不展示全文显示摘要</h3><p>我们可以在主题配置文件中设置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scroll_to_more:</span> <span class="literal">true</span>      <span class="comment"># 点击阅读全文后是否跳到&lt;!--more--&gt;标记处,设为false时点击阅读全文可以从头阅读</span></span><br><span class="line"></span><br><span class="line"><span class="attr">save_scroll:</span> <span class="literal">false</span>        <span class="comment"># 自动保存每篇文章或页面上一次滚动的地方</span></span><br><span class="line"></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span> <span class="comment"># 自动在首页对文章进行摘要描述作为前言文本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">auto_excerpt:</span>   <span class="comment"># 是否自动截取摘要</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 设置为true则自动截取150字当做首页摘要</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span>   <span class="comment"># 自动截取的字数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>官方公告：<code>auto_excerpt</code>可以自动截断文章内容作为摘要。此功能不是一个 Hexo 主题应当负责的，这为主题的维护者带来了太大压力。自 7.6.0 版本开始，此功能被移除，请自行安装第三方插件，或阅读 Hexo 有关文档。当然，我们仍然建议通过<code>&lt;!-- more --&gt;</code>来精确控制 Read More 的位置。</p>
</blockquote>
<p><strong>因此，这个功能在新版的NexT已经被废弃了，大家可以直接在文章中添加<code>&lt;!-- more --&gt;</code>来精确控制摘要内容</strong>。</p>
<h3 id="10、首页文章属性"><a href="#10、首页文章属性" class="headerlink" title="10、首页文章属性"></a>10、首页文章属性</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">false</span>    <span class="comment"># 设为true 可以一行显示，文章的所有属性</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span>    <span class="comment"># 显示创建时间</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>     <span class="comment"># 显示修改的时间</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span> <span class="comment"># 设true时，如果创建时间和修改时间一样则显示一个时间</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span>    <span class="comment"># 显示分类信息</span></span><br></pre></td></tr></table></figure>

<h3 id="11、页面阅读统计"><a href="#11、页面阅读统计" class="headerlink" title="11、页面阅读统计"></a>11、页面阅读统计</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>              <span class="comment"># 设true 开启</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span>       <span class="comment"># 总阅读人数（uv数）</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span>  <span class="comment"># 阅读总人数的图标</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span>          <span class="comment"># 总阅读次数（pv数）</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span>      <span class="comment"># 阅读总次数的图标</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span>           <span class="comment"># 开启内容阅读次数</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span>       <span class="comment"># 内容页阅读数的图标</span></span><br></pre></td></tr></table></figure>

<h3 id="12、字数统计、阅读时长"><a href="#12、字数统计、阅读时长" class="headerlink" title="12、字数统计、阅读时长"></a>12、字数统计、阅读时长</h3><p>首先安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>主题配置文件<code>_config.yml</code>修改如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>  <span class="comment"># false会显示一行</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>  <span class="comment"># 显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span> <span class="comment"># 底部footer是否显示字数统计属性文字</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                <span class="comment"># 计算字数的一个设置,没设置过</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>              <span class="comment"># 一分钟阅读的字数</span></span><br></pre></td></tr></table></figure>

<p>站点配置文件<code>_config.yml</code>新增如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"> <span class="comment">#文章内是否显示</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line"> <span class="comment"># 网页底部是否显示</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="13、内容页里的代码块新增复制按钮"><a href="#13、内容页里的代码块新增复制按钮" class="headerlink" title="13、内容页里的代码块新增复制按钮"></a>13、内容页里的代码块新增复制按钮</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span>      <span class="comment"># 增加复制按钮的开关</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">false</span> <span class="comment"># 点击复制完后是否显示 复制成功 结果提示</span></span><br></pre></td></tr></table></figure>

<h3 id="14、配置微信-支付宝打赏"><a href="#14、配置微信-支付宝打赏" class="headerlink" title="14、配置微信,支付宝打赏"></a>14、配置微信,支付宝打赏</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="attr">reward_comment:</span>                   <span class="comment"># 打赏描述</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span>  <span class="comment"># 微信支付的二维码图片地址</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.png</span>        <span class="comment"># 支付宝的地址</span></span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png     # 比特币地址</span></span><br></pre></td></tr></table></figure>

<h3 id="15、相关文章推荐"><a href="#15、相关文章推荐" class="headerlink" title="15、相关文章推荐"></a>15、相关文章推荐</h3><p>安装推荐文章的插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>

<p>主题配置信息如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">相关文章推荐</span>      <span class="comment"># 属性的命名</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span> <span class="comment"># false代表首页不显示</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span>          <span class="comment"># 最多5条</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0   # 相关度</span></span><br><span class="line">    <span class="comment">#isDate: true        # 是否显示日期</span></span><br><span class="line">    <span class="comment">#isImage: false      # 是否显示配图</span></span><br><span class="line">    <span class="attr">isExcerpt:</span> <span class="literal">false</span>     <span class="comment"># 是否显示摘要</span></span><br></pre></td></tr></table></figure>

<h3 id="16、文章原创申明"><a href="#16、文章原创申明" class="headerlink" title="16、文章原创申明"></a>16、文章原创申明</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span>       <span class="comment"># 默认显示版权信息</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>

<h3 id="17、背景动画设置"><a href="#17、背景动画设置" class="headerlink" title="17、背景动画设置"></a>17、背景动画设置</h3><h4 id="Canvas-nest风格"><a href="#Canvas-nest风格" class="headerlink" title="Canvas-nest风格"></a>Canvas-nest风格</h4><p>进入<code>theme/next</code>目录，执行命令： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<p>实际上就是将一个显示动效的js文件clone到对应目录。</p>
<p>这时将配置文件<code>_config.yml</code>中的<code>canvas_nest: false</code>改为<code>canvas_nest: true</code>才能真正生效。</p>
<p><strong>个人认为在站点中添加动态背景并没有实际的意义，只会凭空增加页面内存占用及 CPU 消耗</strong>。</p>
<h3 id="18、添加Google统计"><a href="#18、添加Google统计" class="headerlink" title="18、添加Google统计"></a>18、添加Google统计</h3><p>访问Google Analytics，按照提示填写网站信息开通GA服务，获取统计ID。</p>
<p>然后编辑主题配置文件<code>_config.yml</code>，找到关键字<code>google_analytics</code>，删除注释<code>#</code>并填写获取到的统计ID：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line">  <span class="attr">tracking_id:</span> </span><br><span class="line">  <span class="attr">localhost_ignored:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="19、Google-Search-Console"><a href="#19、Google-Search-Console" class="headerlink" title="19、Google Search Console"></a>19、Google Search Console</h3><p>该版本已经集成了HTML标记的验证方式。</p>
<ul>
<li>查看原标记，将其中content字段引号内的内容拷贝出来</li>
<li>修改主题配置文件<code>_config.yml</code>。搜索<code>google_site_verification</code>，将上述拷贝的内容复制在该值后面：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">uW8bwgMGUwIA01nPfItoty1rmtmmuVkOVTeS9O0nAUg</span></span><br></pre></td></tr></table></figure>

<h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><ul>
<li><a href="https://dangbowen.com/hexo/ad0bedc4.html" target="_blank" rel="noopener external nofollow noreferrer">30分钟快速搭建hexo3.7.0 + next主题6.4教程(持续更新最新版)</a></li>
<li><a href="https://blog.csdn.net/weixin_39345384/article/details/80785373" target="_blank" rel="noopener external nofollow noreferrer">Hexo框架下用NexT(v7.0+)主题美化博客</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下软件安装和卸载总结</title>
    <url>/archives/8f40be05.html</url>
    <content><![CDATA[<p>本文主要记录Ubuntu下软件的最佳安装和卸载命令。</p>
<a id="more"></a>

<h2 id="一、命令"><a href="#一、命令" class="headerlink" title="一、命令"></a>一、命令</h2><h3 id="1、最佳卸载命令"><a href="#1、最佳卸载命令" class="headerlink" title="1、最佳卸载命令"></a>1、最佳卸载命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get remove packagename --purge &amp;&amp; apt-get autoremove --purge &amp;&amp; apt-get clean</span><br></pre></td></tr></table></figure>

<p>卸载程序(包括配置文件)、卸载依赖、删除/var/cache/apt/archives下所有安装包</p>
<h3 id="2、最佳升级软件命令"><a href="#2、最佳升级软件命令" class="headerlink" title="2、最佳升级软件命令"></a>2、最佳升级软件命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure>

<h2 id="二、扩展知识"><a href="#二、扩展知识" class="headerlink" title="二、扩展知识"></a>二、扩展知识</h2><h3 id="1、apt常用命令"><a href="#1、apt常用命令" class="headerlink" title="1、apt常用命令"></a>1、apt常用命令</h3><ul>
<li><code>apt-cache show packagename</code> 获取包的相关信息，如说明、大小、版本等</li>
<li><code>apt-cache depends packagename</code> 了解使用依赖</li>
<li><code>apt-cache rdepends packagename</code> 是查看该包被哪些包依赖</li>
<li><code>apt-get install packagename</code> 安装包</li>
<li><code>apt-get install package=version</code> 指定安装版本</li>
<li><code>apt-get install packagename --reinstall</code> 重新安装包</li>
<li><code>apt-get remove packagename --purge</code> 卸载程序，包括删除配置文件等</li>
<li><code>apt-get update</code> 更新源,更新 <code>/etc/apt/sources.list</code> 里的链接地址</li>
<li><code>apt-get upgrade -u</code> 升级程序(不包括依赖关系改变的) -u 完整显示列表</li>
<li><code>apt-get dist-upgrade</code> 升级程序(包括依赖关系改变的并且重新组织依赖关系)</li>
<li><code>apt-get clean</code> 删除安装包(节约硬盘空间,下次安装需要重新下载包，软件包位置：<code>/var/cache/apt/archives/</code>)</li>
<li><code>apt-get autoclean</code> 删除已卸载的安装包(Ubuntu14.04测试发现没起作用)</li>
<li><code>apt-get autoremove</code> 卸载依赖的程序</li>
</ul>
<h3 id="2、apt-get-安装位置"><a href="#2、apt-get-安装位置" class="headerlink" title="2、apt-get 安装位置"></a>2、apt-get 安装位置</h3><ul>
<li>下载的软件存放位置 <code>/var/cache/apt/archives</code></li>
<li>安装后软件默认位置 <code>/usr/share</code></li>
<li>可执行文件位置 <code>/usr/bin</code></li>
<li>lib文件位置 <code>/usr/lib</code></li>
</ul>
<h3 id="3、Linux-常用目录"><a href="#3、Linux-常用目录" class="headerlink" title="3、Linux 常用目录"></a>3、Linux 常用目录</h3><ul>
<li><code>/boot</code> 引导程序，内核等存放的目录</li>
<li><code>/sbin</code> 超级用户可以使用的命令的目录</li>
<li><code>/bin</code> 普通用户使用的命令</li>
<li><code>/lib</code> 共享库目录</li>
<li><code>/dev</code> 设备目录</li>
<li><code>/root</code> 用户root的home目录</li>
<li><code>/etc</code> 全局配置文件目录</li>
<li><code>/usr</code> 用户安装目录</li>
<li><code>/usr/include</code> C程序语言编译使用的头文件</li>
<li><code>/proc</code> 系统内部一些信息</li>
<li><code>/var</code> 经常变化目录 经常放日志文件，缓存文件</li>
<li><code>/tmp</code> 临时目录 系统断电 或许目录被会清空</li>
<li><code>/lost+found</code> 当系统崩溃的时候，在系统修复过程中需要恢复的文件，可能就会在这里被找到了，这个目录一般为空</li>
</ul>
<p>可以通过 <code>man hier</code> 详细查看目录用途，man是打开说明文档,例如：<code>man apt-get</code>查看apt-get详细说明，比help要详细</p>
<blockquote>
<p>本文转载于：<a href="http://mousycoder.com/2015/10/14/ubuntu-shell-install-uninstall/" target="_blank" rel="noopener external nofollow noreferrer">「Ubuntu命令」安装和卸载</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>正向代理、反向代理介绍</title>
    <url>/archives/c694b45.html</url>
    <content><![CDATA[<p>正向代理与反向代理的区别在于代理的对象不一样：正向代理代理的对象是客户端，反向代理代理的对象是服务端。本文对它们做一个通俗的介绍。</p>
<a id="more"></a>

<h2 id="一、正向代理"><a href="#一、正向代理" class="headerlink" title="一、正向代理"></a>一、正向代理</h2><p>A同学在大众创业、万众创新的大时代背景下开启他的创业之路，目前他遇到的最大的一个问题就是启动资金，于是他决定去找马云爸爸借钱，可想而知，最后碰一鼻子灰回来了，情急之下，他想到一个办法，找关系开后门，经过一番消息打探，原来A同学的大学老师王老师是马云的同学，于是A同学找到王老师，托王老师帮忙去马云那借500万过来，当然最后事成了。不过马云并不知道这钱是A同学借的，马云是借给王老师的，最后由王老师转交给A同学。这里的王老师在这个过程中扮演了一个非常关键的角色，就是代理，也可以说是正向代理，王老师代替A同学办这件事，这个过程中，真正借钱的人是谁，马云是不知道的，这点非常关键。</p>
<p>我们常说的代理也就是只正向代理，正向代理的过程，它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，某些科学上网工具扮演的就是典型的正向代理角色。用浏览器访问 <code>http://www.google.com</code> 时，被残忍的block，于是你可以在国外搭建一台代理服务器，让代理帮我去请求<code>google.com</code>，代理把请求返回的相应结构再返回给我。</p>
<img src="/archives/c694b45/1.jpg" class="" title="图1">

<h2 id="二、反向代理"><a href="#二、反向代理" class="headerlink" title="二、反向代理"></a>二、反向代理</h2><p>大家都有过这样的经历，拨打10086客服电话，可能一个地区的10086客服有几个或者几十个，你永远都不需要关心在电话那头的是哪一个，叫什么，男的，还是女的，漂亮的还是帅气的，你都不关心，你关心的是你的问题能不能得到专业的解答，你只需要拨通了10086的总机号码，电话那头总会有人会回答你，只是有时慢有时快而已。那么这里的10086总机号码就是我们说的反向代理。客户不知道真正提供服务人的是谁。</p>
<p>反向代理隐藏了真实的服务端，当我们请求 <code>www.baidu.com</code> 的时候，就像拨打10086一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，<code>www.baidu.com</code> 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx就是性能非常好的反向代理服务器，用来做负载均衡。</p>
<img src="/archives/c694b45/2.jpg" class="" title="图2">

<p><strong>两者的区别在于代理的对象不一样：正向代理代理的对象是客户端，反向代理代理的对象是服务端。</strong></p>
<blockquote>
<p>参考：<a href="https://www.zhihu.com/question/24723688/answer/128105528" target="_blank" rel="noopener external nofollow noreferrer">反向代理为何叫反向代理？</a></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>代理</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/archives/a1ede006.html</url>
    <content><![CDATA[<blockquote>
<p>本文链接：<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md</a></p>
<p>作者：CyC2018</p>
</blockquote>
<a id="more"></a>

<!-- GFM-TOC -->
<ul>
<li><a href="#一-基础概念">一 、基础概念</a><ul>
<li><a href="#web-基础">Web 基础</a></li>
<li><a href="#url">URL</a></li>
<li><a href="#请求和响应报文">请求和响应报文</a></li>
</ul>
</li>
<li><a href="#二http-方法">二、HTTP 方法</a><ul>
<li><a href="#get">GET</a></li>
<li><a href="#head">HEAD</a></li>
<li><a href="#post">POST</a></li>
<li><a href="#put">PUT</a></li>
<li><a href="#patch">PATCH</a></li>
<li><a href="#delete">DELETE</a></li>
<li><a href="#options">OPTIONS</a></li>
<li><a href="#connect">CONNECT</a></li>
<li><a href="#trace">TRACE</a></li>
</ul>
</li>
<li><a href="#三http-状态码">三、HTTP 状态码</a><ul>
<li><a href="#1xx-信息">1XX 信息</a></li>
<li><a href="#2xx-成功">2XX 成功</a></li>
<li><a href="#3xx-重定向">3XX 重定向</a></li>
<li><a href="#4xx-客户端错误">4XX 客户端错误</a></li>
<li><a href="#5xx-服务器错误">5XX 服务器错误</a></li>
</ul>
</li>
<li><a href="#四http-首部">四、HTTP 首部</a><ul>
<li><a href="#通用首部字段">通用首部字段</a></li>
<li><a href="#请求首部字段">请求首部字段</a></li>
<li><a href="#响应首部字段">响应首部字段</a></li>
<li><a href="#实体首部字段">实体首部字段</a></li>
</ul>
</li>
<li><a href="#五具体应用">五、具体应用</a><ul>
<li><a href="#cookie">Cookie</a></li>
<li><a href="#缓存">缓存</a></li>
<li><a href="#持久连接">持久连接</a></li>
<li><a href="#管线化处理">管线化处理</a></li>
<li><a href="#编码">编码</a></li>
<li><a href="#分块传输编码">分块传输编码</a></li>
<li><a href="#多部分对象集合">多部分对象集合</a></li>
<li><a href="#范围请求">范围请求</a></li>
<li><a href="#内容协商">内容协商</a></li>
<li><a href="#虚拟主机">虚拟主机</a></li>
<li><a href="#通信数据转发">通信数据转发</a></li>
</ul>
</li>
<li><a href="#六https">六、HTTPs</a><ul>
<li><a href="#加密">加密</a></li>
<li><a href="#认证">认证</a></li>
<li><a href="#完整性">完整性</a></li>
</ul>
</li>
<li><a href="#七web-攻击技术">七、Web 攻击技术</a><ul>
<li><a href="#攻击模式">攻击模式</a></li>
<li><a href="#跨站脚本攻击">跨站脚本攻击</a></li>
<li><a href="#跨站点请求伪造">跨站点请求伪造</a></li>
<li><a href="#sql-注入攻击">SQL 注入攻击</a></li>
<li><a href="#拒绝服务攻击">拒绝服务攻击</a></li>
</ul>
</li>
<li><a href="#八get-和-post-的区别">八、GET 和 POST 的区别</a><ul>
<li><a href="#参数">参数</a></li>
<li><a href="#安全">安全</a></li>
<li><a href="#幂等性">幂等性</a></li>
<li><a href="#可缓存">可缓存</a></li>
<li><a href="#xmlhttprequest">XMLHttpRequest</a></li>
</ul>
</li>
<li><a href="#九各版本比较">九、各版本比较</a><ul>
<li><a href="#http10-与-http11-的区别">HTTP/1.0 与 HTTP/1.1 的区别</a></li>
<li><a href="#http11-与-http20-的区别">HTTP/1.1 与 HTTP/2.0 的区别</a></li>
</ul>
</li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一-、基础概念"><a href="#一-、基础概念" class="headerlink" title="一 、基础概念"></a>一 、基础概念</h1><h2 id="Web-基础"><a href="#Web-基础" class="headerlink" title="Web 基础"></a>Web 基础</h2><ul>
<li>HTTP（HyperText Transfer Protocol，超文本传输协议）。</li>
<li>WWW（World Wide Web）的三种技术：HTML、HTTP、URL。</li>
<li>RFC（Request for Comments，征求修正意见书），互联网的设计文档。</li>
</ul>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul>
<li>URI（Uniform Resource Indentifier，统一资源标识符）</li>
<li>URL（Uniform Resource Locator，统一资源定位符）</li>
<li>URN（Uniform Resource Name，统一资源名称），例如 urn:isbn:0-486-27557-4 。</li>
</ul>
<p>URI 包含 URL 和 URN，目前 WEB 只有 URL 比较流行，所以见到的基本都是 URL。</p>
<img src="/archives/a1ede006/1.jpg" class="" title="图1">

<h2 id="请求和响应报文"><a href="#请求和响应报文" class="headerlink" title="请求和响应报文"></a>请求和响应报文</h2><h3 id="1-请求报文"><a href="#1-请求报文" class="headerlink" title="1. 请求报文"></a>1. 请求报文</h3><img src="/archives/a1ede006/2.png" class="" title="图2">

<h3 id="2-响应报文"><a href="#2-响应报文" class="headerlink" title="2. 响应报文"></a>2. 响应报文</h3><img src="/archives/a1ede006/3.png" class="" title="图3">

<h1 id="二、HTTP-方法"><a href="#二、HTTP-方法" class="headerlink" title="二、HTTP 方法"></a>二、HTTP 方法</h1><p>客户端发送的  <strong>请求报文</strong>  第一行为请求行，包含了方法字段。</p>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><blockquote>
<p>获取资源</p>
</blockquote>
<p>当前网络请求中，绝大部分使用的是 GET 方法。</p>
<h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><blockquote>
<p>获取报文首部</p>
</blockquote>
<p>和 GET 方法一样，但是不返回报文实体主体部分。</p>
<p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><blockquote>
<p>传输实体主体</p>
</blockquote>
<p>POST 主要用来传输数据，而 GET 主要用来获取资源。</p>
<p>更多 POST 与 GET 的比较请见第八章。</p>
<h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><blockquote>
<p>上传文件</p>
</blockquote>
<p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">PUT /new.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>New File<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h2><blockquote>
<p>对资源进行部分修改</p>
</blockquote>
<p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">PATCH /file.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/example</span><br><span class="line">If-Match: "e0023aa4e"</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></table></figure>

<h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><blockquote>
<p>删除文件</p>
</blockquote>
<p>与 PUT 功能相反，并且同样不带验证机制。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">DELETE /file.html HTTP/1.1</span><br></pre></td></tr></table></figure>

<h2 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h2><blockquote>
<p>查询支持的方法</p>
</blockquote>
<p>查询指定的 URL 能够支持的方法。</p>
<p>会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。</p>
<h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><blockquote>
<p>要求用隧道协议连接代理</p>
</blockquote>
<p>要求在与代理服务器通信时建立隧道，使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">CONNECT www.example.com:443 HTTP/1.1</span><br></pre></td></tr></table></figure>

<img src="/archives/a1ede006/4.jpg" class="" title="图4">

<h2 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h2><blockquote>
<p>追踪路径</p>
</blockquote>
<p>服务器会将通信路径返回给客户端。</p>
<p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p>
<p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪），因此更不会去使用它。</p>
<h1 id="三、HTTP-状态码"><a href="#三、HTTP-状态码" class="headerlink" title="三、HTTP 状态码"></a>三、HTTP 状态码</h1><p>服务器返回的  <strong>响应报文</strong>  中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="center">类别</th>
<th align="center">原因短语</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1XX</td>
<td align="center">Informational（信息性状态码）</td>
<td align="center">接收的请求正在处理</td>
</tr>
<tr>
<td align="center">2XX</td>
<td align="center">Success（成功状态码）</td>
<td align="center">请求正常处理完毕</td>
</tr>
<tr>
<td align="center">3XX</td>
<td align="center">Redirection（重定向状态码）</td>
<td align="center">需要进行附加操作以完成请求</td>
</tr>
<tr>
<td align="center">4XX</td>
<td align="center">Client Error（客户端错误状态码）</td>
<td align="center">服务器无法处理请求</td>
</tr>
<tr>
<td align="center">5XX</td>
<td align="center">Server Error（服务器错误状态码）</td>
<td align="center">服务器处理请求出错</td>
</tr>
</tbody></table>
<h2 id="1XX-信息"><a href="#1XX-信息" class="headerlink" title="1XX 信息"></a>1XX 信息</h2><ul>
<li><strong>100 Continue</strong> ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li>
</ul>
<h2 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h2><ul>
<li><p><strong>200 OK</strong> </p>
</li>
<li><p><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p>
</li>
<li><p><strong>206 Partial Content</strong> ：表示客户端进行了范围请求。响应报文包含由 Content-Range 指定范围的实体内容。</p>
</li>
</ul>
<h2 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h2><ul>
<li><p><strong>301 Moved Permanently</strong> ：永久性重定向</p>
</li>
<li><p><strong>302 Found</strong> ：临时性重定向</p>
</li>
<li><p><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p>
</li>
<li><p>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</p>
</li>
<li><p><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</p>
</li>
<li><p><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</p>
</li>
</ul>
<h2 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h2><ul>
<li><p><strong>400 Bad Request</strong> ：请求报文中存在语法错误。</p>
</li>
<li><p><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p>
</li>
<li><p><strong>403 Forbidden</strong> ：请求被拒绝，服务器端没有必要给出拒绝的详细理由。</p>
</li>
<li><p><strong>404 Not Found</strong> </p>
</li>
</ul>
<h2 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h2><ul>
<li><p><strong>500 Internal Server Error</strong> ：服务器正在执行请求时发生错误。</p>
</li>
<li><p><strong>503 Service Unavilable</strong> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p>
</li>
</ul>
<h1 id="四、HTTP-首部"><a href="#四、HTTP-首部" class="headerlink" title="四、HTTP 首部"></a>四、HTTP 首部</h1><p>有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。</p>
<p>各种首部字段及其含义如下（不需要全记，仅供查阅）：</p>
<h2 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h2><table>
<thead>
<tr>
<th align="center">首部字段名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Cache-Control</td>
<td align="center">控制缓存的行为</td>
</tr>
<tr>
<td align="center">Connection</td>
<td align="center">控制不再转发给代理的首部字段、管理持久连接</td>
</tr>
<tr>
<td align="center">Date</td>
<td align="center">创建报文的日期时间</td>
</tr>
<tr>
<td align="center">Pragma</td>
<td align="center">报文指令</td>
</tr>
<tr>
<td align="center">Trailer</td>
<td align="center">报文末端的首部一览</td>
</tr>
<tr>
<td align="center">Transfer-Encoding</td>
<td align="center">指定报文主体的传输编码方式</td>
</tr>
<tr>
<td align="center">Upgrade</td>
<td align="center">升级为其他协议</td>
</tr>
<tr>
<td align="center">Via</td>
<td align="center">代理服务器的相关信息</td>
</tr>
<tr>
<td align="center">Warning</td>
<td align="center">错误通知</td>
</tr>
</tbody></table>
<h2 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h2><table>
<thead>
<tr>
<th align="center">首部字段名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Accept</td>
<td align="center">用户代理可处理的媒体类型</td>
</tr>
<tr>
<td align="center">Accept-Charset</td>
<td align="center">优先的字符集</td>
</tr>
<tr>
<td align="center">Accept-Encoding</td>
<td align="center">优先的内容编码</td>
</tr>
<tr>
<td align="center">Accept-Language</td>
<td align="center">优先的语言（自然语言）</td>
</tr>
<tr>
<td align="center">Authorization</td>
<td align="center">Web 认证信息</td>
</tr>
<tr>
<td align="center">Expect</td>
<td align="center">期待服务器的特定行为</td>
</tr>
<tr>
<td align="center">From</td>
<td align="center">用户的电子邮箱地址</td>
</tr>
<tr>
<td align="center">Host</td>
<td align="center">请求资源所在服务器</td>
</tr>
<tr>
<td align="center">If-Match</td>
<td align="center">比较实体标记（ETag）</td>
</tr>
<tr>
<td align="center">If-Modified-Since</td>
<td align="center">比较资源的更新时间</td>
</tr>
<tr>
<td align="center">If-None-Match</td>
<td align="center">比较实体标记（与 If-Match 相反）</td>
</tr>
<tr>
<td align="center">If-Range</td>
<td align="center">资源未更新时发送实体 Byte 的范围请求</td>
</tr>
<tr>
<td align="center">If-Unmodified-Since</td>
<td align="center">比较资源的更新时间（与 If-Modified-Since 相反）</td>
</tr>
<tr>
<td align="center">Max-Forwards</td>
<td align="center">最大传输逐跳数</td>
</tr>
<tr>
<td align="center">Proxy-Authorization</td>
<td align="center">代理服务器要求客户端的认证信息</td>
</tr>
<tr>
<td align="center">Range</td>
<td align="center">实体的字节范围请求</td>
</tr>
<tr>
<td align="center">Referer</td>
<td align="center">对请求中 URI 的原始获取方</td>
</tr>
<tr>
<td align="center">TE</td>
<td align="center">传输编码的优先级</td>
</tr>
<tr>
<td align="center">User-Agent</td>
<td align="center">HTTP 客户端程序的信息</td>
</tr>
</tbody></table>
<h2 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h2><table>
<thead>
<tr>
<th align="center">首部字段名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Accept-Ranges</td>
<td align="center">是否接受字节范围请求</td>
</tr>
<tr>
<td align="center">Age</td>
<td align="center">推算资源创建经过时间</td>
</tr>
<tr>
<td align="center">ETag</td>
<td align="center">资源的匹配信息</td>
</tr>
<tr>
<td align="center">Location</td>
<td align="center">令客户端重定向至指定 URI</td>
</tr>
<tr>
<td align="center">Proxy-Authenticate</td>
<td align="center">代理服务器对客户端的认证信息</td>
</tr>
<tr>
<td align="center">Retry-After</td>
<td align="center">对再次发起请求的时机要求</td>
</tr>
<tr>
<td align="center">Server</td>
<td align="center">HTTP 服务器的安装信息</td>
</tr>
<tr>
<td align="center">Vary</td>
<td align="center">代理服务器缓存的管理信息</td>
</tr>
<tr>
<td align="center">WWW-Authenticate</td>
<td align="center">服务器对客户端的认证信息</td>
</tr>
</tbody></table>
<h2 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h2><table>
<thead>
<tr>
<th align="center">首部字段名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Allow</td>
<td align="center">资源可支持的 HTTP 方法</td>
</tr>
<tr>
<td align="center">Content-Encoding</td>
<td align="center">实体主体适用的编码方式</td>
</tr>
<tr>
<td align="center">Content-Language</td>
<td align="center">实体主体的自然语言</td>
</tr>
<tr>
<td align="center">Content-Length</td>
<td align="center">实体主体的大小</td>
</tr>
<tr>
<td align="center">Content-Location</td>
<td align="center">替代对应资源的 URI</td>
</tr>
<tr>
<td align="center">Content-MD5</td>
<td align="center">实体主体的报文摘要</td>
</tr>
<tr>
<td align="center">Content-Range</td>
<td align="center">实体主体的位置范围</td>
</tr>
<tr>
<td align="center">Content-Type</td>
<td align="center">实体主体的媒体类型</td>
</tr>
<tr>
<td align="center">Expires</td>
<td align="center">实体主体过期的日期时间</td>
</tr>
<tr>
<td align="center">Last-Modified</td>
<td align="center">资源的最后修改日期时间</td>
</tr>
</tbody></table>
<h1 id="五、具体应用"><a href="#五、具体应用" class="headerlink" title="五、具体应用"></a>五、具体应用</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。</p>
<p>Cookie 是服务器发送给客户端的数据，该数据会被保存在浏览器中，并且客户端的下一次请求报文会包含该数据。通过 Cookie 可以让服务器知道两个请求是否来自于同一个客户端，从而实现保持登录状态等功能。</p>
<h3 id="1-创建过程"><a href="#1-创建过程" class="headerlink" title="1. 创建过程"></a>1. 创建过程</h3><p>服务器发送的响应报文包含 Set-Cookie 字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie=choco</span><br><span class="line">Set-Cookie: tasty_cookie=strawberry</span><br><span class="line"></span><br><span class="line">[page content]</span><br></pre></td></tr></table></figure>

<p>客户端之后发送请求时，会从浏览器中读出 Cookie 值，在请求报文中包含 Cookie 字段。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GET /sample_page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure>

<h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h3><ul>
<li>会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</li>
<li>持久性 Cookie：指定一个特定的过期时间（Expires）或有效期（Max-Age）之后就成为了持久性的 Cookie。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</span><br></pre></td></tr></table></figure>

<h3 id="3-Set-Cookie"><a href="#3-Set-Cookie" class="headerlink" title="3. Set-Cookie"></a>3. Set-Cookie</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NAME=VALUE</td>
<td>赋予 Cookie 的名称和其值（必需项）</td>
</tr>
<tr>
<td align="center">expires=DATE</td>
<td>Cookie 的有效期（若不明确指定则默认为浏览器关闭前为止）</td>
</tr>
<tr>
<td align="center">path=PATH</td>
<td>将服务器上的文件目录作为 Cookie 的适用对象（若不指定则默认为文档所在的文件目录）</td>
</tr>
<tr>
<td align="center">domain=域名</td>
<td>作为 Cookie 适用对象的域名（若不指定则默认为创建 Cookie 的服务器的域名）</td>
</tr>
<tr>
<td align="center">Secure</td>
<td>仅在 HTTPs 安全通信时才会发送 Cookie</td>
</tr>
<tr>
<td align="center">HttpOnly</td>
<td>加以限制，使 Cookie 不能被 JavaScript 脚本访问</td>
</tr>
</tbody></table>
<h3 id="4-Session-和-Cookie-区别"><a href="#4-Session-和-Cookie-区别" class="headerlink" title="4. Session 和 Cookie 区别"></a>4. Session 和 Cookie 区别</h3><p>Session 是服务器用来跟踪用户的一种手段，每个 Session 都有一个唯一标识：Session ID。当服务器创建了一个 Session 时，给客户端发送的响应报文包含了 Set-Cookie 字段，其中有一个名为 sid 的键值对，这个键值对就是 Session ID。客户端收到后就把 Cookie 保存在浏览器中，并且之后发送的请求报文都包含 Session ID。HTTP 就是通过 Session 和 Cookie 这两种方式一起合作来实现跟踪用户状态的，Session 用于服务器端，Cookie 用于客户端。</p>
<h3 id="5-浏览器禁用-Cookie-的情况"><a href="#5-浏览器禁用-Cookie-的情况" class="headerlink" title="5. 浏览器禁用 Cookie 的情况"></a>5. 浏览器禁用 Cookie 的情况</h3><p>会使用 URL 重写技术，在 URL 后面加上 sid=xxx 。</p>
<h3 id="6-使用-Cookie-实现用户名和密码的自动填写"><a href="#6-使用-Cookie-实现用户名和密码的自动填写" class="headerlink" title="6. 使用 Cookie 实现用户名和密码的自动填写"></a>6. 使用 Cookie 实现用户名和密码的自动填写</h3><p>网站脚本会自动从保存在浏览器中的 Cookie 读取用户名和密码，从而实现自动填写。</p>
<p>但是如果 Set-Cookie 指定了 HttpOnly 属性，就无法通过 Javascript 脚本获取 Cookie 信息，这是出于安全性考虑。</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ol>
<li>降低服务器的负担；</li>
<li>提高响应速度（缓存资源比服务器上的资源离客户端更近）。</li>
</ol>
<h3 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h3><ol>
<li>让代理服务器进行缓存；</li>
<li>让客户端浏览器进行缓存。</li>
</ol>
<h3 id="3-Cache-Control-字段"><a href="#3-Cache-Control-字段" class="headerlink" title="3. Cache-Control 字段"></a>3. Cache-Control 字段</h3><p>HTTP 通过 Cache-Control 首部字段来控制缓存。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Cache-Control: private, max-age=0, no-cache</span><br></pre></td></tr></table></figure>

<h3 id="4-no-cache-指令"><a href="#4-no-cache-指令" class="headerlink" title="4. no-cache 指令"></a>4. no-cache 指令</h3><p>该指令出现在请求报文的 Cache-Control 字段中，表示缓存服务器需要先向原服务器验证缓存资源是否过期；</p>
<p>该指令出现在响应报文的 Cache-Control 字段中，表示缓存服务器在进行缓存之前需要先验证缓存资源的有效性。</p>
<h3 id="5-no-store-指令"><a href="#5-no-store-指令" class="headerlink" title="5. no-store 指令"></a>5. no-store 指令</h3><p>该指令表示缓存服务器不能对请求或响应的任何一部分进行缓存。</p>
<p>no-cache 不表示不缓存，而是缓存之前需要先进行验证，no-store 才是不进行缓存。</p>
<h3 id="6-max-age-指令"><a href="#6-max-age-指令" class="headerlink" title="6. max-age 指令"></a>6. max-age 指令</h3><p>该指令出现在请求报文的 Cache-Control 字段中，如果缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</p>
<p>该指令出现在响应报文的 Cache-Control 字段中，表示缓存资源在缓存服务器中保存的时间。</p>
<p>Expires 字段也可以用于告知缓存服务器该资源什么时候会过期。在 HTTP/1.1 中，会优先处理 Cache-Control : max-age 指令；而在 HTTP/1.0 中，Cache-Control : max-age 指令会被忽略掉。</p>
<h2 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h2><p>当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问 HTML 页面资源，还会请求图片资源，如果每进行一次 HTTP 通信就要断开一次 TCP 连接，连接建立和断开的开销会很大。持久连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。</p>
<img src="/archives/a1ede006/5.png" class="" title="图5">

<p>持久连接需要使用 Connection 首部字段进行管理。HTTP/1.1 开始 HTTP 默认是持久化连接的，如果要断开 TCP 连接，需要由客户端或者服务器端提出断开，使用 Connection : close；而在 HTTP/1.1 之前默认是非持久化连接的，如果要维持持续连接，需要使用 Connection : Keep-Alive。</p>
<h2 id="管线化处理"><a href="#管线化处理" class="headerlink" title="管线化处理"></a>管线化处理</h2><p>HTTP/1.1 支持管线化处理，可以同时发送多个请求和响应，而不需要发送一个请求然后等待响应之后再发下一个请求。</p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>编码（Encoding）主要是为了对实体进行压缩。常用的编码有：gzip、compress、deflate、identity，其中 identity 表示不执行压缩的编码格式。</p>
<h2 id="分块传输编码"><a href="#分块传输编码" class="headerlink" title="分块传输编码"></a>分块传输编码</h2><p>Chunked Transfer Coding，可以把数据分割成多块，让浏览器逐步显示页面。</p>
<h2 id="多部分对象集合"><a href="#多部分对象集合" class="headerlink" title="多部分对象集合"></a>多部分对象集合</h2><p>一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。</p>
<p>例如，上传多个表单时可以使用如下方式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=AaB03x</span><br><span class="line"></span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="submit-name"</span><br><span class="line"></span><br><span class="line">Larry</span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="files"; filename="file1.txt"</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">... contents of file1.txt ...</span><br><span class="line">--AaB03x--</span><br></pre></td></tr></table></figure>

<h2 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h2><p>如果网络出现中断，服务器只发送了一部分数据，范围请求使得客户端能够只请求未发送的那部分数据，从而避免服务器端重新发送所有数据。</p>
<p>在请求报文首部中添加 Range 字段指定请求的范围，请求成功的话服务器发送 206 Partial Content 状态。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GET /z4d4kWk.jpg HTTP/1.1</span><br><span class="line">Host: i.imgur.com</span><br><span class="line">Range: bytes=0-1023</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Content-Range: bytes 0-1023/146515</span><br><span class="line">Content-Length: 1024</span><br><span class="line">...</span><br><span class="line">(binary content)</span><br></pre></td></tr></table></figure>

<h2 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h2><p>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</p>
<p>涉及以下首部字段：Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Language。</p>
<h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p>HTTP/1.1 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</p>
<p>使用 Host 首部字段进行处理。</p>
<h2 id="通信数据转发"><a href="#通信数据转发" class="headerlink" title="通信数据转发"></a>通信数据转发</h2><h3 id="1-代理"><a href="#1-代理" class="headerlink" title="1. 代理"></a>1. 代理</h3><p>代理服务器接受客户端的请求，并且转发给其它服务器。</p>
<p>使用代理的主要目的是：缓存、网络访问控制以及访问日志记录。</p>
<p>代理服务器分为正向代理和反向代理两种，用户察觉得到正向代理的存在，而反向代理一般位于内部网络中，用户察觉不到。</p>
<img src="/archives/a1ede006/6.png" class="" title="图6">

<img src="/archives/a1ede006/7.png" class="" title="图7">

<h3 id="2-网关"><a href="#2-网关" class="headerlink" title="2. 网关"></a>2. 网关</h3><p>与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。</p>
<h3 id="3-隧道"><a href="#3-隧道" class="headerlink" title="3. 隧道"></a>3. 隧道</h3><p>使用 SSL 等加密手段，为客户端和服务器之间建立一条安全的通信线路。隧道本身不去解析 HTTP 请求。</p>
<h1 id="六、HTTPs"><a href="#六、HTTPs" class="headerlink" title="六、HTTPs"></a>六、HTTPs</h1><p>HTTP 有以下安全性问题：</p>
<ol>
<li>使用明文进行通信，内容可能会被窃听；</li>
<li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li>
<li>无法证明报文的完整性，报文有可能遭篡改。</li>
</ol>
<p>HTTPs 并不是新协议，而是 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信。也就是说 HTTPs 使用了隧道进行通信。</p>
<p>通过使用 SSL，HTTPs 具有了加密、认证和完整性保护。</p>
<img src="/archives/a1ede006/8.jpg" class="" title="图8">

<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><h3 id="1-对称密钥加密"><a href="#1-对称密钥加密" class="headerlink" title="1. 对称密钥加密"></a>1. 对称密钥加密</h3><p>对称密钥加密（Symmetric-Key Encryption），加密的加密和解密使用同一密钥。</p>
<ul>
<li>优点：运算速度快；</li>
<li>缺点：密钥容易被获取。</li>
</ul>
<img src="/archives/a1ede006/9.png" class="" title="图9">

<h3 id="2-公开密钥加密"><a href="#2-公开密钥加密" class="headerlink" title="2. 公开密钥加密"></a>2. 公开密钥加密</h3><p>公开密钥加密（Public-Key Encryption），也称为非对称密钥加密，使用一对密钥用于加密和解密，分别为公开密钥和私有密钥。公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p>
<ul>
<li>优点：更为安全；</li>
<li>缺点：运算速度慢；</li>
</ul>
<img src="/archives/a1ede006/10.png" class="" title="图10">

<h3 id="3-HTTPs-采用的加密方式"><a href="#3-HTTPs-采用的加密方式" class="headerlink" title="3. HTTPs 采用的加密方式"></a>3. HTTPs 采用的加密方式</h3><p>HTTPs 采用混合的加密机制，使用公开密钥加密用于传输对称密钥，之后使用对称密钥加密进行通信。（下图中的 Session Key 就是对称密钥）</p>
<img src="/archives/a1ede006/11.png" class="" title="图11">

<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>通过使用  <strong>证书</strong>  来对通信方进行认证。</p>
<p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p>
<p>进行 HTTPs 通信时，服务器会把证书发送给客户端，客户端取得其中的公开密钥之后，先进行验证，如果验证通过，就可以开始通信。</p>
<img src="/archives/a1ede006/12.png" class="" title="图12">

<p>使用 OpenSSL 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。浏览器在访问该服务器时，会显示“无法确认连接安全性”或“该网站的安全证书存在问题”等警告消息。</p>
<h2 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h2><p>SSL 提供报文摘要功能来验证完整性。</p>
<h1 id="七、Web-攻击技术"><a href="#七、Web-攻击技术" class="headerlink" title="七、Web 攻击技术"></a>七、Web 攻击技术</h1><h2 id="攻击模式"><a href="#攻击模式" class="headerlink" title="攻击模式"></a>攻击模式</h2><h3 id="1-主动攻击"><a href="#1-主动攻击" class="headerlink" title="1. 主动攻击"></a>1. 主动攻击</h3><p>直接攻击服务器，具有代表性的有 SQL 注入和 OS 命令注入。</p>
<h3 id="2-被动攻击"><a href="#2-被动攻击" class="headerlink" title="2. 被动攻击"></a>2. 被动攻击</h3><p>设下圈套，让用户发送有攻击代码的 HTTP 请求，用户会泄露 Cookie 等个人信息，具有代表性的有跨站脚本攻击和跨站请求伪造。</p>
<h2 id="跨站脚本攻击"><a href="#跨站脚本攻击" class="headerlink" title="跨站脚本攻击"></a>跨站脚本攻击</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>跨站脚本攻击（Cross-Site Scripting, XSS），可以将代码注入到用户浏览的网页上，这种代码包括 HTML 和 JavaScript。利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和 Cookie 等各种内容。</p>
<p>例如有一个论坛网站，攻击者可以在上面发表以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;location.href&#x3D;&quot;&#x2F;&#x2F;domain.com&#x2F;?c&#x3D;&quot; + document.cookie&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>之后该内容可能会被渲染成以下形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;script&gt;location.href&#x3D;&quot;&#x2F;&#x2F;domain.com&#x2F;?c&#x3D;&quot; + document.cookie&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p>另一个用户浏览了含有这个内容的页面将会跳往 domain.com 并携带了当前作用域的 Cookie。如果这个论坛网站通过 Cookie 管理用户登录状态，那么攻击者就可以通过这个 Cookie 登录被攻击者的账号了。</p>
<h3 id="2-危害"><a href="#2-危害" class="headerlink" title="2. 危害"></a>2. 危害</h3><ul>
<li>伪造虚假的输入表单骗取个人信息</li>
<li>窃取用户的 Cookie 值</li>
<li>显示伪造的文章或者图片</li>
</ul>
<h3 id="3-防范手段"><a href="#3-防范手段" class="headerlink" title="3. 防范手段"></a>3. 防范手段</h3><p>（一）过滤特殊字符</p>
<p>许多语言都提供了对 HTML 的过滤：</p>
<ul>
<li>PHP 的 htmlentities() 或是 htmlspecialchars()。</li>
<li>Python 的 cgi.escape()。</li>
<li>Java 的 xssprotect (Open Source Library)。</li>
<li>Node.js 的 node-validator。</li>
</ul>
<p>（二）指定 HTTP 的 Content-Type</p>
<p>通过这种方式，可以避免内容被当成 HTML 解析，比如 PHP 语言可以使用以下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   header(<span class="string">'Content-Type: text/javascript; charset=utf-8'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="跨站点请求伪造"><a href="#跨站点请求伪造" class="headerlink" title="跨站点请求伪造"></a>跨站点请求伪造</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>跨站点请求伪造（Cross-site request forgery，CSRF），是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了 Web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p>
<p>XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>
<p>假如一家银行用以执行转账操作的 URL 地址如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.examplebank.com&#x2F;withdraw?account&#x3D;AccoutName&amp;amount&#x3D;1000&amp;for&#x3D;PayeeName。</span><br></pre></td></tr></table></figure>

<p>那么，一个恶意攻击者可以在另一个网站上放置如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;www.examplebank.com&#x2F;withdraw?account&#x3D;Alice&amp;amount&#x3D;1000&amp;for&#x3D;Badman&quot;&gt;。</span><br></pre></td></tr></table></figure>

<p>如果有账户名为 Alice 的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失 1000 资金。</p>
<p>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务器端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</p>
<p>透过例子能够看出，攻击者并不能通过 CSRF 攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义执行操作。</p>
<h3 id="2-防范手段"><a href="#2-防范手段" class="headerlink" title="2. 防范手段"></a>2. 防范手段</h3><p>（一）检查 Referer 字段</p>
<p>HTTP 头中有一个 Referer 字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer 字段应和请求的地址位于同一域名下。</p>
<p>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的 Referer 字段。虽然 HTTP 协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其 Referer 字段的可能。</p>
<p>（二）添加校验 Token</p>
<p>由于 CSRF 的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在 Cookie 中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行 CSRF 攻击。这种数据通常是表单中的一个数据项。服务器将其生成并附加在表单中，其内容是一个伪乱数。当客户端通过表单提交请求时，这个伪乱数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪乱数，而通过 CSRF 传来的欺骗性攻击中，攻击者无从事先得知这个伪乱数的值，服务器端就会因为校验 Token 的值为空或者错误，拒绝这个可疑请求。</p>
<h2 id="SQL-注入攻击"><a href="#SQL-注入攻击" class="headerlink" title="SQL 注入攻击"></a>SQL 注入攻击</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>服务器上的数据库运行非法的 SQL 语句。</p>
<h3 id="2-攻击原理"><a href="#2-攻击原理" class="headerlink" title="2. 攻击原理"></a>2. 攻击原理</h3><p>例如一个网站登录验证的 SQL 查询代码为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> (<span class="keyword">name</span> = <span class="string">'" + userName + "'</span>) <span class="keyword">and</span> (pw = <span class="string">'"+ passWord +"'</span>);"</span><br></pre></td></tr></table></figure>

<p>如果填入以下内容：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">userName = "1' OR '1'='1";</span><br><span class="line">passWord = "1' OR '1'='1";</span><br></pre></td></tr></table></figure>

<p>那么 SQL 查询字符串为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> (<span class="keyword">name</span> = <span class="string">'1'</span> <span class="keyword">OR</span> <span class="string">'1'</span>=<span class="string">'1'</span>) <span class="keyword">and</span> (pw = <span class="string">'1'</span> <span class="keyword">OR</span> <span class="string">'1'</span>=<span class="string">'1'</span>);"</span><br></pre></td></tr></table></figure>

<p>此时无需验证通过就能执行以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span>;"</span><br></pre></td></tr></table></figure>

<h3 id="3-危害"><a href="#3-危害" class="headerlink" title="3. 危害"></a>3. 危害</h3><ul>
<li>数据表中的数据外泄，例如个人机密数据，账户数据，密码等。</li>
<li>数据结构被黑客探知，得以做进一步攻击（例如 SELECT * FROM sys.tables）。</li>
<li>数据库服务器被攻击，系统管理员账户被窜改（例如 ALTER LOGIN sa WITH PASSWORD=’xxxxxx’）。</li>
<li>获取系统较高权限后，有可能得以在网页加入恶意链接、恶意代码以及 XSS 等。</li>
<li>经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统（例如 xp_cmdshell “net stop iisadmin” 可停止服务器的 IIS 服务）。</li>
<li>破坏硬盘数据，瘫痪全系统（例如 xp_cmdshell “FORMAT C:”）。</li>
</ul>
<h3 id="4-防范手段"><a href="#4-防范手段" class="headerlink" title="4. 防范手段"></a>4. 防范手段</h3><ul>
<li>在设计应用程序时，完全使用参数化查询（Parameterized Query）来设计数据访问功能。</li>
<li>在组合 SQL 字符串时，先针对所传入的参数作字符取代（将单引号字符取代为连续 2 个单引号字符）。</li>
<li>如果使用 PHP 开发网页程序的话，亦可打开 PHP 的魔术引号（Magic quote）功能（自动将所有的网页传入参数，将单引号字符取代为连续 2 个单引号字符）。</li>
<li>其他，使用其他更安全的方式连接 SQL 数据库。例如已修正过 SQL 注入问题的数据库连接组件，例如 ASP.NET 的 SqlDataSource 对象或是 LINQ to SQL。</li>
<li>使用 SQL 防注入系统。</li>
</ul>
<h2 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>拒绝服务攻击（denial-of-service attack，DoS），亦称洪水攻击，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。</p>
<p>分布式拒绝服务攻击（distributed denial-of-service attack，DDoS），指攻击者使用网络上两个或以上被攻陷的电脑作为“僵尸”向特定的目标发动“拒绝服务”式攻击。</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="noopener external nofollow noreferrer">维基百科：拒绝服务攻击</a></p>
</blockquote>
<h1 id="八、GET-和-POST-的区别"><a href="#八、GET-和-POST-的区别" class="headerlink" title="八、GET 和 POST 的区别"></a>八、GET 和 POST 的区别</h1><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在内容实体中。</p>
<p>GET 的传参方式相比于 POST 安全性较差，因为 GET 传的参数在 URL 中是可见的，可能会泄露私密信息。并且 GET 只支持 ASCII 字符，如果参数为中文则可能会出现乱码，而 POST 支持标准字符集。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;test&#x2F;demo_form.asp?name1&#x3D;value1&amp;name2&#x3D;value2 HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;test&#x2F;demo_form.asp HTTP&#x2F;1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1&#x3D;value1&amp;name2&#x3D;value2</span><br></pre></td></tr></table></figure>

<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。</p>
<p>GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</p>
<p>安全的方法除了 GET 之外还有：HEAD、OPTIONS。</p>
<p>不安全的方法除了 POST 之外还有 PUT、DELETE。</p>
<h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><p>幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。所有的安全方法也都是幂等的。</p>
<p>GET /pageX HTTP/1.1 是幂等的。连续调用多次，客户端接收到的结果都是一样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<p>POST /add_row HTTP/1.1 不是幂等的。如果调用多次，就会增加多行记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;add_row HTTP&#x2F;1.1</span><br><span class="line">POST &#x2F;add_row HTTP&#x2F;1.1   -&gt; Adds a 2nd row</span><br><span class="line">POST &#x2F;add_row HTTP&#x2F;1.1   -&gt; Adds a 3rd row</span><br></pre></td></tr></table></figure>

<p>DELETE /idX/delete HTTP/1.1 是幂等的，即便是不同请求之间接收到的状态码不一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1   -&gt; Returns 200 if idX exists</span><br><span class="line">DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1   -&gt; Returns 404 as it just got deleted</span><br><span class="line">DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1   -&gt; Returns 404</span><br></pre></td></tr></table></figure>

<h2 id="可缓存"><a href="#可缓存" class="headerlink" title="可缓存"></a>可缓存</h2><p>如果要对响应进行缓存，需要满足以下条件：</p>
<ol>
<li>请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的。</li>
<li>响应报文的状态码是可缓存的，包括：200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501。</li>
<li>响应报文的 Cache-Control 首部字段没有指定不进行缓存。</li>
</ol>
<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>为了阐述 POST 和 GET 的另一个区别，需要先了解 XMLHttpRequest：</p>
<blockquote>
<p>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</p>
</blockquote>
<p>在使用 XMLHttpRequest 的 POST 方法时，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐就不会。</p>
<h1 id="九、各版本比较"><a href="#九、各版本比较" class="headerlink" title="九、各版本比较"></a>九、各版本比较</h1><h2 id="HTTP-1-0-与-HTTP-1-1-的区别"><a href="#HTTP-1-0-与-HTTP-1-1-的区别" class="headerlink" title="HTTP/1.0 与 HTTP/1.1 的区别"></a>HTTP/1.0 与 HTTP/1.1 的区别</h2><ol>
<li>HTTP/1.1 默认是持久连接</li>
<li>HTTP/1.1 支持管线化处理</li>
<li>HTTP/1.1 支持虚拟主机</li>
<li>HTTP/1.1 新增状态码 100</li>
<li>HTTP/1.1 支持分块传输编码</li>
<li>HTTP/1.1 新增缓存处理指令 max-age</li>
</ol>
<p>具体内容见上文</p>
<h2 id="HTTP-1-1-与-HTTP-2-0-的区别"><a href="#HTTP-1-1-与-HTTP-2-0-的区别" class="headerlink" title="HTTP/1.1 与 HTTP/2.0 的区别"></a>HTTP/1.1 与 HTTP/2.0 的区别</h2><h3 id="1-多路复用"><a href="#1-多路复用" class="headerlink" title="1. 多路复用"></a>1. 多路复用</h3><p>HTTP/2.0 使用多路复用技术，使用同一个 TCP 连接来处理多个请求。</p>
<h3 id="2-首部压缩"><a href="#2-首部压缩" class="headerlink" title="2. 首部压缩"></a>2. 首部压缩</h3><p>HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。HTTP/2.0 要求通讯双方各自缓存一份首部字段表，从而避免了重复传输。</p>
<h3 id="3-服务端推送"><a href="#3-服务端推送" class="headerlink" title="3. 服务端推送"></a>3. 服务端推送</h3><p>在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 index.html 页面，服务端就把 index.js 一起发给客户端。</p>
<h3 id="4-二进制格式"><a href="#4-二进制格式" class="headerlink" title="4. 二进制格式"></a>4. 二进制格式</h3><p>HTTP/1.1 的解析是基于文本的，而 HTTP/2.0 采用二进制格式。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>上野宣. 图解 HTTP[M]. 人民邮电出版社, 2014.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP" target="_blank" rel="noopener external nofollow noreferrer">MDN : HTTP</a></li>
<li><a href="https://www.webdancers.com/are-http-and-www-necesary/" target="_blank" rel="noopener external nofollow noreferrer">Are http:// and www really necessary?</a></li>
<li><a href="https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html" target="_blank" rel="noopener external nofollow noreferrer">HTTP (HyperText Transfer Protocol)</a></li>
<li><a href="https://www.igvita.com/2011/12/01/web-vpn-secure-proxies-with-spdy-chrome/" target="_blank" rel="noopener external nofollow noreferrer">Web-VPN: Secure Proxies with SPDY &amp; Chrome</a></li>
<li><a href="http://en.wikipedia.org/wiki/File:HTTP_persistent_connection.svg" target="_blank" rel="noopener external nofollow noreferrer">File:HTTP persistent connection.svg</a></li>
<li><a href="https://en.wikipedia.org/wiki/Proxy_server" target="_blank" rel="noopener external nofollow noreferrer">Proxy server</a></li>
<li><a href="https://www.x-cart.com/blog/what-is-https-and-ssl.html" target="_blank" rel="noopener external nofollow noreferrer">What Is This HTTPS/SSL Thing And Why Should You Care?</a></li>
<li><a href="https://securebox.comodo.com/ssl-sniffing/ssl-offloading/" target="_blank" rel="noopener external nofollow noreferrer">What is SSL Offloading?</a></li>
<li><a href="https://docs.oracle.com/cd/E19424-01/820-4811/6ng8i26bn/index.html" target="_blank" rel="noopener external nofollow noreferrer">Sun Directory Server Enterprise Edition 7.0 Reference - Key Encryption</a></li>
<li><a href="https://www.codeproject.com/Articles/326574/An-Introduction-to-Mutual-SSL-Authentication" target="_blank" rel="noopener external nofollow noreferrer">An Introduction to Mutual SSL Authentication</a></li>
<li><a href="https://danielmiessler.com/study/url-uri/" target="_blank" rel="noopener external nofollow noreferrer">The Difference Between URLs and URIs</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC" target="_blank" rel="noopener external nofollow noreferrer">维基百科：跨站脚本</a></li>
<li><a href="https://zh.wikipedia.org/wiki/SQL%E8%B3%87%E6%96%99%E9%9A%B1%E7%A2%BC%E6%94%BB%E6%93%8A" target="_blank" rel="noopener external nofollow noreferrer">维基百科：SQL 注入攻击</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener external nofollow noreferrer">维基百科：跨站点请求伪造</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="noopener external nofollow noreferrer">维基百科：拒绝服务攻击</a></li>
<li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn" target="_blank" rel="noopener external nofollow noreferrer">What is the difference between a URI, a URL and a URN?</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener external nofollow noreferrer">XMLHttpRequest</a></li>
<li><a href="https://blog.josephscott.org/2009/08/27/xmlhttprequest-xhr-uses-multiple-packets-for-http-post/" target="_blank" rel="noopener external nofollow noreferrer">XMLHttpRequest (XHR) Uses Multiple Packets for HTTP POST?</a></li>
<li><a href="https://www.ssl2buy.com/wiki/symmetric-vs-asymmetric-encryption-what-are-differences" target="_blank" rel="noopener external nofollow noreferrer">Symmetric vs. Asymmetric Encryption – What are differences?</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>硬盘根目录中出现eula.1028.txt等垃圾文件的原因及是否可删</title>
    <url>/archives/7f9e5ff.html</url>
    <content><![CDATA[<p>我在清理电脑时发现，硬盘根目录下有如下垃圾文件：</p>
<ul>
<li>9个文本文件：<ul>
<li><code>eula.1028.txt</code></li>
<li><code>eula.1031.txt</code></li>
<li><code>eula.1033.txt</code></li>
<li><code>eula.1036.txt</code></li>
<li><code>eula.1040.txt</code></li>
<li><code>eula.1041.txt</code></li>
<li><code>eula.1042.txt</code></li>
<li><code>eula.2052.txt</code></li>
<li><code>eula.3082.txt</code></li>
</ul>
</li>
<li>9个<code>.dll</code>文件： <ul>
<li><code>install.res.1028.dll</code></li>
<li><code>install.res.1031.dll</code></li>
<li><code>install.res.1033.dll</code></li>
<li><code>install.res.1036.dll</code></li>
<li><code>install.res.1040.dll</code></li>
<li><code>install.res.1041.dll</code></li>
<li><code>install.res.1042.dll</code></li>
<li><code>install.res.2052.dll</code></li>
<li><code>install.res.3082.dll</code></li>
</ul>
</li>
<li>2个<code>.ini</code>文件：<ul>
<li><code>globdata.ini</code></li>
<li><code>install.ini</code></li>
</ul>
</li>
<li>1个<code>.exe</code>文件：<ul>
<li><code>install.exe</code></li>
</ul>
</li>
<li>1个<code>.cab</code>文件：<ul>
<li><code>VC_RED.cab</code></li>
</ul>
</li>
<li>1个<code>.MSI</code>文件： <ul>
<li><code>VC_RED.MSI</code></li>
</ul>
</li>
<li><code>个</code>BMP`图象：<ul>
<li><code>vcredist.bmp</code></li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>这些文件是VS2008（VS2010）在发行组件包安装时产生的临时文件，<strong>但这个软件却因为bug问题而错误的将临时文件放到了硬盘根目录</strong>（本应该是temp目录并会被自动删除的，并且这个bug是微软已知的bug）。</p>
<h2 id="文件是否可以删除"><a href="#文件是否可以删除" class="headerlink" title="文件是否可以删除"></a>文件是否可以删除</h2><p>根据以上分析，这些文件可以手动删除。</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL练习题50道</title>
    <url>/archives/9460c0a9.html</url>
    <content><![CDATA[<p>我们可以在自己电脑上安装MySQL，然后可以更方便的练习。推荐安装8.0以上版本，可以用窗口函数。</p>
<ul>
<li>Windows下MySQL安装教程：<a href="http://tding.top/archives/72ae4f3c.html">Win10 下 MySQL 安装配置</a></li>
</ul>
<a id="more"></a>

<h2 id="练习数据"><a href="#练习数据" class="headerlink" title="练习数据"></a>练习数据</h2><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><ol>
<li><p>学生表—<code>Student(SId,Sname,Sage,Ssex)</code></p>
<ul>
<li>其中SId 学生编号,Sname 学生姓名,Sage 出生年月,Ssex 学生性别</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |</span><br><span class="line">| 09   | 张三   | 2017-12-20 00:00:00 | 女   |</span><br><span class="line">| 10   | 李四   | 2017-12-25 00:00:00 | 女   |</span><br><span class="line">| 11   | 李四   | 2017-12-30 00:00:00 | 女   |</span><br><span class="line">| 12   | 赵六   | 2017-01-01 00:00:00 | 女   |</span><br><span class="line">| 13   | 孙七   | 2018-01-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>课程表—<code>Course(CId,Cname,TId)</code><ul>
<li>CId –课程编号,Cname 课程名称,TId 教师编号</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+------+</span><br><span class="line">| CId  | Cname  | TId  |</span><br><span class="line">+------+--------+------+</span><br><span class="line">| 01   | 语文   | 02   |</span><br><span class="line">| 02   | 数学   | 01   |</span><br><span class="line">| 03   | 英语   | 03   |</span><br><span class="line">+------+--------+------+</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>教师表—<code>Teacher(TId,Tname)</code><ul>
<li>TId 教师编号,Tname 教师姓名</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+</span><br><span class="line">| TId  | Tname  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 01   | 张三   |</span><br><span class="line">| 02   | 李四   |</span><br><span class="line">| 03   | 王五   |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>成绩表—<code>SC(SId,CId,score)</code><ul>
<li>SId 学生编号,CId 课程编号,score 分数</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 01   | 02   |  90.0 |</span><br><span class="line">| 01   | 03   |  99.0 |</span><br><span class="line">| 02   | 01   |  70.0 |</span><br><span class="line">| 02   | 02   |  60.0 |</span><br><span class="line">| 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 03   | 02   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">| 04   | 01   |  50.0 |</span><br><span class="line">| 04   | 02   |  30.0 |</span><br><span class="line">| 04   | 03   |  20.0 |</span><br><span class="line">| 05   | 01   |  76.0 |</span><br><span class="line">| 05   | 02   |  87.0 |</span><br><span class="line">| 06   | 01   |  31.0 |</span><br><span class="line">| 06   | 03   |  34.0 |</span><br><span class="line">| 07   | 02   |  89.0 |</span><br><span class="line">| 07   | 03   |  98.0 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>


<h3 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h3><ol>
<li>学生表 Student</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Student(<span class="keyword">SId</span> <span class="built_in">varchar</span>(<span class="number">10</span>),Sname <span class="built_in">varchar</span>(<span class="number">10</span>),Sage datetime,Ssex <span class="built_in">varchar</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'赵雷'</span> , <span class="string">'1990-01-01'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'钱电'</span> , <span class="string">'1990-12-21'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'孙风'</span> , <span class="string">'1990-05-20'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'李云'</span> , <span class="string">'1990-08-06'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'周梅'</span> , <span class="string">'1991-12-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'吴兰'</span> , <span class="string">'1992-03-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'郑竹'</span> , <span class="string">'1989-07-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'09'</span> , <span class="string">'张三'</span> , <span class="string">'2017-12-20'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'10'</span> , <span class="string">'李四'</span> , <span class="string">'2017-12-25'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'11'</span> , <span class="string">'李四'</span> , <span class="string">'2017-12-30'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'12'</span> , <span class="string">'赵六'</span> , <span class="string">'2017-01-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'13'</span> , <span class="string">'孙七'</span> , <span class="string">'2018-01-01'</span> , <span class="string">'女'</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>科目表 Course</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Course(CId <span class="built_in">varchar</span>(<span class="number">10</span>),Cname <span class="keyword">nvarchar</span>(<span class="number">10</span>),TId <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'语文'</span> , <span class="string">'02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'数学'</span> , <span class="string">'01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'英语'</span> , <span class="string">'03'</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>教师表 Teacher</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Teacher(TId <span class="built_in">varchar</span>(<span class="number">10</span>),Tname <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'张三'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'李四'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'王五'</span>)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>成绩表 SC</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> SC(<span class="keyword">SId</span> <span class="built_in">varchar</span>(<span class="number">10</span>),CId <span class="built_in">varchar</span>(<span class="number">10</span>),score <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">1</span>))</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'01'</span> , <span class="number">80</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'02'</span> , <span class="number">90</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'03'</span> , <span class="number">99</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'01'</span> , <span class="number">70</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'02'</span> , <span class="number">60</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'03'</span> , <span class="number">80</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'01'</span> , <span class="number">80</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'02'</span> , <span class="number">80</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'03'</span> , <span class="number">80</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'01'</span> , <span class="number">50</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'02'</span> , <span class="number">30</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'03'</span> , <span class="number">20</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'01'</span> , <span class="number">76</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'02'</span> , <span class="number">87</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'01'</span> , <span class="number">31</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'03'</span> , <span class="number">34</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'02'</span> , <span class="number">89</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'03'</span> , <span class="number">98</span>)</span><br></pre></td></tr></table></figure>

<h2 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h2><ol>
<li>查询” 01 “课程比” 02 “课程成绩高的学生的信息及课程分数  <ul>
<li>1.1 查询同时存在” 01 “课程和” 02 “课程的情况  </li>
<li>1.2 查询存在” 01 “课程但可能不存在” 02 “课程的情况(不存在时显示为 null )  </li>
<li>1.3 查询不存在” 01 “课程但存在” 02 “课程的情况  </li>
</ul>
</li>
<li>查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</li>
<li>查询在 SC 表存在成绩的学生信息</li>
<li>查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )<ul>
<li>4.1 查有成绩的学生信息</li>
</ul>
</li>
<li>查询「李」姓老师的数量 </li>
<li>查询学过「张三」老师授课的同学的信息 </li>
<li>查询没有学全所有课程的同学的信息 </li>
<li>查询至少有一门课与学号为” 01 “的同学所学相同的同学的信息 </li>
<li>查询和” 01 “号的同学学习的课程完全相同的其他同学的信息 </li>
<li>查询没学过”张三”老师讲授的任一门课程的学生姓名 </li>
<li>查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 </li>
<li>检索” 01 “课程分数小于 60，按分数降序排列的学生信息</li>
<li>按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</li>
<li>查询各科成绩最高分、最低分和平均分：<ul>
<li>以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</li>
<li>及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</li>
<li>要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</li>
</ul>
</li>
<li>按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺  <ul>
<li>15.1 按各科成绩进行排序，并显示排名， Score 重复时合并名次</li>
</ul>
</li>
<li>查询学生的总成绩，并进行排名，总分重复时保留名次空缺  <ul>
<li>16.1 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺</li>
</ul>
</li>
<li>统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比</li>
<li>查询各科成绩前三名的记录</li>
<li>查询每门课程被选修的学生数 </li>
<li>查询出只选修两门课程的学生学号和姓名 </li>
<li>查询男生、女生人数</li>
<li>查询名字中含有「风」字的学生信息</li>
<li>查询同名同性学生名单，并统计同名人数</li>
<li>查询 1990 年出生的学生名单</li>
<li>查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</li>
<li>查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩 </li>
<li>查询课程名称为「数学」，且分数低于 60 的学生姓名和分数 </li>
<li>查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）</li>
<li>查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数</li>
<li>查询不及格的课程</li>
<li>查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名</li>
<li>求每门课程的学生人数 </li>
<li>成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</li>
<li>成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</li>
<li>查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 </li>
<li>查询每门功成绩最好的前两名</li>
<li>统计每门课程的学生选修人数（超过 5 人的课程才统计）。</li>
<li>检索至少选修两门课程的学生学号 </li>
<li>查询选修了全部课程的学生信息</li>
<li>查询各学生的年龄，只按年份来算 </li>
<li>按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一</li>
<li>查询本周过生日的学生</li>
<li>查询下周过生日的学生</li>
<li>查询本月过生日的学生</li>
<li>查询下月过生日的学生</li>
</ol>
<h2 id="个人解答"><a href="#个人解答" class="headerlink" title="个人解答"></a>个人解答</h2><p>1.查询” 01 “课程比” 02 “课程成绩高的学生的信息及课程分数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">SId</span>, CId, score <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId=<span class="string">'01'</span>)<span class="keyword">as</span> t1 , (<span class="keyword">select</span> <span class="keyword">SId</span>, CId, score <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId=<span class="string">'02'</span>) <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">where</span> t1.SId=t2.SId <span class="keyword">and</span> t1.score&gt;t2.score;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+------+------+-------+</span><br><span class="line">| sid  | cid  | score | sid  | cid  | score |</span><br><span class="line">+------+------+-------+------+------+-------+</span><br><span class="line">| 02   | 01   |  70.0 | 02   | 02   |  60.0 |</span><br><span class="line">| 04   | 01   |  50.0 | 04   | 02   |  30.0 |</span><br><span class="line">+------+------+-------+------+------+-------+</span><br></pre></td></tr></table></figure>

<p>1.1 查询同时存在” 01 “课程和” 02 “课程的情况</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">SId</span>, CId, score <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId=<span class="string">'01'</span>)<span class="keyword">as</span> t1 , (<span class="keyword">select</span> <span class="keyword">SId</span>, CId, score <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId=<span class="string">'02'</span>) <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">where</span> t1.SId=t2.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+------+------+-------+</span><br><span class="line">| sid  | cid  | score | sid  | cid  | score |</span><br><span class="line">+------+------+-------+------+------+-------+</span><br><span class="line">| 01   | 01   |  80.0 | 01   | 02   |  90.0 |</span><br><span class="line">| 02   | 01   |  70.0 | 02   | 02   |  60.0 |</span><br><span class="line">| 03   | 01   |  80.0 | 03   | 02   |  80.0 |</span><br><span class="line">| 04   | 01   |  50.0 | 04   | 02   |  30.0 |</span><br><span class="line">| 05   | 01   |  76.0 | 05   | 02   |  87.0 |</span><br><span class="line">+------+------+-------+------+------+-------+</span><br></pre></td></tr></table></figure>

<p>1.2 查询存在” 01 “课程但可能不存在” 02 “课程的情况(不存在时显示为 null )</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">SId</span> ,score <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId=<span class="string">'01'</span>) <span class="keyword">as</span> t1 <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">SId</span> ,score <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId=<span class="string">'02'</span>) <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.SId=t2.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+------+-------+</span><br><span class="line">| sid  | score | sid  | score |</span><br><span class="line">+------+-------+------+-------+</span><br><span class="line">| 01   |  80.0 | 01   |  90.0 |</span><br><span class="line">| 02   |  70.0 | 02   |  60.0 |</span><br><span class="line">| 03   |  80.0 | 03   |  80.0 |</span><br><span class="line">| 04   |  50.0 | 04   |  30.0 |</span><br><span class="line">| 05   |  76.0 | 05   |  87.0 |</span><br><span class="line">| 06   |  31.0 | NULL |  NULL |</span><br><span class="line">+------+-------+------+-------+</span><br></pre></td></tr></table></figure>

<p>1.3 查询不存在” 01 “课程但存在” 02 “课程的情况</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> sc.SId <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">SId</span> <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId=<span class="string">'01'</span>)</span><br><span class="line"><span class="keyword">and</span> sc.CId=<span class="string">'02'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 07   | 02   |  89.0 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>

<p>2.查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sc.SId,<span class="keyword">AVG</span>(sc.score) <span class="keyword">as</span> avgscore</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+----------+</span><br><span class="line">| sid  | avgscore |</span><br><span class="line">+------+----------+</span><br><span class="line">| 01   | 89.66667 |</span><br><span class="line">| 02   | 70.00000 |</span><br><span class="line">| 03   | 80.00000 |</span><br><span class="line">| 04   | 33.33333 |</span><br><span class="line">| 05   | 81.50000 |</span><br><span class="line">| 06   | 32.50000 |</span><br><span class="line">| 07   | 93.50000 |</span><br><span class="line">+------+----------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> student.*,t1.avgscore</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">inner</span> <span class="keyword">JOIN</span>(</span><br><span class="line"><span class="keyword">select</span> sc.SId ,<span class="keyword">AVG</span>(sc.score)<span class="keyword">as</span> avgscore</span><br><span class="line"><span class="keyword">from</span> sc </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.SId</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">AVG</span>(sc.score)&gt;=<span class="number">60</span>)<span class="keyword">as</span> t1 <span class="keyword">on</span> student.SId=t1.SId</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+----------+</span><br><span class="line">| sid  | sname  | avgscore |</span><br><span class="line">+------+--------+----------+</span><br><span class="line">| 01   | 赵雷   | 89.66667 |</span><br><span class="line">| 02   | 钱电   | 70.00000 |</span><br><span class="line">| 03   | 孙风   | 80.00000 |</span><br><span class="line">| 05   | 周梅   | 81.50000 |</span><br><span class="line">| 07   | 郑竹   | 93.50000 |</span><br><span class="line">+------+--------+----------+</span><br></pre></td></tr></table></figure>


<p>3.查询在 SC 表存在成绩的学生信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> student.*</span><br><span class="line"><span class="keyword">from</span> student, sc</span><br><span class="line"><span class="keyword">where</span> student.SId=sc.SId</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>

<p>4.查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为null)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">sum</span>(score) <span class="keyword">as</span> score_sum,<span class="keyword">count</span>(cid) <span class="keyword">as</span> course_count</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-----------+--------------+</span><br><span class="line">| sid  | score_sum | course_count |</span><br><span class="line">+------+-----------+--------------+</span><br><span class="line">| 01   |     269.0 |            3 |</span><br><span class="line">| 02   |     210.0 |            3 |</span><br><span class="line">| 03   |     240.0 |            3 |</span><br><span class="line">| 04   |     100.0 |            3 |</span><br><span class="line">| 05   |     163.0 |            2 |</span><br><span class="line">| 06   |      65.0 |            2 |</span><br><span class="line">| 07   |     187.0 |            2 |</span><br><span class="line">+------+-----------+--------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> student.SId,student.Sname,t1.score_sum,t1.course_count</span><br><span class="line"><span class="keyword">from</span> student,(<span class="keyword">select</span> <span class="keyword">SId</span>,<span class="keyword">sum</span>(score) <span class="keyword">as</span> score_sum,<span class="keyword">count</span>(CId) <span class="keyword">as</span> course_count</span><br><span class="line">              <span class="keyword">from</span> sc </span><br><span class="line">              <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>) <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">where</span> student.SId = t1.SId</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+-----------+--------------+</span><br><span class="line">| sid  | sname  | score_sum | course_count |</span><br><span class="line">+------+--------+-----------+--------------+</span><br><span class="line">| 01   | 赵雷   |     269.0 |            3 |</span><br><span class="line">| 02   | 钱电   |     210.0 |            3 |</span><br><span class="line">| 03   | 孙风   |     240.0 |            3 |</span><br><span class="line">| 04   | 李云   |     100.0 |            3 |</span><br><span class="line">| 05   | 周梅   |     163.0 |            2 |</span><br><span class="line">| 06   | 吴兰   |      65.0 |            2 |</span><br><span class="line">| 07   | 郑竹   |     187.0 |            2 |</span><br><span class="line">+------+--------+-----------+--------------+</span><br></pre></td></tr></table></figure>


<p>4.1 查有成绩的学生信息</p>
<p>这道题跟第3题一样？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> student.*</span><br><span class="line"><span class="keyword">from</span> student, sc</span><br><span class="line"><span class="keyword">where</span> student.SId=sc.SId</span><br></pre></td></tr></table></figure>


<p>5.查询「李」姓老师的<strong>数量</strong> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> T_count</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> Tname <span class="keyword">LIKE</span> <span class="string">'李%'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| T_count |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure>


<p>6.查询学过「张三」老师授课的同学的信息 </p>
<p>首先<code>teacher</code>表查找得到「张三」老师的<code>TId</code>，然后根据这个<code>TId</code>在<code>course</code>表查询得到课程编号<code>CId</code>，然后在<code>sc</code>表查找得到选课的学生<code>SId</code>，最后在<code>student</code>表查找得到学生信息。</p>
<ul>
<li>课程编号<code>CId</code>查询：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> course.CId</span><br><span class="line"><span class="keyword">FROM</span> teacher,course</span><br><span class="line"><span class="keyword">WHERE</span> teacher.Tname = <span class="string">'张三'</span> <span class="keyword">AND</span> course.TId = teacher.TId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+</span><br><span class="line">| CId  |</span><br><span class="line">+------+</span><br><span class="line">| 02   |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<ul>
<li>学生编号<code>SId</code>查询：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.SId</span><br><span class="line"><span class="keyword">FROM</span> teacher,course,sc</span><br><span class="line"><span class="keyword">WHERE</span> teacher.Tname = <span class="string">'张三'</span> <span class="keyword">AND</span> course.TId = teacher.TId <span class="keyword">AND</span> sc.CId = course.CId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+</span><br><span class="line">| SId  |</span><br><span class="line">+------+</span><br><span class="line">| 01   |</span><br><span class="line">| 02   |</span><br><span class="line">| 03   |</span><br><span class="line">| 04   |</span><br><span class="line">| 05   |</span><br><span class="line">| 07   |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部的SQL代码：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.*</span><br><span class="line"><span class="keyword">FROM</span> teacher,course,sc,student</span><br><span class="line"><span class="keyword">WHERE</span> teacher.Tname = <span class="string">'张三'</span> <span class="keyword">AND</span> course.TId = teacher.TId <span class="keyword">AND</span> sc.CId = course.CId <span class="keyword">AND</span> student.SId = sc.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>

<p>7.查询没有学全所有课程的同学的信息</p>
<ul>
<li>分组得到每位学生的课程数。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> course_count</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------------+</span><br><span class="line">| SId  | course_count |</span><br><span class="line">+------+--------------+</span><br><span class="line">| 01   |            3 |</span><br><span class="line">| 02   |            3 |</span><br><span class="line">| 03   |            3 |</span><br><span class="line">| 04   |            3 |</span><br><span class="line">| 05   |            2 |</span><br><span class="line">| 06   |            2 |</span><br><span class="line">| 07   |            2 |</span><br><span class="line">+------+--------------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部的SQL代码：选出<code>课程数=总课程数</code>的学生的信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.*</span><br><span class="line"><span class="keyword">FROM</span> student,(<span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> course_count <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>) <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> student.SId = t1.SId <span class="keyword">AND</span> t1.course_count = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> course);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>


<p>8.查询至少有一门课与学号为” 01 “的同学所学相同的同学的信息</p>
<p>首先查找得到<code>SId = &#39;01&#39;</code>的学生的课程信息<code>CId</code>，然后找到所有选这些课程的学生<code>SId</code>，最后根据<code>SId</code>找到学生信息。</p>
<ul>
<li>前两步：得到学生<code>SId</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">SId</span></span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">WHERE</span> CId <span class="keyword">IN</span> (<span class="keyword">SELECT</span> CId <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> <span class="keyword">SId</span> = <span class="string">'01'</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+</span><br><span class="line">| SId  |</span><br><span class="line">+------+</span><br><span class="line">| 01   |</span><br><span class="line">| 02   |</span><br><span class="line">| 03   |</span><br><span class="line">| 04   |</span><br><span class="line">| 05   |</span><br><span class="line">| 06   |</span><br><span class="line">| 07   |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部SQL代码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> student.*</span><br><span class="line"><span class="keyword">FROM</span> sc,student</span><br><span class="line"><span class="keyword">WHERE</span> CId <span class="keyword">IN</span> (<span class="keyword">SELECT</span> CId <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> <span class="keyword">SId</span> = <span class="string">'01'</span>) <span class="keyword">AND</span> sc.SId = student.SId <span class="keyword">AND</span> sc.SId != <span class="string">'01'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>


<p><strong>9.查询和” 01 “号的同学学习的课程完全相同的其他同学的信息（不会！）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> student.*</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> student.SId,t.CId</span><br><span class="line"><span class="keyword">from</span> student ,(<span class="keyword">select</span> sc.CId <span class="keyword">from</span> sc <span class="keyword">where</span> sc.SId=<span class="string">'01'</span>) <span class="keyword">as</span> t) <span class="keyword">as</span> t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sc <span class="keyword">on</span> t1.SId=sc.SId <span class="keyword">and</span> t1.CId=sc.CId,student</span><br><span class="line"><span class="keyword">where</span> sc.SId <span class="keyword">is</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">and</span>   t1.SId=student.SId</span><br></pre></td></tr></table></figure>

<p>10.查询没学过”张三”老师讲授的任一门课程的学生姓名 </p>
<p>这道题目，首先需要找到<code>张三</code>老师讲授的课程，然后查找得到选这门课的学生，<strong>最后也是最关键的，就是选中除这部分学生以外的学生</strong>！</p>
<ul>
<li>第一步：找到<code>张三</code>老师讲授的课程，然后查找得到选这门课的学生</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.SId</span><br><span class="line"><span class="keyword">FROM</span> sc,teacher,course</span><br><span class="line"><span class="keyword">WHERE</span> teacher.Tname = <span class="string">'张三'</span> <span class="keyword">AND</span> teacher.TId = course.TId <span class="keyword">AND</span> course.CId = sc.CId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+</span><br><span class="line">| SId  |</span><br><span class="line">+------+</span><br><span class="line">| 01   |</span><br><span class="line">| 02   |</span><br><span class="line">| 03   |</span><br><span class="line">| 04   |</span><br><span class="line">| 05   |</span><br><span class="line">| 07   |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部SQL代码：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.*</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SId</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> sc.SId <span class="keyword">FROM</span> sc,teacher,course <span class="keyword">WHERE</span> teacher.Tname = <span class="string">'张三'</span> <span class="keyword">AND</span> teacher.TId = course.TId <span class="keyword">AND</span> course.CId = sc.CId);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |</span><br><span class="line">| 09   | 张三   | 2017-12-20 00:00:00 | 女   |</span><br><span class="line">| 10   | 李四   | 2017-12-25 00:00:00 | 女   |</span><br><span class="line">| 11   | 李四   | 2017-12-30 00:00:00 | 女   |</span><br><span class="line">| 12   | 赵六   | 2017-01-01 00:00:00 | 女   |</span><br><span class="line">| 13   | 孙七   | 2018-01-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>

<p>11.查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 </p>
<p>首先查找得到不及格的课程，然后按照学生<code>SId</code>分组统计不及格课程数目，选出其中大于等于两门的学生，得到他们的信息以及平均成绩。</p>
<ul>
<li>查找得到不及格的课程，然后按照学生<code>SId</code>分组统计不及格课程数目，选出其中大于等于两门的学生</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">COUNT</span>(<span class="keyword">SId</span>) <span class="keyword">AS</span> count_course</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">WHERE</span> sc.score &lt; <span class="number">60</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">SId</span>) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------------+</span><br><span class="line">| SId  | count_course |</span><br><span class="line">+------+--------------+</span><br><span class="line">| 04   |            3 |</span><br><span class="line">| 06   |            2 |</span><br><span class="line">+------+--------------+</span><br></pre></td></tr></table></figure>

<ul>
<li>由于题目中要求得到平均成绩，因此将上面的这个分组查询修改为：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">AVG</span>(score) <span class="keyword">AS</span> score_avg</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">WHERE</span> score &lt; <span class="number">60</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-----------+</span><br><span class="line">| SId  | score_avg |</span><br><span class="line">+------+-----------+</span><br><span class="line">| 04   |  33.33333 |</span><br><span class="line">| 06   |  32.50000 |</span><br><span class="line">+------+-----------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部的SQL代码：将上面查询出来的结果作为<code>t1</code>表和<code>student</code>表进行联结，得到这部分学生的信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.*,t1.score_avg</span><br><span class="line"><span class="keyword">FROM</span> student,(<span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">AVG</span>(score) <span class="keyword">AS</span> score_avg <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> score &lt; <span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span> <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>) <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> student.SId = t1.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+-----------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | score_avg |</span><br><span class="line">+------+--------+---------------------+------+-----------+</span><br><span class="line">| 04   | 李云   | 1990-08-06 00:00:00 | 男   |  33.33333 |</span><br><span class="line">| 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |  32.50000 |</span><br><span class="line">+------+--------+---------------------+------+-----------+</span><br></pre></td></tr></table></figure>


<p>12.检索” 01 “课程分数小于60，按分数降序排列的学生信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.*,sc.score</span><br><span class="line"><span class="keyword">FROM</span> student,sc</span><br><span class="line"><span class="keyword">WHERE</span> sc.CId = <span class="string">'01'</span> <span class="keyword">AND</span> sc.score &lt; <span class="number">60</span> <span class="keyword">AND</span> sc.SId = student.SId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+-------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | score |</span><br><span class="line">+------+--------+---------------------+------+-------+</span><br><span class="line">| 04   | 李云   | 1990-08-06 00:00:00 | 男   |  50.0 |</span><br><span class="line">| 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |  31.0 |</span><br><span class="line">+------+--------+---------------------+------+-------+</span><br></pre></td></tr></table></figure>


<p>13.按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</p>
<ul>
<li>首先通过按照学生<code>SId</code>分组得到平均成绩：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">AVG</span>(score) <span class="keyword">AS</span> score_avg</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-----------+</span><br><span class="line">| SId  | score_avg |</span><br><span class="line">+------+-----------+</span><br><span class="line">| 01   |  89.66667 |</span><br><span class="line">| 02   |  70.00000 |</span><br><span class="line">| 03   |  80.00000 |</span><br><span class="line">| 04   |  33.33333 |</span><br><span class="line">| 05   |  81.50000 |</span><br><span class="line">| 06   |  32.50000 |</span><br><span class="line">| 07   |  93.50000 |</span><br><span class="line">+------+-----------+</span><br></pre></td></tr></table></figure>

<ul>
<li>然后将上面这个查询结果作为表<code>t1</code>和成绩表<code>sc</code>联结，得到各科成绩以及平均成绩：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.*,t1.score_avg</span><br><span class="line"><span class="keyword">FROM</span> sc,(<span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">AVG</span>(score) <span class="keyword">AS</span> score_avg <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>) <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> sc.SId = t1.SId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score_avg <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+-----------+</span><br><span class="line">| SId  | CId  | score | score_avg |</span><br><span class="line">+------+------+-------+-----------+</span><br><span class="line">| 07   | 02   |  89.0 |  93.50000 |</span><br><span class="line">| 07   | 03   |  98.0 |  93.50000 |</span><br><span class="line">| 01   | 01   |  80.0 |  89.66667 |</span><br><span class="line">| 01   | 02   |  90.0 |  89.66667 |</span><br><span class="line">| 01   | 03   |  99.0 |  89.66667 |</span><br><span class="line">| 05   | 01   |  76.0 |  81.50000 |</span><br><span class="line">| 05   | 02   |  87.0 |  81.50000 |</span><br><span class="line">| 03   | 03   |  80.0 |  80.00000 |</span><br><span class="line">| 03   | 01   |  80.0 |  80.00000 |</span><br><span class="line">| 03   | 02   |  80.0 |  80.00000 |</span><br><span class="line">| 02   | 01   |  70.0 |  70.00000 |</span><br><span class="line">| 02   | 02   |  60.0 |  70.00000 |</span><br><span class="line">| 02   | 03   |  80.0 |  70.00000 |</span><br><span class="line">| 04   | 01   |  50.0 |  33.33333 |</span><br><span class="line">| 04   | 02   |  30.0 |  33.33333 |</span><br><span class="line">| 04   | 03   |  20.0 |  33.33333 |</span><br><span class="line">| 06   | 01   |  31.0 |  32.50000 |</span><br><span class="line">| 06   | 03   |  34.0 |  32.50000 |</span><br><span class="line">+------+------+-------+-----------+</span><br></pre></td></tr></table></figure>

<p>14.查询各科成绩最高分、最低分和平均分。1）以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率（及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90）。2）要求输出课程号和选修人数，<strong>查询结果按人数降序排列，若人数相同，按课程号升序排列</strong>。</p>
<ul>
<li>优秀率的计算公式：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SUM(CASE WHEN sc.score &gt;= 90 THEN 1 ELSE 0 END)/COUNT(sc.score)</span><br></pre></td></tr></table></figure>

<p>优良率、中等率、合作率的计算类似优秀率。</p>
<ul>
<li>全部的SQL代码：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.CId,<span class="keyword">MAX</span>(sc.score) <span class="keyword">AS</span> 最高分,<span class="keyword">MIN</span>(sc.score) <span class="keyword">AS</span> 最低分,<span class="keyword">AVG</span>(sc.score) <span class="keyword">AS</span> 平均分,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> 选修人数,<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> 及格率,<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">70</span> <span class="keyword">and</span> sc.score&lt;<span class="number">80</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> 中等率,<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">80</span> <span class="keyword">and</span> sc.score&lt;<span class="number">90</span> <span class="keyword">and</span> sc.score&lt;<span class="number">80</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> 优良率,<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*) <span class="keyword">AS</span> 优秀率 </span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.CId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(*) <span class="keyword">DESC</span>,sc.CId <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-----------+-----------+-----------+--------------+-----------+-----------+-----------+-----------+</span><br><span class="line">| CId  | 最高分    | 最低分    | 平均分    | 选修人数     | 及格率    | 中等率    | 优良率    | 优秀率    |</span><br><span class="line">+------+-----------+-----------+-----------+--------------+-----------+-----------+-----------+-----------+</span><br><span class="line">| 01   |      80.0 |      31.0 |  64.50000 |            6 |    0.6667 |    0.3333 |    0.0000 |    0.0000 |</span><br><span class="line">| 02   |      90.0 |      30.0 |  72.66667 |            6 |    0.8333 |    0.0000 |    0.0000 |    0.1667 |</span><br><span class="line">| 03   |      99.0 |      20.0 |  68.50000 |            6 |    0.6667 |    0.0000 |    0.0000 |    0.3333 |</span><br><span class="line">+------+-----------+-----------+-----------+--------------+-----------+-----------+-----------+-----------+</span><br></pre></td></tr></table></figure>

<p>15.按各科成绩进行排序，并显示排名，<code>Score</code>重复时保留名次空缺（不会！）</p>
<p>15.1 按各科成绩进行排序，并显示排名， Score 重复时合并名次（不会！）</p>
<p><strong>16.查询学生的总成绩，并进行排名，总分重复时保留名次空缺</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.*,<span class="keyword">COUNT</span>(t2.total) <span class="keyword">AS</span> ranks</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">SUM</span>(score) <span class="keyword">AS</span> total <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>) t1,(<span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">SUM</span>(score) <span class="keyword">AS</span> total <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>) t2</span><br><span class="line"><span class="keyword">WHERE</span> t2.total &gt;= t1.total</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t1.SId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ranks;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+-------+</span><br><span class="line">| SId  | total | ranks |</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| 01   | 269.0 |     1 |</span><br><span class="line">| 03   | 240.0 |     2 |</span><br><span class="line">| 02   | 210.0 |     3 |</span><br><span class="line">| 07   | 187.0 |     4 |</span><br><span class="line">| 05   | 163.0 |     5 |</span><br><span class="line">| 04   | 100.0 |     6 |</span><br><span class="line">| 06   |  65.0 |     7 |</span><br><span class="line">+------+-------+-------+</span><br></pre></td></tr></table></figure>



<p><strong>16.1 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.*,<span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> t2.total) <span class="keyword">AS</span> ranks</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">SUM</span>(score) <span class="keyword">AS</span> total <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>) t1,(<span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">SUM</span>(score) <span class="keyword">AS</span> total <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>) t2</span><br><span class="line"><span class="keyword">WHERE</span> t2.total &gt;= t1.total</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t1.SId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ranks;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+-------+</span><br><span class="line">| SId  | total | ranks |</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| 01   | 269.0 |     1 |</span><br><span class="line">| 03   | 240.0 |     2 |</span><br><span class="line">| 02   | 210.0 |     3 |</span><br><span class="line">| 07   | 187.0 |     4 |</span><br><span class="line">| 05   | 163.0 |     5 |</span><br><span class="line">| 04   | 100.0 |     6 |</span><br><span class="line">| 06   |  65.0 |     7 |</span><br><span class="line">+------+-------+-------+</span><br></pre></td></tr></table></figure>


<p>17.统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比</p>
<ul>
<li><code>[100-85]</code>分数段人数：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sc.score&gt;=<span class="number">85</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">AS</span> <span class="string">'[100,85]人数'</span></span><br><span class="line"><span class="keyword">FROM</span> sc;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------------+</span><br><span class="line">| [100,85]人数   |</span><br><span class="line">+----------------+</span><br><span class="line">|             18 |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure>

<p><code>[85-70]</code>，<code>[70-60]</code>，<code>[60-0]</code>分数段人数类似。</p>
<p>百分比的计算则再除以一个总人数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sc.score&gt;=<span class="number">85</span> <span class="keyword">AND</span> sc.score&lt;=<span class="number">100</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">COUNT</span>(*)*<span class="number">100</span>,<span class="string">'%'</span>) <span class="keyword">AS</span> <span class="string">'[85-100]占比'</span></span><br><span class="line"><span class="keyword">FROM</span> sc;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------------+</span><br><span class="line">| [85-100]占比   |</span><br><span class="line">+----------------+</span><br><span class="line">| 27.7778%       |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure>


<ul>
<li>全部的SQL代码：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> course.Cname,t1.*</span><br><span class="line"><span class="keyword">FROM</span> course <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> sc.CId,</span><br><span class="line">                       <span class="keyword">CONCAT</span>(<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">85</span> <span class="keyword">and</span> sc.score&lt;=<span class="number">100</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*)*<span class="number">100</span>,<span class="string">'%'</span>) <span class="keyword">as</span> <span class="string">'[85-100]'</span>,</span><br><span class="line">                       <span class="keyword">CONCAT</span>(<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">70</span> <span class="keyword">and</span> sc.score&lt;<span class="number">85</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*)*<span class="number">100</span>,<span class="string">'%'</span>) <span class="keyword">as</span> <span class="string">'[70-85)'</span>,</span><br><span class="line">                       <span class="keyword">CONCAT</span>(<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">60</span> <span class="keyword">and</span> sc.score&lt;<span class="number">70</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*)*<span class="number">100</span>,<span class="string">'%'</span>) <span class="keyword">as</span> <span class="string">'[60-70)'</span>,</span><br><span class="line">                       <span class="keyword">CONCAT</span>(<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">0</span> <span class="keyword">and</span> sc.score&lt;<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*)*<span class="number">100</span>,<span class="string">'%'</span>) <span class="keyword">as</span> <span class="string">'[0-60)'</span></span><br><span class="line">                       <span class="keyword">FROM</span> sc</span><br><span class="line">                       <span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.CId) <span class="keyword">AS</span> t1 </span><br><span class="line"><span class="keyword">ON</span> course.CId=t1.CId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------+------+----------+----------+----------+----------+</span><br><span class="line">| Cname  | CId  | [85-100] | [70-85)  | [60-70)  | [0-60)   |</span><br><span class="line">+--------+------+----------+----------+----------+----------+</span><br><span class="line">| 语文   | 01   | 0.0000%  | 66.6667% | 0.0000%  | 33.3333% |</span><br><span class="line">| 数学   | 02   | 50.0000% | 16.6667% | 16.6667% | 16.6667% |</span><br><span class="line">| 英语   | 03   | 33.3333% | 33.3333% | 0.0000%  | 33.3333% |</span><br><span class="line">+--------+------+----------+----------+----------+----------+</span><br></pre></td></tr></table></figure>

<p>18.查询各科成绩前三名的记录</p>
<p><strong>思路：前三名转化为若大于此成绩的数量少于3即为前三名。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> sc t1</span><br><span class="line"><span class="keyword">WHERE</span> (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> sc t2 <span class="keyword">WHERE</span> t2.score&gt;t1.score <span class="keyword">AND</span> t2.CId = t1.CId) &lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t1.CId <span class="keyword">ASC</span>,t1.score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 05   | 01   |  76.0 |</span><br><span class="line">| 01   | 02   |  90.0 |</span><br><span class="line">| 07   | 02   |  89.0 |</span><br><span class="line">| 05   | 02   |  87.0 |</span><br><span class="line">| 01   | 03   |  99.0 |</span><br><span class="line">| 07   | 03   |  98.0 |</span><br><span class="line">| 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>

<p>19.查询每门课程被选修的学生数 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CId,<span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+----------+</span><br><span class="line">| CId  | COUNT(*) |</span><br><span class="line">+------+----------+</span><br><span class="line">| 01   |        6 |</span><br><span class="line">| 02   |        6 |</span><br><span class="line">| 03   |        6 |</span><br><span class="line">+------+----------+</span><br></pre></td></tr></table></figure>

<p>20.查询出只选修两门课程的学生学号和姓名</p>
<ul>
<li>查询得到只选修两门课程的学生学号</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span></span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+</span><br><span class="line">| SId  |</span><br><span class="line">+------+</span><br><span class="line">| 05   |</span><br><span class="line">| 06   |</span><br><span class="line">| 07   |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部的SQL代码：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.SId,student.Sname</span><br><span class="line"><span class="keyword">FROM</span> student,(<span class="keyword">SELECT</span> <span class="keyword">SId</span> <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span> <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) = <span class="number">2</span>) <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> student.SId = t1.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+</span><br><span class="line">| SId  | Sname  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 05   | 周梅   |</span><br><span class="line">| 06   | 吴兰   |</span><br><span class="line">| 07   | 郑竹   |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure>


<p>21.查询男生、女生人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Ssex,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> nums</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Ssex;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+</span><br><span class="line">| Ssex | nums |</span><br><span class="line">+------+------+</span><br><span class="line">| 男   |    4 |</span><br><span class="line">| 女   |    8 |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure>


<p>22.查询名字中含有「风」字的学生信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">'%风%'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>


<p>23.查询同名同性学生名单，并统计同名人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Ssex,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> nums </span><br><span class="line"><span class="keyword">FROM</span> Student </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sname,Ssex </span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------+------+------+</span><br><span class="line">| Sname  | Ssex | nums |</span><br><span class="line">+--------+------+------+</span><br><span class="line">| 李四   | 女   |    2 |</span><br><span class="line">+--------+------+------+</span><br></pre></td></tr></table></figure>


<p>24.查询 1990 年出生的学生名单</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Year</span>(Sage) = <span class="number">1990</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>

<p>25.查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CId,<span class="keyword">AVG</span>(score) <span class="keyword">AS</span> score_avg</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">AVG</span>(score) <span class="keyword">DESC</span>,CId <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-----------+</span><br><span class="line">| CId  | score_avg |</span><br><span class="line">+------+-----------+</span><br><span class="line">| 02   |  72.66667 |</span><br><span class="line">| 03   |  68.50000 |</span><br><span class="line">| 01   |  64.50000 |</span><br><span class="line">+------+-----------+</span><br></pre></td></tr></table></figure>


<p>26.查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩</p>
<p>此题跟第2题是类似的！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.SId,student.Sname,t1.score_avg</span><br><span class="line"><span class="keyword">FROM</span> student,(<span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">AVG</span>(score) <span class="keyword">AS</span> score_avg <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span> <span class="keyword">HAVING</span> <span class="keyword">AVG</span>(score) &gt;= <span class="number">85</span>) <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> student.SId = t1.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+-----------+</span><br><span class="line">| SId  | Sname  | score_avg |</span><br><span class="line">+------+--------+-----------+</span><br><span class="line">| 01   | 赵雷   |  89.66667 |</span><br><span class="line">| 07   | 郑竹   |  93.50000 |</span><br><span class="line">+------+--------+-----------+</span><br></pre></td></tr></table></figure>

<p>27.查询课程名称为「数学」，且分数低于 60 的学生姓名和分数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.Sname,sc.score</span><br><span class="line"><span class="keyword">FROM</span> course,sc,student</span><br><span class="line"><span class="keyword">WHERE</span> course.Cname = <span class="string">'数学'</span> <span class="keyword">AND</span> course.CId = sc.CId <span class="keyword">AND</span> sc.score &lt; <span class="number">60</span> <span class="keyword">AND</span> sc.SId = student.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------+-------+</span><br><span class="line">| Sname  | score |</span><br><span class="line">+--------+-------+</span><br><span class="line">| 李云   |  30.0 |</span><br><span class="line">+--------+-------+</span><br></pre></td></tr></table></figure>

<p>28.查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）</p>
<ul>
<li>由于这里需要得到所有学生所有课程的情况，所以不添加联结条件得到笛卡儿积</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> student.SId,course.CID</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">JOIN</span> course;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+</span><br><span class="line">| SId  | CID  |</span><br><span class="line">+------+------+</span><br><span class="line">| 01   | 01   |</span><br><span class="line">| 01   | 02   |</span><br><span class="line">| 01   | 03   |</span><br><span class="line">| 02   | 01   |</span><br><span class="line">| 02   | 02   |</span><br><span class="line">| 02   | 03   |</span><br><span class="line">| 03   | 01   |</span><br><span class="line">| 03   | 02   |</span><br><span class="line">| 03   | 03   |</span><br><span class="line">| 04   | 01   |</span><br><span class="line">| 04   | 02   |</span><br><span class="line">| 04   | 03   |</span><br><span class="line">| 05   | 01   |</span><br><span class="line">| 05   | 02   |</span><br><span class="line">| 05   | 03   |</span><br><span class="line">| 06   | 01   |</span><br><span class="line">| 06   | 02   |</span><br><span class="line">| 06   | 03   |</span><br><span class="line">| 07   | 01   |</span><br><span class="line">| 07   | 02   |</span><br><span class="line">| 07   | 03   |</span><br><span class="line">| 09   | 01   |</span><br><span class="line">| 09   | 02   |</span><br><span class="line">| 09   | 03   |</span><br><span class="line">| 10   | 01   |</span><br><span class="line">| 10   | 02   |</span><br><span class="line">| 10   | 03   |</span><br><span class="line">| 11   | 01   |</span><br><span class="line">| 11   | 02   |</span><br><span class="line">| 11   | 03   |</span><br><span class="line">| 12   | 01   |</span><br><span class="line">| 12   | 02   |</span><br><span class="line">| 12   | 03   |</span><br><span class="line">| 13   | 01   |</span><br><span class="line">| 13   | 02   |</span><br><span class="line">| 13   | 03   |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部SQL代码：这里将前面得到的笛卡尔积与<code>sc</code>表左联结得到所有学生所有课程的成绩，然后进行正确的排序。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.SId,t1.CId,sc.score</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> student.SId,course.CId <span class="keyword">FROM</span> student <span class="keyword">JOIN</span> course) <span class="keyword">AS</span> t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sc</span><br><span class="line"><span class="keyword">ON</span> t1.SId = sc.SId <span class="keyword">AND</span> t1.CId = sc.CId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t1.SId <span class="keyword">ASC</span>,t1.CId <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 01   | 02   |  90.0 |</span><br><span class="line">| 01   | 03   |  99.0 |</span><br><span class="line">| 02   | 01   |  70.0 |</span><br><span class="line">| 02   | 02   |  60.0 |</span><br><span class="line">| 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 03   | 02   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">| 04   | 01   |  50.0 |</span><br><span class="line">| 04   | 02   |  30.0 |</span><br><span class="line">| 04   | 03   |  20.0 |</span><br><span class="line">| 05   | 01   |  76.0 |</span><br><span class="line">| 05   | 02   |  87.0 |</span><br><span class="line">| 05   | 03   |  NULL |</span><br><span class="line">| 06   | 01   |  31.0 |</span><br><span class="line">| 06   | 02   |  NULL |</span><br><span class="line">| 06   | 03   |  34.0 |</span><br><span class="line">| 07   | 01   |  NULL |</span><br><span class="line">| 07   | 02   |  89.0 |</span><br><span class="line">| 07   | 03   |  98.0 |</span><br><span class="line">| 09   | 01   |  NULL |</span><br><span class="line">| 09   | 02   |  NULL |</span><br><span class="line">| 09   | 03   |  NULL |</span><br><span class="line">| 10   | 01   |  NULL |</span><br><span class="line">| 10   | 02   |  NULL |</span><br><span class="line">| 10   | 03   |  NULL |</span><br><span class="line">| 11   | 01   |  NULL |</span><br><span class="line">| 11   | 02   |  NULL |</span><br><span class="line">| 11   | 03   |  NULL |</span><br><span class="line">| 12   | 01   |  NULL |</span><br><span class="line">| 12   | 02   |  NULL |</span><br><span class="line">| 12   | 03   |  NULL |</span><br><span class="line">| 13   | 01   |  NULL |</span><br><span class="line">| 13   | 02   |  NULL |</span><br><span class="line">| 13   | 03   |  NULL |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>


<p>29.查询任何一门课程成绩在70分以上的姓名、课程名称和分数</p>
<p>这里需要注意，需要查询的是学生姓名（<code>student</code>表中）、课程名称（<code>course</code>表中），因此需要联结三个表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.Sname,course.CId,sc.score</span><br><span class="line"><span class="keyword">FROM</span> student,sc,course</span><br><span class="line"><span class="keyword">WHERE</span> student.SId = sc.SId <span class="keyword">AND</span> sc.CId = course.CId <span class="keyword">AND</span> sc.score &gt;= <span class="number">70</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------+------+-------+</span><br><span class="line">| Sname  | CId  | score |</span><br><span class="line">+--------+------+-------+</span><br><span class="line">| 赵雷   | 01   |  80.0 |</span><br><span class="line">| 赵雷   | 02   |  90.0 |</span><br><span class="line">| 赵雷   | 03   |  99.0 |</span><br><span class="line">| 钱电   | 01   |  70.0 |</span><br><span class="line">| 钱电   | 03   |  80.0 |</span><br><span class="line">| 孙风   | 01   |  80.0 |</span><br><span class="line">| 孙风   | 02   |  80.0 |</span><br><span class="line">| 孙风   | 03   |  80.0 |</span><br><span class="line">| 周梅   | 01   |  76.0 |</span><br><span class="line">| 周梅   | 02   |  87.0 |</span><br><span class="line">| 郑竹   | 02   |  89.0 |</span><br><span class="line">| 郑竹   | 03   |  98.0 |</span><br><span class="line">+--------+------+-------+</span><br></pre></td></tr></table></figure>


<p>30.查询存在不及格的课程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">WHERE</span> sc.score &lt; <span class="number">60</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 04   | 01   |  50.0 |</span><br><span class="line">| 04   | 02   |  30.0 |</span><br><span class="line">| 04   | 03   |  20.0 |</span><br><span class="line">| 06   | 01   |  31.0 |</span><br><span class="line">| 06   | 03   |  34.0 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>


<p>31.查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名</p>
<p>这个题目跟12题是类似的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.SId,student.Sname</span><br><span class="line"><span class="keyword">FROM</span> student,sc</span><br><span class="line"><span class="keyword">WHERE</span> student.SId = sc.SId <span class="keyword">AND</span> sc.CId = <span class="string">'01'</span> <span class="keyword">AND</span> sc.score &gt;= <span class="number">80</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+</span><br><span class="line">| SId  | Sname  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 01   | 赵雷   |</span><br><span class="line">| 03   | 孙风   |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure>


<p>32.求每门课程的学生人数 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CId,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> course_num</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------------+</span><br><span class="line">| CId  | course_num |</span><br><span class="line">+------+------------+</span><br><span class="line">| 01   |          6 |</span><br><span class="line">| 02   |          6 |</span><br><span class="line">| 03   |          6 |</span><br><span class="line">+------+------------+</span><br></pre></td></tr></table></figure>


<p>33.成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</p>
<p><strong>1)如果有多门课程，然后每门课程选出成绩最高的学生（成绩重复）的话，是如下的解法：</strong></p>
<ul>
<li>按照课程<code>CId</code>分组得到每门课程的最高分</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CId,<span class="keyword">MAX</span>(score) <span class="keyword">AS</span> max_score</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-----------+</span><br><span class="line">| CId  | max_score |</span><br><span class="line">+------+-----------+</span><br><span class="line">| 01   |      80.0 |</span><br><span class="line">| 02   |      90.0 |</span><br><span class="line">| 03   |      99.0 |</span><br><span class="line">+------+-----------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部SQL代码：查询得到「张三」老师教的课程和前面得到的最高分表<code>t1</code>联结（<code>course.CId = t1.CId AND t1.max_score = sc.score</code>），最后得到学生信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.*,t1.CId,t1.max_score</span><br><span class="line"><span class="keyword">FROM</span> teacher,course,student,sc,(<span class="keyword">SELECT</span> CId,<span class="keyword">MAX</span>(score) <span class="keyword">AS</span> max_score <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> CId) <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> teacher.Tname = <span class="string">'张三'</span> <span class="keyword">AND</span> teacher.TId = course.TId <span class="keyword">AND</span> course.CId = t1.CId <span class="keyword">AND</span> t1.max_score = sc.score <span class="keyword">AND</span> student.SId = sc.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+------+-----------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | CId  | max_score |</span><br><span class="line">+------+--------+---------------------+------+------+-----------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   | 02   |      90.0 |</span><br><span class="line">+------+--------+---------------------+------+------+-----------+</span><br></pre></td></tr></table></figure>


<p><strong>2)如果有多门课程，然后只选出成绩最高的学生的话（成绩不重复），是如下的解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.*,sc.CId,sc.score</span><br><span class="line"><span class="keyword">FROM</span> teacher,course,sc,student</span><br><span class="line"><span class="keyword">WHERE</span> teacher.Tname = <span class="string">'张三'</span> <span class="keyword">AND</span> teacher.TId = course.TId <span class="keyword">AND</span> course.CId = sc.CId <span class="keyword">AND</span> sc.SId = student.SId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+------+-------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | CId  | score |</span><br><span class="line">+------+--------+---------------------+------+------+-------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   | 02   |  90.0 |</span><br><span class="line">+------+--------+---------------------+------+------+-------+</span><br></pre></td></tr></table></figure>

<p>34.成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</p>
<p>这道题的思路继续上一题(2)，我们已经查询到了符合限定条件的最高分了，这个时候只用比较这张表，找到全部score等于这个最高分的记录就可。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.*, sc.score, sc.cid </span><br><span class="line"><span class="keyword">FROM</span> student, teacher, course,sc </span><br><span class="line"><span class="keyword">WHERE</span> teacher.TId = course.TId</span><br><span class="line"><span class="keyword">AND</span> sc.SId = student.SId</span><br><span class="line"><span class="keyword">AND</span> sc.CId = course.CId</span><br><span class="line"><span class="keyword">AND</span> teacher.Tname = <span class="string">"张三"</span></span><br><span class="line"><span class="keyword">AND</span> sc.score = (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(sc.score) </span><br><span class="line">    <span class="keyword">FROM</span> sc,student, teacher, course</span><br><span class="line">    <span class="keyword">WHERE</span> teacher.TId = course.TId</span><br><span class="line">    <span class="keyword">and</span> sc.SId = student.SId</span><br><span class="line">    <span class="keyword">and</span> sc.CId = course.CId</span><br><span class="line">    <span class="keyword">and</span> teacher.Tname = <span class="string">"张三"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+-------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | score | cid  |</span><br><span class="line">+------+--------+---------------------+------+-------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |  90.0 | 02   |</span><br><span class="line">+------+--------+---------------------+------+-------+------+</span><br></pre></td></tr></table></figure>


<p>35.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</p>
<ul>
<li>按照学生学号<code>SId</code>、成绩<code>score</code>进行分组计数：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>,score,<span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>,score;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+----------+</span><br><span class="line">| SId  | score | COUNT(*) |</span><br><span class="line">+------+-------+----------+</span><br><span class="line">| 01   |  80.0 |        1 |</span><br><span class="line">| 01   |  90.0 |        1 |</span><br><span class="line">| 01   |  99.0 |        1 |</span><br><span class="line">| 02   |  70.0 |        1 |</span><br><span class="line">| 02   |  60.0 |        1 |</span><br><span class="line">| 02   |  80.0 |        1 |</span><br><span class="line">| 03   |  80.0 |        3 |</span><br><span class="line">| 04   |  50.0 |        1 |</span><br><span class="line">| 04   |  30.0 |        1 |</span><br><span class="line">| 04   |  20.0 |        1 |</span><br><span class="line">| 05   |  76.0 |        1 |</span><br><span class="line">| 05   |  87.0 |        1 |</span><br><span class="line">| 06   |  31.0 |        1 |</span><br><span class="line">| 06   |  34.0 |        1 |</span><br><span class="line">| 07   |  89.0 |        1 |</span><br><span class="line">| 07   |  98.0 |        1 |</span><br><span class="line">+------+-------+----------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部的SQL代码：从上面分组结果中选出计数值大于2的学生学号<code>SId</code>，学生成绩<code>score</code>，然后和<code>sc</code>表联结，过滤出想要的信息。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.SId,sc.CId,sc.score</span><br><span class="line"><span class="keyword">FROM</span> sc,(<span class="keyword">SELECT</span> <span class="keyword">SId</span>,score <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>,score <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt; <span class="number">1</span>) <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> sc.SId = t1.SId <span class="keyword">AND</span> sc.score = t1.score;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 03   | 02   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>


<p>36.查询每门功成绩最好的前两名</p>
<p>这题和18题类似。</p>
<p>思路：前两名转化为若大于此成绩的数量少于2即为前两名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> sc t1</span><br><span class="line"><span class="keyword">WHERE</span> (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> sc t2 <span class="keyword">WHERE</span> t1.score &lt; t2.score <span class="keyword">AND</span> t1.CId = t2.CId) &lt; <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t1.CId <span class="keyword">ASC</span>,t1.score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 01   | 02   |  90.0 |</span><br><span class="line">| 07   | 02   |  89.0 |</span><br><span class="line">| 01   | 03   |  99.0 |</span><br><span class="line">| 07   | 03   |  98.0 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>


<p>37.统计每门课程的学生选修人数（超过 5 人的课程才统计）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CId,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> stu_num</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CId</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt; <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------------+</span><br><span class="line">| CId  |   stu_num  |</span><br><span class="line">+------+------------+</span><br><span class="line">| 01   |          6 |</span><br><span class="line">| 02   |          6 |</span><br><span class="line">| 03   |          6 |</span><br><span class="line">+------+------------+</span><br></pre></td></tr></table></figure>


<p>38.检索至少选修两门课程的学生学号 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> course_num</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------------+</span><br><span class="line">| SId  | course_num |</span><br><span class="line">+------+------------+</span><br><span class="line">| 01   |          3 |</span><br><span class="line">| 02   |          3 |</span><br><span class="line">| 03   |          3 |</span><br><span class="line">| 04   |          3 |</span><br><span class="line">| 05   |          2 |</span><br><span class="line">| 06   |          2 |</span><br><span class="line">| 07   |          2 |</span><br><span class="line">+------+------------+</span><br></pre></td></tr></table></figure>


<p>39.查询选修了全部课程的学生信息</p>
<ul>
<li>查询得到<code>选课数=全部课程数</code>的学生学号<code>SId</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span> </span><br><span class="line"><span class="keyword">FROM</span> sc </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span> </span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> course);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+</span><br><span class="line">| SId  |</span><br><span class="line">+------+</span><br><span class="line">| 01   |</span><br><span class="line">| 02   |</span><br><span class="line">| 03   |</span><br><span class="line">| 04   |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<ul>
<li>全部的SQL代码：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.*</span><br><span class="line"><span class="keyword">FROM</span> student,(<span class="keyword">SELECT</span> <span class="keyword">SId</span> <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span> <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> course)) <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> student.SId = t1.SId;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>


<p>40.查询各学生的年龄，只按年份来算 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>,Sname,(<span class="keyword">YEAR</span>(<span class="keyword">CURDATE</span>()) - <span class="keyword">YEAR</span>(Sage)) <span class="keyword">AS</span> age</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+------+</span><br><span class="line">| SId  | Sname  | age  |</span><br><span class="line">+------+--------+------+</span><br><span class="line">| 01   | 赵雷   |   29 |</span><br><span class="line">| 02   | 钱电   |   29 |</span><br><span class="line">| 03   | 孙风   |   29 |</span><br><span class="line">| 04   | 李云   |   29 |</span><br><span class="line">| 05   | 周梅   |   28 |</span><br><span class="line">| 06   | 吴兰   |   27 |</span><br><span class="line">| 07   | 郑竹   |   30 |</span><br><span class="line">| 09   | 张三   |    2 |</span><br><span class="line">| 10   | 李四   |    2 |</span><br><span class="line">| 11   | 李四   |    2 |</span><br><span class="line">| 12   | 赵六   |    2 |</span><br><span class="line">| 13   | 孙七   |    1 |</span><br><span class="line">+------+--------+------+</span><br></pre></td></tr></table></figure>


<p>41.按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>,Sname,<span class="keyword">TIMESTAMPDIFF</span>(<span class="keyword">YEAR</span>,Sage,<span class="keyword">CURDATE</span>()) <span class="keyword">AS</span> age</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+------+</span><br><span class="line">| SId  | Sname  | age  |</span><br><span class="line">+------+--------+------+</span><br><span class="line">| 01   | 赵雷   |   29 |</span><br><span class="line">| 02   | 钱电   |   28 |</span><br><span class="line">| 03   | 孙风   |   28 |</span><br><span class="line">| 04   | 李云   |   28 |</span><br><span class="line">| 05   | 周梅   |   27 |</span><br><span class="line">| 06   | 吴兰   |   27 |</span><br><span class="line">| 07   | 郑竹   |   29 |</span><br><span class="line">| 09   | 张三   |    1 |</span><br><span class="line">| 10   | 李四   |    1 |</span><br><span class="line">| 11   | 李四   |    1 |</span><br><span class="line">| 12   | 赵六   |    2 |</span><br><span class="line">| 13   | 孙七   |    1 |</span><br><span class="line">+------+--------+------+</span><br></pre></td></tr></table></figure>


<p>42.查询本周过生日的学生</p>
<ul>
<li><code>WEEK</code>函数使用说明：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sage,<span class="keyword">WEEK</span>(Sage,<span class="number">1</span>) </span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------------+--------------+</span><br><span class="line">| Sage                | WEEK(Sage,1) |</span><br><span class="line">+---------------------+--------------+</span><br><span class="line">| 1990-01-01 00:00:00 |            1 |</span><br><span class="line">| 1990-12-21 00:00:00 |           51 |</span><br><span class="line">| 1990-05-20 00:00:00 |           20 |</span><br><span class="line">| 1990-08-06 00:00:00 |           32 |</span><br><span class="line">| 1991-12-01 00:00:00 |           48 |</span><br><span class="line">| 1992-03-01 00:00:00 |            9 |</span><br><span class="line">| 1989-07-01 00:00:00 |           26 |</span><br><span class="line">| 2017-12-20 00:00:00 |           51 |</span><br><span class="line">| 2017-12-25 00:00:00 |           52 |</span><br><span class="line">| 2017-12-30 00:00:00 |           52 |</span><br><span class="line">| 2017-01-01 00:00:00 |            0 |</span><br><span class="line">| 2018-01-01 00:00:00 |            1 |</span><br><span class="line">+---------------------+--------------+</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">WEEK</span>(Sage,<span class="number">1</span>) = <span class="keyword">WEEK</span>(<span class="keyword">CURDATE</span>(),<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Empty set (0.03 sec)</span><br></pre></td></tr></table></figure>


<p>43.查询下周过生日的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">WEEK</span>(Sage,<span class="number">1</span>) = <span class="keyword">WEEK</span>(<span class="keyword">CURDATE</span>(),<span class="number">1</span>) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Empty set (0.03 sec)</span><br></pre></td></tr></table></figure>


<p>44.查询本月过生日的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(Sage) = <span class="keyword">MONTH</span>(<span class="keyword">CURDATE</span>());</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure>


<p>45.查询下月过生日的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(Sage) = <span class="keyword">MONTH</span>(<span class="keyword">CURDATE</span>()) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL嵌套子查询和相关子查询执行过程的区别</title>
    <url>/archives/af2fef58.html</url>
    <content><![CDATA[<p>子查询可以分为 <strong>相关子查询</strong> 和 <strong>嵌套子查询</strong> 两类。</p>
<a id="more"></a>

<h2 id="一、本文用到的测试数据"><a href="#一、本文用到的测试数据" class="headerlink" title="一、本文用到的测试数据"></a>一、本文用到的测试数据</h2><p>假设Books表如下：</p>
<table>
<thead>
<tr>
<th align="center">类编号</th>
<th align="center">图书名</th>
<th align="center">出版社</th>
<th align="center">价格</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2</td>
<td align="center">c#高级应用</td>
<td align="center">圣通出版</td>
<td align="center">23.00</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Jsp开发应用</td>
<td align="center">机械出版社</td>
<td align="center">45.00</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">高等数学</td>
<td align="center">济南出版社</td>
<td align="center">25.00</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">疯狂英语</td>
<td align="center">清华大学出版社</td>
<td align="center">32.00</td>
</tr>
</tbody></table>
<h2 id="二、嵌套子查询"><a href="#二、嵌套子查询" class="headerlink" title="二、嵌套子查询"></a>二、嵌套子查询</h2><p>嵌套子查询的执行<strong>不依赖于外部</strong>的查询。</p>
<p>执行过程：</p>
<ul>
<li>（1）执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。</li>
<li>（2）执行外部查询，并显示整个结果。　　</li>
</ul>
<p>嵌套子查询一般可以分为：<strong>返回单值的子查询</strong> 和 <strong>返回一个列表的子查询</strong>。</p>
<h3 id="1、返回单值"><a href="#1、返回单值" class="headerlink" title="1、返回单值"></a>1、返回单值</h3><p>查询所有价格高于平均价格的图书名，作者，出版社和价格。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 图书名，作者，出版社，价格</span><br><span class="line"><span class="keyword">FROM</span> Books</span><br><span class="line"><span class="keyword">WHERE</span> 价格 &gt;</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">AVG</span>(价格)</span><br><span class="line">    <span class="keyword">FROM</span> Books</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="2、返回值列表"><a href="#2、返回值列表" class="headerlink" title="2、返回值列表"></a>2、返回值列表</h3><p>查询所有借阅图书的读者信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Readers</span><br><span class="line"><span class="keyword">WHERE</span> 读者编号 <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> 读者编号</span><br><span class="line">    <span class="keyword">FROM</span> [Borrow History]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="三、相关子查询"><a href="#三、相关子查询" class="headerlink" title="三、相关子查询"></a>三、相关子查询</h2><p>相关子查询的执行<strong>依赖于外部查询</strong>。多数情况下是子查询的WHERE子句中引用了外部查询的表。</p>
<p>执行过程：</p>
<ul>
<li>（1）从外层查询中取出一个元组，将元组相关列的值传给内层查询。</li>
<li>（2）执行内层查询，得到子查询操作的值。</li>
<li>（3）外查询根据子查询返回的结果或结果集得到满足条件的行。</li>
<li>（4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。 </li>
</ul>
<h3 id="1、相关子查询的例子"><a href="#1、相关子查询的例子" class="headerlink" title="1、相关子查询的例子"></a>1、相关子查询的例子</h3><p>查询Books表中大于<strong>该类图书价格平均值</strong>的图书信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 图书名,出版社,类编号,价格</span><br><span class="line"><span class="keyword">FROM</span> Books <span class="keyword">As</span> a</span><br><span class="line"><span class="keyword">WHERE</span> 价格 &gt;</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">AVG</span>(价格)</span><br><span class="line">    <span class="keyword">FROM</span> Books <span class="keyword">AS</span> b</span><br><span class="line">    <span class="keyword">WHERE</span> a.类编号=b.类编号</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>与前面介绍过的子查询不同，相关子查询无法独立于外部查询而得到解决。该子查询需要一个“类编号”的值。而这个值是个变量，随MySQL检索Books表中的不同行而改变。下面详细说明该查询执行过程： </p>
<p>先将Books表中的第一条记录的“类编号”的值“2”代入子查询中，子查询变为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(价格)</span><br><span class="line"><span class="keyword">FROM</span> Books <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> b.类编号=<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>子查询的结果为该类图书的平均价格，所以外部查询变为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 图书名,出版社,类编号,价格</span><br><span class="line"><span class="keyword">FROM</span> Books <span class="keyword">As</span> a</span><br><span class="line"><span class="keyword">WHERE</span> 价格 &gt; <span class="number">34</span></span><br></pre></td></tr></table></figure>

<p>如果WHERE条件为True，则第一条结果包括在结果集中，否则不包括。对Books表中的所有行运行相同的过程，最后返回形成的结果集。</p>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/w10234/p/5438654.html" target="_blank" rel="noopener external nofollow noreferrer">SQL嵌套子查询和相关子查询的执行过程有什么区别(推荐)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中的GROUP BY获取其他字段方法</title>
    <url>/archives/6ab9ebc9.html</url>
    <content><![CDATA[<p><strong>除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出</strong>。但是有时候，我们又需要在GROUP BY后选出其他列，本文给出了几个方法。</p>
<a id="more"></a>

<h2 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h2><p>CREATE TABLE语句用于创建表，在test数据库下面创建一张名为<code>show_plan</code>的表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> show_plan(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">desp <span class="built_in">int</span>,</span><br><span class="line">price <span class="built_in">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>INSERT INTO 语句用于向表格中插入新的行，现在我们向<code>show_plan</code>表中插入一些测试数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> show_plan(<span class="keyword">name</span>,desp,price)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">'a'</span>,<span class="number">1</span>,<span class="number">55</span>),</span><br><span class="line">(<span class="string">'b'</span>,<span class="number">1</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="string">'c'</span>,<span class="number">1</span>,<span class="number">63</span>),</span><br><span class="line">(<span class="string">'b'</span>,<span class="number">2</span>,<span class="number">89</span>),</span><br><span class="line">(<span class="string">'c'</span>,<span class="number">2</span>,<span class="number">78</span>),</span><br><span class="line">(<span class="string">'a'</span>,<span class="number">2</span>,<span class="number">90</span>),</span><br><span class="line">(<span class="string">'b'</span>,<span class="number">3</span>,<span class="number">88</span>),</span><br><span class="line">(<span class="string">'c'</span>,<span class="number">3</span>,<span class="number">77</span>),</span><br><span class="line">(<span class="string">'a'</span>,<span class="number">3</span>,<span class="number">100</span>),</span><br><span class="line">(<span class="string">'d'</span>,<span class="number">1</span>,<span class="number">77</span>),</span><br><span class="line">(<span class="string">'e'</span>,<span class="number">4</span>,<span class="number">75</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+------+------+-------+</span><br><span class="line">| id | name | desp | price |</span><br><span class="line">+----+------+------+-------+</span><br><span class="line">|  1 | a    |    1 |    55 |</span><br><span class="line">|  2 | b    |    1 |    20 |</span><br><span class="line">|  3 | c    |    1 |    63 |</span><br><span class="line">|  4 | b    |    2 |    89 |</span><br><span class="line">|  5 | c    |    2 |    78 |</span><br><span class="line">|  6 | a    |    2 |    90 |</span><br><span class="line">|  7 | b    |    3 |    88 |</span><br><span class="line">|  8 | c    |    3 |    77 |</span><br><span class="line">|  9 | a    |    3 |   100 |</span><br><span class="line">| 10 | d    |    1 |    77 |</span><br><span class="line">| 11 | e    |    4 |    75 |</span><br><span class="line">+----+------+------+-------+</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>查询出每个演出单位票房最高的剧目名称。</p>
<h2 id="分析与解答"><a href="#分析与解答" class="headerlink" title="分析与解答"></a>分析与解答</h2><h3 id="一个典型的错误做法"><a href="#一个典型的错误做法" class="headerlink" title="一个典型的错误做法"></a>一个典型的错误做法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,desp,<span class="keyword">MAX</span>(price)</span><br><span class="line"><span class="keyword">from</span> show_plan</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> desp;</span><br></pre></td></tr></table></figure>

<p><strong>注意：除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出</strong>。</p>
<p>这里的select的name列并不在group by子句中。</p>
<p>MySQL也会报出如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#39;shows.show_plan.name&#39; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode&#x3D;only_full_group_by</span><br></pre></td></tr></table></figure>

<h3 id="正确做法1"><a href="#正确做法1" class="headerlink" title="正确做法1"></a>正确做法1</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name,a.desp,b.price</span><br><span class="line"><span class="keyword">from</span> show_plan <span class="keyword">as</span> a,(</span><br><span class="line">    <span class="keyword">select</span> desp,<span class="keyword">MAX</span>(price) <span class="keyword">as</span> price</span><br><span class="line">    <span class="keyword">from</span> show_plan</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> desp</span><br><span class="line">) <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">where</span> a.price = b.price <span class="keyword">AND</span> a.desp = b.desp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| name | desp | price |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| a    |    2 |    90 |</span><br><span class="line">| a    |    3 |   100 |</span><br><span class="line">| d    |    1 |    77 |</span><br><span class="line">| e    |    4 |    75 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>

<p>如果只用price去匹配，假如存在有多个price相同时，</p>
<blockquote>
<p>例如，desp=1的MAX(price)=77，但是desp=2中也含有price=77的行，那么就会被错误的选择出来。</p>
</blockquote>
<p>所以要加一个<code>AND a.desp = b.desp</code>筛选条件。</p>
<h3 id="正确做法2"><a href="#正确做法2" class="headerlink" title="正确做法2"></a>正确做法2</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name,a.desp,a.price</span><br><span class="line"><span class="keyword">from</span> show_plan <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span> a.price <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">MAX</span>(b.price)</span><br><span class="line">    <span class="keyword">from</span> show_plan <span class="keyword">as</span> b</span><br><span class="line">    <span class="keyword">where</span> b.desp = a.desp</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> b.desp</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| name | desp | price |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| a    |    2 |    90 |</span><br><span class="line">| a    |    3 |   100 |</span><br><span class="line">| d    |    1 |    77 |</span><br><span class="line">| e    |    4 |    75 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>

<p>同样的，类似方法1，这里最关键的是<code>where b.desp = a.desp</code>这个筛选条件。</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/jessica__sun/article/details/79771263" target="_blank" rel="noopener external nofollow noreferrer">关于group by 和max函数一起使用的坑</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib中文乱码解决</title>
    <url>/archives/9e293245.html</url>
    <content><![CDATA[<p>我在绘图时发现，Matplotlib的图例、标题等无法正常显示中文。本文主要解决这个问题。</p>
<p>本文环境：</p>
<ul>
<li>系统：Win10</li>
<li>Python版本：3.6</li>
</ul>
<a id="more"></a>

<h2 id="中文乱码原因分析"><a href="#中文乱码原因分析" class="headerlink" title="中文乱码原因分析"></a>中文乱码原因分析</h2><p>matplotlib初始化时首先要加载一个配置文件，其中字体设置也在这个配置文件中。而这个配置文件中没有加入中文字体，所有无法正常显示中文。</p>
<p>因此，我们需要在这个配置文件中指定一个可用的中文字体。</p>
<h2 id="方法1——绘图时手动修改"><a href="#方法1——绘图时手动修改" class="headerlink" title="方法1——绘图时手动修改"></a>方法1——绘图时手动修改</h2><p>我们可以在matplotlib绘图时手动加入以下代码来正常显示中文和负号：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line"><span class="comment"># 正常显示负号</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="方法2——修改配置文件"><a href="#方法2——修改配置文件" class="headerlink" title="方法2——修改配置文件"></a>方法2——修改配置文件</h2><h3 id="字体下载"><a href="#字体下载" class="headerlink" title="字体下载"></a>字体下载</h3><p>我们在<a href="https://www.fontpalace.com/font-download/SimHei/" target="_blank" rel="noopener external nofollow noreferrer">Download SimHei Font</a>下载<code>SimHei</code>放在<code>matplotlib</code>的字体文件夹下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\software\Python36\lib\site-packages\matplotlib\mpl-data\fonts\ttf</span><br></pre></td></tr></table></figure>

<h3 id="修改matplotlib配置文件"><a href="#修改matplotlib配置文件" class="headerlink" title="修改matplotlib配置文件"></a>修改matplotlib配置文件</h3><p>首先找到配置文件所在位置，我们可以输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">print(matplotlib.matplotlib_fname())</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\software\Python36\lib\site-packages\matplotlib\mpl-data\matplotlibrc</span><br></pre></td></tr></table></figure>

<p>然后我们修改<code>matplotlibrc</code>文件，去掉<code>font.family</code>和<code>font.sans-serif</code>这两行的注释，并在<code>font.sans-serif</code>这一行中添加我们刚才安装的黑体<code>SimHei</code>，具体如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-#font.family: sans-serif</span></span><br><span class="line"><span class="addition">+font.family: sans-serif</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-#font.sans-serif     : DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif</span></span><br><span class="line"><span class="addition">+font.sans-serif     : SimHei, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif</span></span><br></pre></td></tr></table></figure>

<p>我们还要找到<code>axes.unicode_minus</code>这一行，去掉最前面的注释，同时将值修改为<code>False</code>，解决坐标轴的负号显示不正常的问题：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-#axes.unicode_minus  : True    ## use unicode for the minus symbol</span></span><br><span class="line"><span class="addition">+axes.unicode_minus  : False    ## use unicode for the minus symbol</span></span><br></pre></td></tr></table></figure>


<h3 id="删除缓存"><a href="#删除缓存" class="headerlink" title="删除缓存"></a>删除缓存</h3><p>我们先通过下面的代码找到matplotlib缓存目录：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.get_cachedir()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;C:\\Users\\xxxx\\.matplotlib&#39;</span><br></pre></td></tr></table></figure>

<p>然后我们删除<code>C:\Users\你的用户名\.matplotlib</code>里面的所有文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─.matplotlib</span><br><span class="line">│  │  fontlist-v310.json</span><br><span class="line">│  │  fontList.json</span><br><span class="line">│  │  </span><br><span class="line">│  └─tex.cache</span><br></pre></td></tr></table></figure>

<p>重启Python使得配置生效，然后即可正常显示中文了。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL语句执行顺序</title>
    <url>/archives/50fcee2f.html</url>
    <content><![CDATA[<p>MySQL的语句一共分为12步，如下图所标注的那样，最先执行的总是FROM操作，最后执行的是LIMIT操作。其中每一个操作都会产生一张虚拟的表，这个虚拟的表作为一个处理的输入，只是这些虚拟的表对用户来说是透明的，但是只有最后一个虚拟的表才会被作为结果返回。</p>
<a id="more"></a>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(8)  <span class="keyword">SELECT</span> (<span class="number">9</span>) <span class="keyword">DISTINCT</span> &lt;select_list&gt;</span><br><span class="line">(<span class="number">1</span>)  <span class="keyword">FROM</span> &lt;left_table&gt;</span><br><span class="line">(<span class="number">3</span>)  &lt;join_type&gt; <span class="keyword">JOIN</span> &lt;right_table&gt;</span><br><span class="line">(<span class="number">2</span>)  <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line">(<span class="number">4</span>)  <span class="keyword">WHERE</span> &lt;where_condition&gt;</span><br><span class="line">(<span class="number">5</span>)  <span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;group_by_list&gt;</span><br><span class="line">(<span class="number">6</span>)  <span class="keyword">WITH</span> &#123;<span class="keyword">CUBE</span>|<span class="keyword">ROLLUP</span>&#125;</span><br><span class="line">(<span class="number">7</span>)  <span class="keyword">HAVING</span> &lt;having_condition&gt;</span><br><span class="line">(<span class="number">10</span>) <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">...</span><br><span class="line">(<span class="number">11</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_list&gt;</span><br><span class="line">(<span class="number">12</span>) <span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure>

<p>下面我们来具体分析一下查询处理的每一个阶段：</p>
<ul>
<li>FORM: 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1。</li>
<li>ON: 对虚表VT1进行ON筛选，只有那些符合<code>&lt;join-condition&gt;</code>的行才会被记录在虚表VT2中。</li>
<li>JOIN： 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, 如果from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。</li>
<li>WHERE：对虚拟表VT3进行WHERE条件过滤。只有符合<code>&lt;where-condition&gt;</code>的记录才会被插入到虚拟表VT4中。</li>
<li>GROUP BY: 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5。</li>
<li>CUBE | ROLLUP: 对表VT5进行cube或者rollup操作，产生表VT6。</li>
<li>HAVING： 对虚拟表VT6应用having过滤，只有符合<code>&lt;having-condition&gt;</code>的记录才会被 插入到虚拟表VT7中。</li>
<li>SELECT： 执行select操作，选择指定的列，插入到虚拟表VT8中。</li>
<li>DISTINCT：对VT8中的记录进行去重。产生虚拟表VT9。</li>
<li>UNION ALL：对VT9中的记录和其他表的返回的记录进行组合得到虚拟表VT10。</li>
<li>ORDER BY: 将虚拟表VT10中的记录按照<code>&lt;order_by_list&gt;</code>进行排序操作，产生虚拟表VT11。</li>
<li>LIMIT：取出指定行的记录，产生虚拟表VT12, 并将结果返回。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/rollenholt/p/3776923.html" target="_blank" rel="noopener external nofollow noreferrer">MySQL的语句执行顺序</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL实现Rank高级排名函数</title>
    <url>/archives/69151617.html</url>
    <content><![CDATA[<p>MySQL中没有Rank排名函数，当我们需要查询排名时，只能使用MySQL数据库中的基本查询语句来查询普通排名。尽管如此，可不要小瞧基础而简单的查询语句，我们可以利用其来达到Rank函数一样的高级排名效果。</p>
<a id="more"></a>

<p>在这里我用一个简单例子来实现排名的查询：</p>
<p>首先我们先创建一个我们需要进行高级排名查询的players表，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`players`</span> (</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`pid`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`name`</span> (<span class="string">`name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=latin1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`players`</span> (<span class="string">`pid`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Samual'</span>, <span class="number">25</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Vino'</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'John'</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Andy'</span>, <span class="number">22</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Brian'</span>, <span class="number">21</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">'Dew'</span>, <span class="number">24</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">'Kris'</span>, <span class="number">25</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">'William'</span>, <span class="number">26</span>),</span><br><span class="line">(<span class="number">9</span>, <span class="string">'George'</span>, <span class="number">23</span>),</span><br><span class="line">(<span class="number">10</span>, <span class="string">'Peter'</span>, <span class="number">19</span>),</span><br><span class="line">(<span class="number">11</span>, <span class="string">'Tom'</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">12</span>, <span class="string">'Andre'</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<h2 id="1、在MySQL中实现Rank普通排名函数"><a href="#1、在MySQL中实现Rank普通排名函数" class="headerlink" title="1、在MySQL中实现Rank普通排名函数"></a>1、在MySQL中实现Rank普通排名函数</h2><p>在这里，我们希望获得一个排名字段的列，以及age的升序排列。所以我们的查询语句将是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pid, <span class="keyword">name</span>, age, @curRank := @curRank + <span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> players p, (<span class="keyword">SELECT</span> @curRank := <span class="number">0</span>) q</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| PID |    NAME | AGE | RANK |</span><br><span class="line">|-----|---------|-----|------|</span><br><span class="line">|  10 |   Peter |  19 |    1 |</span><br><span class="line">|  12 |   Andre |  20 |    2 |</span><br><span class="line">|   2 |    Vino |  20 |    3 |</span><br><span class="line">|   3 |    John |  20 |    4 |</span><br><span class="line">|  11 |     Tom |  20 |    5 |</span><br><span class="line">|   5 |   Brian |  21 |    6 |</span><br><span class="line">|   4 |    Andy |  22 |    7 |</span><br><span class="line">|   9 |  George |  23 |    8 |</span><br><span class="line">|   6 |     Dew |  24 |    9 |</span><br><span class="line">|   7 |    Kris |  25 |   10 |</span><br><span class="line">|   1 |  Samual |  25 |   11 |</span><br><span class="line">|   8 | William |  26 |   12 |</span><br></pre></td></tr></table></figure>

<p>要在mysql中声明一个变量，你必须在变量名之前使用@符号。FROM子句中的(<code>@curRank := 0</code>)部分允许我们进行变量初始化，而不需要单独的SET命令。当然，也可以使用SET，但它会处理两个查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> @curRank := <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> pid, <span class="keyword">name</span>, age, @curRank := @curRank + <span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> players</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age</span><br></pre></td></tr></table></figure>

<h2 id="2、在MySQL中实现Rank普通并列排名函数"><a href="#2、在MySQL中实现Rank普通并列排名函数" class="headerlink" title="2、在MySQL中实现Rank普通并列排名函数"></a>2、在MySQL中实现Rank普通并列排名函数</h2><p>现在，如果我们希望为<strong>并列数据的行赋予相同的排名</strong>，则意味着那些在排名比较列中具有相同值的行应在MySQL中计算排名时保持相同的排名(例如在我们的例子中的age)。为此，我们使用了一个额外的变量。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pid, <span class="keyword">name</span>, age, </span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> @prevRank = age <span class="keyword">THEN</span> @curRank </span><br><span class="line"><span class="keyword">WHEN</span> @prevRank := age <span class="keyword">THEN</span> @curRank := @curRank + <span class="number">1</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> players p, (<span class="keyword">SELECT</span> @curRank :=<span class="number">0</span>, @prevRank := <span class="literal">NULL</span>) r</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| PID |    NAME | AGE | RANK |</span><br><span class="line">|-----|---------|-----|------|</span><br><span class="line">|  10 |   Peter |  19 |    1 |</span><br><span class="line">|  12 |   Andre |  20 |    2 |</span><br><span class="line">|   2 |    Vino |  20 |    2 |</span><br><span class="line">|   3 |    John |  20 |    2 |</span><br><span class="line">|  11 |     Tom |  20 |    2 |</span><br><span class="line">|   5 |   Brian |  21 |    3 |</span><br><span class="line">|   4 |    Andy |  22 |    4 |</span><br><span class="line">|   9 |  George |  23 |    5 |</span><br><span class="line">|   6 |     Dew |  24 |    6 |</span><br><span class="line">|   7 |    Kris |  25 |    7 |</span><br><span class="line">|   1 |  Samual |  25 |    7 |</span><br><span class="line">|   8 | William |  26 |    8 |</span><br></pre></td></tr></table></figure>

<p>如上所示，具有相同数据和排行的两行或多行，它们都会获得相同的排名。玩家Andre, Vino, John 和Tom都有相同的age，所以他们排名并列第二。下一个最高age的玩家(Brian)排名第3。这个查询相当于MSSQL和ORACLE 中的<code>DENSE_RANK()</code>函数。</p>
<p><strong>注意：<code>CASE WHEN @prevRank := age THEN @curRank := @curRank + 1</code>这里的赋值语句<code>@prevRank := age</code>主要作用是赋值，赋值语句也为true，所以也可以用来做逻辑判断</strong>。</p>
<h2 id="3、在MySQL中实现Rank高级并列排名函数"><a href="#3、在MySQL中实现Rank高级并列排名函数" class="headerlink" title="3、在MySQL中实现Rank高级并列排名函数"></a>3、在MySQL中实现Rank高级并列排名函数</h2><p>我们这里要补全因为并列而导致的排名空位。</p>
<p>举例来说：Andre，Vino，John和Tom都有相同的age，所以他们排名并列第二。下一个最高年龄的球员(Brian)排名第6，而不是第3，因为有4个人并列排名在第2。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pid, <span class="keyword">name</span>, age, <span class="keyword">rank</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> pid, <span class="keyword">name</span>, age,</span><br><span class="line">@curRank := <span class="keyword">IF</span>(@prevRank = age, @curRank, @incRank) <span class="keyword">AS</span> <span class="keyword">rank</span>, </span><br><span class="line">@incRank := @incRank + <span class="number">1</span>, </span><br><span class="line">@prevRank := age</span><br><span class="line"><span class="keyword">FROM</span> players p, (<span class="keyword">SELECT</span> @curRank :=<span class="number">0</span>, @prevRank := <span class="literal">NULL</span>, @incRank := <span class="number">1</span>) r </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age) s</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| PID |    NAME | AGE | RANK |</span><br><span class="line">|-----|---------|-----|------|</span><br><span class="line">|  10 |   Peter |  19 |    1 |</span><br><span class="line">|  12 |   Andre |  20 |    2 |</span><br><span class="line">|   2 |    Vino |  20 |    2 |</span><br><span class="line">|   3 |    John |  20 |    2 |</span><br><span class="line">|  11 |     Tom |  20 |    2 |</span><br><span class="line">|   5 |   Brian |  21 |    6 |</span><br><span class="line">|   4 |    Andy |  22 |    7 |</span><br><span class="line">|   9 |  George |  23 |    8 |</span><br><span class="line">|   6 |     Dew |  24 |    9 |</span><br><span class="line">|   7 |    Kris |  25 |   10 |</span><br><span class="line">|   1 |  Samual |  25 |   10 |</span><br><span class="line">|   8 | William |  26 |   12 |</span><br></pre></td></tr></table></figure>

<p>这是一个查询中的子查询。我们使用三个变量(<code>@incRank</code>，<code>@prevRank</code>，<code>@curRank</code>)来计算关系的情况下，在查询结果中我们已经补全了因为并列而导致的排名空位。我们已经封闭子查询到查询。这个查询相当于MSSQL和ORACLE中的<code>RANK()</code>函数。</p>
<blockquote>
<p>作者：风澈vio</p>
<p>链接：<a href="https://www.jianshu.com/p/bb1b72a1623e" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/bb1b72a1623e</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL声明变量以及赋值</title>
    <url>/archives/314d9759.html</url>
    <content><![CDATA[<p>MySQL 的变量分为四种： 局部变量 、 用户变量 、 会话变量 和 全局变量 ，其中局部变量只存在于函数和存储过程，这里不多了解。其中 <strong>会话变量</strong> 和 <strong>全局变量</strong> 在 MySQL 中统称为 <strong>系统变量</strong> 。本文简单讲一下<strong>用户变量</strong>。</p>
<a id="more"></a>

<h2 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h2><h3 id="SET-方式"><a href="#SET-方式" class="headerlink" title="SET 方式"></a>SET 方式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两种方式都可以</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">variable</span> = expr</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">variable</span> := expr</span><br></pre></td></tr></table></figure>

<h3 id="SELECT-方式"><a href="#SELECT-方式" class="headerlink" title="SELECT 方式"></a>SELECT 方式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必须 :=</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">variable</span> := expr</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>我们来一个简单的示例，实现一个序号的功能，表和数据如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">   salary <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure>

<p>根据之前学习的内容，我们可以很快的写出如下 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary, (@rowno := @rowno + <span class="number">1</span>) <span class="keyword">AS</span> <span class="string">'rowno'</span></span><br><span class="line"><span class="keyword">FROM</span> employee, (<span class="keyword">SELECT</span> @rowno := <span class="number">0</span>) r;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------+-------+</span><br><span class="line">| salary | rowno |</span><br><span class="line">+--------+-------+</span><br><span class="line">|    100 |     1 |</span><br><span class="line">|    200 |     2 |</span><br><span class="line">|    300 |     3 |</span><br><span class="line">+--------+-------+</span><br></pre></td></tr></table></figure>

<p>没有问题，一切都和预期一样，然后我们加一个 WHERE 条件试试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary, (@rowno := @rowno + <span class="number">1</span>) <span class="keyword">AS</span> <span class="string">'rowno'</span></span><br><span class="line"><span class="keyword">FROM</span> employee, (<span class="keyword">SELECT</span> @rowno := <span class="number">0</span>) r</span><br><span class="line"><span class="keyword">WHERE</span> @rowno = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------+-------+</span><br><span class="line">| salary | rowno |</span><br><span class="line">+--------+-------+</span><br><span class="line">|    100 |     1 |</span><br><span class="line">+--------+-------+</span><br></pre></td></tr></table></figure>

<p>理论上来说，这是不应该返回数据的，但是它还就是返回了一条数据，就是 id 为 1 的那条。</p>
<p>为什么呢？ WHERE 条件使用的 <code>@rowno</code> 一直都是同一个值 0 ，它不会因为 SELECT 上修改了就实时响应 。要实现 WHERE 的功能需要改写成如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary, rowno</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> salary, (@rowno := @rowno + <span class="number">1</span>) <span class="keyword">AS</span> <span class="string">'rowno'</span></span><br><span class="line">    <span class="keyword">FROM</span> employee, (<span class="keyword">SELECT</span> @rowno := <span class="number">0</span>) r</span><br><span class="line">) m</span><br><span class="line"><span class="keyword">WHERE</span> rowno = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------+-------+</span><br><span class="line">| salary | rowno |</span><br><span class="line">+--------+-------+</span><br><span class="line">|    200 |     2 |</span><br><span class="line">+--------+-------+</span><br></pre></td></tr></table></figure>

<p>实际上在 SELECT 的 WHERE 、 GROUP BY 和 ORDER BY 中用户变量都不会按预期操作，它使用的是旧值，不会实时修改。</p>
<blockquote>
<p>本文转载于：<a href="https://segmentfault.com/a/1190000017525457" target="_blank" rel="noopener external nofollow noreferrer">MySQL 之变量</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>P2P技术科普</title>
    <url>/archives/be439524.html</url>
    <content><![CDATA[<p><code>迅雷，msn，skype，pplive,  ppstream, BT……</code>铺天盖地的P2P应用已然一定程度上改变了我们上网的习惯，方式以及质量。如果你想了解P2P技术，又懒得找，懒得看那些繁琐，模棱两可又及其抽象的中文资料，这里应该是一个你想来的地方。 我的目的是用<strong>比较俗的语言来对P2P技术做一个系统的介绍</strong>。这里，我会尽量避开不必要的术语，只告诉并解释你需要知道的。当然我不是什么专家，不过请你相信我回尽量保证我所提供信息的准确性和严谨性。我们没有任何商业目的，您的每一次点击都将对我国的慈善事业做出一份贡献。在此谨代表站长kakarott先生向诸位表示感谢。</p>
<a id="more"></a>

<h2 id="一、P2P基本原理"><a href="#一、P2P基本原理" class="headerlink" title="一、P2P基本原理"></a>一、P2P基本原理</h2><p>在P2P技术之前，网络中的所有人大多都是通过一种叫做“<strong>客户端/服务器</strong>”的模式被组织在一起。<strong>一个服务器向很多客户提供服务</strong>。</p>
<blockquote>
<p>举个例子吧： kaka有一台机子，里面存有全套的央视春晚，他想把他的挚爱分享给所有人。于是不论是通过广告还是别的什么方式，很多人知道了kaka有这个资源的消息。通过网络，他们就可以向kaka建立连接并从他的机子上下载。这样就形成了一个以kaka为中心的小型网络。这当中，kaka是服务器，其他人都是客户端。如图一：</p>
<img src="/archives/be439524/1-1.jpg" class="" title="图1-1">
</blockquote>
<p>这样的模式中，对服务器的性能及相应带宽要求比较高，如果有成千上万的人都想下春晚，kaka的海淀在线肯定就操蛋了。当然一般的公司不会用一个家用电脑做服务器。假设有存在一个特别强大的服务器，以及足够的带宽。我们来看看这种模式天生的一些弱点：</p>
<ol>
<li>服务器扮演的角色太重了，网络的一切都指着他。假如kaka不小心把电脑从6楼扔下去，<strong>整个网络就都瘫痪了</strong>。请注意，想要把一个服务器弄失灵的方法太多了，所以使用这中模式的风险是比较大的。</li>
<li><strong>网络的资源利用率低下</strong>。所有客户都只能从服务器那获得资源，因为他们之间不认识，甚至不知道相互的存在。然而，现实中，可能每个人都有自己独门的资源，比如日天有无数游戏，威哥有无数动漫电影…….总之，整个网络的资源可能是服务器的无数倍。但是苦无客户端之间没有交流的渠道，所以<strong>资源无法互通</strong>。</li>
<li>关于完美服务器的假设，基本不成立。</li>
</ol>
<p>P2P技术就是要解决上述的问题已达到如下的效果： 所有人的资源都可以被别人找到并使用。没有哪个人特别重要，<strong>人人平等（peer-to-peer就是这个意思）</strong>，任何一个人失灵都不会导致网络的死亡。</p>
<p>这里以Gnutella为例，对P2P基本原理进行介绍。 Gnutella是一种典型的P2P网络，很具代表性，以其为基础的软件有Limewire。这种网络里，没有服务器。用户之间任意连接，如图二左所示：</p>
<img src="/archives/be439524/1-2.jpg" class="" title="图1-2">

<p>Kaka认识 ‘日天’‘curt’‘威’， 日天认识‘小胖’，威认识‘候泡’，Curt 认识 ‘路’。当然真正的网络有至少有成百上千个用户，这里只是展示一个小的局部。</p>
<p> 这个网络如何工作呢？比如kaka想要找一首叫‘走进新时代’的歌。一个基本交易要经过如下几步：</p>
<ol>
<li>kaka给他的邻居们每人发一个请求消息，‘你们丫谁有走进新时代？’</li>
<li>日天，威，curt吐血，‘谁tm听这歌啊，我没有’。于是把kaka的消息转发给他们的邻居：日天发给小胖，威发给候泡，curt发给路总。</li>
<li>当kaka邻居的邻居们收到这个消息后，同样，先看看自己有没有。比如，候泡有这个歌，他就可以给kaka发个消息：‘爷这有，来下吧’</li>
<li>卡卡于是可以直接去候泡那下载。</li>
</ol>
<p>很多人说在p2p里面，<strong>所有人即是服务器又是客户端</strong>。应该这样理解，比如，kaka在上例中就是个客户端。 但当有人要想要春晚的时候，只要那人的请求消息能被转到kaka这，kaka就可以成为一个服务器。</p>
<p>最后要说的是P2P的现状以及应用。目前P2P与传统的‘客户端/服务器’模式可以说分庭抗礼，互为补充。那么为什么没能取而代之呢？因为，P2P也有自身的弱点，其中包括：</p>
<ol>
<li>占带宽（50%以上的网络带宽都是P2P占用的，搜索方法不灵）</li>
<li>安全（不具体解释了，太专业了，总之和加密那些东西有关）</li>
<li>诚信（没有中央控制，你传个毛片也可以告诉你是新闻联播）</li>
<li>自私（我什么都不付出，有也说没有）</li>
<li>知识产权保护（在中国相当于盗版的集散地）等等。 至于这些问题的对策以及其不足，以后会做专题介绍。</li>
</ol>
<p>P2P的应用不少但大都停留在比较低端的服务，比如文件共享，msn，在线视频这一类。实际上作为一种新的模式，其生命力应该不止如此。</p>
<h2 id="二、非结构化P2P及其搜索方法"><a href="#二、非结构化P2P及其搜索方法" class="headerlink" title="二、非结构化P2P及其搜索方法"></a>二、非结构化P2P及其搜索方法</h2><p>上集回顾，传统的‘客户端/服务器’模式有一些问题，比如，单一故障点，低资源利用率，高带宽要求。我说P2P客服了这些问题，因为没有中央服务器了。这里，我要强调一下，并不是说只要有中央的东西就是失败，只要这个中央的东西不是那个实际掌握资源的人就可以接受。下面，简要介绍一下P2P技术的发展。</p>
<h3 id="第一代、Napster"><a href="#第一代、Napster" class="headerlink" title="第一代、Napster"></a>第一代、Napster</h3><p>这一代的p2p只是<strong>把资源从服务器上拿掉了</strong>。中央服务器上只有一个目录。这个目录记录着哪个用户有哪些资源。要建立这样的一个目录，要求网络中的每个人都要告诉这个服务器：他有什么资源。</p>
<ol>
<li>Kaka发一个资源请求向中央服务器。</li>
<li>这个服务器然后检索目录，并告诉Kaka，日天有他要的东西。</li>
<li>Kaka直接去找日天下东西。</li>
</ol>
<p>这样做，解决了高带宽需求（服务器只需要转发一些消息，而不用真格的提供资源），低资源利用率的问题（网络里谁都可以发挥作用了）。但是，他仍然面临严重的‘单一故障点’风险。同时，napster的出现严重挑战了知识产权法，并最终导致其在2001年被勒令关闭。</p>
<h3 id="第二代、非结构化P2P"><a href="#第二代、非结构化P2P" class="headerlink" title="第二代、非结构化P2P"></a>第二代、非结构化P2P</h3><p>Napster帝国的坍塌，导致了江湖上群雄并起，老的规矩也就法不责众了，其中Gnutella等非结构的P2P脱颖而出。非结构化说白了就是，用户之间瞎连，没有规定谁必须和谁有连接，基本随机。其基本搜索方法是地毯式的，如果这样的搜索能够遍及整个网络。那么，只要资源存在就一定能一网打尽。</p>
<p>但是上天要求每一个用户都要给自己资源请求加一个限制，于是每个资源请求都只能走几步就必须停了，即使什么都还没找到。因为地毯式的搜索要消耗大量的网络资源，比如，平均一个人有4个邻居，如果资源请求的限制为5. 那么一共需要4+42+43+44+45=<strong>1364</strong>个信息，每个信息多大呢？大概几k到几十k，也就是说一个信息就<strong>至少几m</strong>。一个人一个信息就这么大了，想想一个大网络，每人十几个邻居，限制提高到7或8. 这就是为什么中国很多地方，尤其是网吧限制p2p. 因为他们可怜的带宽都被p2p的请求信息占用了。 </p>
<p>当然，p2p的设计者们都看到了问题，于是提出了很多<strong>新的搜索方法</strong>。这些方法可以分成两种：<strong>根据以前的搜索信息对以后的搜索进行预测</strong>；<strong>瞎找，碰运气</strong>。</p>
<ol>
<li>根据经验的搜索准确率可能会高一点，但是这种方法要求每个用户都要建一些表来记录以前的数据，而且每次发送或接到请求都要经过一系列的计算才能决定发给哪个邻居。而且程序上难以实现，更重要的是平均准确率并不比瞎找好很多。这里就不多做介绍了。</li>
<li>瞎B找的，还基本上以地毯式为基础。我介绍两种最常见的：<ul>
<li><strong>K-walkers</strong>: 第一个人先把消息发给k个邻居，具体多少都自己定。 然后从第一轮邻居开始都只把消息转发给他们的一个邻居。</li>
<li><strong>水纹式（涟漪式）</strong>：先定一个限制。第一个人先发给第一层的邻居。如果第一层不灵，他们再发给他们的邻居。一旦找到资源就不再继续了。这样的话最坏的情况就是原始的地毯式。好点的情况就是，消息没到限制就找到了相应的资源，就停了。</li>
</ul>
</li>
</ol>
<p>这种非结构的p2p的优点在于，操作简单，完全不需要中央控制，所以又称为‘存（纯）p2p’。其缺点同样明显，要么牺牲搜索成功率，要么牺牲带宽占有量。</p>
<p>于是又有人提出了<strong>结构化的P2P</strong>。数学的东西我就不说了，基本的思想就是：</p>
<ol>
<li>每个用户，资源都得有个名字。</li>
<li>有一种数学加密方法，对这些名字加密。且保证如果名字不同，那么得到的结果就不同。</li>
<li>如一资源和一用户加密后结果接近，就把该资源的地址放到相应的用户身上。</li>
</ol>
<blockquote>
<p>举个例子：</p>
<p>有三个人，日天，kaka，威哥。三个资源：“一剪梅.mp3”,“八荣八耻歌歌词.txt”,“xxx.avi”，对这六个东西加密后分别得到： 100，200，3000， 3002， 233，98，‘xxx.avi’的下载地址就会被分配到‘日天’的机子上，于是当你想搜索“xxx.avi”，你的消息就会通过某种方法被传到到日天那。</p>
</blockquote>
<p>这样，结构化的P2P就可以保证，只要网络里有相应的资源，就一定能找到。但是由于其程序实现的难度，加之维护网络所需的投入太大，并不被经常使用。尽管他有很漂亮的数据。</p>
<p>当然还有第三代的，以后再做专题。</p>
<h2 id="三、BT工作原理简介"><a href="#三、BT工作原理简介" class="headerlink" title="三、BT工作原理简介"></a>三、BT工作原理简介</h2><p>2002年左右，程小胖告诉我有一种软件可以下片，人越多越快。很神奇。请注意，并不是所有的P2P技术都能做到这点，其他的P2P基本上只是<strong>提高网络资源的利用率，但是，网络中的每一单买卖都仍然采用，1对1的客户端服务器模式</strong>。回顾一下之前讲过的P2P，去掉技术细节，做一单买卖可以这样描述：</p>
<ol>
<li>有人向网络发一个资源请求（请求者）。有很多种搜索方法可供选择。</li>
<li>当一个有该的资源的人（提供者）收到这个的请求，他会设法通知请求者：他那有其想要的东西。</li>
<li>于是请求者去找提供者下载。</li>
</ol>
<p>这样做的一个<strong>缺点</strong>就是，比如，我选择了一个比较矬的提供者，而那人的带宽只有30k，然而网络中还有很多潜在提供者，可能有的人能达到30m。但是由于我在选择时只无法对对方的带宽做出判断而无福消受。</p>
<p>这样做还有一个致命的漏洞！比如，我收到一个关于“海贼王”的请求，而且我有全套。按理说我应该通知请求者，让他来我这下。但是，让他来我这里下东西，对我来说，除了占我带宽，增加我中毒的风险，没有任何的好处。那我凭什么主动邀请他来？？我何不装ytd，对该请求视而不见？非常不幸的是，跟我有相同想法的孙子在一般p2p网络里面占了大多数，甚至绝大多数。这就是搭便车问题（free riding）。所幸还是有一些大侠的，无偿的提供着大量资源，他们的存在使得那些一般的P2P得以侥幸存活。</p>
<p>其实，如果仅仅依赖活雷锋们，P2P就失去了其人人平等的意义。大侠们回复了网络中绝大多数的请求，于是人人都愿意与这些人建立连接，因为这样能更快的找到资源。于是这些大侠们就成了变得越来越红，网络的拓扑结构（我装b了，这个词没法解释，但是我实在找不出别的词了，别在意，看下图。）将会发生变化。</p>
<img src="/archives/be439524/3-1.jpg" class="" title="图3-1">

<p><strong>这样的变化很不好，因为P2P又逐渐变成了客户端/服务器模式了。</strong></p>
<p>于是，不论是学术界还是产业界都意识到，如果没有一种鼓励机制来刺激提供者，P2P将失去其天生的魅力。在众多解决方案中BT脱颖而出，迅速发展了起来。BT是简称，在国外可能会产生歧义，如British Telecommunications等等。所以大家尽量还是用全称，尤其是和外国人说的时候Bit-Torrent。有人说BT是第三代的P2P，我认为这是因为他把P2P的理念更加深入的实现了。</p>
<p>在BitTorrent当中，所有的资源都被切成很小的等份（碎片）。这里，你不需要知道怎么切，只需要知道有一种技术可以把一个文件切成很多小等份，还能把这些等份再重新的组装。在这个技术的支持下，bittorrent 中所有有相同请求的用户可以相互传资源的碎片。而且谁传的多，谁就将获得更多。具体技术如下：</p>
<ul>
<li><p>首先，有同样资源请求的人怎么能相互认识呢？bittorrent中每一个资源都对应有一个叫<strong>tracker</strong>的服务器。只要你对一个资源有意思，你就必须先联系这个资源相应的tracker。或者你想要共享一个资源你也必须联系tracker。这样的话，tracker就掌握着整个网络中<strong>谁想要这个资源</strong>以及<strong>谁有这个资源</strong>。当然，为了节约，一个tracker可以负责多种资源。</p>
</li>
<li><p>那么，怎么找到tracker呢？大家可能听说过做种子，每个有完整资源的人都可以做种子，其实就是生成一个后缀是.torrent的文件。每一款bittorrent应用软件都会自动帮你生成，所以不用担心。你只要知道这个文件中包括两部分内容：<code>1，tracker的地址。2，相关资源的一些属性，比如大小，名字等等。</code>这个torrent文件一般都可以发布在网上，比如某某人的博客，或者论坛上。</p>
</li>
<li><p>于是，大家可以从网上找到torrent文件，并从中知道tracker在哪。再通过联系tracker得到一个<strong>名单</strong>，其中包括一部分正在下载或有完整资源的用户。这时候，你就可以与这些人建立链接，并分别从他们身上要不同的碎片。当然要相同资源的人越多，你可以建立连接的人就越多，也就更可能早日得到所有碎片。</p>
</li>
<li><p>还有一点很重要就是，bittorrent有自己的<strong>鼓励机制</strong>，就是说，你做的贡献大就会被鼓励，你不做贡献就会被惩罚。具体的操作是，每个人在下载的同时也上传。上传给谁呢？谁给我给的多，我就传给谁。而且我只传个前4名的（视具体软件具体分析，也可能是前8名或其他）。</p>
</li>
</ul>
<blockquote>
<p>举个例子，比如kaka下载‘春晚’，先从某春晚发烧友论坛下载了一个叫<code>“春晚全集.torrent”</code>的文件。kaka可以联系文件中的tracker，并得知‘程胖，日天，威，候泡，鸣’有想关资源。于是kaka分别与这五个人建立连接。通过检测链接的流量，kaka可知，比如从程胖那下载速度可达200k/s, 日天100k/s, 威150k/s, 候泡70k/s,鸣2k/s。于是kaka在上传的时候就不给鸣上传，而只给前4名传。由于鸣的上传只有2k/s，所以不太可能有人给他传，所以时间一长他可能会意识到，可能自己给的太少了，于是把上传带宽增加到了500k/s。kaka突然意识到，从鸣那里可以得到很好的速度，于是停止给候泡（70k/s）传转而给鸣传。（总给那些速度最好的人上传是为了能留住他们，当然，只有你传的足够多才能留得住人家）。</p>
<img src="/archives/be439524/3-2.jpg" class="" title="图3-2">
</blockquote>
<p>bittorrent大概的工作原理就是这样了，还有些细节这里不多说了。我个人认为Bittorrent的设计还是很不错的，但是其只适用于文件共享，或视频共享。然而网络中的资源又何止电影音乐？？绝大多数的资源是不可分的，bittorrent的局限性还是相当大！ 另一点可悲的是，大多数宽带用户是ADSL，也就是说他们的下载上传的带宽上限差别很大，比如，下载最大2m/s，上传却只有100k/s。这也限制了bittorrent的发挥。</p>
<blockquote>
<p>本文转载于：<a href="http://blog.kakarott.net/archives/category/p2p" target="_blank" rel="noopener external nofollow noreferrer">TLF基金-p2p科普</a></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>P2P</tag>
      </tags>
  </entry>
  <entry>
    <title>Git入门笔记</title>
    <url>/archives/ae682b8f.html</url>
    <content><![CDATA[<p>本文主要记录Git入门阶段需要了解的命令，Git的初始化配置详见：<a href="https://tding.top/archives/b0004f5f.html">GitHub初始化配置</a>。</p>
<a id="more"></a>

<h2 id="Git基础概念"><a href="#Git基础概念" class="headerlink" title="Git基础概念"></a>Git基础概念</h2><h3 id="三个重要的工作区"><a href="#三个重要的工作区" class="headerlink" title="三个重要的工作区"></a>三个重要的工作区</h3><ul>
<li><strong>工作目录【Working Directory】</strong>：工作目录就是用于开发的区域，工作目录的内容从数据仓库中检出指定版本进行修改，修改完成后可将修改内容提交到暂存区域。</li>
<li><strong>暂存区域【Stage】</strong>：暂存区域保存了工作区域提交的文件，“暂存”的意思就是只是对用户修改后需要提交到数据仓库的文件进行暂存，最后可一次性将暂存的内容提交到数据仓库。</li>
<li><strong>数据仓库【Commit History】</strong>：保存了所有Git提交的状态为Commited的文件，相当于集中式版本管理工具中服务器管理的文件数据库，数据仓库文件位于<code>.git</code>目录下。</li>
</ul>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>我们可以将它们看作普通的文件目录，同时把它们的操作看成目录间文件的复制操作，这样更容易理解Git的工作原理，其中数据仓库比较特殊会保存每一次复制(提交)的内容，而其它两个目录相同内容会被覆盖。</p>
<img src="/archives/ae682b8f/Git%E4%B8%89%E5%A4%A7%E5%88%86%E5%8C%BA.png" class="" title="Git三大分区">


<h2 id="克隆仓库到本地"><a href="#克隆仓库到本地" class="headerlink" title="克隆仓库到本地"></a>克隆仓库到本地</h2><h3 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h3><p>在你想要的目录下新建名为“GitHub”的文件夹，然后在该目录下打开<code>Git Bash</code>。</p>
<p>首先打开<code>Git Bash</code>，然后输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/elainelyu/Desktop/GitHub</span><br></pre></td></tr></table></figure>

<p>这样<code>Git Bash</code>就进入到桌面上的GitHub目录了。</p>
<h3 id="GitHub下载-clone-仓库到本地"><a href="#GitHub下载-clone-仓库到本地" class="headerlink" title="GitHub下载(clone)仓库到本地"></a>GitHub下载(clone)仓库到本地</h3><p>仓库地址：<code>https://github.com/someaccount/someproject</code></p>
<p>复制该仓库的SSH链接，然后通过以下命令下载到本地：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:someaccount/someproject.git</span><br></pre></td></tr></table></figure>

<p>然后我们通过cd进入项目文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> someproject</span><br></pre></td></tr></table></figure>


<h2 id="Git提交代码基本命令"><a href="#Git提交代码基本命令" class="headerlink" title="Git提交代码基本命令"></a>Git提交代码基本命令</h2><h3 id="拉取仓库"><a href="#拉取仓库" class="headerlink" title="拉取仓库"></a>拉取仓库</h3><p>大部分项目都需要团队合作，别人也可能提交了代码，因此我们在提交自己的代码之前先要<code>git pull</code>命令用来拉取远程仓库内容，与本地做为对比，防止代码冲突。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>没有冲突就可以进行下一步的提交代码到远程仓库。</p>
<h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><p><code>git add</code>命令用来将所要更新的文件添加到暂存区中，以备后续的提交。</p>
<p>我们可以用<code>git add test.html</code>来添加指定的文件，或者直接<code>git add .</code>来添加所有目录（不含空目录）。下面命令是将项目的所有文件添加到暂存区中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>我们可以通过<code>git status</code>命令来查看状态。</p>
<h4 id="撤销add操作"><a href="#撤销add操作" class="headerlink" title="撤销add操作"></a>撤销add操作</h4><p>当我们通过<code>git add</code>添加了多余文件后的撤销办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status                  <span class="comment"># 先看一下add 中的文件 </span></span><br><span class="line">git reset HEAD              <span class="comment"># 如果后面什么都不跟的话 就是上一次add里面的全部文件都撤销了 </span></span><br><span class="line">git reset HEAD XXX/XXX.java <span class="comment"># 对某个文件进行撤销了</span></span><br></pre></td></tr></table></figure>


<h3 id="提交代码到本地仓库"><a href="#提交代码到本地仓库" class="headerlink" title="提交代码到本地仓库"></a>提交代码到本地仓库</h3><p>我们可以通过<code>git commit</code>用来将代码提交到本地仓库，<code>-m</code>后面跟上注释，可以让其他人看到你本次做出了什么更改。此时还没有提交到远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"update"</span></span><br></pre></td></tr></table></figure>

<h4 id="修改提交备注的方法"><a href="#修改提交备注的方法" class="headerlink" title="修改提交备注的方法"></a>修改提交备注的方法</h4><p>我们在执行<code>git commit -m &quot;提交信息&quot;</code>命令时，将里面的提交信息写错，此时并没有执行<code>git push</code>命令，我们只需要如下命令即可修改备注：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend -m <span class="string">"新的提交信息"</span></span><br></pre></td></tr></table></figure>

<p>我们可以通过<code>git log</code>查看修改历史，我们可以看到只有后面这条commit记录，之前的没了。</p>
<h4 id="撤销commit操作"><a href="#撤销commit操作" class="headerlink" title="撤销commit操作"></a>撤销commit操作</h4><p>当不小心弄错了<code>git add</code>后，又<code>git commit</code>了。我们可以通过如下办法撤销： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span>  <span class="comment"># 查看节点</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commit xxxxxxxxxxxxxxxxxxxxxxxxxx </span><br><span class="line">Merge: </span><br><span class="line">Author: </span><br><span class="line">Date:</span><br></pre></td></tr></table></figure>

<p>然后我们可以通过下面两个操作进行回退：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset commit_id        <span class="comment"># 回退到上一个commit节点，代码还是原来你修改的 </span></span><br><span class="line">git reset –hard commit_id  <span class="comment"># 回退到上一个commit节点，代码也发生了改变，变成上一次的</span></span><br></pre></td></tr></table></figure>


<h3 id="提交代码到远程仓库"><a href="#提交代码到远程仓库" class="headerlink" title="提交代码到远程仓库"></a>提交代码到远程仓库</h3><p>我们可以通过如下代码将更改的文件提交到远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<h4 id="还原提交的代码"><a href="#还原提交的代码" class="headerlink" title="还原提交的代码"></a>还原提交的代码</h4><p>这种情况可以使用<code>git revert</code>来还原已经提交的修改。</p>
<p>此次操作之前和之后的commit以及history都会保留，并且把这次撤销作为一次最新的提交。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert HEAD       <span class="comment"># 撤销前一次 commit </span></span><br><span class="line">git revert HEAD^      <span class="comment"># 撤销前前一次 commit </span></span><br><span class="line">git revert commit-id  <span class="comment"># 撤销指定的版本，撤销也会作为一次提交进行保存</span></span><br></pre></td></tr></table></figure>

<p><code>git revert</code>是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。</p>
<h2 id="特殊文件忽略gitignore"><a href="#特殊文件忽略gitignore" class="headerlink" title="特殊文件忽略gitignore"></a>特殊文件忽略<code>gitignore</code></h2><p>在使用Git的过程中，我们喜欢有的文件比如日志，临时文件，编译的中间文件等不要提交到代码仓库，这时就要设置相应的忽略规则，来忽略这些文件的提交。</p>
<p>Git为我们提供了一个<code>.gitignore</code>文件，只要在这个文件中申明那些文件你不希望添加到Git中去，这样当你使用<code>git add .</code>的时候这些文件就会被自动忽略掉。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>我们只需要把要忽略的文件名填进去，Git就会自动忽略这些文件。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.<span class="built_in">log</span></span><br><span class="line">*.jar</span><br></pre></td></tr></table></figure>

<h3 id="忽略规则"><a href="#忽略规则" class="headerlink" title="忽略规则"></a>忽略规则</h3><p>Git对于<code>.gitignore</code>配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#               表示此为注释,将被Git忽略</span></span><br><span class="line">*.a             表示忽略所有 .a 结尾的文件</span><br><span class="line">!lib.a          表示但lib.a除外</span><br><span class="line">/TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">build/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；</span><br><span class="line">doc/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt</span><br><span class="line"> </span><br><span class="line">bin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</span><br><span class="line">/bin:           表示忽略根目录下的bin文件</span><br><span class="line">/*.c:           表示忽略cat.c，不忽略 build/cat.c</span><br><span class="line">debug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj</span><br><span class="line">**/foo:         表示忽略/foo,a/foo,a/b/foo等</span><br><span class="line">a/**/b:         表示忽略a/b, a/x/b,a/x/y/b等</span><br><span class="line">!/bin/run.sh    表示不忽略bin目录下的run.sh文件</span><br><span class="line">*.<span class="built_in">log</span>:          表示忽略所有 .<span class="built_in">log</span> 文件</span><br><span class="line">config.php:     表示忽略当前路径的 config.php 文件</span><br><span class="line"> </span><br><span class="line">/mtk/           表示过滤整个文件夹</span><br><span class="line">*.zip           表示过滤所有.zip文件</span><br><span class="line">/mtk/do.c       表示过滤某个具体文件</span><br></pre></td></tr></table></figure>

<p>注意：如果你不慎在创建<code>.gitignore</code>文件之前就push了项目，那么即使你在<code>.gitignore</code>文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。简单来说出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/ff081bb9ad63" target="_blank" rel="noopener external nofollow noreferrer">Git 入门笔记</a></li>
<li><a href="https://juejin.im/post/6844903654311510030" target="_blank" rel="noopener external nofollow noreferrer">Git三大分区的概念</a></li>
<li><a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener external nofollow noreferrer">Git忽略提交规则 - .gitignore配置运维总结</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Python项目生成requirements.txt</title>
    <url>/archives/7d51c50b.html</url>
    <content><![CDATA[<p>一起开发项目的时候总是要搭建环境和部署环境的，这个时候必须得有个Python第三方包的list，一般都叫做<code>requirements.txt</code>。本文介绍了两种生成<code>requirements.txt</code>的方法。</p>
<a id="more"></a>

<h2 id="一、使用pip-freeze"><a href="#一、使用pip-freeze" class="headerlink" title="一、使用pip freeze"></a>一、使用pip freeze</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p><strong>这种方式配合<code>virtualenv</code>才好使，否则把整个环境中的包都列出来了。</strong></p>
<p>下面是在<strong>虚拟环境</strong>中生成的<code>requirements.txt</code>文件内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat requirements.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certifi&#x3D;&#x3D;2019.3.9</span><br><span class="line">chardet&#x3D;&#x3D;3.0.4</span><br><span class="line">fake-useragent&#x3D;&#x3D;0.1.11</span><br><span class="line">idna&#x3D;&#x3D;2.7</span><br><span class="line">lxml&#x3D;&#x3D;4.2.5</span><br><span class="line">numpy&#x3D;&#x3D;1.16.3</span><br><span class="line">pandas&#x3D;&#x3D;0.22.0</span><br><span class="line">python-dateutil&#x3D;&#x3D;2.8.0</span><br><span class="line">pytz&#x3D;&#x3D;2019.1</span><br><span class="line">requests&#x3D;&#x3D;2.20.0</span><br><span class="line">six&#x3D;&#x3D;1.12.0</span><br><span class="line">urllib3&#x3D;&#x3D;1.24.3</span><br></pre></td></tr></table></figure>

<h2 id="二、使用-pipreqs"><a href="#二、使用-pipreqs" class="headerlink" title="二、使用 pipreqs"></a>二、使用 pipreqs</h2><p>这个工具通过对项目目录的扫描，自动发现使用了那些类库，自动生成依赖清单。此工具是基于<code>imports</code>，即你的项目引入了哪个包，此工具才会把引入的包写到<code>requirements.txt</code>中，要比<code>pip freeze</code>干净。这个工具的缺点是可能会有些偏差，需要检查并自己调整下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure>

<p>有可能会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;c:\program files\python36\lib\runpy.py&quot;, line 193, in _run_module_as_main</span><br><span class="line">    &quot;__main__&quot;, mod_spec)</span><br><span class="line">  File &quot;c:\program files\python36\lib\runpy.py&quot;, line 85, in _run_code</span><br><span class="line">    exec(code, run_globals)</span><br><span class="line">  File &quot;C:\Program Files\Python36\Scripts\pipreqs.exe\__main__.py&quot;, line 9, in &lt;module&gt;</span><br><span class="line">  File &quot;c:\program files\python36\lib\site-packages\pipreqs\pipreqs.py&quot;, line 396, in main</span><br><span class="line">    init(args)</span><br><span class="line">  File &quot;c:\program files\python36\lib\site-packages\pipreqs\pipreqs.py&quot;, line 341, in init</span><br><span class="line">    extra_ignore_dirs&#x3D;extra_ignore_dirs)</span><br><span class="line">  File &quot;c:\program files\python36\lib\site-packages\pipreqs\pipreqs.py&quot;, line 75, in get_all_imports</span><br><span class="line">    contents &#x3D; f.read()</span><br><span class="line">UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0xaf in position 12: illegal multibyte sequence</span><br></pre></td></tr></table></figure>

<p>这是由于编码问题所导致的，加上<code>encoding</code>参数即可，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipreqs ./ --encoding=utf-8</span><br></pre></td></tr></table></figure>

<p>下面我看下生成的<code>requirements.txt</code>文件内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat requirements.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requests&#x3D;&#x3D;2.20.0</span><br><span class="line">fake_useragent&#x3D;&#x3D;0.1.11</span><br><span class="line">lxml&#x3D;&#x3D;4.2.5</span><br><span class="line">pandas&#x3D;&#x3D;0.22.0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python虚拟环境实践</title>
    <url>/archives/34b01e11.html</url>
    <content><![CDATA[<p>开发每个Python项目时，都推荐创建对应的virtualenv来隔离开发。 这样可以不受系统Python软件包的影响，安装任意包的任意版本，并且最终能通过<code>pip freeze &gt; requirements.txt</code>获取依赖列表。当然，这个列表通常需要裁剪。</p>
<a id="more"></a>

<h2 id="一、安装virtualenv"><a href="#一、安装virtualenv" class="headerlink" title="一、安装virtualenv"></a>一、安装virtualenv</h2><p>使用apt、yum等包管理器安装的版本老旧，推荐使用pip安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3.6 -m pip install virtualenv</span><br></pre></td></tr></table></figure>

<h2 id="二、准备virtualenv"><a href="#二、准备virtualenv" class="headerlink" title="二、准备virtualenv"></a>二、准备virtualenv</h2><p>每个项目，都需要独立创建一个（或多个）虚拟环境，隔离开发。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv -p python3.6 venv</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-p</code>是显式指定Python版本，避免使用默认的python。 </li>
<li>虚拟环境的常用名，可选择<code>env</code>、<code>venv</code>、<code>.env</code>、<code>.venv</code>。 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@SS-DTA:&#x2F;home&#x2F;nbsprc# ls -alh</span><br><span class="line">total 12K</span><br><span class="line">drwxr-xr-x 3 root root 4.0K May 25 03:03 .</span><br><span class="line">drwxr-xr-x 9 root root 4.0K May 25 02:52 ..</span><br><span class="line">drwxr-xr-x 5 root root 4.0K May 25 03:03 venv</span><br></pre></td></tr></table></figure>

<h2 id="三、激活virtualenv"><a href="#三、激活virtualenv" class="headerlink" title="三、激活virtualenv"></a>三、激活virtualenv</h2><p>默认使用的是用户+系统环境，激活后才是虚拟环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure>

<p>激活虚拟环境后，可以看到只有三个Python包。 这个环境可以随意使用，所有安装都会在<code>./venv/</code>下，不会影响系统环境。 干净的环境，也能帮助开发人员确认依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) root@SS-DTA:/home/nbsprc<span class="comment"># pip list</span></span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        19.1.1</span><br><span class="line">setuptools 41.0.1</span><br><span class="line">wheel      0.33.4</span><br></pre></td></tr></table></figure>

<p>在这个虚拟环境中，python就是python3.6，而系统环境的python通常是python2。 在安装软件时，直接使用pip，即可安装到虚拟环境中。 而不像一般状态下，要么加sudo提权（[brew]或Windows环境下不用），要么安装时需要加–user，安装到用户目录下。</p>
<h2 id="四、退出virtualenv"><a href="#四、退出virtualenv" class="headerlink" title="四、退出virtualenv"></a>四、退出virtualenv</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<p>退出后，回到用户+系统环境。</p>
<h2 id="五、虚拟环境的原理"><a href="#五、虚拟环境的原理" class="headerlink" title="五、虚拟环境的原理"></a>五、虚拟环境的原理</h2><p>virtualenv是如何创建一个隔离的Python虚拟环境？这个环境有什么特点？</p>
<p>这个环境的特点：</p>
<ul>
<li>Python版本固定。即使系统的Python升级了，虚拟环境中的仍然不受影响，保留开发状态。</li>
<li>所有Python软件包，都只在这个环境生效。一旦退出，则回到用户+系统的默认环境中。</li>
</ul>
<p>这两个特点，由两个小手段实现。</p>
<ul>
<li>改变当前Shell的<code>PATH</code>。</li>
<li>改变Python运行时的<code>sys.path</code>。</li>
</ul>
<h3 id="改变PATH"><a href="#改变PATH" class="headerlink" title="改变PATH"></a>改变PATH</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@SS-DTA:/home/nbsprc<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/snap/bin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) root@SS-DTA:/home/nbsprc<span class="comment"># echo $PATH</span></span><br><span class="line">/home/nbsprc/venv/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/snap/bin</span><br></pre></td></tr></table></figure>

<p>显然，这个activate，为当前PATH增加了<code>/home/nbsprc/venv/bin</code>这个位置在最前方，因此虚拟环境中的可执行文件拥有最高优先级。 而lib与include，仅仅是bin下面的可执行文件做相对路径运算来寻找的位置。 所以，改变了PATH，就改变了很多事。</p>
<p><strong>由于优先级最高，所以环境里的python、pip等，包括后来用pip安装的可执行文件，都使用的是venv下的。</strong></p>
<h3 id="改变sys-path"><a href="#改变sys-path" class="headerlink" title="改变sys.path"></a>改变sys.path</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@SS-DTA:/home/nbsprc<span class="comment"># python3.6 -m site</span></span><br><span class="line">sys.path = [</span><br><span class="line">    <span class="string">'/home/nbsprc'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python36.zip'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python3.6'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python3.6/lib-dynload'</span>,</span><br><span class="line">    <span class="string">'/usr/local/lib/python3.6/dist-packages'</span>,</span><br><span class="line">    <span class="string">'/usr/local/lib/python3.6/dist-packages/setuptools-41.0.1-py3.6.egg'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python3/dist-packages'</span>,</span><br><span class="line">]</span><br><span class="line">USER_BASE: <span class="string">'/root/.local'</span> (exists)</span><br><span class="line">USER_SITE: <span class="string">'/root/.local/lib/python3.6/site-packages'</span> (doesn<span class="string">'t exist)</span></span><br><span class="line"><span class="string">ENABLE_USER_SITE: True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) root@SS-DTA:/home/nbsprc<span class="comment"># python -m site</span></span><br><span class="line">sys.path = [</span><br><span class="line">    <span class="string">'/home/nbsprc'</span>,</span><br><span class="line">    <span class="string">'/home/nbsprc/venv/lib/python36.zip'</span>,</span><br><span class="line">    <span class="string">'/home/nbsprc/venv/lib/python3.6'</span>,</span><br><span class="line">    <span class="string">'/home/nbsprc/venv/lib/python3.6/lib-dynload'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python3.6'</span>,</span><br><span class="line">    <span class="string">'/home/nbsprc/venv/lib/python3.6/site-packages'</span>,</span><br><span class="line">]</span><br><span class="line">USER_BASE: <span class="string">'/root/.local'</span> (exists)</span><br><span class="line">USER_SITE: <span class="string">'/root/.local/lib/python3.6/site-packages'</span> (doesn<span class="string">'t exist)</span></span><br><span class="line"><span class="string">ENABLE_USER_SITE: False</span></span><br></pre></td></tr></table></figure>

<p>可见，<code>sys.path</code>发生了翻天覆地的变化。 除了当前路径<code>/root</code>和标准库<code>/usr/local/lib/python3.6</code>被保留以外，其它位置都换成了venv下的。 这就是为什么<code>pip list</code>看不见什么软件包的原因，也是环境隔离的最大秘密。</p>
<blockquote>
<p>参考：<a href="https://note.qidong.name/2019/03/python-virtualenv/" target="_blank" rel="noopener external nofollow noreferrer">匿蟒-Python中的虚拟环境（Virtualenv）及其工作原理</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python集合用处</title>
    <url>/archives/56cd6720.html</url>
    <content><![CDATA[<p>集合的最大特点是：集合里边的元素是不可重复的并且集合内的元素还是无序的。</p>
<p>一般情况下集合常用的两个场景是：</p>
<ul>
<li>去重（如：列表去重）</li>
<li>关系测试（如：取交集、取并集、取差集等）</li>
</ul>
<a id="more"></a>

<h2 id="一、去重"><a href="#一、去重" class="headerlink" title="一、去重"></a>一、去重</h2><h3 id="1、比较麻烦的方法——利用列表"><a href="#1、比较麻烦的方法——利用列表" class="headerlink" title="1、比较麻烦的方法——利用列表"></a>1、比较麻烦的方法——利用列表</h3><p>方法就是遍历一个列表，对其中的每个数据判断在不在第二个列表里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">list2=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list3=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">   <span class="keyword">if</span> i <span class="keyword">in</span> list2:</span><br><span class="line">       list3.append(i)</span><br><span class="line">print(list3)</span><br></pre></td></tr></table></figure>

<h3 id="2、运用集合来去重"><a href="#2、运用集合来去重" class="headerlink" title="2、运用集合来去重"></a>2、运用集合来去重</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">set1 = set(list1)</span><br><span class="line">print(<span class="string">"list1去重后的set集合："</span>,set1)</span><br><span class="line"><span class="comment"># 再转化成一个列表</span></span><br><span class="line">new_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> set1]</span><br><span class="line">print(<span class="string">"list1去重后的list列表："</span>,new_list)</span><br></pre></td></tr></table></figure>

<h2 id="二、关系测试"><a href="#二、关系测试" class="headerlink" title="二、关系测试"></a>二、关系测试</h2><p>一些集合的最基本操作，如集合取交集、取并集、取差集、判断一个集合是不是另一个集合子集或者父集等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">set2 = set([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br></pre></td></tr></table></figure>

<h3 id="1、交集"><a href="#1、交集" class="headerlink" title="1、交集"></a>1、交集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">print(set1.intersection(set2))</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">print(set1 &amp; set2)</span><br></pre></td></tr></table></figure>

<h3 id="2、并集"><a href="#2、并集" class="headerlink" title="2、并集"></a>2、并集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">print(set1.union(set2))</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">print(set1 | set2)</span><br></pre></td></tr></table></figure>

<h3 id="3、差集"><a href="#3、差集" class="headerlink" title="3、差集"></a>3、差集</h3><p>这里需要注意顺序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set1 - set2</span></span><br><span class="line">print(set1.difference(set2))</span><br><span class="line">print(set1 - set2)</span><br><span class="line"><span class="comment"># set2 - set1</span></span><br><span class="line">print(set2.difference(set1))</span><br><span class="line">print(set2 - set1)</span><br></pre></td></tr></table></figure>

<h3 id="4、子集判断"><a href="#4、子集判断" class="headerlink" title="4、子集判断"></a>4、子集判断</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断set1是否是set2的子集</span></span><br><span class="line">print(set1.issubset(set2))</span><br></pre></td></tr></table></figure>

<h3 id="5、父集判断"><a href="#5、父集判断" class="headerlink" title="5、父集判断"></a>5、父集判断</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断set1是否是set2的父集</span></span><br><span class="line">print(set1.issuperset(set2))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Python用list实现堆栈和队列</title>
    <url>/archives/93f5c51f.html</url>
    <content><![CDATA[<p>Python中可以用list来模拟栈和队列：</p>
<ul>
<li><strong>栈（stack）</strong>:只能在一端进行数据操作，遵循后进先出（LIFO）原则</li>
<li><strong>队列（queue）</strong>:可以在两端进行数据操作，遵循先进先出（FIFO）原则，出队列的一端称为队首，入队列的一端称为队尾</li>
</ul>
<a id="more"></a>

<h2 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h2><h3 id="1、栈要记录的数据"><a href="#1、栈要记录的数据" class="headerlink" title="1、栈要记录的数据"></a>1、栈要记录的数据</h3><ul>
<li>栈顶位置top：注意这个top有两种理解方式，一种是表示栈的最后一个数据的位置，另一种是表示栈的最后一个数据的下一个位置，这两种理解对栈的操作代码有一定的影响</li>
<li>栈最大大小size</li>
</ul>
<h3 id="2、栈的操作"><a href="#2、栈的操作" class="headerlink" title="2、栈的操作"></a>2、栈的操作</h3><ul>
<li><code>isEmpty()</code>：判断栈是否为空</li>
<li><code>isFull()</code>：判断栈是否已满</li>
<li><code>push(element)</code>：向栈中添加一个值，<strong>注意栈是否为满的</strong></li>
<li><code>pop()</code>：从栈中弹出一个值，<strong>注意栈是否为空</strong></li>
</ul>
<h3 id="3、Python列表实现栈"><a href="#3、Python列表实现栈" class="headerlink" title="3、Python列表实现栈"></a>3、Python列表实现栈</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,size = <span class="number">10</span>)</span>:</span></span><br><span class="line">        self.S = []</span><br><span class="line">        self.size = size  <span class="comment"># 栈大小</span></span><br><span class="line">        self.top = <span class="number">-1</span>     <span class="comment"># 栈顶位置</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSize</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        <span class="comment"># 设置栈的大小</span></span><br><span class="line">        self.size = size    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 判断栈是否为空</span></span><br><span class="line">        <span class="keyword">if</span> self.top == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isFull</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 判断栈是否满</span></span><br><span class="line">        <span class="keyword">if</span> self.top == self.size - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 查看栈顶的对象，但不移除</span></span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            <span class="keyword">raise</span> StackException(<span class="string">'StackUnderflow'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            element = self.S[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">return</span> element</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 移除栈顶对象，并返回该对象的值</span></span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            <span class="keyword">raise</span> StackException(<span class="string">'StackUnderflow'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            element = self.S[<span class="number">-1</span>]</span><br><span class="line">            self.top = self.top - <span class="number">1</span></span><br><span class="line">            <span class="keyword">del</span> self.S[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">return</span> element</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        <span class="comment"># 把对象压入栈顶</span></span><br><span class="line">        <span class="keyword">if</span> self.isFull():</span><br><span class="line">            <span class="keyword">raise</span> StackException(<span class="string">'StackOverflow'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.S.append(element)</span><br><span class="line">            self.top = self.top + <span class="number">1</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Stack()</span><br><span class="line">    <span class="comment"># 压栈测试</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        s.push(i)</span><br><span class="line">    <span class="comment"># 栈满测试</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s.push(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="comment"># 出栈测试</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(s.pop())</span><br><span class="line">    <span class="comment"># 栈空测试</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s.pop()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure>

<h2 id="二、队列"><a href="#二、队列" class="headerlink" title="二、队列"></a>二、队列</h2><h3 id="1、队列要记录的数据"><a href="#1、队列要记录的数据" class="headerlink" title="1、队列要记录的数据"></a>1、队列要记录的数据</h3><ul>
<li>队头位置end</li>
<li>队列的大小size</li>
</ul>
<h3 id="2、标准做法"><a href="#2、标准做法" class="headerlink" title="2、标准做法"></a>2、标准做法</h3><blockquote>
<p>利用数组<code>Q[1..n]</code>来实现含有n-1个元素队列（保留一位元素用来判断队列空或满）。该列有一个属性<code>Q.head</code>指向队头元素，属性<code>Q.tail</code>指向下一个新元素将要插入的位置，列中的元素存放在位置<code>Q.head, Q.head+1, …, Q.tail-1</code>上。</p>
<ul>
<li>初始时，<code>Q.head = Q.tail = 1</code></li>
<li>当<code>Q.head = Q.tail</code>时， 队列为空</li>
<li>当<code>Q.head = Q.tail + 1</code>时，队列为满</li>
</ul>
</blockquote>
<h3 id="3、队列的操作"><a href="#3、队列的操作" class="headerlink" title="3、队列的操作"></a>3、队列的操作</h3><ul>
<li><code>isEmpty()</code>：判断队列是否为空</li>
<li><code>isFull()</code>：判断队列是否已满</li>
<li><code>inQueue(element)</code>：入队</li>
<li><code>outQueue()</code>：出队</li>
</ul>
<h3 id="4、Python列表实现队列"><a href="#4、Python列表实现队列" class="headerlink" title="4、Python列表实现队列"></a>4、Python列表实现队列</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size=<span class="number">10</span>)</span>:</span></span><br><span class="line">        self.Q = []</span><br><span class="line">        self.size = size  <span class="comment"># 队列大小</span></span><br><span class="line">        self.end = <span class="number">-1</span>     <span class="comment"># 队头位置</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSize</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        <span class="comment"># 设置队列的大小</span></span><br><span class="line">        self.size = size</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inQueue</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        <span class="comment"># 对象入队</span></span><br><span class="line">        <span class="keyword">if</span> self.end &lt; self.size - <span class="number">1</span>:</span><br><span class="line">            self.Q.append(element)</span><br><span class="line">            self.end += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> QueueException(<span class="string">'QueueFull'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outQueue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 对象出队</span></span><br><span class="line">        <span class="keyword">if</span> self.end == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">raise</span> QueueException(<span class="string">'QueueEmpty'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            element = self.Q[<span class="number">0</span>]</span><br><span class="line">            self.Q = self.Q[<span class="number">1</span>:]</span><br><span class="line">            self.end -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    <span class="comment"># 入队测试</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        q.inQueue(i)</span><br><span class="line">    <span class="comment"># 队列满测试</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        q.inQueue(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="comment"># 出队测试</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(q.outQueue())</span><br><span class="line">    <span class="comment"># 队列空测试</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        q.outQueue()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub的Markdown文件插入公式方法</title>
    <url>/archives/22f997b6.html</url>
    <content><![CDATA[<blockquote>
<p>Markdown 原生就是不支持LaTeX的，GitHub Flavored Markdown 同样不支持。Markdown 的初衷就是成为一种与HTML兼容的“易读易写”的轻量级的网络标记语言，并不要求支持 LaTeX。</p>
</blockquote>
<p>本文介绍以下两个方法来在GitHub的Markdown文件插入公式并显示。</p>
<a id="more"></a>

<h2 id="一、插入动态公式"><a href="#一、插入动态公式" class="headerlink" title="一、插入动态公式"></a>一、插入动态公式</h2><p>在<a href="http://latex.codecogs.com/" target="_blank" rel="noopener external nofollow noreferrer">CodeCogs Equation Editor</a>线上生成图片然后在Markdown文件中插入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](http:&#x2F;&#x2F;latex.codecogs.com&#x2F;gif.latex?%5Csigma%3D%5Csqrt%7B%5Cfrac%7B1%7D%7Bn%7D%7B%5Csum_%7Bk%3D1%7D%5En%28x_i-%5Cbar%7Bx%7D%29%5E2%7D%7D)</span><br></pre></td></tr></table></figure>

<p>具体公式的Latex代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\sigma&#x3D;\sqrt&#123;\frac&#123;1&#125;&#123;n&#125;&#123;\sum_&#123;k&#x3D;1&#125;^n(x_i-\bar&#123;x&#125;)^2&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>下面是显示的公式：</p>
<p><img src="http://latex.codecogs.com/gif.latex?%5Csigma%3D%5Csqrt%7B%5Cfrac%7B1%7D%7Bn%7D%7B%5Csum_%7Bk%3D1%7D%5En%28x_i-%5Cbar%7Bx%7D%29%5E2%7D%7D" alt=""></p>
<p><strong>注意要双反斜线<code>\\</code>来escape</strong></p>
<p>具体使用方法：</p>
<img src="/archives/22f997b6/1.png" class="" title="图1">

<h2 id="二、chrome插件"><a href="#二、chrome插件" class="headerlink" title="二、chrome插件"></a>二、chrome插件</h2><p>chrome的插件<code>GitHub with MathJax</code>可以在你自己的浏览器解析tex公式，但是没装插件的人看着还是源码。</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装微信传来的apk程序</title>
    <url>/archives/4bd68ecb.html</url>
    <content><![CDATA[<p>安卓手机的一大优势就是可以通过apk快速安装应用商店没有的应用，然而，通过微信传来的apk程序会出现难以识别的问题。</p>
<a id="more"></a>

<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>微信为了提高安全性，会在可执行型文件的<strong>后缀名后面</strong>加上 <code>.1</code> 不让你正常运行。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>找到原因以后就比较简单了，只需要修改一下文件名，然后就可以正常安装了。</p>
<ol>
<li>首先找到<code>xxx.apk.1</code>的文件：</li>
</ol>
<ul>
<li>第一种手机：<code>文件管理-〉分类浏览-〉安装包-〉xxx.apk.1</code></li>
<li>第二种手机：<code>文件管理-〉tencent（腾讯）-〉MicroMsg-〉Dowmload-〉xxx.apk.1</code></li>
</ul>
<img src="/archives/4bd68ecb/1.png" class="" title="图1">

<ol start="2">
<li>然后再把<code>xxx.apk.1</code>重命名为 <code>xxx.apk</code>，即可安装。</li>
</ol>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>链接到GitHub特定行号</title>
    <url>/archives/231f8283.html</url>
    <content><![CDATA[<p><strong>注意：不要只是链接到行号！一定要使用<code>canonical URL(标准链接)</code>。否则，当该文件更新时，有可能会指向错误行！</strong></p>
<a id="more"></a>

<p>首先点击你想要的行号(如第18行)，你的浏览器中的URL将得到一个<code>#L18</code>，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;git&#x2F;git&#x2F;blob&#x2F;master&#x2F;README#L18</span><br></pre></td></tr></table></figure>

<p>如果要选择多行，只需按住<code>shift</code>键，然后单击第二行数字，如第20行。现在浏览器网址如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;git&#x2F;git&#x2F;blob&#x2F;master&#x2F;README#L18-L20</span><br></pre></td></tr></table></figure>

<p>下面是最重要的一步：现在通过按<code>y</code>键得到<strong>特定提交的标准链接</strong>。现在浏览器网址变为如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;git&#x2F;git&#x2F;blob&#x2F;5bdb7a78adf2a2656a1915e6fa656aecb45c1fc3&#x2F;README#L18-L20</span><br></pre></td></tr></table></figure>

<p>该链接包含该特定提交的SHA，而不是主节点上当前版本的文件。这意味着这个链接将永远工作，而不是指向该文件（以及未来版本）的第18-20行。</p>
<blockquote>
<p>参考：<a href="https://help.github.com/en/articles/getting-permanent-links-to-files" target="_blank" rel="noopener external nofollow noreferrer">Getting permanent links to files</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn lineplot图例标题设置</title>
    <url>/archives/18ecf180.html</url>
    <content><![CDATA[<p>在进行<code>lineplot()</code>绘制折线图的时候，如果用了hue参数同时绘制多个类别图，这时候seaborn会把这个hue的标签当做图例的子标题。本文介绍了几个修改、删除此不需要的图例标题的方法。</p>
<a id="more"></a>

<h2 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h2><p>下面是我的<code>lineplot()</code>代码，如果此方法用了hue参数同时绘制多个类别图，这时候seaborn会把这个hue的标签当做子标题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.lineplot(x=<span class="string">"time"</span>, y=<span class="string">"value"</span>, hue=<span class="string">"category"</span>, data=df)</span><br></pre></td></tr></table></figure>

<p>如果我用下面的方法，会产生一个新图例的标题，原来的图例标题并没有被修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.legend().set_title(<span class="string">'title'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h2><p>seaborn会错误的把图例的标题当做一个subgroup-title。</p>
<blockquote>
<p>seaborn is misusing a legend label as a (subgroup-)title.</p>
</blockquote>
<h2 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h2><h3 id="1、修改此子标题方法"><a href="#1、修改此子标题方法" class="headerlink" title="1、修改此子标题方法"></a>1、修改此子标题方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">legend = ax.legend()  </span><br><span class="line">legend.texts[<span class="number">0</span>].set_text(<span class="string">"Whatever else"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/18ecf180/1.png" class="" title="图1">

<h3 id="2、移除此子标题方法"><a href="#2、移除此子标题方法" class="headerlink" title="2、移除此子标题方法"></a>2、移除此子标题方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handles, labels = ax.get_legend_handles_labels()</span><br><span class="line">ax.legend(handles=handles[<span class="number">1</span>:], labels=labels[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>

<img src="/archives/18ecf180/2.png" class="" title="图2">

<h3 id="3、去掉子标题，加上真正的标题方法"><a href="#3、去掉子标题，加上真正的标题方法" class="headerlink" title="3、去掉子标题，加上真正的标题方法"></a>3、去掉子标题，加上真正的标题方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handles, labels = ax.get_legend_handles_labels()</span><br><span class="line">ax.legend(handles=handles[<span class="number">1</span>:], labels=labels[<span class="number">1</span>:], title=<span class="string">"Whatever else"</span>)</span><br></pre></td></tr></table></figure>

<img src="/archives/18ecf180/3.png" class="" title="图3">

]]></content>
      <categories>
        <category>Python</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn双变量分布jointplot的坐标轴标签设置</title>
    <url>/archives/879a6ea0.html</url>
    <content><![CDATA[<p>我采用<code>jointplot()</code>进行双变量分布绘图，但是没法通过<code>plt.xlabel</code>来修改它的坐标轴标签。下面是解决办法。</p>
<a id="more"></a>

<h2 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h2><p>我采用<code>jointplot()</code>进行双变量分布绘图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.jointplot(x, y)</span><br></pre></td></tr></table></figure>

<p>但是没法通过<code>plt.xlabel</code>来修改它的坐标轴标签。</p>
<h2 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h2><p>这里要用到<code>JointGrid</code>对象。</p>
<blockquote>
<p><code>jointplot()</code>函数基于<code>JointGrid</code>对象来控制图形。我们可以直接使用<code>JointGrid</code>来获得更高的灵活性。<code>jointplot()</code>在绘制完成后会返回一个<code>JointGrid</code>对象，我们可以通过它来增加更多图层或者调整其他细节。</p>
</blockquote>
<p>下面是一个的修改<code>jointplot()</code>坐标轴标签的实例：</p>
<figure class="highlight python"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#example data</span></span><br><span class="line">X = np.random.randn(<span class="number">1000</span>,)</span><br><span class="line">Y = <span class="number">0.2</span> * np.random.randn(<span class="number">1000</span>) + <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">h = sns.jointplot(X, Y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># JointGrid has a convenience function</span></span><br><span class="line">h.set_axis_labels(<span class="string">'x'</span>, <span class="string">'y'</span>, fontsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or set labels via the axes objects</span></span><br><span class="line">h.ax_joint.set_xlabel(<span class="string">'new x label'</span>, fontweight=<span class="string">'bold'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># also possible to manipulate the histogram plots this way, e.g.</span></span><br><span class="line">h.ax_marg_y.grid(<span class="string">'on'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># labels appear outside of plot area, so auto-adjust</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><strong>如果采用<code>plt.xlabel（“text”）</code>方法，这个方法会作用在在当前ax上，而不是在<code>sns.jointplot</code>的ax上。因此需要用<code>jointplot()</code>返回的<code>JointGrid</code>对象来控制。</strong></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub代理设置</title>
    <url>/archives/cbef72d4.html</url>
    <content><![CDATA[<p>国内<code>git clone</code>一个GitHub上的仓库太慢，经常连接失败。下面是解决办法。</p>
<a id="more"></a>

<h2 id="一、代理设置"><a href="#一、代理设置" class="headerlink" title="一、代理设置"></a>一、代理设置</h2><h3 id="1、全局代理设置"><a href="#1、全局代理设置" class="headerlink" title="1、全局代理设置"></a>1、全局代理设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>这里可以打开SS查看代理设置，查看自己的端口是否为1080，不是的改为对应的端口。</p>
<h3 id="2、只对GitHub进行代理"><a href="#2、只对GitHub进行代理" class="headerlink" title="2、只对GitHub进行代理"></a>2、只对GitHub进行代理</h3><p>如果挂了全局代理，克隆coding之类的国内仓库会变慢，所以我建议使用如下命令，只对GitHub进行代理，对国内的仓库不影响。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy https://127.0.0.1:1080</span><br><span class="line">git config --global https.https://github.com.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>如果在输入这条命令之前，已经输入全局代理的话，可以按照<strong>二、取消代理</strong>的方法进行取消。</p>
<p><strong>注意：以上两点都是对https协议进行代理设置，也就是仅对<code>git clone https://www.github.com/xxxx/xxxx.git</code>这种命令有效。对于SSH协议，也就是<code>git clone git@github.com:xxxxxx/xxxxxx.git</code>这种，依旧是无效的。</strong></p>
<h3 id="3、sock5代理设置"><a href="#3、sock5代理设置" class="headerlink" title="3、sock5代理设置"></a>3、sock5代理设置</h3><p>之前说的是http代理，有人反映ss暴露的是socks5。下面附上socks5代理的方法。</p>
<p>1、首先查看自己socks5的端口号，假设为：127.0.0.1:1086</p>
<p>2、输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1086</span><br><span class="line">git config --global https.https://github.com.proxy socks5://127.0.0.1:1086</span><br></pre></td></tr></table></figure>


<h2 id="二、取消代理"><a href="#二、取消代理" class="headerlink" title="二、取消代理"></a>二、取消代理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<h2 id="三、查看已有配置"><a href="#三、查看已有配置" class="headerlink" title="三、查看已有配置"></a>三、查看已有配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure>



<hr>
<p>参考：<a href="https://www.zhihu.com/question/27159393/answer/141047266" target="_blank" rel="noopener external nofollow noreferrer">汪小九的回答</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中list转换array的一个问题</title>
    <url>/archives/26ce33e.html</url>
    <content><![CDATA[<p>我在数据分析过程中需要将list转换为array，但是转换的过程出了一点问题，下面是记录。</p>
<a id="more"></a>

<h2 id="一、list转换为array的方法"><a href="#一、list转换为array的方法" class="headerlink" title="一、list转换为array的方法"></a>一、list转换为array的方法</h2><p>下面的a是一个list类型，如果要进行numpy的一些数值运算，我们就需要将它转换为array类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br></pre></td></tr></table></figure>

<p>转换如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">a_array = np.array(a)</span><br><span class="line">print(a_array)</span><br></pre></td></tr></table></figure>

<p>转换得到的<code>a_array</code>则是array类型。一个二维三列的数组。</p>
<h2 id="二、一个问题"><a href="#二、一个问题" class="headerlink" title="二、一个问题"></a>二、一个问题</h2><p><strong>在list转换为array的过程中，当list的维度不一样的时候，array并不能将其解释为数组形式，而是解释为一个object类型。</strong></p>
<p>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]]</span><br><span class="line">a_array = np.array(a)</span><br><span class="line">print(a_array.shape)</span><br></pre></td></tr></table></figure>

<p>这个时候的<code>a_array.shape</code>并不是<code>（2L,3L）</code>，而是<code>(2L,)</code>，并没有第二维了。因为你维度二的个数是不一样的。这个时候就会将<code>[1,2,3]</code>解释为一个object，将<code>[4,5,6,7]</code>解释为一个object，上面的<code>(2L,)</code>就是相当于俩行，没有第二列。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据处理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows几个隐私设置</title>
    <url>/archives/52e9c999.html</url>
    <content><![CDATA[<p>本文主要介绍Win10系统下的隐私设置：<strong>文件夹下不显示最近打开的文件</strong>、<strong>右键任务栏图标不显示最近打开的文件</strong>以及Win7系统下<strong>右键任务栏图标不显示最近打开的文件</strong>。</p>
<a id="more"></a>

<h2 id="一、Win10文件夹下不显示最近打开的文件"><a href="#一、Win10文件夹下不显示最近打开的文件" class="headerlink" title="一、Win10文件夹下不显示最近打开的文件"></a>一、Win10文件夹下不显示最近打开的文件</h2><blockquote>
<p>win10系统的“最近使用的文件”功能，它可以让我们快速打开之前访问过的文件，但另一方面又让我们的隐私予以泄露，你看过哪些文件，别人通过“最近使用的文件”的功能就能看到。</p>
</blockquote>
<p>1、在桌面上打开“此电脑”图标</p>
<p>2、进到【此电脑】中，切换到“查看”选项卡，点击右侧的“选项”按钮。如图所示：</p>
<img src="/archives/52e9c999/1.png" class="" title="图1">

<p>3、此时将打开“文件夹选项”界面，切换到“常规”选项卡，从“隐私”栏目中清除勾选“在‘快速访问’中显示最近使用的文件”和“在‘快速访问’中显示常用文件夹”两个项即可。</p>
<img src="/archives/52e9c999/2.png" class="" title="图2">

<h2 id="二、Win10右键任务栏图标不显示最近打开的文件"><a href="#二、Win10右键任务栏图标不显示最近打开的文件" class="headerlink" title="二、Win10右键任务栏图标不显示最近打开的文件"></a>二、Win10右键任务栏图标不显示最近打开的文件</h2><p>Win10设置-个性化-开始-将“在开始屏幕或任务栏的跳转列表中显示最近打开的项”关闭即可。</p>
<img src="/archives/52e9c999/3.png" class="" title="图3">

<h2 id="三、Win7右键任务栏图标不显示最近打开的文件"><a href="#三、Win7右键任务栏图标不显示最近打开的文件" class="headerlink" title="三、Win7右键任务栏图标不显示最近打开的文件"></a>三、Win7右键任务栏图标不显示最近打开的文件</h2><p>1、单击打开“任务栏和「开始」菜单属性”。</p>
<img src="/archives/52e9c999/4.png" class="" title="图4">

<p>2、单击“「开始」菜单”选项卡，然后在“隐私”下，清除“存储并显示最近在「开始」菜单中打开的程序列表”复选框。 </p>
<img src="/archives/52e9c999/5.png" class="" title="图5">

<p>3、单击“确定”。</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Python fake_useragent报错解决方案</title>
    <url>/archives/3caecd5b.html</url>
    <content><![CDATA[<p>我在调用<code>fake_useragent</code>这个包时出现<code>fake_useragent.errors.FakeUserAgentError: Maximum amount of retries reached</code>错误，本文详细分析了这个错误并且给出了解决方案。</p>
<a id="more"></a>


<h2 id="一、错误信息"><a href="#一、错误信息" class="headerlink" title="一、错误信息"></a>一、错误信息</h2><p>这是报错的命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">ua = UserAgent()</span><br></pre></td></tr></table></figure>

<p>这是错误信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;f:\python36\lib\site-packages\fake_useragent\utils.py&quot;, line 154, in load</span><br><span class="line">    for item in get_browsers(verify_ssl&#x3D;verify_ssl):</span><br><span class="line">  File &quot;f:\python36\lib\site-packages\fake_useragent\utils.py&quot;, line 97, in get_browsers</span><br><span class="line">    html &#x3D; get(settings.BROWSERS_STATS_PAGE, verify_ssl&#x3D;verify_ssl)</span><br><span class="line">  File &quot;f:\python36\lib\site-packages\fake_useragent\utils.py&quot;, line 84, in get</span><br><span class="line">    raise FakeUserAgentError(&#39;Maximum amount of retries reached&#39;)</span><br><span class="line">fake_useragent.errors.FakeUserAgentError: Maximum amount of retries reached</span><br></pre></td></tr></table></figure>

<h2 id="二、错误分析"><a href="#二、错误分析" class="headerlink" title="二、错误分析"></a>二、错误分析</h2><p>依据报错，初步推断是网络超时，从网查阅资料得知，这个库会引用在线资源，经排查，<code>fake_useragent\settings.py</code>相关配置如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line">__version__ = <span class="string">'0.1.11'</span></span><br><span class="line"></span><br><span class="line">DB = os.path.join(</span><br><span class="line">    tempfile.gettempdir(),</span><br><span class="line">    <span class="string">'fake_useragent_&#123;version&#125;.json'</span>.format(</span><br><span class="line">        version=__version__,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CACHE_SERVER = <span class="string">'https://fake-useragent.herokuapp.com/browsers/&#123;version&#125;'</span>.format(</span><br><span class="line">    version=__version__,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">BROWSERS_STATS_PAGE = <span class="string">'https://www.w3schools.com/browsers/default.asp'</span></span><br><span class="line"></span><br><span class="line">BROWSER_BASE_PAGE = <span class="string">'http://useragentstring.com/pages/useragentstring.php?name=&#123;browser&#125;'</span>  <span class="comment"># noqa</span></span><br></pre></td></tr></table></figure>

<p>其中，这个网站<code>https://www.w3schools.com/browsers/default.asp</code>打不开，导致超时报错</p>
<p>依次查看其它url，发现都可以正常打开，其中<code>CACHE_SERVER</code>是存储了所有UserAgent的json数据，再次观察其中DB这个变量，结合<code>fake_useragent\fake.py</code>中的逻辑，判断这个变量应该是存储json数据的，所以大体逻辑应该是，首次初始化时，会自动爬取<code>CACHE_SERVER</code>中的json数据，然后将其存储到本地，所以我们直接将json存到指定路径下，再次初始化时，应该就不会报错。</p>
<h2 id="三、根本解决方案"><a href="#三、根本解决方案" class="headerlink" title="三、根本解决方案"></a>三、根本解决方案</h2><h3 id="1、查看指定路径"><a href="#1、查看指定路径" class="headerlink" title="1、查看指定路径"></a>1、查看指定路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line">print(tempfile.gettempdir())</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;var&#x2F;folders&#x2F;6_&#x2F;p67xz49j5wd5lzx7s2cz1cdr0000gn&#x2F;T</span><br></pre></td></tr></table></figure>

<h3 id="2、手动下载json文件"><a href="#2、手动下载json文件" class="headerlink" title="2、手动下载json文件"></a>2、手动下载json文件</h3><p>我们需要将<code>CACHE_SERVER</code>的json数据保存为<code>fake_useragent_0.1.11.json</code>,并放到目录<code>/var/folders/6_/p67xz49j5wd5lzx7s2cz1cdr0000gn/T</code>中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fake-useragent.herokuapp.com/browsers/0.1.11</span><br></pre></td></tr></table></figure>

<p>这时我们就会得到一个<code>0.1.11</code>的文件，将文件名改为<code>fake_useragent_0.1.11.json</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv 0.1.11 fake_useragent_0.1.11.json</span><br></pre></td></tr></table></figure>

<p>最后将文件拷贝到临时目录中即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp fake_useragent_0.1.11.json /var/folders/6_/p67xz49j5wd5lzx7s2cz1cdr0000gn/T/</span><br></pre></td></tr></table></figure>

<p>当我们再次实例化 UserAgent 的时候，就会先读取本地的临时文件，这样实例化的时候就不会报错了。</p>
<p><strong>注：如果<code>CACHE_SERVER</code>不是<code>https://fake-useragent.herokuapp.com/browsers/0.1.11</code>，请更新一下库<code>pip install --upgrade fake_useragent</code>。</strong></p>
<h2 id="四、简单的解决方案——在实例化的时候指定一些参数"><a href="#四、简单的解决方案——在实例化的时候指定一些参数" class="headerlink" title="四、简单的解决方案——在实例化的时候指定一些参数"></a>四、简单的解决方案——在实例化的时候指定一些参数</h2><p>这里首先需要更新下库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade fake_useragent</span><br></pre></td></tr></table></figure>

<ul>
<li>如果不希望缓存数据库或不需要可写文件系统：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ua = UserAgent(use_cache_server=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果不想使用宿主缓存服务器，可以禁用服务器缓存：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ua = UserAgent(cache=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>忽略ssl验证</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ua = UserAgent(verify_ssl=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p>参考：<a href="https://blog.csdn.net/yilovexing/article/details/89044980" target="_blank" rel="noopener external nofollow noreferrer">Python3 fake_useragent 模块的使用和报错解决方案</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>问题</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python如何爬取不确定页数的网页</title>
    <url>/archives/f6b24b05.html</url>
    <content><![CDATA[<p>本文详细分析了如何爬取<strong>不知道具体有多少页的网站</strong>，然后用scrapy框架实现了这个过程。</p>
<a id="more"></a>

<h2 id="一、问题分析"><a href="#一、问题分析" class="headerlink" title="一、问题分析"></a>一、问题分析</h2><p>我们通常遇到的网站页数展现形式有这么几种：</p>
<ul>
<li>第一种是直观地显示所有页数，显示在页面上。</li>
<li>第二种是不直观显示网页总页数，需要抓包才可以看到，一般来说会有一个<code>totalPage</code>参数。</li>
<li><strong>第三种是不知道具体有多少页的网页。</strong></li>
</ul>
<p>对于，前两种形式的网页，爬取方法非常简单，使用 For 循环从首页爬到尾页就行了，第三种形式则不适用，因为不知道尾页的页数，所以循环到哪一页结束无法判断。</p>
<h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><p>这里有两种解决方式：</p>
<ul>
<li>第一种方式：使用 For 循环，尾页的页数设置一个较大的参数，足够循环爬完所有页面。</li>
<li>第二种方法：使用 While 循环，可以结合 break 语句，也可以设起始循环判断条件为 True，从头开始循环爬取直到爬完最后一页，然后更改判断条件为 False 跳出循环，结束爬取。</li>
</ul>
<h2 id="三、实际案例——scrapy实现"><a href="#三、实际案例——scrapy实现" class="headerlink" title="三、实际案例——scrapy实现"></a>三、实际案例——scrapy实现</h2><h3 id="1、For循环实现"><a href="#1、For循环实现" class="headerlink" title="1、For循环实现"></a>1、For循环实现</h3><p>Scrapy 中使用 For 循环递归爬取的思路非常简单，即先批量生成所有请求的 URL，包括最后无效的 URL，后续在 parse 方法中添加 if 判断过滤无效请求。</p>
<p><strong>由于 Scrapy 依赖于Twisted框架，采用的是异步请求处理方式，可以边发送请求边解析内容，不会被阻塞，但是这种方法会发送很多无用请求。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">    url_lists = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">500</span>):</span><br><span class="line">        req = scrapy.Request(self.url.format(url_tags = self.tags[<span class="number">0</span>],url_start = <span class="number">20</span>*i,url_genres = self.genres[<span class="number">0</span>]))</span><br><span class="line">        url_lists.append(req)</span><br><span class="line">    <span class="keyword">return</span> url_lists</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="comment"># 判断该页是否有内容，数值定为20是因为无内容时长度是11</span></span><br><span class="line">    <span class="keyword">if</span> len(response.body) &gt;= <span class="number">20</span>:</span><br><span class="line">        movie = IDItem()</span><br><span class="line">        dicts = json.loads(response.body)</span><br><span class="line">        data_list = dicts[<span class="string">'data'</span>]</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">            movie[<span class="string">'ids'</span>] = data[<span class="string">'id'</span>]</span><br><span class="line">            <span class="comment">#...</span></span><br><span class="line">            <span class="keyword">yield</span> movie</span><br></pre></td></tr></table></figure>

<h3 id="2、While循环实现"><a href="#2、While循环实现" class="headerlink" title="2、While循环实现"></a>2、While循环实现</h3><p>While 循环的思路是先从头开始爬取，使用<code>parse()</code>方法进行解析，然后递增页数构造下一页的URL请求，再循环解析，直到爬取完最后一页。这样不会发送无用的请求。但是难以利用scrapy异步的优势。这里构造下一页请求时需要利用<code>parse()</code>方法中的参数，可以使用meta方法来传递参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">    url_lists = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.genres)):</span><br><span class="line">        dict_meta = &#123;<span class="string">'tag_meta'</span>:self.tags[<span class="number">0</span>],<span class="string">'page'</span>:<span class="number">0</span>,<span class="string">'genre_meta'</span>:self.genres[i]&#125;</span><br><span class="line">        req = scrapy.Request(self.url.format(url_tags = self.tags[<span class="number">0</span>],url_start = <span class="number">20</span>*<span class="number">0</span>,url_genres = self.genres[i]),meta = dict_meta)</span><br><span class="line">        url_lists.append(req)</span><br><span class="line">    <span class="keyword">return</span> url_lists</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="comment"># 判断该页是否爬完，数值定为20是因为无内容时长度是11</span></span><br><span class="line">    <span class="keyword">if</span> len(response.body) &gt;= <span class="number">20</span>:</span><br><span class="line">        movie = IDItem()</span><br><span class="line">        dicts = json.loads(response.body)</span><br><span class="line">        data_list = dicts[<span class="string">'data'</span>]</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">            movie[<span class="string">'ids'</span>] = data[<span class="string">'id'</span>]</span><br><span class="line">            <span class="comment">#...</span></span><br><span class="line">            <span class="keyword">yield</span> movie</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># while循环构造url递归爬下一页</span></span><br><span class="line">        tag_meta = response.meta[<span class="string">'tag_meta'</span>]</span><br><span class="line">        genre_meta = response.meta[<span class="string">'genre_meta'</span>]</span><br><span class="line">        page = response.meta[<span class="string">'page'</span>]</span><br><span class="line">        page += <span class="number">1</span></span><br><span class="line">        dict_meta = &#123;<span class="string">'tag_meta'</span>:tag_meta,<span class="string">'page'</span>:page,<span class="string">'genre_meta'</span>:genre_meta&#125;</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(self.url.format(url_tags = tag_meta,url_start = <span class="number">20</span>*page,url_genres = genre_meta),callback=self.parse,meta=dict_meta)</span><br></pre></td></tr></table></figure>


<hr>
<p>参考：<a href="https://www.makcyun.top/web_scraping_withpython16.html" target="_blank" rel="noopener external nofollow noreferrer">Python For 和 While 循环爬取不确定页数的网页</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy框架的使用之Item Pipeline的用法</title>
    <url>/archives/5c8b447d.html</url>
    <content><![CDATA[<p>本文简单介绍一下Scrapy框架中的Item Pipeline的用法。</p>
<a id="more"></a>

<p>Item Pipeline的调用发生在Spider产生Item之后。当Spider解析完Response之后，Item就会传递到Item Pipeline，被定义的Item Pipeline组件会顺次调用，完成一连串的处理过程，比如数据清洗、存储等。</p>
<p>Item Pipeline的主要功能有如下4点。</p>
<ul>
<li>清理HTML数据。</li>
<li>验证爬取数据，检查爬取字段。</li>
<li>查重并丢弃重复内容。</li>
<li>将爬取结果保存到数据库。</li>
</ul>
<h2 id="一、核心方法"><a href="#一、核心方法" class="headerlink" title="一、核心方法"></a>一、核心方法</h2><p>我们可以自定义Item Pipeline，只需要实现指定的方法，其中必须要实现的一个方法是： <code>process_item(item, spider)</code>。</p>
<p>另外还有如下几个比较实用的方法。</p>
<ul>
<li><code>open_spider(spider)</code></li>
<li><code>close_spider(spider)</code></li>
<li><code>from_crawler(cls, crawler)</code></li>
</ul>
<p>下面我们详细介绍这几个方法的用法。</p>
<h3 id="1、process-item-item-spider"><a href="#1、process-item-item-spider" class="headerlink" title="1、process_item(item, spider)"></a>1、<code>process_item(item, spider)</code></h3><p><code>process_item()</code>是必须要实现的方法，被定义的Item Pipeline会默认调用这个方法对Item进行处理。比如，我们可以进行数据处理或者将数据写入到数据库等操作。它必须返回Item类型的值或者抛出一个DropItem异常。</p>
<p><code>process_item()</code>方法的参数有如下两个。</p>
<ul>
<li>item，是Item对象，即被处理的Item。</li>
<li>spider，是Spider对象，即生成该Item的Spider。</li>
</ul>
<p><code>process_item()</code>方法的返回类型归纳如下。</p>
<ul>
<li>如果它返回的是Item对象，那么此Item会被低优先级的Item Pipeline的<code>process_item()</code>方法处理，直到所有的方法被调用完毕。</li>
<li>如果它抛出的是DropItem异常，那么此Item会被丢弃，不再进行处理。</li>
</ul>
<h3 id="2、open-spider-self-spider"><a href="#2、open-spider-self-spider" class="headerlink" title="2、open_spider(self, spider)"></a>2、<code>open_spider(self, spider)</code></h3><p><code>open_spider()</code>方法是在Spider开启的时候被自动调用的。在这里我们可以做一些初始化操作，如开启数据库连接等。其中，参数spider就是被开启的Spider对象。</p>
<h3 id="3、close-spider-spider"><a href="#3、close-spider-spider" class="headerlink" title="3、close_spider(spider)"></a>3、<code>close_spider(spider)</code></h3><p><code>close_spider()</code>方法是在Spider关闭的时候自动调用的。在这里我们可以做一些收尾工作，如关闭数据库连接等。其中，参数spider就是被关闭的Spider对象。</p>
<h3 id="4、from-crawler-cls-crawler"><a href="#4、from-crawler-cls-crawler" class="headerlink" title="4、from_crawler(cls, crawler)"></a>4、<code>from_crawler(cls, crawler)</code></h3><p><code>from_crawler()</code>方法是一个类方法，用<code>@classmethod</code>标识，是一种依赖注入的方式。它的参数是crawler，通过crawler对象，我们可以拿到Scrapy的所有核心组件，如全局配置的每个信息，然后创建一个Pipeline实例。参数cls就是Class，最后返回一个Class实例。</p>
<h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><h3 id="1、MongoDB-Pipeline"><a href="#1、MongoDB-Pipeline" class="headerlink" title="1、MongoDB Pipeline"></a>1、MongoDB Pipeline</h3><p>我们用一个MongoPipeline将信息保存到MongoDB，在<code>pipelines.py</code>里添加如下类的实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></span><br><span class="line">        self.mongo_uri = mongo_uri</span><br><span class="line">        self.mongo_db = mongo_db</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(</span><br><span class="line">            mongo_uri=crawler.settings.get(<span class="string">'MONGO_URI'</span>),</span><br><span class="line">            mongo_db=crawler.settings.get(<span class="string">'MONGO_DB'</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client = pymongo.MongoClient(self.mongo_uri)</span><br><span class="line">        self.db = self.client[self.mongo_db]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.db[item.collection].insert(dict(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client.close()</span><br></pre></td></tr></table></figure>

<p>这里需要用到两个变量，<code>MONGO_URI</code>和<code>MONGO_DB</code>，即存储到MongoDB的链接地址和数据库名称。我们在settings.py里添加这两个变量，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MONGO_URI = <span class="string">'localhost'</span></span><br><span class="line">MONGO_DB = <span class="string">'images360'</span></span><br></pre></td></tr></table></figure>

<p>这样一个保存到MongoDB的Pipeline的就创建好了。这里最主要的方法是<code>process_item()</code>方法，直接调用Collection对象的<code>insert()</code>方法即可完成数据的插入，最后返回Item对象。</p>
<hr>
<p>本资源首发于崔庆才的个人博客静觅： <a href="https://cuiqingcai.com/5052.html" target="_blank" rel="noopener external nofollow noreferrer">Python3网络爬虫开发实战教程 | 静觅</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python requests发送post请求的编码问题</title>
    <url>/archives/f49a6d66.html</url>
    <content><![CDATA[<p>我用requests中的post请求爬取NSFC网站的时候，遇到了<code>JSON parse error: syntax error</code>问题，经过查阅资料和尝试，发现是一个编码问题。下面是问题分析与解决方法。</p>
<a id="more"></a>

<p>在HTTP协议中，post提交的数据必须放在消息主体中，但是协议中并没有规定必须使用什么编码方式，从而导致了提交方式的不同。服务端根据请求头中的<code>Content-Type</code>字段来获知请求中的消息主体是用何种方式进行编码，再对消息主体进行解析。具体的编码方式包括如下： </p>
<ul>
<li><code>application/x-www-form-urlencoded</code>:以form表单形式提交数据，最常见也是大家最熟悉的 </li>
<li><code>application/json</code>:以json串提交数据。 </li>
</ul>
<p>下面使用requests来发送这两种编码的POST请求。</p>
<h2 id="一、提交Form表单"><a href="#一、提交Form表单" class="headerlink" title="一、提交Form表单"></a>一、提交Form表单</h2><p>requests提交Form表单,一般存在于网站的登录，用来提交用户名和密码。以<code>http://httpbin.org/post</code>为例，在requests中，以form表单形式发送post请求，只需要将请求的参数构造成一个字典，然后传给<code>requests.post()</code>的data参数即可。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">d = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line">r = requests.post(url, data=d)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;key1&quot;: &quot;value1&quot;, </span><br><span class="line">    &quot;key2&quot;: &quot;value2&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Content-Length&quot;: &quot;23&quot;, </span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.20.0&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;origin&quot;: &quot;121.249.15.110, 121.249.15.110&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;https:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里返回的<code>&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;</code>,证明这是提交Form的方式。</p>
<h2 id="二、提交json串"><a href="#二、提交json串" class="headerlink" title="二、提交json串"></a>二、提交json串</h2><p>对于提交json串，主要是用于发送ajax请求中，动态加载数据。以NSFC网站为例，加载项目的方式为ajax，项目的内容在响应中。 </p>
<p>下面是典型的错误用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">"url"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">"application/json"</span>,</span><br><span class="line">           <span class="string">'Host'</span>: <span class="string">"output.nsfc.gov.cn"</span>,</span><br><span class="line">           <span class="string">'Origin'</span>: <span class="string">"http://output.nsfc.gov.cn"</span>,</span><br><span class="line">           <span class="string">'Referer'</span>: <span class="string">"http://output.nsfc.gov.cn/fundingQuery"</span>,</span><br><span class="line">           <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>,&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">'adminID'</span>: <span class="string">""</span>,</span><br><span class="line">           <span class="string">'beginYear'</span>: <span class="string">""</span>,</span><br><span class="line">           ......&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url = url,data = payload,headers = headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#123;\n\t&quot;timestamp&quot;:1557026952651,\n\t&quot;status&quot;:400,\n\t&quot;error&quot;:&quot;Bad Request&quot;,\n\t&quot;exception&quot;:&quot;org.springframework.http.converter.HttpMessageNotReadableException&quot;,\n\t&quot;message&quot;:&quot;JSON parse error: syntax error, expect &#123;, actual error, pos 0, fastjson-version 1.2.38; nested exception is com.alibaba.fastjson.JSONException: syntax error, expect &#123;, actual error, pos 0, fastjson-version 1.2.38&quot;,\n\t&quot;path&quot;:&quot;&#x2F;baseQuery&#x2F;data&#x2F;supportQueryResultsData&quot;\n&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>请求头已经跟抓包得到的保持一致了，加上了<code>&#39;Content-Type&#39;: &quot;application/json&quot;</code>参数，但是无法正确得到响应。<strong>这是因为请求实体的格式错了，服务端无法解码。</strong></p>
<h3 id="正确方法1——把data进行json编码"><a href="#正确方法1——把data进行json编码" class="headerlink" title="正确方法1——把data进行json编码"></a>正确方法1——把data进行json编码</h3><p>正确的写法是把data进行json编码，再发送：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.post(url = url,data = json.dumps(payload),headers = headers)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#123;\n\t&quot;code&quot;:200,\n\t&quot;data&quot;:&#123;\n\t\t&quot;iTotalRecords&quot;:76,\n\t\t&quot;resultsData&quot;:[\n\t\t\t[\n\t\t\t\t&quot;59607&quot;,\n\t\t\t\t&quot;调节性树突状细胞负向调控烧伤所致过度炎症反应的信号转导机制研究&quot;,\n\t\t\t\t&quot;81000847&quot;,\n\t\t\t\t&quot;面上项目&quot;,\n\t\t\t\t&quot;中国人民解放军总医院&quot;,\n\t\t\t\t&quot;王强&quot;,\n\t\t\t\t&quot;&quot;,\n\t\t\t\t&quot;2010&quot;,\n\t\t\t\t&quot;调节性树突状细胞；过度炎症反应；信号转导及转录活化因子-3；负向调控免疫；过继治疗&quot;,\n\t\t\t\t&quot;true&quot;,\n\t\t\t\t&quot;5;0;0;0;0&quot;,\n\t\t\t\t&quot;100518&quot;,\n\t\t\t\t&quot;&quot;,\n\t\t\t\t&quot;218&quot;\n\t\t\t]\n\t\t]\n\t&#125;,\n\t&quot;message&quot;:&quot;Success&quot;\n&#125;&#39;</span><br></pre></td></tr></table></figure>

<h3 id="正确方法2——使用json参数发送"><a href="#正确方法2——使用json参数发送" class="headerlink" title="正确方法2——使用json参数发送"></a>正确方法2——使用json参数发送</h3><p>除了将data主动编码为json发送之外，requests还提供了一个json参数，自动使用json方式发送，而且在请求头中也不用显示声明<code>’Content-Type’:’application/json’</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">"url"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'Host'</span>: <span class="string">"output.nsfc.gov.cn"</span>,</span><br><span class="line">           <span class="string">'Origin'</span>: <span class="string">"http://output.nsfc.gov.cn"</span>,</span><br><span class="line">           <span class="string">'Referer'</span>: <span class="string">"http://output.nsfc.gov.cn/fundingQuery"</span>,</span><br><span class="line">           <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>,&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">'adminID'</span>: <span class="string">""</span>,</span><br><span class="line">           <span class="string">'beginYear'</span>: <span class="string">""</span>,</span><br><span class="line">           ......&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url = url,json = payload,headers = headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<p>同样可以正确得到响应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#123;\n\t&quot;code&quot;:200,\n\t&quot;data&quot;:&#123;\n\t\t&quot;iTotalRecords&quot;:76,\n\t\t&quot;resultsData&quot;:[\n\t\t\t[\n\t\t\t\t&quot;59607&quot;,\n\t\t\t\t&quot;调节性树突状细胞负向调控烧伤所致过度炎症反应的信号转导机制研究&quot;,\n\t\t\t\t&quot;81000847&quot;,\n\t\t\t\t&quot;面上项目&quot;,\n\t\t\t\t&quot;中国人民解放军总医院&quot;,\n\t\t\t\t&quot;王强&quot;,\n\t\t\t\t&quot;&quot;,\n\t\t\t\t&quot;2010&quot;,\n\t\t\t\t&quot;调节性树突状细胞；过度炎症反应；信号转导及转录活化因子-3；负向调控免疫；过继治疗&quot;,\n\t\t\t\t&quot;true&quot;,\n\t\t\t\t&quot;5;0;0;0;0&quot;,\n\t\t\t\t&quot;100518&quot;,\n\t\t\t\t&quot;&quot;,\n\t\t\t\t&quot;218&quot;\n\t\t\t]\n\t\t]\n\t&#125;,\n\t&quot;message&quot;:&quot;Success&quot;\n&#125;&#39;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>问题</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>requests</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的Fast Forward和no fast foward合并模式对比</title>
    <url>/archives/37b26b3a.html</url>
    <content><![CDATA[<p>通常，合并分支时，如果没有分歧解决，就会直接移动文件指针，这就是<code>Fast forward</code>模式。</p>
<blockquote>
<p>举例来说，开发一直在master分支进行，但忽然有一个新的想法，于是新建了一个dev的分支，并在其上进行一系列提交，完成时，回到master分支，此时，master分支在创建dev分支之后并未产生任何新的commit。此时的合并就叫<code>fast forward</code>。</p>
</blockquote>
<p>但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要<strong>强制禁用<code>Fast forward</code>模式</strong>，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<a id="more"></a>

<h2 id="一、强制禁用Fast-forward模式的具体方法"><a href="#一、强制禁用Fast-forward模式的具体方法" class="headerlink" title="一、强制禁用Fast forward模式的具体方法"></a>一、强制禁用<code>Fast forward</code>模式的具体方法</h2><p>下面我们看下如何强制禁用<code>Fast forward</code>模式（<code>--no-ff</code>方式）的<code>git merge</code>：</p>
<p>首先修改<code>readme.md</code>文件，并提交一个新的commit：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -am <span class="string">"update readme"</span></span><br><span class="line">[dev 237907d] update readme</span><br><span class="line"> 1 file changed, 3 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>现在，我们切换回master：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br></pre></td></tr></table></figure>

<p>合并dev分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span><br><span class="line">Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line"> README.md                                          |   4 +-</span><br><span class="line"> ...5\217\344\275\234\346\226\207\346\241\243.docx<span class="string">" | Bin 278553 -&gt; 279350 bytes</span></span><br><span class="line"><span class="string"> ...234\200\345\212\240\345\210\206\357\274\237.md"</span> |  62 +++++++++++++++++++++</span><br><span class="line"> 3 files changed, 65 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 <span class="string">"\346\225\260\346\215\256\345\210\206\346\236\220\351\235\242\350\257\225-\344\270\273\350\247\202\351\242\230/\345\275\223\351\235\242\350\257\225\345\256\230\350\257\264\357\274\214\342\200\234\344\275\240\346\234\211\344\273\200\344\271\210\350\246\201\351\227\256\346\210\221\357\274\237\342\200\235\346\200\216\346\240\267\345\233\236\347\255\224\346\234\200\345\212\240\345\210\206\357\274\237.md"</span></span><br></pre></td></tr></table></figure>

<p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p>
<p>合并后，我们用<code>git log</code>看看分支历史：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   1d78e1a merge with no-ff</span><br><span class="line">|\</span><br><span class="line">| * 237907d update readme</span><br><span class="line">| * 75a4fbc update 主观题</span><br><span class="line">| * 9669636 update 协作文档</span><br><span class="line">|/</span><br><span class="line">* b1aa3ed update 协作文档</span><br><span class="line">* 5c7018e update readme</span><br><span class="line">* 85c15e2 update readme</span><br><span class="line">* a803ecf update readme</span><br><span class="line">* bb3adfb update 协作文档</span><br><span class="line">*   acf2104 Merge pull request <span class="comment">#1 from dta0502/add-license-1</span></span><br><span class="line">|\</span><br><span class="line">| * 4330188 Create LICENSE</span><br><span class="line">|/</span><br><span class="line">* f05e852 Initial commit</span><br></pre></td></tr></table></figure>

<h2 id="二、Fast-Forward和no-fast-foward合并模式对比图"><a href="#二、Fast-Forward和no-fast-foward合并模式对比图" class="headerlink" title="二、Fast Forward和no fast foward合并模式对比图"></a>二、Fast Forward和no fast foward合并模式对比图</h2><img src="/archives/37b26b3a/1.png" class="" title="图1">

]]></content>
      <categories>
        <category>工具使用</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>研究生系统模拟登录</title>
    <url>/archives/386e167.html</url>
    <content><![CDATA[<p>这是一个简单的Python爬虫模拟登录实战小脚本，主要在于<code>__VIEWSTATE</code>这个变量的处理。</p>
<a id="more"></a>

<h2 id="一、模拟登录"><a href="#一、模拟登录" class="headerlink" title="一、模拟登录"></a>一、模拟登录</h2><h3 id="1、导入包"><a href="#1、导入包" class="headerlink" title="1、导入包"></a>1、导入包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> base64</span><br></pre></td></tr></table></figure>

<h3 id="2、构造请求头、表单数据。"><a href="#2、构造请求头、表单数据。" class="headerlink" title="2、构造请求头、表单数据。"></a>2、构造请求头、表单数据。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">"http://121.248.63.139/nstudent/login.aspx"</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">"121.248.63.139"</span>,</span><br><span class="line">    <span class="string">'Origin'</span>: <span class="string">"http://121.248.63.139"</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">"http://121.248.63.139/nstudent/login.aspx"</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个session对象 </span></span><br><span class="line">s = requests.Session()</span><br></pre></td></tr></table></figure>

<p>下面是关键，由于<code>ASP.NET</code>网站每次都会发送一个<code>__VIEWSTATE</code>到隐藏域，后面提交表单时会提交上去，所以这里我们需要先获取到这个值，具体方法是先请求一次该url，从response中提取出<code>__VIEWSTATE</code>，然后再在POST的时候提交上去。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = s.get(url,headers = headers)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = response.text</span><br><span class="line">sel = etree.HTML(content)</span><br><span class="line">viewstate = sel.xpath(<span class="string">'//input[@name="__VIEWSTATE"]/@value'</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>


<p>下面简单看下<code>__VIEWSTATE</code>经过base64解码后的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">viewstate_decode = base64.b64decode(viewstate)</span><br></pre></td></tr></table></figure>

<p>下面是构造POST请求提交的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'__VIEWSTATE'</span>: viewstate,</span><br><span class="line">    <span class="string">'txt_user'</span>: <span class="string">"用户名"</span>,</span><br><span class="line">    <span class="string">'txt_password'</span>: <span class="string">"密码"</span>,</span><br><span class="line">    <span class="string">'ok.x'</span>:<span class="string">'44'</span>,</span><br><span class="line">    <span class="string">'ok.y'</span>:<span class="string">'6'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、建立会话。"><a href="#3、建立会话。" class="headerlink" title="3、建立会话。"></a>3、建立会话。</h3><p>requests库的session对象能够帮我们跨请求保持某些参数，这样我们才能进行后面的查成绩等等操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用session对象发出get请求</span></span><br><span class="line">response = s.post(url,headers = headers,data = data)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response.apparent_encoding</span><br></pre></td></tr></table></figure>



<blockquote><p>‘utf-8’</p>
</blockquote>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response.encoding = response.apparent_encoding</span><br></pre></td></tr></table></figure>


<p>然后输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response.text</span><br></pre></td></tr></table></figure>

<p>看到这个下面这个界面，说明模拟登录成功！</p>
<blockquote><p>欢迎使用xx研究生管理平台</p>
</blockquote>

<h2 id="二、成绩查询"><a href="#二、成绩查询" class="headerlink" title="二、成绩查询"></a>二、成绩查询</h2><h3 id="1、成绩页面获取"><a href="#1、成绩页面获取" class="headerlink" title="1、成绩页面获取"></a>1、成绩页面获取</h3><p>采用session变量去访问成绩页面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_grade = <span class="string">"http://121.248.63.139/nstudent/grgl/xskccjcx.aspx"</span></span><br><span class="line">response_grade = s.get(url_grade,headers = headers)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = response_grade.text</span><br></pre></td></tr></table></figure>

<h3 id="2、页面解析问题处理"><a href="#2、页面解析问题处理" class="headerlink" title="2、页面解析问题处理"></a>2、页面解析问题处理</h3><p>这里出了个问题，下面是问题描述以及解决方案。</p>
<h4 id="1-、问题描述"><a href="#1-、问题描述" class="headerlink" title="1)、问题描述"></a>1)、问题描述</h4><p>我在用XPath匹配元素的时候，发现老是出错，后来发现是<code>&lt;tbody&gt;</code>标签上有文章。</p>
<h4 id="2-、问题分析"><a href="#2-、问题分析" class="headerlink" title="2)、问题分析"></a>2)、问题分析</h4><p>我使用Chrome的元素审查对网页进行分析来得到XPath路径，但是Chrome会对网页源码进行加工，在<code>&lt;table&gt;</code>标签中，如果源码中没有写<code>&lt;tbody&gt;</code>标签，在元素审查和查看网页源代码中还是会将<code>&lt;tbody&gt;</code>强行添加上。</p>
<p>当然，若源代码中没有<code>&lt;tbody&gt;</code>，而我们信任Chrome而把它添进XPath的话，是不会匹配出想要的结果的。</p>
<p>我们可以通过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(response)</span><br></pre></td></tr></table></figure>
<p>对源代码进行检查，确定有没有<code>&lt;tbody&gt;</code>标签后，再得出XPath。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">selector = etree.HTML(content)</span><br><span class="line">table = selector.xpath(<span class="string">'//table[@class="box" and @bordercolor="#5c6bac"]/tr'</span>) <span class="comment">#这里很奇怪，明明中间还有一个tbody，但是加了tbody定位不到</span></span><br></pre></td></tr></table></figure>

<h3 id="3、学位课程成绩查询"><a href="#3、学位课程成绩查询" class="headerlink" title="3、学位课程成绩查询"></a>3、学位课程成绩查询</h3><p>下面查询学位课程成绩：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">degreeCourses = table[<span class="number">2</span>].xpath(<span class="string">'td[1]/table/tr'</span>)</span><br><span class="line">degreeList = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> degreeCourses[<span class="number">1</span>:]:</span><br><span class="line">    course = i.xpath(<span class="string">'td[1]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    credit = i.xpath(<span class="string">'td[2]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    term = i.xpath(<span class="string">'td[3]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    score = i.xpath(<span class="string">'td[4]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    score_standardized = i.xpath(<span class="string">'td[5]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    degreeList.append(&#123;<span class="string">'课程'</span>:course,<span class="string">'课程学分'</span>:credit,<span class="string">'选修学期'</span>:term,<span class="string">'成绩'</span>:score,<span class="string">'规格化成绩'</span>:score_standardized&#125;)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_degree = pd.DataFrame(degreeList)</span><br><span class="line">df_degree</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th>成绩</th>
<th>规格化成绩</th>
<th>课程</th>
<th>课程学分</th>
<th>选修学期</th>
</tr>
</thead>
<tbody><tr>
<td>91</td>
<td>83</td>
<td>xxxx</td>
<td>3.0</td>
<td>1</td>
</tr>
<tr>
<td>82</td>
<td>81</td>
<td>xxxx</td>
<td>4.0</td>
<td>2</td>
</tr>
<tr>
<td>85</td>
<td>81</td>
<td>xxxx</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>85</td>
<td>81</td>
<td>xxxx</td>
<td>2.0</td>
<td>1</td>
</tr>
<tr>
<td>90</td>
<td>78</td>
<td>xxxx</td>
<td>3.0</td>
<td>2</td>
</tr>
<tr>
<td>91</td>
<td>87</td>
<td>xxxx</td>
<td>3.0</td>
<td>1</td>
</tr>
<tr>
<td>77</td>
<td>89</td>
<td>xxxx</td>
<td>3.0</td>
<td>1</td>
</tr>
</tbody></table>
<h3 id="4、非学位课程成绩查询"><a href="#4、非学位课程成绩查询" class="headerlink" title="4、非学位课程成绩查询"></a>4、非学位课程成绩查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optionalCourses = table[<span class="number">2</span>].xpath(<span class="string">'td[2]/table/tr'</span>)</span><br><span class="line">optionalList = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> optionalCourses[<span class="number">1</span>:]:</span><br><span class="line">    course = i.xpath(<span class="string">'td[1]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    credit = i.xpath(<span class="string">'td[2]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    term = i.xpath(<span class="string">'td[3]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    score = i.xpath(<span class="string">'td[4]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    score_standardized = i.xpath(<span class="string">'td[5]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    optionalList.append(&#123;<span class="string">'课程'</span>:course,<span class="string">'课程学分'</span>:credit,<span class="string">'选修学期'</span>:term,<span class="string">'成绩'</span>:score,<span class="string">'规格化成绩'</span>:score_standardized&#125;)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_optional = pd.DataFrame(optionalList)</span><br><span class="line">df_optional</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th>成绩</th>
<th>规格化成绩</th>
<th>课程</th>
<th>课程学分</th>
<th>选修学期</th>
</tr>
</thead>
<tbody><tr>
<td>82</td>
<td>81</td>
<td>xxxx</td>
<td>1.0</td>
<td>1</td>
</tr>
<tr>
<td>95</td>
<td>84</td>
<td>xxxx</td>
<td>2.0</td>
<td>2</td>
</tr>
<tr>
<td>87</td>
<td>81</td>
<td>xxxx</td>
<td>2.0</td>
<td>2</td>
</tr>
<tr>
<td>95</td>
<td>84</td>
<td>xxxx</td>
<td>2.0</td>
<td>2</td>
</tr>
<tr>
<td>93</td>
<td>79</td>
<td>xxxx</td>
<td>3.0</td>
<td>2</td>
</tr>
</tbody></table>
<h3 id="5、规格化平均成绩计算"><a href="#5、规格化平均成绩计算" class="headerlink" title="5、规格化平均成绩计算"></a>5、规格化平均成绩计算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sums_score = <span class="number">0</span></span><br><span class="line">sums_credit = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df_degree[<span class="string">'规格化成绩'</span>])):</span><br><span class="line">    sums_score += int(df_degree[<span class="string">'规格化成绩'</span>][i]) * float(df_degree[<span class="string">'课程学分'</span>][i])</span><br><span class="line">    sums_credit += float(df_degree[<span class="string">'课程学分'</span>][i])</span><br><span class="line">average_degree = sums_score / sums_credit</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">average_degree</span><br></pre></td></tr></table></figure>



<blockquote><p>83.16666666666667</p>
</blockquote>

]]></content>
      <categories>
        <category>爬虫</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>模拟登录</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu修改SSH默认端口号</title>
    <url>/archives/ef98249d.html</url>
    <content><![CDATA[<p>SSH端口爆破是常见的网络攻击之一。SSH的默认连接端口为22端口，<strong>如果不修改容易被黑客扫描，暴力破解，存在一定安全隐患，如果这个时候你的密码很简单的话，被爆破开的几率会大大增加</strong>。</p>
<a id="more"></a>

<h2 id="一、修改端口"><a href="#一、修改端口" class="headerlink" title="一、修改端口"></a>一、修改端口</h2><p>修改方法如下：</p>
<p>在<code>/etc/ssh/sshd_config</code>中找到Port 22，将其修改为2022。</p>
<p>如果用户想让22和2022端口同时开放，只需在<code>/etc/ssh/sshd_config</code>增加一行内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Port 22</span><br><span class="line">Port 2022</span><br></pre></td></tr></table></figure>

<p>这里22端口暂时还没删除又重新开一个端口是因为要给自己留后路，万一等下新端口不能连接，默认端口又关闭了就麻烦了.</p>
<h2 id="二、重启-SSH-服务"><a href="#二、重启-SSH-服务" class="headerlink" title="二、重启 SSH 服务"></a>二、重启 SSH 服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure>

<p>注意：如果远程登陆SSH的时候提示：<code>no route to host</code>，应该是防火墙没做好对应端口的配置，设置下防火墙就ok了。</p>
<p>参考：<a href="https://mr96.me/1149.html" target="_blank" rel="noopener external nofollow noreferrer">修改 VPS 服务器 SSH 默认连接端口</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux screen使用技巧</title>
    <url>/archives/97c310a3.html</url>
    <content><![CDATA[<p>我们知道，当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程。因此，我们的解决办法就有两种途径：要么让进程忽略 HUP 信号，要么让进程运行在新的会话里从而成为不属于此终端的子进程。</p>
<p>此时最方便的方法就是 screen 了。简单的说，screen 提供了 <code>ANSI/VT100</code> 的终端模拟器，使它能够在一个真实终端下运行多个全屏的伪终端。</p>
<a id="more"></a>

<h2 id="一、screen安装"><a href="#一、screen安装" class="headerlink" title="一、screen安装"></a>一、screen安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install screen</span><br></pre></td></tr></table></figure>

<h2 id="二、常用命令介绍"><a href="#二、常用命令介绍" class="headerlink" title="二、常用命令介绍"></a>二、常用命令介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -S name                   <span class="comment"># 启动一个名字为name的screen</span></span><br><span class="line">screen -S session_name -X quit   <span class="comment"># 使用screen名字来杀掉对应的screen</span></span><br><span class="line">screen -ls                       <span class="comment"># 列出所有的screen</span></span><br><span class="line">screen -r name/id                <span class="comment"># 回到某个screen</span></span><br><span class="line">ctrl + a + d                     <span class="comment"># 回到前一个screen，在当前screen运行的程序不会停止</span></span><br><span class="line">ctrl + Z                         <span class="comment"># 停止</span></span><br></pre></td></tr></table></figure>

<h2 id="三、Screen记录屏幕日志"><a href="#三、Screen记录屏幕日志" class="headerlink" title="三、Screen记录屏幕日志"></a>三、Screen记录屏幕日志</h2><p>screen是Linux窗口管理器，用户可以建立多个screen会话，每个screen会话又可以建立多个window窗口，每一个窗口就像一个可操作的真实的ssh终端一样。</p>
<p>下面介绍如何记录screen屏幕日志。</p>
<h3 id="1、第一种方法"><a href="#1、第一种方法" class="headerlink" title="1、第一种方法"></a>1、第一种方法</h3><p>启动时添加选项<code>-L（Turn on output logging.）</code>会在当前目录下生成<code>screenlog.0</code>文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -L -dmS <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>screen -L -dmS test</code>的意思是启动一个开始就处于断开模式的会话，会话的名称是<code>test</code>。</li>
<li><code>screen -r test</code>连接该会话，在会话中的所有屏幕输出都会记录到<code>screenlog.0</code>文件。</li>
</ul>
<h3 id="2、第二种方法"><a href="#2、第二种方法" class="headerlink" title="2、第二种方法"></a>2、第二种方法</h3><p>不加选项<code>-L</code>，启动后，在screen session下按<code>ctrl+a H</code>，同样会在当前目录下生成<code>screenlog.0</code>文件。</p>
<ul>
<li>第一次按下<code>ctrl+a H</code>，屏幕左下角会提示<code>Creating logfile &quot;screenlog.0&quot;.</code>，开始记录日志。</li>
<li>再次按下<code>ctrl+a H</code>，屏幕左下角会提示<code>Logfile &quot;screenlog.0&quot; closed.</code>，停止记录日志。</li>
</ul>
<h3 id="3、补充"><a href="#3、补充" class="headerlink" title="3、补充"></a>3、补充</h3><p><strong>上面两个方法有个缺点：当创建多个screen会话的时候，每个会话都会记录日志到<code>screenlog.0</code>文件。<code>screenlog.0</code>中的内容就比较混乱了。</strong></p>
<p>解决方法如下，让每个screen会话窗口有单独的日志文件。</p>
<p>在screen配置文件<code>/etc/screenrc</code>最后添加下面一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logfile /tmp/screenlog_%t.log</span><br></pre></td></tr></table></figure>

<p><code>%t</code>是指window窗口的名称，对应screen的<code>-t</code>参数。所以我们启动screen的时候要指定窗口的名称，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -L -t window1 -dmS <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>screen -L -t window1 -dmS test</code>的意思是启动test会话，test会话的窗口名称为window1。屏幕日志记录在<code>/tmp/screenlog_window1.log</code>。如果启动的时候不加-L参数，在screen session下按<code>ctrl+a H</code>，日志也会记录在<code>/tmp/screenlog_window1.log</code>。</li>
</ul>
<p><strong>注意，如果写成：<code>logfile ./screenlog_%t.log</code> 则是把日志文件记录到当前目录下。</strong></p>
<h3 id="4、一个例子"><a href="#4、一个例子" class="headerlink" title="4、一个例子"></a>4、一个例子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -L -t name -S name ./name</span><br></pre></td></tr></table></figure>

<ul>
<li>第一个name是记录日志的名字</li>
<li>第二个name是<code>screen -ls</code> 列表展示出来的名字</li>
<li>第三个name是需要运行的程序</li>
</ul>
<h2 id="四、解决screen状态为Attached连不上的问题"><a href="#四、解决screen状态为Attached连不上的问题" class="headerlink" title="四、解决screen状态为Attached连不上的问题"></a>四、解决screen状态为Attached连不上的问题</h2><p>当你挂起screen，下次想连上screen的时候，有时候会出现screen session的状态为Attached而怎么连也连不上的情况。下面给出解决方法。</p>
<p>列出状态为Attached的session id。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure>

<p>然后输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -D  -r ＜session-id&gt;</span><br></pre></td></tr></table></figure>

<p><code>-D -r</code>代表：先踢掉前一用户，再登陆。</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>screen</tag>
      </tags>
  </entry>
  <entry>
    <title>PuTTY小技巧</title>
    <url>/archives/a1746d6a.html</url>
    <content><![CDATA[<p>PuTTY是一款远程登录工具，用它可以非常方便的登录到Linux服务器上进行各种操作(命令行方式)。PuTTY完全免费，而且无需安装(双击即可运行)，支持多种连接类型(Telnet、SSH、Rlogin …)，使用简单，实在是一款十分值得推荐的工具。下面是几条使用小技巧。</p>
<a id="more"></a>

<h2 id="一、增加窗口保存的输出"><a href="#一、增加窗口保存的输出" class="headerlink" title="一、增加窗口保存的输出"></a>一、增加窗口保存的输出</h2><p>执行了一个命令，输出了好多东西，但是默认的配置下，PuTTY只保存了最后200行的内容，满足不了我们的需求。</p>
<p>我们可以在标题栏上点右键选择 <code>Change settings…</code>，在配置窗口的左边选择<code>Window</code>，修改右边的 <code>Lines of scrollback</code>，改大点，比如 <code>20000</code>、<code>80000</code>。</p>
<h2 id="二、保持连接，不要自动断开"><a href="#二、保持连接，不要自动断开" class="headerlink" title="二、保持连接，不要自动断开"></a>二、保持连接，不要自动断开</h2><p>在 <code>Connection</code> 里面有个 <code>Seconds between keepaliaves</code>，这里就是每间隔指定的秒数，就给服务器发送一个空的数据包，来保持连接。以免登录的主机那边在长时间没接到数据后，会自动断开 SSH 的连接。 </p>
<p>默认输入 0 是禁用保持连接，在这里我习惯的设置了 10。 </p>
<h2 id="三、自动登录用户"><a href="#三、自动登录用户" class="headerlink" title="三、自动登录用户"></a>三、自动登录用户</h2><p>在 <code>Connection-〉Data</code> 里面有个 <code>Auto-login username</code>，可以指定默认的登录用户。如果每次登录主机都是用同一个用户，不妨在这里设置一下。SSH、Telnet、Rlogin 这三种协议都支持，但不是所有的 Telnet 服务器支持自动登录用户。</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>putty</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu apt-get update和apt-get upgrade的区别</title>
    <url>/archives/9018624d.html</url>
    <content><![CDATA[<p>在windows下安装软件，我们只需要有exe文件，然后双击，下一步直接OK就可以了。但在Linux下，不是这样的。每个Linux的发行版，比如Ubuntu，都会维护一个自己的软件仓库，我们常用的几乎所有软件都在这里面。这里面的软件绝对安全，而且绝对能正常安装。</p>
<p>那我们要怎么安装呢？</p>
<p>在Ubuntu下，我们维护一个源列表，源列表里面都是一些网址信息，这每一条网址就是一个源，这个地址指向的数据标识着这台源服务器上有哪些软件可以安装使用。</p>
<a id="more"></a>

<h2 id="一、编辑源命令"><a href="#一、编辑源命令" class="headerlink" title="一、编辑源命令"></a>一、编辑源命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>在这个文件里加入或者注释（加#）掉一些源后，保存。这时候，我们的源列表里指向的软件就会增加或减少一部分。</p>
<h2 id="二、更新源列表每个网址"><a href="#二、更新源列表每个网址" class="headerlink" title="二、更新源列表每个网址"></a>二、更新源列表每个网址</h2><p>接一下要做的就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>这个命令，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑。我们在新立得软件包管理器里看到的软件列表，都是通过update命令更新的。</p>
<h2 id="三、更新软件"><a href="#三、更新软件" class="headerlink" title="三、更新软件"></a>三、更新软件</h2><p>update后，可能需要upgrade一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>这个命令，会把本地已安装的软件，与刚下载的软件列表里对应软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。如果你的软件都是最新版本，会提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 0 个软件包未被升级。</span><br></pre></td></tr></table></figure>

<p><strong>总而言之，update是更新软件列表，upgrade是更新软件。</strong></p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装Python3.6</title>
    <url>/archives/3868725a.html</url>
    <content><![CDATA[<p><strong>Ubuntu16.04下默认系统自带<code>Python2</code>和<code>Python3.5</code>的版本，这个版本被系统很多程序所依赖，所以不建议删除。</strong></p>
<p>当我想要使用aiohttp进行异步爬取的时候，发现Ubuntu自带的Python版本并不支持，因此，我需要手动安装Python3.6，Ubuntu可以很方便的让多个Python版本同时存在，只要在运行的时候指定Python的版本号就可以了。</p>
<p>下面是<strong>编译安装</strong>和<strong>apt-get安装</strong>两种安装方法的记录。</p>
<a id="more"></a>

<h2 id="一、编译安装"><a href="#一、编译安装" class="headerlink" title="一、编译安装"></a>一、编译安装</h2><h3 id="1、下载tar包"><a href="#1、下载tar包" class="headerlink" title="1、下载tar包"></a>1、下载tar包</h3><p>首先去Python官网下载Python3的源码包，网址：<a href="https://www.python.org/downloads/release/python-365/" target="_blank" rel="noopener external nofollow noreferrer">https://www.python.org/downloads/release/python-365/</a></p>
<p>进去之后点击导航栏的Downloads，也可以鼠标放到Downloads上弹出菜单选择Source code，就是源码包的意思，这里选择最新版本3.6.5，当然下面也有很多其他历史版本，点进去之后页面下方可以看到下载链接。</p>
<p>选择<code>Download Gzipped source tarball</code>，下载下来后就是<code>Python-3.6.5.tgz</code>。</p>
<h3 id="2、解压tar包"><a href="#2、解压tar包" class="headerlink" title="2、解压tar包"></a>2、解压tar包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xfz Python-3.6.5.tgz</span><br></pre></td></tr></table></figure>

<p>这里使用<code>xfz</code>命令，而不建议使用<code>-xvzf</code>命令，因为其释放的文件夹需要root权限才可以更改或者删除。</p>
<h3 id="3、进入释放的文件夹"><a href="#3、进入释放的文件夹" class="headerlink" title="3、进入释放的文件夹"></a>3、进入释放的文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.6.5/</span><br></pre></td></tr></table></figure>

<h3 id="4、添加配置"><a href="#4、添加配置" class="headerlink" title="4、添加配置"></a>4、添加配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3.6</span><br></pre></td></tr></table></figure>

<p>要配置的是安装Python需要的文件夹。配置完成后，终端会显示下面一段话，可以选择无视它，不影响后续操作。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If you want a release build with all optimizations active (LTO, PGO, etc), </span><br><span class="line">please run .&#x2F;configure –enable-optimizations</span><br></pre></td></tr></table></figure>

<h3 id="5、编译源码"><a href="#5、编译源码" class="headerlink" title="5、编译源码"></a>5、编译源码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure>

<h3 id="6、执行安装"><a href="#6、执行安装" class="headerlink" title="6、执行安装"></a>6、执行安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>安装过程持续几分钟，安装成功后，安装的Python就在<code>/usr/bin/python3.6</code>文件夹之中。</p>
<h3 id="7、修改默认Python版本"><a href="#7、修改默认Python版本" class="headerlink" title="7、修改默认Python版本"></a>7、修改默认Python版本</h3><p>Ubuntu16.04版本集成了Python2.7及3.5版本，系统中原来的python在<code>/usr/bin/python</code>，通过<code>ls -l</code>可以看到，python是一个软链接，链接到本目录下的<code>python2.7</code>。</p>
<p>我们这里不改变原来的软连接，直接新建一个python3.6的软链接。</p>
<p>建立指向Python3.6的链接： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python3.6/bin/python3.6 /usr/bin/python3.6 <span class="comment">##前面换成你的安装路径</span></span><br></pre></td></tr></table></figure>

<p>查询Python版本 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3.6 –version</span><br></pre></td></tr></table></figure>

<p>如果显示是<code>python3.6.5</code>则说明安装成功！</p>
<h3 id="8、make过程出错-Objects-unicodeobject-o-Error"><a href="#8、make过程出错-Objects-unicodeobject-o-Error" class="headerlink" title="8、make过程出错[Objects_unicodeobject.o] Error"></a>8、make过程出错<code>[Objects_unicodeobject.o] Error</code></h3><h4 id="1-、问题描述"><a href="#1-、问题描述" class="headerlink" title="1)、问题描述"></a>1)、问题描述</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Modules/python.o ./Modules/python.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/acceler.o Parser/acceler.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/grammar1.o Parser/grammar1.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/listnode.o Parser/listnode.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/node.o Parser/node.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/parser.o Parser/parser.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/bitset.o Parser/bitset.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/metagrammar.o Parser/metagrammar.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/firstsets.o Parser/firstsets.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/grammar.o Parser/grammar.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/pgen.o Parser/pgen.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/myreadline.o Parser/myreadline.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/parsetok.o Parser/parsetok.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Parser/tokenizer.o Parser/tokenizer.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/abstract.o Objects/abstract.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/accu.o Objects/accu.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/boolobject.o Objects/boolobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/bytes_methods.o Objects/bytes_methods.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/bytearrayobject.o Objects/bytearrayobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/bytesobject.o Objects/bytesobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/cellobject.o Objects/cellobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/classobject.o Objects/classobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/codeobject.o Objects/codeobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/complexobject.o Objects/complexobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/descrobject.o Objects/descrobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/enumobject.o Objects/enumobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/exceptions.o Objects/exceptions.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/genobject.o Objects/genobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/fileobject.o Objects/fileobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/floatobject.o Objects/floatobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/frameobject.o Objects/frameobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/funcobject.o Objects/funcobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/iterobject.o Objects/iterobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/listobject.o Objects/listobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/longobject.o Objects/longobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/dictobject.o Objects/dictobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/memoryobject.o Objects/memoryobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/methodobject.o Objects/methodobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/moduleobject.o Objects/moduleobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/namespaceobject.o Objects/namespaceobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/object.o Objects/object.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/obmalloc.o Objects/obmalloc.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/capsule.o Objects/capsule.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/rangeobject.o Objects/rangeobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/setobject.o Objects/setobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/sliceobject.o Objects/sliceobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/structseq.o Objects/structseq.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/tupleobject.o Objects/tupleobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/typeobject.o Objects/typeobject.c</span><br><span class="line">gcc -pthread -c  -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes    -I. -I./Include    -DPy_BUILD_CORE -o Objects/unicodeobject.o Objects/unicodeobject.c</span><br><span class="line">gcc: Internal error: Killed (program cc1)</span><br><span class="line">Please submit a full bug report.</span><br><span class="line">See &lt;http://bugzilla.redhat.com/bugzilla&gt; <span class="keyword">for</span> instructions.</span><br><span class="line">make: *** [Objects/unicodeobject.o] Error 1</span><br></pre></td></tr></table></figure>

<h4 id="2-、解决办法"><a href="#2-、解决办法" class="headerlink" title="2)、解决办法"></a>2)、解决办法</h4><p>Usually, you can workaround GCC bugs by disabling optimizations. You can try to modify Makefile to replace <code>&quot;-O3&quot;</code> with <code>&quot;-O2&quot;</code> or even <code>&quot;-O0&quot;</code> (disable all optimizations), and then try to run “make” again.</p>
<p>修改<code>Makefile</code>文件，把<code>‘-DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes’</code>中的<code>O3</code>改为<code>O2</code>即可。</p>
<h4 id="3-、参考"><a href="#3-、参考" class="headerlink" title="3)、参考"></a>3)、参考</h4><ul>
<li><a href="https://bugs.python.org/issue22424" target="_blank" rel="noopener external nofollow noreferrer">Issue22424</a></li>
<li><a href="http://www.voidcn.com/article/p-uinyfjoe-bqo.html" target="_blank" rel="noopener external nofollow noreferrer">python3安装make过程出错 Objects/unicodeobject.o Error</a></li>
</ul>
<h2 id="二、采用apt-get安装"><a href="#二、采用apt-get安装" class="headerlink" title="二、采用apt-get安装"></a>二、采用apt-get安装</h2><h3 id="1、添加python3-6的源"><a href="#1、添加python3-6的源" class="headerlink" title="1、添加python3.6的源"></a>1、添加python3.6的源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:jonathonf/python-3.6</span><br></pre></td></tr></table></figure>

<p>下面出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Don&#39;t remove Python 3.5 from your system - it will break.</span><br><span class="line"> More info: https:&#x2F;&#x2F;launchpad.net&#x2F;~jonathonf&#x2F;+archive&#x2F;ubuntu&#x2F;python-3.6</span><br><span class="line">Press [ENTER] to continue or ctrl-c to cancel adding it</span><br></pre></td></tr></table></figure>

<p>这里提示我们安装 Python 3.6 后不要删除 Python 3.5，不然的话系统会崩溃，因为 Linux 系统里面对 Pyhon 的依赖是比较多的，网上能查到很多人吐槽自己删除系统默认的 Python 版本后出现问题，不得不重新装回原来的版本，甚至重装系统的经历。我们根据提示键入 Enter 后，把 Python 3.6 的PPA源正式加入到源列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpg: keyring &#96;&#x2F;tmp&#x2F;tmpsnw0vrl9&#x2F;secring.gpg&#39; created</span><br><span class="line">gpg: keyring &#96;&#x2F;tmp&#x2F;tmpsnw0vrl9&#x2F;pubring.gpg&#39; created</span><br><span class="line">gpg: requesting key F06FC659 from hkp server keyserver.ubuntu.com</span><br><span class="line">gpg: &#x2F;tmp&#x2F;tmpsnw0vrl9&#x2F;trustdb.gpg: trustdb created</span><br><span class="line">gpg: key F06FC659: public key &quot;Launchpad PPA for J Fernyhough&quot; imported</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:               imported: 1  (RSA: 1)</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p>然后执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>再次安装就可以了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3.6</span><br></pre></td></tr></table></figure>

<p>如果提示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E: Failed to fetch http:&#x2F;&#x2F;ppa.launchpad.net&#x2F;jonathonf&#x2F;python-3.6&#x2F;ubuntu&#x2F;pool&#x2F;main&#x2F;p&#x2F;python3.6&#x2F;python3.6-minimal_3.6.3-1ubuntu1~16.04.york1_amd64.deb  Connection timed out</span><br><span class="line"></span><br><span class="line">E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</span><br></pre></td></tr></table></figure>

<p>再执行一遍<code>apt-get install</code>就好了。</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Fork的代码更新方法</title>
    <url>/archives/798a15e7.html</url>
    <content><![CDATA[<p>用户可以很方便的从别的仓库中复制一份代码（Fork）到自己的名下。但是有一个不足是GitHub并不提供自动更新功能，那么此时就需要我们自己手动更新这个Fork仓库代码。</p>
<a id="more"></a>

<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>** 1、安装 <code>GitHub客户端</code> 或者 <code>Git</code>。**</p>
<p>** 2、clone 需要更新的 Fork 分支到本地**</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:yourname/repos.git &lt;yourfolder&gt;</span><br></pre></td></tr></table></figure>

<p>** 3、将源分支添加到该仓库的远程分支中**</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add upstream git@github.com:author/repos.git</span><br></pre></td></tr></table></figure>

<p>此时可以使用 <code>git remote -v</code> 查看远程分支列表，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream git@github.com:author&#x2F;repos.git (fetch)</span><br><span class="line">upstream git@github.com:author&#x2F;repos.git (push)</span><br><span class="line">origin  git@github.com:yourname&#x2F;repos.git (fetch)</span><br><span class="line">origin  git@github.com:yourname&#x2F;repos.git (push)</span><br></pre></td></tr></table></figure>

<p>** 4、fetch 源仓库代码的最新版本到本地**</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch upstream   <span class="comment">#这里的`upstream`是上面从源分支添加到远程分支的分支名</span></span><br></pre></td></tr></table></figure>

<p>这里是从上游仓库fetch分支和提交点，提交给本地master，并会被存储在一个本地分支<code>upstream/master</code>。</p>
<p>** 5、合并两个版本的代码**</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge upstream/master</span><br></pre></td></tr></table></figure>

<p>这里把<code>upstream/master</code>分支合并到本地master上，这样就完成了同步，并且不会丢掉本地修改的内容。 </p>
<p>** 6、更新到GitHub的fork上**</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="只用GitHub，不用命令行操作步骤"><a href="#只用GitHub，不用命令行操作步骤" class="headerlink" title="只用GitHub，不用命令行操作步骤"></a>只用GitHub，不用命令行操作步骤</h2><p>这里看到源项目已经领先我Fork的项目84个commit了，所以首先点击图中的<code>Pull request</code>：</p>
<img src="/archives/798a15e7/1.png" class="" title="图1">

<p>由于这里没有修改，所以这里是空的，下面点击图中的<code>switching to base</code>：</p>
<img src="/archives/798a15e7/2.png" class="" title="图2">

<p>下面点击<code>Create Pull request</code>：</p>
<img src="/archives/798a15e7/3.png" class="" title="图3">

<p>这里给这个pull request取一个名字：</p>
<img src="/archives/798a15e7/4.png" class="" title="图4">

<p>然后点击Merge，最后confirm即可：</p>
<img src="/archives/798a15e7/5.png" class="" title="图5">



<p> 参考：<a href="https://www.zhihu.com/question/28676261/answer/44606041" target="_blank" rel="noopener external nofollow noreferrer">gitlab或github下fork后如何同步源的新更新内容？</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Git分支学习</title>
    <url>/archives/90e170d8.html</url>
    <content><![CDATA[<p>本文主要记录Git分支的知识：</p>
<ul>
<li>Git分支基本操作<ul>
<li>查看本地分支信息</li>
<li>创建本地分支</li>
<li>本地分支关联到远程分支</li>
<li>取消远程分支关联并关联到新的远程分支</li>
<li>取回远程仓库某个分支的更新再与本地的指定分支自动merge</li>
<li>删除分支</li>
</ul>
</li>
<li>远程仓库有master和dev分支，使用dev分支进行开发的一个示例</li>
<li>远程仓库只有mater分支，使用dev分支进行开发的一个示例</li>
<li>Git clone所有的远程分支的方法</li>
<li>Git里的origin理解</li>
</ul>
<a id="more"></a>

<h2 id="Git分支基本操作"><a href="#Git分支基本操作" class="headerlink" title="Git分支基本操作"></a>Git分支基本操作</h2><h3 id="查看本地分支信息"><a href="#查看本地分支信息" class="headerlink" title="查看本地分支信息"></a>查看本地分支信息</h3><p>我们可以通过<code>git branch</code>查看本地分支信息，通过<code>git branch -a</code>查看所有分支（包括远程分支remote）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">*master</span><br><span class="line">remotes/origin/ -&gt; origin/master</span><br><span class="line">remotes/origin/master</span><br></pre></td></tr></table></figure>

<p>​- <code>*</code>星号表示当前所在分支 </p>
<ul>
<li><code>remote</code>表示远程分支</li>
</ul>
<h3 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h3><p><code>git checkout -b branch_dev</code>创建本地分支并切换到新建分支，等同于以下两行代码：</p>
<ul>
<li>创建本地分支<code>git branch branch_dev</code></li>
<li>切换到新创建的分支<code>git checkout branch_dev</code></li>
</ul>
<p>我们通过<code>git branch</code>可以看到现在已经切换到新建本地分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  master</span><br><span class="line">* branch_dev</span><br></pre></td></tr></table></figure>

<h3 id="本地分支关联到远程分支"><a href="#本地分支关联到远程分支" class="headerlink" title="本地分支关联到远程分支"></a>本地分支关联到远程分支</h3><p>我们可以将新建的本地分支关联到远程分支（push即可）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin branch_dev:branch_dev</span><br></pre></td></tr></table></figure>

<p>第一个其实是本地分支的名，冒号后面是要创建的远程分支名，可以自己另起名称，如果直接使用<code>git push origin branch_dev</code>则默认和远程分支同名。</p>
<p>这样已经新建好本地与远程同步的分支，我们可以通过以下命令查看远程分支是否存在：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line"> master</span><br><span class="line">*branch_dev</span><br><span class="line"> remotes/origin/HEAD -&gt; origin/master</span><br><span class="line"> remotes/origin/master</span><br><span class="line"> remotes/origin/branch_dev</span><br></pre></td></tr></table></figure>

<h3 id="取消远程分支关联并关联到新的远程分支"><a href="#取消远程分支关联并关联到新的远程分支" class="headerlink" title="取消远程分支关联并关联到新的远程分支"></a>取消远程分支关联并关联到新的远程分支</h3><p>首先解除关联：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>

<p>重新关联新的远程分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/tding/example.git</span><br></pre></td></tr></table></figure>

<h3 id="取回远程仓库某个分支的更新再与本地的指定分支自动merge"><a href="#取回远程仓库某个分支的更新再与本地的指定分支自动merge" class="headerlink" title="取回远程仓库某个分支的更新再与本地的指定分支自动merge"></a>取回远程仓库某个分支的更新再与本地的指定分支自动merge</h3><p>完整格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull &lt;远程库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>比如，取回远程库中的develop分支，与本地的develop分支进行merge，要写成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin develop:develop</span><br></pre></td></tr></table></figure>

<p>如果是要与本地当前分支merge，则冒号后面的&lt;本地分支名&gt;可以不写。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin develop</span><br></pre></td></tr></table></figure>

<p>通常，git会将本地库分支与远程分支之间建立一种追踪关系。比如，在git clone的时候，所有本地分支默认与远程库的同名分支建立追踪关系。也就是说，本地的master分支自动追踪origin/master分支。因此，如果当前处于本地develop分支上，并且本地develop分支与远程的develop分支有追踪关系，那么远程的分支名可以省略：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure>


<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin :dev  <span class="comment"># 删除远程dev分支，危险命令哦</span></span><br></pre></td></tr></table></figure>

<h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h4><p>下面两条是删除本地分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master   <span class="comment"># 切换到master分支</span></span><br><span class="line">git branch -d dev     <span class="comment"># 删除本地dev分支</span></span><br></pre></td></tr></table></figure>



<h2 id="示例：远程仓库有master和dev分支开发方法"><a href="#示例：远程仓库有master和dev分支开发方法" class="headerlink" title="示例：远程仓库有master和dev分支开发方法"></a>示例：远程仓库有master和dev分支开发方法</h2><h3 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/master-dev.git</span><br></pre></td></tr></table></figure>

<h3 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --a</span><br></pre></td></tr></table></figure>

<p>默认有了dev和master分支，所以会看到如下三个分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">master[本地主分支] </span><br><span class="line">origin&#x2F;master[远程主分支] </span><br><span class="line">origin&#x2F;dev[远程开发分支]</span><br></pre></td></tr></table></figure>

<p>新克隆下来的代码默认<code>master</code>和<code>origin/master</code>是关联的，也就是他们的代码保持同步，但是<code>origin/dev</code>分支在本地没有任何的关联，所以我们无法在那里开发。</p>
<h3 id="创建本地关联origin-dev的分支"><a href="#创建本地关联origin-dev的分支" class="headerlink" title="创建本地关联origin/dev的分支"></a>创建本地关联<code>origin/dev</code>的分支</h3><p>创建本地分支dev，并且和远程<code>origin/dev</code>分支关联，本地dev分支的初始代码和远程的dev分支代码一样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev origin/dev</span><br></pre></td></tr></table></figure>


<h3 id="切换到dev分支进行开发"><a href="#切换到dev分支进行开发" class="headerlink" title="切换到dev分支进行开发"></a>切换到dev分支进行开发</h3><p>我们通过以下代码切换到dev分支，然后就是常规的开发：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure>


<h2 id="示例：假设远程仓库只有mater分支"><a href="#示例：假设远程仓库只有mater分支" class="headerlink" title="示例：假设远程仓库只有mater分支"></a>示例：假设远程仓库只有mater分支</h2><h3 id="克隆代码-1"><a href="#克隆代码-1" class="headerlink" title="克隆代码"></a>克隆代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/master-dev.git</span><br></pre></td></tr></table></figure>

<h3 id="查看所有分支-1"><a href="#查看所有分支-1" class="headerlink" title="查看所有分支"></a>查看所有分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --a</span><br></pre></td></tr></table></figure>

<p>默认只有master分支，所以会看到如下两个分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">master[本地主分支] </span><br><span class="line">origin&#x2F;master[远程主分支]</span><br></pre></td></tr></table></figure>

<p>新克隆下来的代码默认<code>master</code>和<code>origin/master</code>是关联的，也就是他们的代码保持同步</p>
<h3 id="创建本地新的dev分支"><a href="#创建本地新的dev分支" class="headerlink" title="创建本地新的dev分支"></a>创建本地新的dev分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch dev  <span class="comment"># 创建本地分支</span></span><br><span class="line">git branch      <span class="comment"># 查看分支</span></span><br></pre></td></tr></table></figure>

<p>这时会看到master和dev，而且master上会有一个星号。这个时候dev是一个本地分支，远程仓库不知道它的存在，本地分支可以不同步到远程仓库，我们可以在dev开发，然后merge到master，使用master同步代码，当然也可以同步。</p>
<h3 id="发布dev分支"><a href="#发布dev分支" class="headerlink" title="发布dev分支"></a>发布dev分支</h3><p>发布dev分支指的是同步dev分支的代码到远程服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin dev:dev  <span class="comment"># 这样远程仓库也有一个dev分支了</span></span><br></pre></td></tr></table></figure>

<h3 id="在dev分支开发代码"><a href="#在dev分支开发代码" class="headerlink" title="在dev分支开发代码"></a>在dev分支开发代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev      <span class="comment"># 切换到dev分支进行开发</span></span><br></pre></td></tr></table></figure>

<p>开发代码之后，我们有两个选择：</p>
<ol>
<li>如果功能开发完成了，可以合并主分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master   <span class="comment"># 切换到主分支</span></span><br><span class="line">git merge dev         <span class="comment"># 把dev分支的更改和master合并</span></span><br><span class="line">git push              <span class="comment"># 提交主分支代码远程</span></span><br><span class="line">git checkout dev      <span class="comment"># 切换到dev远程分支</span></span><br><span class="line">git push              <span class="comment"># 提交dev分支到远程</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果功能没有完成，可以直接推送</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push  <span class="comment"># 提交到dev远程分支</span></span><br></pre></td></tr></table></figure>

<p>注意：在分支切换之前最好先commit全部的改变。</p>
<h2 id="Git-clone所有的远程分支的方法"><a href="#Git-clone所有的远程分支的方法" class="headerlink" title="Git clone所有的远程分支的方法"></a>Git clone所有的远程分支的方法</h2><p><code>Git clone</code>只能clone远程库的master分支，无法clone所有分支，解决办法如下：</p>
<ul>
<li>1、找一个干净目录，假设是GitHub</li>
<li>2、<code>cd GitHub</code></li>
<li>3、<code>git clone git@github.com:dta0502/Data-Analysis-In-Action.git</code>,这样在GitHub目录下得到一个<code>Data-Analysis-In-Action</code>子目录</li>
<li>4、<code>cd Data-Analysis-In-Action</code></li>
<li>5、<code>git branch -a</code>，列出所有分支名称如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* master</span><br><span class="line">  remotes&#x2F;origin&#x2F;HEAD -&gt; origin&#x2F;master</span><br><span class="line">  remotes&#x2F;origin&#x2F;add-license-1</span><br><span class="line">  remotes&#x2F;origin&#x2F;dev</span><br><span class="line">  remotes&#x2F;origin&#x2F;master</span><br></pre></td></tr></table></figure>

<ul>
<li>6、<code>git checkout -b dev origin/dev</code>，作用是checkout远程的dev分支，在本地起名为dev分支，并切换到本地的dev分支</li>
</ul>
<h2 id="Git里的origin理解"><a href="#Git里的origin理解" class="headerlink" title="Git里的origin理解"></a>Git里的origin理解</h2><p>你的代码库(repository)可以存放在你的电脑里，同时你也可以把代码库托管到Github的服务器上。<strong>在默认情况下，origin指向的就是你本地的代码库托管在Github上的版本。</strong></p>
<p>我们首先在GitHub上创建了一个叫repository的仓库，这时候指向我们的代码库链接是<code>https://github.com/user1/repository</code>，克隆：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/user1/repository</span><br></pre></td></tr></table></figure>

<p>然后输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin https://github.com/user1/repository.git (fetch)</span><br><span class="line">origin https://github.com/user1/repository.git (push)</span><br></pre></td></tr></table></figure>

<p>可见git为你默认创建了一个指向远端代码库的origin（因为你是从这个地址clone下来的）</p>
<p>现在有一个用户user2 fork了repository，那么他的代码库链接<code>https://github.com/user2/repository</code>，如果他也克隆后输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin https://github.com/user2/repository.git (fetch)</span><br><span class="line">origin https://github.com/user2/repository.git (push)</span><br></pre></td></tr></table></figure>

<p>现在origin指向的位置是user2的的远程代码库。</p>
<p>这个时候，如果user2想加一个远程指向你的代码库，他可以在控制台输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add upstream https://github.com/user1/repository.git</span><br></pre></td></tr></table></figure>

<p>然后再输入一遍 <code>git remote -v</code>，输出结果就会变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;user2&#x2F;repository.git (fetch)</span><br><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;user2&#x2F;repository.git (push)</span><br><span class="line">upstream https:&#x2F;&#x2F;github.com&#x2F;user1&#x2F;repository.git (fetch)</span><br><span class="line">upstream https:&#x2F;&#x2F;github.com&#x2F;user1&#x2F;repository.git (push)</span><br></pre></td></tr></table></figure>

<p>增加了指向user1代码库的upstream，也就是之前对指向位置的命名。</p>
<p>总结来讲，origin就是一个名字，它是在你clone一个托管在Github上代码库时，git为你默认创建的指向这个远程代码库的标签，origin指向的是repository，master只是这个repository中默认创建的第一个branch。当你<code>git push</code>的时候因为origin和master都是默认创建的，所以可以省略，但是这是<code>bad practice</code>，因为当你换一个branch再<code>git push</code>的时候，有时候就纠结了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/6844903713803337741" target="_blank" rel="noopener external nofollow noreferrer">git创建本地与远程分支的同步与合并</a></li>
<li><a href="https://www.jianshu.com/p/47d78df8c368" target="_blank" rel="noopener external nofollow noreferrer">git如何利用分支进行多人开发</a></li>
<li><a href="https://www.zhihu.com/question/27712995/answer/39946123" target="_blank" rel="noopener external nofollow noreferrer">Git 里面的 origin 到底代表啥意思?</a></li>
<li><a href="https://blog.csdn.net/weixin_39523998/article/details/77651219" target="_blank" rel="noopener external nofollow noreferrer">用git pull取回远程仓库某个分支的更新，再与本地的指定分支自动merge</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
        <tag>分支</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub初始化配置</title>
    <url>/archives/b0004f5f.html</url>
    <content><![CDATA[<p>本文主要介绍GitHub初始化配置。</p>
<a id="more"></a>


<h2 id="初次安装Git配置用户名和邮箱"><a href="#初次安装Git配置用户名和邮箱" class="headerlink" title="初次安装Git配置用户名和邮箱"></a>初次安装Git配置用户名和邮箱</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"xxxxxx"</span></span><br><span class="line">git config --global user.email <span class="string">"xxxxxx@qq.com"</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：引号内请输入你自己设置的名字和你自己的邮箱，此用户名和邮箱是Git提交代码时用来显示你身份和联系方式的，并不是GitHub用户名和邮箱。</strong></p>
<h2 id="Git使用ssh密钥"><a href="#Git使用ssh密钥" class="headerlink" title="Git使用ssh密钥"></a>Git使用ssh密钥</h2><p>Git支持https和git两种传输协议，GitHub分享链接时会有两种协议可选：</p>
<ul>
<li>使用https协议，每次<code>pull</code>、<code>push</code>都会提示要输入密码</li>
<li>使用git协议，然后使用ssh密钥，这样免去每次都输密码的麻烦</li>
</ul>
<p>初次使用git的用户要使用git协议大概需要三个步骤。</p>
<h3 id="1、生成密钥对"><a href="#1、生成密钥对" class="headerlink" title="1、生成密钥对"></a>1、生成密钥对</h3><p>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。首先你要确认一下本机是否已经有一个公钥。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>看一下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>(或者是<code>id_dsa</code>和<code>id_dsa.pub</code>之类成对的文件)，有 <code>.pub</code> 后缀的文件就是公钥，另一个文件则是密钥。</p>
<p>假如没有这些文件，甚至连<code>.ssh</code>目录都没有，可以用 <code>ssh-keygen</code> 来创建。该程序在Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &lt;xxxxxx@qq.com&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creates a new ssh key using the provided email \# Generating public&#x2F;private rsa key pair.</span><br><span class="line"></span><br><span class="line">Enter file in which to save the key (&#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa):</span><br></pre></td></tr></table></figure>

<p>直接按Enter就行。然后，会提示你输入密码，如下(建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure>

<p>完了之后，大概是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your public key has been saved in &#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line"></span><br><span class="line">The key fingerprint is: \# xxxxxx &lt;xxxxxx@qq.com&gt;</span><br></pre></td></tr></table></figure>

<p>到此为止，你本地的密钥对就生成了。</p>
<h3 id="添加公钥到你的远程仓库（GitHub）"><a href="#添加公钥到你的远程仓库（GitHub）" class="headerlink" title="添加公钥到你的远程仓库（GitHub）"></a>添加公钥到你的远程仓库（GitHub）</h3><h4 id="查看你生成的公钥"><a href="#查看你生成的公钥" class="headerlink" title="查看你生成的公钥"></a>查看你生成的公钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-rsa</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxx admin\@admin-PC</span><br></pre></td></tr></table></figure>

<h4 id="SSH-Key添加"><a href="#SSH-Key添加" class="headerlink" title="SSH Key添加"></a>SSH Key添加</h4><p>登陆你的GitHub帐户，点击你的头像，然后 <code>Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key -&gt; 然后你复制上面的公钥内容（上面全部），粘贴进“Key”文本域内。title域，自己随便起个名字。 -&gt; 点击 Add key</code>。</p>
<h4 id="验证这个key是不是正常工作"><a href="#验证这个key是不是正常工作" class="headerlink" title="验证这个key是不是正常工作"></a>验证这个key是不是正常工作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T &lt;git@github.com&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi xxx! You&#39;ve successfully authenticated, but GitHub does not \# provide shell</span><br><span class="line">access.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中插入HTML表格出现过多空白的解决办法</title>
    <url>/archives/63c2fba0.html</url>
    <content><![CDATA[<p>早先我写博客的时候，就发现Hexo中插入HTML表格会留出大量空白。虽然markdown语法也是可以生成表格的，但是写的时候特别麻烦，所以我一直是直接插入的HTML表格的，仅仅是因为简单高效。当时，我刚搭建好这个博客,所以对hexo并不是很了解。我当时以为这只是在我个人markdown语法用的不对或者是编辑器造成的，造成了表格出现大量空白，此后也并没有解决这件事，遇到需要表格的文章时，都是直接插入图片代替的，大家在一些文章中可以看到表格基本都是用图片代替了。最近我又写博客的时候，又出现了这个问题，才发现这也许是hexo的一个bug。</p>
<a id="more"></a>

<p>下面开始分析并解决这个问题。</p>
<p>我用下面的HTML代码做一个表格。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>冰羽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Tips: 出现的大量空白是为了演示使用，这里会出现一个表格。</p>
<table>
  <tr>
    <th>姓名</th>
    <th>性别</th>
  </tr>
  <tr>
    <td>冰羽</td>
    <td>男</td>
  </tr>
</table>

<p>下面是markdown文件的预览：</p>
<img src="/archives/63c2fba0/1.jpg" class="" title="图1">

<p>可以看到在atom编辑器中预览的时候，并没有出现大量的空白。这说明并不是编辑器的问题。而我用markdown语法写出的内容也没有任何涉及到表格的，也绝对不是markdown语法的问题。</p>
<p>我们可以在浏览器中右击“查看源代码”，找到这个表格会看到，多出很多<code>&lt;br&gt;</code>标签来。html中<code>&lt;br&gt;</code>标签用于换行。</p>
<img src="/archives/63c2fba0/2.jpg" class="" title="图2">

<p>我后来在hexo的Issues中也发现了其他人出现了这个问题。然后开始各种找解决办法,下面给出两种解决办法。</p>
<h2 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h2><p>将代码改为紧凑模式，修改代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>冰羽<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也就是说代码标签之间不要留白，全部改为紧贴着的。</p>
<p>Tips：这里会出现一个表格，没有大量空白。</p>
<table><tr><th>姓名</th><th>性别</th></tr><tr><td>冰羽</td><td>男</td></tr></table>

<p>我们还可以利用这个<a href="http://www.tablesgenerator.com/" target="_blank" rel="noopener external nofollow noreferrer">Table Generator</a>在线工具来编辑表格，提供了html表格和markdown表格来生成用于hexo的表格。</p>
<h2 id="解决方法2-推荐"><a href="#解决方法2-推荐" class="headerlink" title="解决方法2(推荐)"></a>解决方法2(推荐)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">html tags &amp; content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以利用上面的格式来编写表格，我个人认为这种最为简单便捷。<br>我们只需要把代码修改为以下这样即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;  </span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>冰羽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

  
<table>
  <tr>
    <th>姓名</th>
    <th>性别</th>
  </tr>
  <tr>
    <td>冰羽</td>
    <td>男</td>
  </tr>
</table>


<p>生成的表格同样不会出现大量空白。</p>
<p>本文作者：冰羽<br>本文地址： <a href="https://bingyublog.com/2018/08/20/hexo中插入HTML表格出现过多空白的解决办法/" target="_blank" rel="noopener external nofollow noreferrer">https://bingyublog.com/2018/08/20/hexo中插入HTML表格出现过多空白的解决办法/</a><br>版权声明：本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>国家统计局统计用区划代码和城乡划分代码爬虫-（二）总体实现</title>
    <url>/archives/796bd537.html</url>
    <content><![CDATA[<p>本文详细分析了国家统计局统计用区划代码和城乡划分代码爬虫的实现过程，这是第二篇，详细分析了爬取全过程。</p>
<p>详细的代码开源在GitHub上：<a href="https://github.com/dta0502/NBSPRC-spider" target="_blank" rel="noopener external nofollow noreferrer">NBSPRC-spider</a>。</p>
<iframe src="https://ghbtns.com/github-btn.html?user=dta0502&amp;repo=NBSPRC-spider&amp;type=watch&amp;count=true&amp;size=large" allowtransparency="true" frameborder="0" scrolling="0" width="156px" height="30px"></iframe>
<iframe src="https://ghbtns.com/github-btn.html?user=dta0502&amp;repo=NBSPRC-spider&amp;type=fork&amp;count=true&amp;size=large" allowtransparency="true" frameborder="0" scrolling="0" width="156px" height="30px"></iframe>

<a id="more"></a>



<h2 id="一、总体思路说明"><a href="#一、总体思路说明" class="headerlink" title="一、总体思路说明"></a>一、总体思路说明</h2><p>首先我定义了一个网页爬取函数，然后依次定义省级代码获取函数、市级代码获取函数、区级代码获取函数、街道代码获取函数、居委会代码获取函数，这些函数都会调用网页爬取函数。其中区级代码获取函数、街道代码获取函数、居委会代码获取函数这三个函数都是多线程实现爬取的。最后我将爬取得到的数据输出为csv格式文件。</p>
<h3 id="1、库函数导入"><a href="#1、库函数导入" class="headerlink" title="1、库函数导入"></a>1、库函数导入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br></pre></td></tr></table></figure>

<h3 id="2、网页爬取函数"><a href="#2、网页爬取函数" class="headerlink" title="2、网页爬取函数"></a>2、网页爬取函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面加入了num_retries这个参数，经过测试网络正常一般最多retry一次就能获得结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">(url,num_retries = <span class="number">5</span>)</span>:</span></span><br><span class="line">    ua = UserAgent()</span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>:ua.random&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url,headers = headers)</span><br><span class="line">        response.encoding = response.apparent_encoding</span><br><span class="line">        data = response.text</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> num_retries &gt; <span class="number">0</span>:</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            print(url)</span><br><span class="line">            print(<span class="string">"requests fail, retry!"</span>)</span><br><span class="line">            <span class="keyword">return</span> getUrl(url,num_retries<span class="number">-1</span>) <span class="comment">#递归调用</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"retry fail!"</span>)</span><br><span class="line">            print(<span class="string">"error: %s"</span> % e + <span class="string">" "</span> + url)</span><br><span class="line">            <span class="keyword">return</span> <span class="comment">#返回空值，程序运行报错</span></span><br></pre></td></tr></table></figure>

<h3 id="3、获取省级代码函数"><a href="#3、获取省级代码函数" class="headerlink" title="3、获取省级代码函数"></a>3、获取省级代码函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getProvince</span><span class="params">(url)</span>:</span></span><br><span class="line">    province = []</span><br><span class="line">    data = getUrl(url)</span><br><span class="line">    selector = etree.HTML(data)</span><br><span class="line">    provinceList = selector.xpath(<span class="string">'//tr[@class="provincetr"]'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> provinceList:</span><br><span class="line">        provinceName = i.xpath(<span class="string">'td/a/text()'</span>) <span class="comment">#这里如果采用//a/text()路径会出现问题！！</span></span><br><span class="line">        provinceLink = i.xpath(<span class="string">'td/a/@href'</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(provinceLink)):</span><br><span class="line">            provinceURL = url[:<span class="number">-10</span>] + provinceLink[j] <span class="comment">#根据获取到的每个省的链接进行补全，得到真实的URL。</span></span><br><span class="line">            province.append(&#123;<span class="string">'name'</span>:provinceName[j],<span class="string">'link'</span>:provinceURL&#125;)</span><br><span class="line">    <span class="keyword">return</span> province</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pro = getProvince(<span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_province = pd.DataFrame(pro)</span><br><span class="line">df_province[<span class="string">'link'</span>]</span><br></pre></td></tr></table></figure>


<pre><code>0     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
1     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
2     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
3     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
4     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
5     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
6     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
7     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
8     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
9     http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
10    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
11    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
12    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
13    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
14    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
15    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
16    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
17    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
18    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
19    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
20    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
21    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
22    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
23    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
24    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
25    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
26    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
27    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
28    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
29    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
30    http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...
Name: link, dtype: object</code></pre><h4 id="信息写入csv文件"><a href="#信息写入csv文件" class="headerlink" title="信息写入csv文件"></a>信息写入csv文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_province.to_csv(<span class="string">'province.csv'</span>, sep=<span class="string">','</span>, header=<span class="literal">True</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4、获取市级代码函数"><a href="#4、获取市级代码函数" class="headerlink" title="4、获取市级代码函数"></a>4、获取市级代码函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCity</span><span class="params">(url_list)</span>:</span></span><br><span class="line">    city_all = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        data = getUrl(url)</span><br><span class="line">        selector = etree.HTML(data)</span><br><span class="line">        cityList = selector.xpath(<span class="string">'//tr[@class="citytr"]'</span>)</span><br><span class="line">        <span class="comment">#下面是抓取每一个城市的代码、URL</span></span><br><span class="line">        city = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> cityList:</span><br><span class="line">            cityCode = i.xpath(<span class="string">'td[1]/a/text()'</span>)</span><br><span class="line">            cityLink = i.xpath(<span class="string">'td[1]/a/@href'</span>)</span><br><span class="line">            cityName = i.xpath(<span class="string">'td[2]/a/text()'</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(cityLink)):</span><br><span class="line">                cityURL = url[:<span class="number">-7</span>] + cityLink[j]</span><br><span class="line">                city.append(&#123;<span class="string">'name'</span>:cityName[j],<span class="string">'code'</span>:cityCode[j],<span class="string">'link'</span>:cityURL&#125;)</span><br><span class="line">        city_all.extend(city) <span class="comment">#所有省的城市信息合并在一起</span></span><br><span class="line">    <span class="keyword">return</span> city_all</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">city = getCity(df_province[<span class="string">'link'</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_city = pd.DataFrame(city)</span><br><span class="line">df_city</span><br></pre></td></tr></table></figure>



<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>code</th>
      <th>link</th>
      <th>name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>110100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>市辖区</td>
    </tr>
    <tr>
      <th>1</th>
      <td>120100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>市辖区</td>
    </tr>
    <tr>
      <th>2</th>
      <td>130100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>石家庄市</td>
    </tr>
    <tr>
      <th>3</th>
      <td>130200000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>唐山市</td>
    </tr>
    <tr>
      <th>4</th>
      <td>130300000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>秦皇岛市</td>
    </tr>
    <tr>
      <th>5</th>
      <td>130400000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>邯郸市</td>
    </tr>
    <tr>
      <th>6</th>
      <td>130500000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>邢台市</td>
    </tr>
    <tr>
      <th>7</th>
      <td>130600000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>保定市</td>
    </tr>
    <tr>
      <th>8</th>
      <td>130700000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>张家口市</td>
    </tr>
    <tr>
      <th>9</th>
      <td>130800000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>承德市</td>
    </tr>
    <tr>
      <th>10</th>
      <td>130900000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>沧州市</td>
    </tr>
    <tr>
      <th>11</th>
      <td>131000000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>廊坊市</td>
    </tr>
    <tr>
      <th>12</th>
      <td>131100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>衡水市</td>
    </tr>
    <tr>
      <th>13</th>
      <td>139000000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>省直辖县级行政区划</td>
    </tr>
    <tr>
      <th>14</th>
      <td>140100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>太原市</td>
    </tr>
    <tr>
      <th>15</th>
      <td>140200000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>大同市</td>
    </tr>
    <tr>
      <th>16</th>
      <td>140300000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阳泉市</td>
    </tr>
    <tr>
      <th>17</th>
      <td>140400000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>长治市</td>
    </tr>
    <tr>
      <th>18</th>
      <td>140500000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>晋城市</td>
    </tr>
    <tr>
      <th>19</th>
      <td>140600000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>朔州市</td>
    </tr>
    <tr>
      <th>20</th>
      <td>140700000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>晋中市</td>
    </tr>
    <tr>
      <th>21</th>
      <td>140800000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>运城市</td>
    </tr>
    <tr>
      <th>22</th>
      <td>140900000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>忻州市</td>
    </tr>
    <tr>
      <th>23</th>
      <td>141000000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>临汾市</td>
    </tr>
    <tr>
      <th>24</th>
      <td>141100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>吕梁市</td>
    </tr>
    <tr>
      <th>25</th>
      <td>150100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>呼和浩特市</td>
    </tr>
    <tr>
      <th>26</th>
      <td>150200000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>包头市</td>
    </tr>
    <tr>
      <th>27</th>
      <td>150300000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>乌海市</td>
    </tr>
    <tr>
      <th>28</th>
      <td>150400000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>赤峰市</td>
    </tr>
    <tr>
      <th>29</th>
      <td>150500000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>通辽市</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>314</th>
      <td>622900000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>临夏回族自治州</td>
    </tr>
    <tr>
      <th>315</th>
      <td>623000000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>甘南藏族自治州</td>
    </tr>
    <tr>
      <th>316</th>
      <td>630100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>西宁市</td>
    </tr>
    <tr>
      <th>317</th>
      <td>630200000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>海东市</td>
    </tr>
    <tr>
      <th>318</th>
      <td>632200000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>海北藏族自治州</td>
    </tr>
    <tr>
      <th>319</th>
      <td>632300000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>黄南藏族自治州</td>
    </tr>
    <tr>
      <th>320</th>
      <td>632500000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>海南藏族自治州</td>
    </tr>
    <tr>
      <th>321</th>
      <td>632600000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>果洛藏族自治州</td>
    </tr>
    <tr>
      <th>322</th>
      <td>632700000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>玉树藏族自治州</td>
    </tr>
    <tr>
      <th>323</th>
      <td>632800000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>海西蒙古族藏族自治州</td>
    </tr>
    <tr>
      <th>324</th>
      <td>640100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>银川市</td>
    </tr>
    <tr>
      <th>325</th>
      <td>640200000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>石嘴山市</td>
    </tr>
    <tr>
      <th>326</th>
      <td>640300000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>吴忠市</td>
    </tr>
    <tr>
      <th>327</th>
      <td>640400000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>固原市</td>
    </tr>
    <tr>
      <th>328</th>
      <td>640500000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>中卫市</td>
    </tr>
    <tr>
      <th>329</th>
      <td>650100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>乌鲁木齐市</td>
    </tr>
    <tr>
      <th>330</th>
      <td>650200000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>克拉玛依市</td>
    </tr>
    <tr>
      <th>331</th>
      <td>650400000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>吐鲁番市</td>
    </tr>
    <tr>
      <th>332</th>
      <td>650500000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>哈密市</td>
    </tr>
    <tr>
      <th>333</th>
      <td>652300000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>昌吉回族自治州</td>
    </tr>
    <tr>
      <th>334</th>
      <td>652700000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>博尔塔拉蒙古自治州</td>
    </tr>
    <tr>
      <th>335</th>
      <td>652800000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>巴音郭楞蒙古自治州</td>
    </tr>
    <tr>
      <th>336</th>
      <td>652900000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿克苏地区</td>
    </tr>
    <tr>
      <th>337</th>
      <td>653000000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>克孜勒苏柯尔克孜自治州</td>
    </tr>
    <tr>
      <th>338</th>
      <td>653100000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>喀什地区</td>
    </tr>
    <tr>
      <th>339</th>
      <td>653200000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>和田地区</td>
    </tr>
    <tr>
      <th>340</th>
      <td>654000000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>伊犁哈萨克自治州</td>
    </tr>
    <tr>
      <th>341</th>
      <td>654200000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>塔城地区</td>
    </tr>
    <tr>
      <th>342</th>
      <td>654300000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿勒泰地区</td>
    </tr>
    <tr>
      <th>343</th>
      <td>659000000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>自治区直辖县级行政区划</td>
    </tr>
  </tbody>
</table>




<h4 id="信息写入csv文件-1"><a href="#信息写入csv文件-1" class="headerlink" title="信息写入csv文件"></a>信息写入csv文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_city.to_csv(<span class="string">'city.csv'</span>, sep=<span class="string">','</span>, header=<span class="literal">True</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5、获取区级代码函数—多线程实现"><a href="#5、获取区级代码函数—多线程实现" class="headerlink" title="5、获取区级代码函数—多线程实现"></a>5、获取区级代码函数—多线程实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCounty</span><span class="params">(url_list)</span>:</span></span><br><span class="line">    queue_county = Queue() <span class="comment">#队列</span></span><br><span class="line">    thread_num = <span class="number">10</span> <span class="comment">#进程数</span></span><br><span class="line">    county = [] <span class="comment">#记录区级信息的字典（全局）</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">produce_url</span><span class="params">(url_list)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            queue_county.put(url) <span class="comment"># 生成URL存入队列，等待其他线程提取</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> queue_county.empty(): <span class="comment"># 保证url遍历结束后能退出线程</span></span><br><span class="line">            url = queue_county.get() <span class="comment"># 从队列中获取URL</span></span><br><span class="line">            data = getUrl(url)</span><br><span class="line">            selector = etree.HTML(data)</span><br><span class="line">            countyList = selector.xpath(<span class="string">'//tr[@class="countytr"]'</span>)</span><br><span class="line">            <span class="comment">#下面是爬取每个区的代码、URL</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> countyList:</span><br><span class="line">                countyCode = i.xpath(<span class="string">'td[1]/a/text()'</span>)</span><br><span class="line">                countyLink = i.xpath(<span class="string">'td[1]/a/@href'</span>)</span><br><span class="line">                countyName = i.xpath(<span class="string">'td[2]/a/text()'</span>)</span><br><span class="line">                <span class="comment">#上面得到的是列表形式的，下面将其每一个用字典存储</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(len(countyLink)):</span><br><span class="line">                    countyURL = url[:<span class="number">-9</span>] + countyLink[j]</span><br><span class="line">                    county.append(&#123;<span class="string">'code'</span>:countyCode[j],<span class="string">'link'</span>:countyURL,<span class="string">'name'</span>:countyName[j]&#125;)</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(url_list)</span>:</span></span><br><span class="line">        produce_url(url_list)</span><br><span class="line">    </span><br><span class="line">        ths = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(thread_num):</span><br><span class="line">            th = Thread(target = getData)</span><br><span class="line">            th.start()</span><br><span class="line">            ths.append(th)</span><br><span class="line">        <span class="keyword">for</span> th <span class="keyword">in</span> ths:</span><br><span class="line">            th.join()</span><br><span class="line">            </span><br><span class="line">    run(url_list)</span><br><span class="line">    <span class="keyword">return</span> county</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">county = getCounty(df_city[<span class="string">'link'</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_county = pd.DataFrame(county)</span><br><span class="line">df_county</span><br></pre></td></tr></table></figure>




<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>code</th>
      <th>link</th>
      <th>name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>130702000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>桥东区</td>
    </tr>
    <tr>
      <th>1</th>
      <td>130703000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>桥西区</td>
    </tr>
    <tr>
      <th>2</th>
      <td>130705000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>宣化区</td>
    </tr>
    <tr>
      <th>3</th>
      <td>130706000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>下花园区</td>
    </tr>
    <tr>
      <th>4</th>
      <td>130708000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>万全区</td>
    </tr>
    <tr>
      <th>5</th>
      <td>130709000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>崇礼区</td>
    </tr>
    <tr>
      <th>6</th>
      <td>130722000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>张北县</td>
    </tr>
    <tr>
      <th>7</th>
      <td>130723000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>康保县</td>
    </tr>
    <tr>
      <th>8</th>
      <td>130724000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>沽源县</td>
    </tr>
    <tr>
      <th>9</th>
      <td>130725000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>尚义县</td>
    </tr>
    <tr>
      <th>10</th>
      <td>130726000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>蔚县</td>
    </tr>
    <tr>
      <th>11</th>
      <td>130727000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阳原县</td>
    </tr>
    <tr>
      <th>12</th>
      <td>130602000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>竞秀区</td>
    </tr>
    <tr>
      <th>13</th>
      <td>130606000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>莲池区</td>
    </tr>
    <tr>
      <th>14</th>
      <td>130607000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>满城区</td>
    </tr>
    <tr>
      <th>15</th>
      <td>130608000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>清苑区</td>
    </tr>
    <tr>
      <th>16</th>
      <td>130609000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>徐水区</td>
    </tr>
    <tr>
      <th>17</th>
      <td>130623000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>涞水县</td>
    </tr>
    <tr>
      <th>18</th>
      <td>130624000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阜平县</td>
    </tr>
    <tr>
      <th>19</th>
      <td>130626000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>定兴县</td>
    </tr>
    <tr>
      <th>20</th>
      <td>130627000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>唐县</td>
    </tr>
    <tr>
      <th>21</th>
      <td>130628000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>高阳县</td>
    </tr>
    <tr>
      <th>22</th>
      <td>130629000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>容城县</td>
    </tr>
    <tr>
      <th>23</th>
      <td>130630000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>涞源县</td>
    </tr>
    <tr>
      <th>24</th>
      <td>130631000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>望都县</td>
    </tr>
    <tr>
      <th>25</th>
      <td>130632000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>安新县</td>
    </tr>
    <tr>
      <th>26</th>
      <td>130633000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>易县</td>
    </tr>
    <tr>
      <th>27</th>
      <td>130634000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>曲阳县</td>
    </tr>
    <tr>
      <th>28</th>
      <td>130635000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>蠡县</td>
    </tr>
    <tr>
      <th>29</th>
      <td>130636000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>顺平县</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2822</th>
      <td>653128000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>岳普湖县</td>
    </tr>
    <tr>
      <th>2823</th>
      <td>653129000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>伽师县</td>
    </tr>
    <tr>
      <th>2824</th>
      <td>654221000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>额敏县</td>
    </tr>
    <tr>
      <th>2825</th>
      <td>652901000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿克苏市</td>
    </tr>
    <tr>
      <th>2826</th>
      <td>654223000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>沙湾县</td>
    </tr>
    <tr>
      <th>2827</th>
      <td>652922000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>温宿县</td>
    </tr>
    <tr>
      <th>2828</th>
      <td>653130000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>巴楚县</td>
    </tr>
    <tr>
      <th>2829</th>
      <td>654224000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>托里县</td>
    </tr>
    <tr>
      <th>2830</th>
      <td>652923000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>库车县</td>
    </tr>
    <tr>
      <th>2831</th>
      <td>654225000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>裕民县</td>
    </tr>
    <tr>
      <th>2832</th>
      <td>653131000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>塔什库尔干塔吉克自治县</td>
    </tr>
    <tr>
      <th>2833</th>
      <td>654226000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>和布克赛尔蒙古自治县</td>
    </tr>
    <tr>
      <th>2834</th>
      <td>652924000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>沙雅县</td>
    </tr>
    <tr>
      <th>2835</th>
      <td>652925000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>新和县</td>
    </tr>
    <tr>
      <th>2836</th>
      <td>652926000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>拜城县</td>
    </tr>
    <tr>
      <th>2837</th>
      <td>652927000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>乌什县</td>
    </tr>
    <tr>
      <th>2838</th>
      <td>652928000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿瓦提县</td>
    </tr>
    <tr>
      <th>2839</th>
      <td>652929000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>柯坪县</td>
    </tr>
    <tr>
      <th>2840</th>
      <td>659001000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>石河子市</td>
    </tr>
    <tr>
      <th>2841</th>
      <td>659002000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿拉尔市</td>
    </tr>
    <tr>
      <th>2842</th>
      <td>659003000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>图木舒克市</td>
    </tr>
    <tr>
      <th>2843</th>
      <td>659004000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>五家渠市</td>
    </tr>
    <tr>
      <th>2844</th>
      <td>659006000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>铁门关市</td>
    </tr>
    <tr>
      <th>2845</th>
      <td>654301000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿勒泰市</td>
    </tr>
    <tr>
      <th>2846</th>
      <td>654321000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>布尔津县</td>
    </tr>
    <tr>
      <th>2847</th>
      <td>654322000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>富蕴县</td>
    </tr>
    <tr>
      <th>2848</th>
      <td>654323000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>福海县</td>
    </tr>
    <tr>
      <th>2849</th>
      <td>654324000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>哈巴河县</td>
    </tr>
    <tr>
      <th>2850</th>
      <td>654325000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>青河县</td>
    </tr>
    <tr>
      <th>2851</th>
      <td>654326000000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>吉木乃县</td>
    </tr>
  </tbody>
</table>




<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>由于多线程的关系，数据的顺序已经被打乱，所以这里按照区代码进行“升序”排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_county_sorted = df_county.sort_values(by = [<span class="string">'code'</span>]) <span class="comment">#按1列进行升序排序</span></span><br></pre></td></tr></table></figure>

<h4 id="信息写入csv文件-2"><a href="#信息写入csv文件-2" class="headerlink" title="信息写入csv文件"></a>信息写入csv文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_county_sorted.to_csv(<span class="string">'county.csv'</span>, sep=<span class="string">','</span>, header=<span class="literal">True</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6、获取街道代码函数—多线程实现"><a href="#6、获取街道代码函数—多线程实现" class="headerlink" title="6、获取街道代码函数—多线程实现"></a>6、获取街道代码函数—多线程实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTown</span><span class="params">(url_list)</span>:</span></span><br><span class="line">    queue_town = Queue() <span class="comment">#队列</span></span><br><span class="line">    thread_num = <span class="number">50</span> <span class="comment">#进程数</span></span><br><span class="line">    town = [] <span class="comment">#记录街道信息的字典（全局）</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">produce_url</span><span class="params">(url_list)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            queue_town.put(url) <span class="comment"># 生成URL存入队列，等待其他线程提取</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> queue_town.empty(): <span class="comment"># 保证url遍历结束后能退出线程</span></span><br><span class="line">            url = queue_town.get() <span class="comment"># 从队列中获取URL</span></span><br><span class="line">            data = getUrl(url)</span><br><span class="line">            selector = etree.HTML(data)</span><br><span class="line">            townList = selector.xpath(<span class="string">'//tr[@class="towntr"]'</span>)</span><br><span class="line">            <span class="comment">#下面是爬取每个区的代码、URL</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> townList:</span><br><span class="line">                townCode = i.xpath(<span class="string">'td[1]/a/text()'</span>)</span><br><span class="line">                townLink = i.xpath(<span class="string">'td[1]/a/@href'</span>)</span><br><span class="line">                townName = i.xpath(<span class="string">'td[2]/a/text()'</span>)</span><br><span class="line">                <span class="comment">#上面得到的是列表形式的，下面将其每一个用字典存储</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(len(townLink)):</span><br><span class="line">                    townURL = url[:<span class="number">-11</span>] + townLink[j]</span><br><span class="line">                    town.append(&#123;<span class="string">'code'</span>:townCode[j],<span class="string">'link'</span>:townURL,<span class="string">'name'</span>:townName[j]&#125;)</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(url_list)</span>:</span></span><br><span class="line">        produce_url(url_list)</span><br><span class="line">    </span><br><span class="line">        ths = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(thread_num):</span><br><span class="line">            th = Thread(target = getData)</span><br><span class="line">            th.start()</span><br><span class="line">            ths.append(th)</span><br><span class="line">        <span class="keyword">for</span> th <span class="keyword">in</span> ths:</span><br><span class="line">            th.join()</span><br><span class="line">            </span><br><span class="line">    run(url_list)</span><br><span class="line">    <span class="keyword">return</span> town</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">town = getTown(df_county[<span class="string">'link'</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_town = pd.DataFrame(town)</span><br><span class="line">df_town</span><br></pre></td></tr></table></figure>




<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>code</th>
      <th>link</th>
      <th>name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>130706001000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>城镇街道办事处</td>
    </tr>
    <tr>
      <th>1</th>
      <td>130706002000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>煤矿街道办事处</td>
    </tr>
    <tr>
      <th>2</th>
      <td>130706200000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>花园乡</td>
    </tr>
    <tr>
      <th>3</th>
      <td>130706201000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>辛庄子乡</td>
    </tr>
    <tr>
      <th>4</th>
      <td>130706202000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>定方水乡</td>
    </tr>
    <tr>
      <th>5</th>
      <td>130706203000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>段家堡乡</td>
    </tr>
    <tr>
      <th>6</th>
      <td>130702001000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>红旗楼街道办事处</td>
    </tr>
    <tr>
      <th>7</th>
      <td>130702002000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>胜利北路街道办事处</td>
    </tr>
    <tr>
      <th>8</th>
      <td>130702003000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>五一路街道办事处</td>
    </tr>
    <tr>
      <th>9</th>
      <td>130702004000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>花园街街道办事处</td>
    </tr>
    <tr>
      <th>10</th>
      <td>130702005000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>工业路街道办事处</td>
    </tr>
    <tr>
      <th>11</th>
      <td>130702101000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>姚家庄镇</td>
    </tr>
    <tr>
      <th>12</th>
      <td>130623001000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>城区社区管理办公室街道办事处</td>
    </tr>
    <tr>
      <th>13</th>
      <td>130624100000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阜平镇</td>
    </tr>
    <tr>
      <th>14</th>
      <td>130624101000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>龙泉关镇</td>
    </tr>
    <tr>
      <th>15</th>
      <td>130626100000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>定兴镇</td>
    </tr>
    <tr>
      <th>16</th>
      <td>130623100000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>涞水镇</td>
    </tr>
    <tr>
      <th>17</th>
      <td>130624102000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>平阳镇</td>
    </tr>
    <tr>
      <th>18</th>
      <td>130624103000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>城南庄镇</td>
    </tr>
    <tr>
      <th>19</th>
      <td>130624104000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>天生桥镇</td>
    </tr>
    <tr>
      <th>20</th>
      <td>130624105000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>王林口镇</td>
    </tr>
    <tr>
      <th>21</th>
      <td>130624202000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>台峪乡</td>
    </tr>
    <tr>
      <th>22</th>
      <td>130624203000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>大台乡</td>
    </tr>
    <tr>
      <th>23</th>
      <td>130624204000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>史家寨乡</td>
    </tr>
    <tr>
      <th>24</th>
      <td>130624205000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>砂窝乡</td>
    </tr>
    <tr>
      <th>25</th>
      <td>130724100000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>平定堡镇</td>
    </tr>
    <tr>
      <th>26</th>
      <td>130724101000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>小厂镇</td>
    </tr>
    <tr>
      <th>27</th>
      <td>130724102000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>黄盖淖镇</td>
    </tr>
    <tr>
      <th>28</th>
      <td>130724103000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>九连城镇</td>
    </tr>
    <tr>
      <th>29</th>
      <td>130724200000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>高山堡乡</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>42532</th>
      <td>659002509000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>兵团十六团</td>
    </tr>
    <tr>
      <th>42533</th>
      <td>659002511000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>兵团第一师水利水电工程处</td>
    </tr>
    <tr>
      <th>42534</th>
      <td>659002512000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>兵团第一师塔里木灌区水利管理处</td>
    </tr>
    <tr>
      <th>42535</th>
      <td>659002513000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿拉尔农场</td>
    </tr>
    <tr>
      <th>42536</th>
      <td>659002514000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>兵团第一师幸福农场</td>
    </tr>
    <tr>
      <th>42537</th>
      <td>659002515000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>中心监狱</td>
    </tr>
    <tr>
      <th>42538</th>
      <td>659002516000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>兵团一团</td>
    </tr>
    <tr>
      <th>42539</th>
      <td>659002517000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>兵团农一师沙井子水利管理处</td>
    </tr>
    <tr>
      <th>42540</th>
      <td>659002518000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>西工业园区管理委员会</td>
    </tr>
    <tr>
      <th>42541</th>
      <td>659002519000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>兵团二团</td>
    </tr>
    <tr>
      <th>42542</th>
      <td>659002520000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>兵团三团</td>
    </tr>
    <tr>
      <th>42543</th>
      <td>522701001000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>广惠街道办事处</td>
    </tr>
    <tr>
      <th>42544</th>
      <td>522701002000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>文峰街道办事处</td>
    </tr>
    <tr>
      <th>42545</th>
      <td>522701004000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>小围寨街道办事处</td>
    </tr>
    <tr>
      <th>42546</th>
      <td>522701005000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>沙包堡街道办事处</td>
    </tr>
    <tr>
      <th>42547</th>
      <td>522701006000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>绿茵湖街道办事处</td>
    </tr>
    <tr>
      <th>42548</th>
      <td>522701106000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>墨冲镇</td>
    </tr>
    <tr>
      <th>42549</th>
      <td>522701107000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>平浪镇</td>
    </tr>
    <tr>
      <th>42550</th>
      <td>522701110000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>毛尖镇</td>
    </tr>
    <tr>
      <th>42551</th>
      <td>522701111000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>匀东镇</td>
    </tr>
    <tr>
      <th>42552</th>
      <td>522701208000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>归兰水族乡</td>
    </tr>
    <tr>
      <th>42553</th>
      <td>652928100000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿瓦提镇</td>
    </tr>
    <tr>
      <th>42554</th>
      <td>652928101000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>乌鲁却勒镇</td>
    </tr>
    <tr>
      <th>42555</th>
      <td>652928102000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>拜什艾日克镇</td>
    </tr>
    <tr>
      <th>42556</th>
      <td>652928200000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿依巴格乡</td>
    </tr>
    <tr>
      <th>42557</th>
      <td>652928201000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>塔木托格拉克乡</td>
    </tr>
    <tr>
      <th>42558</th>
      <td>652928202000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>英艾日克乡</td>
    </tr>
    <tr>
      <th>42559</th>
      <td>652928203000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>多浪乡</td>
    </tr>
    <tr>
      <th>42560</th>
      <td>652928204000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>巴格托格拉克乡</td>
    </tr>
    <tr>
      <th>42561</th>
      <td>652928405000</td>
      <td>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhf...</td>
      <td>阿克苏监狱</td>
    </tr>
  </tbody>
</table>





<h4 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h4><p>由于多线程的关系，数据的顺序已经被打乱，所以这里按照街道代码进行“升序”排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_town_sorted = df_town.sort_values(by = [<span class="string">'code'</span>]) <span class="comment">#按1列进行升序排序</span></span><br></pre></td></tr></table></figure>

<h4 id="信息写入csv文件-3"><a href="#信息写入csv文件-3" class="headerlink" title="信息写入csv文件"></a>信息写入csv文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_town_sorted.to_csv(<span class="string">'town.csv'</span>, sep=<span class="string">','</span>, header=<span class="literal">True</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7、获取居委会代码函数—多线程实现"><a href="#7、获取居委会代码函数—多线程实现" class="headerlink" title="7、获取居委会代码函数—多线程实现"></a>7、获取居委会代码函数—多线程实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getVillage</span><span class="params">(url_list)</span>:</span></span><br><span class="line">    queue_village = Queue() <span class="comment">#队列</span></span><br><span class="line">    thread_num = <span class="number">200</span> <span class="comment">#进程数</span></span><br><span class="line">    town = [] <span class="comment">#记录街道信息的字典（全局）</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">produce_url</span><span class="params">(url_list)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            queue_village.put(url) <span class="comment"># 生成URL存入队列，等待其他线程提取</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> queue_village.empty(): <span class="comment"># 保证url遍历结束后能退出线程</span></span><br><span class="line">            url = queue_village.get() <span class="comment"># 从队列中获取URL</span></span><br><span class="line">            data = getUrl(url)</span><br><span class="line">            selector = etree.HTML(data)</span><br><span class="line">            villageList = selector.xpath(<span class="string">'//tr[@class="villagetr"]'</span>)</span><br><span class="line">            <span class="comment">#下面是爬取每个区的代码、URL</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> villageList:</span><br><span class="line">                villageCode = i.xpath(<span class="string">'td[1]/text()'</span>)</span><br><span class="line">                UrbanRuralCode = i.xpath(<span class="string">'td[2]/text()'</span>)</span><br><span class="line">                villageName = i.xpath(<span class="string">'td[3]/text()'</span>)</span><br><span class="line">                <span class="comment">#上面得到的是列表形式的，下面将其每一个用字典存储</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(len(villageCode)):</span><br><span class="line">                    town.append(&#123;<span class="string">'code'</span>:villageCode[j],<span class="string">'UrbanRuralCode'</span>:UrbanRuralCode[j],<span class="string">'name'</span>:villageName[j]&#125;)</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(url_list)</span>:</span></span><br><span class="line">        produce_url(url_list)</span><br><span class="line">    </span><br><span class="line">        ths = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(thread_num):</span><br><span class="line">            th = Thread(target = getData)</span><br><span class="line">            th.start()</span><br><span class="line">            ths.append(th)</span><br><span class="line">        <span class="keyword">for</span> th <span class="keyword">in</span> ths:</span><br><span class="line">            th.join()</span><br><span class="line">            </span><br><span class="line">    run(url_list)</span><br><span class="line">    <span class="keyword">return</span> town</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">village = getVillage(df_town[<span class="string">'link'</span>])</span><br></pre></td></tr></table></figure>

<pre><code>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/14/07/24/140724204.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/14/07/27/140727400.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/14/10/29/141029204.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/01/04/150104008.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/14/09/81/140981102.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/01/02/150102001.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/14/09/81/140981210.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/04/21/150421202.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/04/25/150425100.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/04/22/150422401.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/04/02/150402402.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/04/30/150430207.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/01/21/150121105.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/07/22/150722105.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/15/25/26/152526103.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/04/21/210421209.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/04/22/210422108.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/05/02/210502002.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/06/03/210603007.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/05/02/210502010.html
requests fail, retry!
http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/05/03/210503005.html
requests fail, retry!</code></pre><p>由于数据量很大，所以这里我没有爬取完毕。</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>国家统计局统计用区划代码和城乡划分代码爬虫-（一）页面分析</title>
    <url>/archives/a4d70246.html</url>
    <content><![CDATA[<p>本文详细分析了国家统计局统计用区划代码和城乡划分代码爬虫的实现过程，这是第一篇，首先先分析一下页面，为后面的页面解析做准备。</p>
<p>详细的代码开源在GitHub上：<a href="https://github.com/dta0502/NBSPRC-spider" target="_blank" rel="noopener external nofollow noreferrer">NBSPRC-spider</a>。</p>
<iframe src="https://ghbtns.com/github-btn.html?user=dta0502&amp;repo=NBSPRC-spider&amp;type=watch&amp;count=true&amp;size=large" allowtransparency="true" frameborder="0" scrolling="0" width="156px" height="30px"></iframe>
<iframe src="https://ghbtns.com/github-btn.html?user=dta0502&amp;repo=NBSPRC-spider&amp;type=fork&amp;count=true&amp;size=large" allowtransparency="true" frameborder="0" scrolling="0" width="156px" height="30px"></iframe>

<a id="more"></a>

<p>这里我就拿2016年的页面做下分析：<a href="http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html" target="_blank" rel="noopener external nofollow noreferrer">2016年统计用区划代码和城乡划分代码(截止2016年07月31日)</a>。</p>
<h2 id="一、省级页面分析"><a href="#一、省级页面分析" class="headerlink" title="一、省级页面分析"></a>一、省级页面分析</h2><h3 id="1、省级信息提取"><a href="#1、省级信息提取" class="headerlink" title="1、省级信息提取"></a>1、省级信息提取</h3><p>我们进入到<a href="http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html" target="_blank" rel="noopener external nofollow noreferrer">2016年统计用区划代码和城乡划分代码(截止2016年07月31日)</a>这个页面，然后用chrome的“检查”工具看下我们要找的信息在哪。</p>
<p>这里我们需要爬取省级名称、省内市级信息的子链接这两个参数。</p>
<p>我们从图中可以发现，左边页面每一行对应的XPath路径为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//tr[@class="provincetr"]</span><br></pre></td></tr></table></figure>

<p>然后一行中每个省的信息在下一级的td标签内：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">td/a/text()</span><br><span class="line">td/a/@href</span><br></pre></td></tr></table></figure>

<img src="/archives/a4d70246/%E7%9C%81%E7%BA%A7%E9%A1%B5%E9%9D%A2%E5%88%86%E6%9E%90.png" class="" title="省级页面分析">


<h3 id="2、下级链接获取"><a href="#2、下级链接获取" class="headerlink" title="2、下级链接获取"></a>2、下级链接获取</h3><p>省级页面的URL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.stats.gov.cn&#x2F;tjsj&#x2F;tjbz&#x2F;tjyqhdmhcxhfdm&#x2F;2016&#x2F;index.html</span><br></pre></td></tr></table></figure>
<p>下级页面的URL（我这里以<code>浙江省</code>为例）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.stats.gov.cn&#x2F;tjsj&#x2F;tjbz&#x2F;tjyqhdmhcxhfdm&#x2F;2016&#x2F;33.html</span><br></pre></td></tr></table></figure>
<p>页面中提取到的信息（我这里以<code>浙江省</code>为例）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">33.html</span><br></pre></td></tr></table></figure>

<p>所以我们可以通过如下方式获取真实的URL保存到一个列表中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html"</span></span><br><span class="line"><span class="comment"># provinceLink = "33.html"</span></span><br><span class="line">provinceURL = url[:<span class="number">-10</span>] + provinceLink</span><br></pre></td></tr></table></figure>

<h2 id="二、市级页面分析"><a href="#二、市级页面分析" class="headerlink" title="二、市级页面分析"></a>二、市级页面分析</h2><h3 id="1、市级信息提取"><a href="#1、市级信息提取" class="headerlink" title="1、市级信息提取"></a>1、市级信息提取</h3><p>我们进入到<a href="http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/33.html" target="_blank" rel="noopener external nofollow noreferrer">浙江省</a>中。具体的分析跟上面的省级页面分析类似，不再赘述。下面是市级页面分析图：</p>
<img src="/archives/a4d70246/%E5%B8%82%E7%BA%A7%E9%A1%B5%E9%9D%A2%E5%88%86%E6%9E%90.png" class="" title="市级页面分析">


<h3 id="2、下级链接获取-1"><a href="#2、下级链接获取-1" class="headerlink" title="2、下级链接获取"></a>2、下级链接获取</h3><p>市级页面的URL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.stats.gov.cn&#x2F;tjsj&#x2F;tjbz&#x2F;tjyqhdmhcxhfdm&#x2F;2016&#x2F;33.html</span><br></pre></td></tr></table></figure>
<p>下级页面的URL（我这里以<code>杭州市</code>为例）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.stats.gov.cn&#x2F;tjsj&#x2F;tjbz&#x2F;tjyqhdmhcxhfdm&#x2F;2016&#x2F;33&#x2F;3301.html</span><br></pre></td></tr></table></figure>
<p>页面中提取到的信息（我这里以<code>杭州市</code>为例）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">33&#x2F;3301.html</span><br></pre></td></tr></table></figure>

<h2 id="三、区级页面分析"><a href="#三、区级页面分析" class="headerlink" title="三、区级页面分析"></a>三、区级页面分析</h2><h3 id="1、区级信息提取"><a href="#1、区级信息提取" class="headerlink" title="1、区级信息提取"></a>1、区级信息提取</h3><p>我们进入到<a href="http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/33/3301.html" target="_blank" rel="noopener external nofollow noreferrer">杭州市</a>中。具体的分析跟上面的省级页面分析类似，不再赘述。下面是区级页面分析图：</p>
<img src="/archives/a4d70246/%E5%8C%BA%E7%BA%A7%E9%A1%B5%E9%9D%A2%E5%88%86%E6%9E%90.png" class="" title="区级页面分析">


<h3 id="2、下级链接获取-2"><a href="#2、下级链接获取-2" class="headerlink" title="2、下级链接获取"></a>2、下级链接获取</h3><p>区级页面的URL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.stats.gov.cn&#x2F;tjsj&#x2F;tjbz&#x2F;tjyqhdmhcxhfdm&#x2F;2016&#x2F;33&#x2F;3301.html</span><br></pre></td></tr></table></figure>
<p>下级页面的URL（我这里以<code>上城区</code>为例）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.stats.gov.cn&#x2F;tjsj&#x2F;tjbz&#x2F;tjyqhdmhcxhfdm&#x2F;2016&#x2F;33&#x2F;01&#x2F;330102.html</span><br></pre></td></tr></table></figure>
<p>页面中提取到的信息（我这里以<code>上城区</code>为例）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01&#x2F;330102.html</span><br></pre></td></tr></table></figure>

<h2 id="四、街道页面分析"><a href="#四、街道页面分析" class="headerlink" title="四、街道页面分析"></a>四、街道页面分析</h2><h3 id="1、街道信息提取"><a href="#1、街道信息提取" class="headerlink" title="1、街道信息提取"></a>1、街道信息提取</h3><p>我们进入到<a href="http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/33/01/330102.html" target="_blank" rel="noopener external nofollow noreferrer">上城区</a>中。具体的分析跟上面的省级页面分析类似，不再赘述。下面是街道页面分析图：</p>
<img src="/archives/a4d70246/%E8%A1%97%E9%81%93%E9%A1%B5%E9%9D%A2%E5%88%86%E6%9E%90.png" class="" title="街道页面分析">


<h3 id="2、下级链接获取-3"><a href="#2、下级链接获取-3" class="headerlink" title="2、下级链接获取"></a>2、下级链接获取</h3><p>街道页面的URL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.stats.gov.cn&#x2F;tjsj&#x2F;tjbz&#x2F;tjyqhdmhcxhfdm&#x2F;2016&#x2F;33&#x2F;01&#x2F;330102.html</span><br></pre></td></tr></table></figure>
<p>街道页面的URL（我这里以<code>湖滨街道</code>为例）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.stats.gov.cn&#x2F;tjsj&#x2F;tjbz&#x2F;tjyqhdmhcxhfdm&#x2F;2016&#x2F;33&#x2F;01&#x2F;02&#x2F;330102003.html</span><br></pre></td></tr></table></figure>
<p>页面中提取到的信息（我这里以<code>湖滨街道</code>为例）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">02&#x2F;330102003.html</span><br></pre></td></tr></table></figure>

<h2 id="五、居委会页面分析"><a href="#五、居委会页面分析" class="headerlink" title="五、居委会页面分析"></a>五、居委会页面分析</h2><h3 id="1、居委会信息提取"><a href="#1、居委会信息提取" class="headerlink" title="1、居委会信息提取"></a>1、居委会信息提取</h3><p>我们进入到<a href="http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/33/01/02/330102003.html" target="_blank" rel="noopener external nofollow noreferrer">湖滨街道</a>中。具体的分析跟上面的省级页面分析类似，不再赘述。下面是居委会页面分析图：</p>
<img src="/archives/a4d70246/%E5%B1%85%E5%A7%94%E4%BC%9A%E9%A1%B5%E9%9D%A2%E5%88%86%E6%9E%90.png" class="" title="居委会页面分析">


<p>这里已经到了最底层，没有下级链接了。</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python合并多个csv文件</title>
    <url>/archives/616c581b.html</url>
    <content><![CDATA[<p>有时候需要将多个列名均相同的csv文件合成一个。</p>
<p>首先需要导入并合并多个csv文件，但是这会把除第一个csv文件外的列名也当成一行数据，这时候需要进行去重，删除所有的列名，最后根据需要来决定是否对新生成的DataFrame对象进行排序后输出csv。</p>
<a id="more"></a>

<h2 id="一、导入所需的包"><a href="#一、导入所需的包" class="headerlink" title="一、导入所需的包"></a>一、导入所需的包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> glob</span><br></pre></td></tr></table></figure>

<h2 id="二、合并多个csv文件"><a href="#二、合并多个csv文件" class="headerlink" title="二、合并多个csv文件"></a>二、合并多个csv文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">csv_list = glob.glob(<span class="string">'*.csv'</span>) <span class="comment">#查看同文件夹下的csv文件数</span></span><br><span class="line">print(<span class="string">u'共发现%s个CSV文件'</span>% len(csv_list))</span><br><span class="line">print(<span class="string">u'正在处理............'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> csv_list: <span class="comment">#循环读取同文件夹下的csv文件</span></span><br><span class="line">    fr = open(i,<span class="string">'rb'</span>).read()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.csv'</span>,<span class="string">'ab'</span>) <span class="keyword">as</span> f: <span class="comment">#将结果保存为result.csv</span></span><br><span class="line">        f.write(fr)</span><br><span class="line">print(<span class="string">u'合并完毕！'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>共发现9个CSV文件
正在处理............
合并完毕！</code></pre><h2 id="三、去重函数"><a href="#三、去重函数" class="headerlink" title="三、去重函数"></a>三、去重函数</h2><p>这个函数将重复的内容去掉，主要是去表头。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"result.csv"</span>,header=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;
RangeIndex: 659867 entries, 0 to 659866
Data columns (total 3 columns):
UrbanRuralCode    659867 non-null object
code              659867 non-null object
name              659867 non-null object
dtypes: object(3)
memory usage: 15.1+ MB</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IsDuplicated = df.duplicated()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">in</span> IsDuplicated</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre><p>这说明了这个DataFrame格式的数据含有重复项。</p>
<p><strong>DataFrame.drop_duplicates函数的使用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DataFrame.drop_duplicates(subset=<span class="literal">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>subset : column label or sequence of labels, optional<br>用来指定特定的列，默认所有列</li>
<li>keep : {‘first’, ‘last’, False}, default ‘first’<br>删除重复项并保留第一次出现的项</li>
<li>inplace : boolean, default False<br>是直接在原来数据上修改还是保留一个副本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datalist = df.drop_duplicates(keep = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datalist.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;
Int64Index: 659859 entries, 0 to 659866
Data columns (total 3 columns):
UrbanRuralCode    659859 non-null object
code              659859 non-null object
name              659859 non-null object
dtypes: object(3)
memory usage: 20.1+ MB</code></pre><h2 id="四、排序函数"><a href="#四、排序函数" class="headerlink" title="四、排序函数"></a>四、排序函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datalist_sorted = datalist.sort_values(by = [<span class="string">'code'</span>]) <span class="comment">#按1列进行升序排序</span></span><br></pre></td></tr></table></figure>

<h2 id="五、结果写入csv文件"><a href="#五、结果写入csv文件" class="headerlink" title="五、结果写入csv文件"></a>五、结果写入csv文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datalist_sorted.to_csv(<span class="string">"village_all.csv"</span>, sep = <span class="string">','</span>, header = <span class="literal">True</span>,index = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h2 id="六、问题"><a href="#六、问题" class="headerlink" title="六、问题"></a>六、问题</h2><h3 id="1、Python读取文件问题"><a href="#1、Python读取文件问题" class="headerlink" title="1、Python读取文件问题"></a>1、Python读取文件问题</h3><h4 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0x80 in position 205: illegal multibyte sequence&quot;</span><br></pre></td></tr></table></figure>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><blockquote><ul>
<li><code>fr = open(i,&#39;r&#39;).read()</code> 改为 <code>fr = open(i,&#39;rb&#39;).read()</code></li>
<li><code>with open(&#39;result.csv&#39;,&#39;a&#39;) as f:</code> 改为 <code>with open(&#39;result.csv&#39;,&#39;ab&#39;) as f:</code></li>
</ul>
</blockquote>

<h3 id="2、重复值问题"><a href="#2、重复值问题" class="headerlink" title="2、重复值问题"></a>2、重复值问题</h3><p>这里我合并了9个csv文件，检查最后合并结果发现，里面还有<strong>一个列名</strong>。这是因为9个为文件，其中8个的列名被认为是DataFrame的值，第1个的列名依旧为列名，然后再去重的过程中，8个相同值被保留了1个，所以这会导致最后的csv文件多了<strong>一个列名</strong>。</p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><blockquote><p><code>IsDuplicated = df.duplicated()</code> 改为 <code>IsDuplicated = df.duplicated(keep = False)</code> #重复数据全部去除</p>
</blockquote>

]]></content>
      <categories>
        <category>Python</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>XPath无法匹配tbody标签</title>
    <url>/archives/d8ac59cc.html</url>
    <content><![CDATA[<p>我在用XPath匹配元素的时候，发现老是出错，后来发现是<code>&lt;tbody&gt;</code>标签上有文章。</p>
<a id="more"></a>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>我使用Chrome的元素审查对网页进行分析来得到XPath路径，但是<strong>Chrome会对网页源码进行加工，在<code>&lt;table&gt;</code>标签中，如果源码中没有写<code>&lt;tbody&gt;</code>标签，在元素审查和查看网页源代码中还是会将<code>&lt;tbody&gt;</code>强行添加上</strong>。</p>
<p>当然，若源代码中没有<code>&lt;tbody&gt;</code>，而我们信任Chrome而把它添进XPath的话，是不会匹配出想要的结果的。</p>
<p>我们可以通过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(response)</span><br></pre></td></tr></table></figure>
<p>对源代码进行检查，确定有没有<code>&lt;tbody&gt;</code>标签后，再得出XPath。</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>问题</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Yilia进阶笔记</title>
    <url>/archives/9a232bbe.html</url>
    <content><![CDATA[<p>这是我在Yilia这个主题下的参考很多前人的经验并且在个人博客上验证的功能的记录。其中实现了：</p>
<ul>
<li><strong>多层分类页面的构建</strong></li>
<li><strong><code>点击所有文章提示缺失模块</code>问题解决</strong></li>
<li><strong>头像/图标设置</strong></li>
<li><strong>gitalk评论系统添加</strong></li>
<li><strong>侧边栏添加音乐</strong></li>
<li><strong>页面/文章访问量添加</strong></li>
<li><strong>网站运行时间添加</strong></li>
<li><strong>文章字数/阅读时长添加</strong></li>
<li><strong>文章版权信息添加</strong></li>
<li><strong>SEO优化（添加sitemap、url持久化）</strong></li>
<li><strong>鼠标点击小红心设置</strong></li>
<li><strong><code>代码块行号错乱</code>问题解决</strong></li>
<li><strong>相册功能添加</strong></li>
<li><strong>RSS功能添加</strong></li>
<li><strong>谷歌统计添加</strong></li>
</ul>
<a id="more"></a>

<h2 id="一、GitHub下载Yilia主题"><a href="#一、GitHub下载Yilia主题" class="headerlink" title="一、GitHub下载Yilia主题"></a>一、GitHub下载Yilia主题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /d/document/GitHub/hexo/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>

<p>也可以直接去GitHub上下载zip文件，然后解压放在theme文件夹下面。</p>
<h2 id="二、分类的构建"><a href="#二、分类的构建" class="headerlink" title="二、分类的构建"></a>二、分类的构建</h2><h3 id="1、添加categories链接"><a href="#1、添加categories链接" class="headerlink" title="1、添加categories链接"></a>1、添加categories链接</h3><p>打开<code>yilia/_config.yml</code>文件，menu处做出以下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: &#x2F;</span><br><span class="line">  分类: &#x2F;categories</span><br><span class="line">  归档: &#x2F;archives</span><br></pre></td></tr></table></figure>

<h3 id="2、分类页面的构建"><a href="#2、分类页面的构建" class="headerlink" title="2、分类页面的构建"></a>2、分类页面的构建</h3><ul>
<li>新建categories页面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>该命令在source目录下生成一个categories目录，categories目录下有一个index.md文件。</p>
<ul>
<li>修改categories/index.md为：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2018-06-11 10:13:21</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ul>
<li>生成html</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>访问 <code>http://localhost:4000/categories/</code> ，即可看到categories页面，只不过现在的页面只有标题。</p>
<h3 id="3、修改-yilia-主题"><a href="#3、修改-yilia-主题" class="headerlink" title="3、修改 yilia 主题"></a>3、修改 yilia 主题</h3><p>修改<code>yilia\source\main.0cf68a.css</code>，将下面的内容添加进去：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">category-all-page</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">40px</span> <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">70vh</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-all-title</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-all</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list-item-list-item</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list-item-list-count</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: $grey;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list-item-list-count</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" ("</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list-item-list-count</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">") "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list-item</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list-count</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: $grey;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list-count</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" ("</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list-count</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">") "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.category-all-page</span> <span class="selector-class">.category-list-child</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、多层分类"><a href="#4、多层分类" class="headerlink" title="4、多层分类"></a>4、多层分类</h3><p>新建<code>yilia/layout/categories.ejs</code>，输入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"article article-type-post show"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"article-header"</span> <span class="attr">style</span>=<span class="string">"border-bottom: 1px solid #ccc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"article-title"</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">page.title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">site.categories.length</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"category-all-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>共计<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">site.categories.length</span> %&gt;</span><span class="symbol">&amp;nbsp;</span>个分类<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">list_categories</span>(<span class="attr">site.categories</span>, &#123;</span></span><br><span class="line"><span class="tag">      <span class="attr">show_count:</span> <span class="attr">true</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">class:</span> '<span class="attr">category-list-item</span>',</span></span><br><span class="line"><span class="tag">      <span class="attr">style:</span> '<span class="attr">list</span>',</span></span><br><span class="line"><span class="tag">      <span class="attr">depth:</span> <span class="attr">2</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">separator:</span> ''</span></span><br><span class="line"><span class="tag">    &#125;) %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、修改自己的文章"><a href="#5、修改自己的文章" class="headerlink" title="5、修改自己的文章"></a>5、修改自己的文章</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: HTML入门笔记</span><br><span class="line"></span><br><span class="line">copyright: true</span><br><span class="line">date: 2018-11-23 21:07:15</span><br><span class="line"></span><br><span class="line">toc: true</span><br><span class="line">tags: [HTML,前端]</span><br><span class="line">categories: [前端,HTML]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h2 id="三、yilia下的-config-yml完善"><a href="#三、yilia下的-config-yml完善" class="headerlink" title="三、yilia下的_config.yml完善"></a>三、yilia下的_config.yml完善</h2><p><code>subnav</code>中添加github、知乎、mail等链接。</p>
<p><code>smart_menu</code>处去掉friends：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smart_menu:</span><br><span class="line">  innerArchive: &#39;所有文章&#39;</span><br><span class="line">  friends: false</span><br><span class="line">  aboutme: &#39;关于我&#39;</span><br></pre></td></tr></table></figure>

<p><code>aboutme</code>处添加自己的介绍：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aboutme: 一只菜鸡</span><br></pre></td></tr></table></figure>



<h2 id="四、点击所有文章提示缺失模块"><a href="#四、点击所有文章提示缺失模块" class="headerlink" title="四、点击所有文章提示缺失模块"></a>四、点击所有文章提示缺失模块</h2><h3 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h3><p>点击<code>所有文章</code>提示缺失模块</p>
<h3 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h3><ul>
<li>确保node版本大于6.2</li>
<li>在博客根目录（注意不是yilia根目录）执行以下命令：<code>npm install hexo-generator-json-content --save</code></li>
<li>在hexo的blog根目录<code>_config.yml</code>里添加配置（保持格式，不要改动任何空格缩进），关掉<code>hexo s</code>之后执行<code>hexo g</code>重新生成：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  meta: false</span><br><span class="line">  pages: false</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    date: true</span><br><span class="line">    path: true</span><br><span class="line">    text: false</span><br><span class="line">    raw: false</span><br><span class="line">    content: false</span><br><span class="line">    slug: false</span><br><span class="line">    updated: false</span><br><span class="line">    comments: false</span><br><span class="line">    link: false</span><br><span class="line">    permalink: false</span><br><span class="line">    excerpt: false</span><br><span class="line">    categories: false</span><br><span class="line">    tags: true</span><br></pre></td></tr></table></figure>


<h2 id="五、头像-图标设置"><a href="#五、头像-图标设置" class="headerlink" title="五、头像/图标设置"></a>五、头像/图标设置</h2><h3 id="1、存放位置"><a href="#1、存放位置" class="headerlink" title="1、存放位置"></a>1、存放位置</h3><p>头像、图标图片的存放位置是<code>/themes/yilia/source/</code>下任意位置，可以自己新建一个文件夹存放，我存放在<code>assets</code>文件夹下。</p>
<h3 id="2、配置设置"><a href="#2、配置设置" class="headerlink" title="2、配置设置"></a>2、配置设置</h3><p>配置文件为<code>/themes/yilia/_config.yml</code>。</p>
<ul>
<li>设置头像为配置文件中<code>avatar</code>一项</li>
<li>设置图标为配置文件中<code>favicon</code>一项</li>
</ul>
<p>由于设置路径的根目录<code>/themes/yilia/source/</code>，因此，我的头像存放的地址是<code>/themes/yilia/source/assets/me.png</code>，设置则为<code>avatar: /assets/me.png</code>。</p>
<p>图标同理。</p>
<h2 id="六、添加评论"><a href="#六、添加评论" class="headerlink" title="六、添加评论"></a>六、添加评论</h2><p>Gitalk 是一个基于 Github Issue 和 Preact 开发的评论插件。</p>
<p>主页：<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></p>
<p>gitalk 需要添加的部分主页有详细介绍，这里只谈针对yilia需要的改动。</p>
<h3 id="1、创建gitalk-ejs"><a href="#1、创建gitalk-ejs" class="headerlink" title="1、创建gitalk.ejs"></a>1、创建gitalk.ejs</h3><p>在你的hexo目录<code>/theme/yilia/layout/_partial/post/</code>目录下创建<code>gitalk.ejs</code>并写入如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="actionscript">  clientID: <span class="string">'&lt;%=theme.gitalk.clientID%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">  clientSecret: <span class="string">'&lt;%=theme.gitalk.clientSecret%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">  repo: <span class="string">'&lt;%=theme.gitalk.repo%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">  owner: <span class="string">'&lt;%=theme.gitalk.owner%&gt;'</span>,</span></span><br><span class="line"><span class="actionscript">  admin: [<span class="string">'&lt;%=theme.gitalk.admin%&gt;'</span>],</span></span><br><span class="line"><span class="javascript">  id: md5(<span class="built_in">window</span>.location.pathname),</span></span><br><span class="line"><span class="javascript">  distractionFreeMode: <span class="xml"><span class="tag">&lt;<span class="name">%=theme.gitalk.distractionFreeMode%</span>&gt;</span></span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">gitalk.render(<span class="string">'gitalk-container'</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、修改article-ejs"><a href="#2、修改article-ejs" class="headerlink" title="2、修改article.ejs"></a>2、修改article.ejs</h3><p>在你的hexo目录<code>/theme/yilia/layout/_partial/article.ejs</code>文件中最后一行<code>“&lt;% } %&gt;”</code>之前添加如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">theme.gitalk.enable</span> &amp;&amp; <span class="attr">theme.gitalk.distractionFreeMode</span>)&#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">gitalk</span>', &#123;</span></span><br><span class="line"><span class="tag">      <span class="attr">key:</span> <span class="attr">post.slug</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">title:</span> <span class="attr">post.title</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">url:</span> <span class="attr">config.url</span>+<span class="attr">url_for</span>(<span class="attr">post.path</span>)</span></span><br><span class="line"><span class="tag">    &#125;) %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、添加配置文件"><a href="#3、添加配置文件" class="headerlink" title="3、添加配置文件"></a>3、添加配置文件</h3><p>在yilia的配置文件<code>_config.yml</code>中gitment配置下面添加如下配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#6. Gitalk</span><br><span class="line">gitalk: </span><br><span class="line">  enable: true    #用来做启用判断可以不用</span><br><span class="line">  clientID: &#39;your clientID&#39;    #Github上生成的</span><br><span class="line">  clientSecret: &#39;your clientSecret&#39;   #同上</span><br><span class="line">  repo: git_comment    #评论所在的github project</span><br><span class="line">  owner: findtheonlyway    #github用户名</span><br><span class="line">  admin: erbiduo    #可以初始化评论issue的github账户名称</span><br><span class="line">  distractionFreeMode: true</span><br></pre></td></tr></table></figure>



<h2 id="七、侧边栏添加音乐"><a href="#七、侧边栏添加音乐" class="headerlink" title="七、侧边栏添加音乐"></a>七、侧边栏添加音乐</h2><h3 id="1、网易云音乐外链播放器生成"><a href="#1、网易云音乐外链播放器生成" class="headerlink" title="1、网易云音乐外链播放器生成"></a>1、网易云音乐外链播放器生成</h3><p>登录网页版网易云音乐，打开一首歌，点击 “生成外链播放器”。</p>
<h3 id="2、侧栏添加背景音乐"><a href="#2、侧栏添加背景音乐" class="headerlink" title="2、侧栏添加背景音乐"></a>2、侧栏添加背景音乐</h3><p>打开<code>/hexo/themes/yilia/layout/_partial/left-col.ejs</code>文件，把音乐HTML代码粘贴进去，可以添加样式，改变大小，这是我的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"header-nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"social"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">theme.subnav</span>)&#123; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"&lt;%= i %&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(theme.subnav[i]) %&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%= i %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-&lt;%= i %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--音乐播放插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:30px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">240</span> <span class="attr">height</span>=<span class="string">52</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=33035954&amp;auto=1&amp;height=32"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="八、添加页面访问量"><a href="#八、添加页面访问量" class="headerlink" title="八、添加页面访问量"></a>八、添加页面访问量</h2><h3 id="1、添加站点访问量"><a href="#1、添加站点访问量" class="headerlink" title="1、添加站点访问量"></a>1、添加站点访问量</h3><p>下面是个人改变完成后的<code>\themes\yilia\layout\_partial\footer.ejs</code>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer-info"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer-left"</span>&gt;</span></span><br><span class="line">    		<span class="symbol">&amp;copy;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">date</span>(<span class="attr">new</span> <span class="attr">Date</span>(), '<span class="attr">YYYY</span>') %&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.author</span> || <span class="attr">config.title</span> %&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer-right"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">                本站总访问量：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">                本站访客数：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中空格间那部分是额外添加的，这部分处于页脚的右边（原来是主题的说明，这里已删去）。</p>
<h3 id="2、添加文章访问量"><a href="#2、添加文章访问量" class="headerlink" title="2、添加文章访问量"></a>2、添加文章访问量</h3><p>下面是个人改变完成后的<code>\themes\yilia\layout\_partial\article.ejs</code>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"article-header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">title</span>', &#123;<span class="attr">class_name:</span> '<span class="attr">article-title</span>'&#125;) %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">post.noDate</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">date</span>', &#123;<span class="attr">class_name:</span> '<span class="attr">archive-article-date</span>', <span class="attr">date_format:</span> <span class="attr">null</span>&#125;) %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> ( !<span class="attr">index</span> )&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"archive-article-date"</span>&gt;</span></span><br><span class="line">        阅读量 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>正如参考文章所说，空格间那部分是额外添加的，保证了每篇文章都有阅读量统计，同时这里加一个if判断，如果是首页不显示该文章的访问量。</p>
<h2 id="九、Hexo-Yilia网站运行时间"><a href="#九、Hexo-Yilia网站运行时间" class="headerlink" title="九、Hexo-Yilia网站运行时间"></a>九、Hexo-Yilia网站运行时间</h2><p>在<code>hexo/themes/yelee/layout/_partial/footer.ejs</code>文件中<code>&lt;div class=&quot;footer-left&quot;&gt;</code>内（具体位置可自选）加入如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"timeDate"</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span></span><br><span class="line"><span class="actionscript">	<span class="function"><span class="keyword">function</span> <span class="title">createtime</span><span class="params">()</span> </span>&#123; </span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"11/23/2018 20:00:00"</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间 </span></span></span><br><span class="line">		now.setTime(now.getTime()+250); </span><br><span class="line"><span class="javascript">		days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span></span><br><span class="line"><span class="javascript">		hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span></span><br><span class="line"><span class="javascript">		mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span></span><br><span class="line">		seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line"><span class="javascript">		snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span></span><br><span class="line">	&#125; </span><br><span class="line"><span class="actionscript">	setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：日期格式<code>11/23/2018 20:00:00</code>。</p>
<h2 id="十、字数、阅读时长添加"><a href="#十、字数、阅读时长添加" class="headerlink" title="十、字数、阅读时长添加"></a>十、字数、阅读时长添加</h2><h3 id="1、安装hexo-wordcount"><a href="#1、安装hexo-wordcount" class="headerlink" title="1、安装hexo-wordcount"></a>1、安装hexo-wordcount</h3><p>在博客目录下打开Git Bash，输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i –save hexo-wordcount</span><br></pre></td></tr></table></figure>

<h3 id="2、文件配置"><a href="#2、文件配置" class="headerlink" title="2、文件配置"></a>2、文件配置</h3><p>在<code>theme\yilia\layout\_partial\post</code>下创建<code>word.ejs</code>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-keyboard-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>  字数统计: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">post.content</span>) %&gt;</span>字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">      <span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-hourglass-half"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>  阅读时长: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">min2read</span>(<span class="attr">post.content</span>) %&gt;</span>分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在 <code>themes/yilia/layout/_partial/article.ejs</code>中添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-inner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.link</span> || <span class="attr">post.title</span>)&#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"article-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">title</span>', &#123;<span class="attr">class_name:</span> '<span class="attr">article-title</span>'&#125;) %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">post.noDate</span>)&#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">date</span>', &#123;<span class="attr">class_name:</span> '<span class="attr">archive-article-date</span>', <span class="attr">date_format:</span> <span class="attr">null</span>&#125;) %&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需要添加的位置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开始添加字数统计--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">theme.word_count</span> &amp;&amp; !<span class="attr">post.no_word_count</span>)&#123;%&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">word</span>') %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加完成 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、开启功能"><a href="#3、开启功能" class="headerlink" title="3、开启功能"></a>3、开启功能</h3><p>在站点的（不是主题的）<code>_config.yml</code>中添加下面代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 是否开启字数统计</span><br><span class="line">#不需要使用，直接设置值为false，或注释掉</span><br><span class="line">word_count: True</span><br></pre></td></tr></table></figure>



<h2 id="十一、添加版权信息"><a href="#十一、添加版权信息" class="headerlink" title="十一、添加版权信息"></a>十一、添加版权信息</h2><h3 id="1、添加代码"><a href="#1、添加代码" class="headerlink" title="1、添加代码"></a>1、添加代码</h3><p>在<code>themes/yilia/layout/_partial/article.ejs</code>中标注的位置添加代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-entry"</span> <span class="attr">itemprop</span>=<span class="string">"articleBody"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.excerpt</span> &amp;&amp; <span class="attr">index</span>)&#123; %&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.excerpt</span> %&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.excerpt_link</span>) &#123; %&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"article-more-a"</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;#more"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.excerpt_link</span> %&gt;</span> &gt;&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.content</span> %&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">--</span> 在此处添加代码<span class="attr">--</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> ((<span class="attr">theme.reward_type</span> === <span class="string">2</span> || (<span class="attr">theme.reward_type</span> === <span class="string">1</span> &amp;&amp; <span class="attr">post.reward</span>)) &amp;&amp; !<span class="attr">index</span>)&#123; %&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-reward"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"page-reward-btn tooltip-top"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tooltip tooltip-east"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">  <span class="attr">var</span> <span class="attr">sUrl</span> = <span class="string">url.replace(/index\.html$/,</span> '');</span></span><br><span class="line"><span class="tag">  <span class="attr">sUrl</span> = <span class="string">/^(http:|https:)\/\//.test(sUrl)</span> ? <span class="attr">sUrl</span> <span class="attr">:</span> '<span class="attr">https:</span>' + <span class="attr">sUrl</span>;</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> ((<span class="attr">theme.declare_type</span> === <span class="string">2</span> || (<span class="attr">theme.declare_type</span> === <span class="string">1</span> &amp;&amp; <span class="attr">post.declare</span>)) &amp;&amp; !<span class="attr">index</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"declare"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文作者：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">config.author</span> != <span class="string">undefined)&#123;</span> %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.author</span>%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125;<span class="attr">else</span>&#123;%&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>请在博客根目录“_config.yml”中填入正确的“author”<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文链接：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">sUrl</span>%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>版权声明：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    本作品采用</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"&lt;%= theme.licensee_url%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.licensee_name</span>%&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    进行许可。转载请注明出处！</span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">theme.licensee_img</span> != <span class="string">undefined)&#123;</span> %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"&lt;%= theme.licensee_url%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"知识共享许可协议"</span> <span class="attr">style</span>=<span class="string">"border-width:0"</span> <span class="attr">src</span>=<span class="string">"&lt;%= theme.licensee_img%&gt;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123;%&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"declare"</span> <span class="attr">hidden</span>=<span class="string">"hidden"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、版权添加样式"><a href="#2、版权添加样式" class="headerlink" title="2、版权添加样式"></a>2、版权添加样式</h3><p>在<code>yilia/source/main.0cf68a.css</code>添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.declare</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eaeaea</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">3px</span> solid <span class="number">#ff1700</span>;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span>; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、添加配置文件-1"><a href="#3、添加配置文件-1" class="headerlink" title="3、添加配置文件"></a>3、添加配置文件</h3><p>修改<code>themes/yilia/_config.yml</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 版权声明</span><br><span class="line">declare_type: 1</span><br><span class="line">licensee_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;4.0&#x2F;          # 当前应用的版权协议地址。</span><br><span class="line">licensee_name: &#39;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&#39;  # 版权协议的名称</span><br><span class="line">licensee_img: https:&#x2F;&#x2F;i.creativecommons.org&#x2F;l&#x2F;by-nc-sa&#x2F;4.0&#x2F;88x31.png      # 版权协议的Logo</span><br></pre></td></tr></table></figure>

<p>在需要进行版权声明的文章的md文件头部，设置属性declare: true。</p>
<p>版权基础设定：</p>
<ul>
<li>0-关闭声明； </li>
<li>1-文章对应的md文件里有declare: true属性，才有版权声明； </li>
<li>2-所有文章均有版权声明</li>
</ul>
<h3 id="4、修改博客的url"><a href="#4、修改博客的url" class="headerlink" title="4、修改博客的url"></a>4、修改博客的url</h3><p>修改主目录下的<code>_config.yml</code>中的url,改成自己的地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: https:&#x2F;&#x2F;dta0502.github.io&#x2F;</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>


<h2 id="十二、添加sitemap"><a href="#十二、添加sitemap" class="headerlink" title="十二、添加sitemap"></a>十二、添加sitemap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>查看public文件夹，可以看到<code>sitemap.xml</code>文件。</p>
<p>sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到Google和百度等搜索引擎提交<code>sitemap.xml</code>。</p>
<p>Google提交<code>sitemap.xml</code>的详细过程见：<a href="https://jactor-sue.github.io/zh-CN/how-blog-on-githubpages-can-be-searched-by-google/" target="_blank" rel="noopener external nofollow noreferrer">让Google搜索到搭建在Github Pages上的博客</a>。</p>
<h2 id="十三、Url持久化"><a href="#十三、Url持久化" class="headerlink" title="十三、Url持久化"></a>十三、Url持久化</h2><p>我们可以发现hexo默认生成的文章地址路径是 <code>【网站名称／年／月／日／文章名称】</code>。</p>
<p>这种链接对搜索爬虫是很不友好的，它的url结构超过了三层，太深了。</p>
<p>下面我推荐安装<code>hexo-abbrlink</code>插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>然后配置<code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># permalink: :title&#x2F;</span><br><span class="line">permalink: archives&#x2F;:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure>

<h2 id="十四、nofollow标签的使用"><a href="#十四、nofollow标签的使用" class="headerlink" title="十四、nofollow标签的使用"></a>十四、nofollow标签的使用</h2><p>减少出站链接能够有效防止权重分散，hexo有很方便的自动为出站链接添加nofollow的插件。</p>
<p>首先安装<code>hexo-autonofollow</code>插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure>

<p>再在外层<code>_config.yml</code>中添加配置，将nofollow设置为true：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 外部链接优化</span><br><span class="line">nofollow:</span><br><span class="line">    enable: true</span><br><span class="line">    exclude:     # 例外的链接，可将友情链接放置此处</span><br><span class="line">    - &#39;yousite&#39;</span><br></pre></td></tr></table></figure>

<p>这样，例外的链接将不会被加上nofollow属性。 </p>
<h2 id="十五、鼠标点击小红心的设置"><a href="#十五、鼠标点击小红心的设置" class="headerlink" title="十五、鼠标点击小红心的设置"></a>十五、鼠标点击小红心的设置</h2><ul>
<li>在<code>hexo/themes/yilia/source</code>文件目录下添加<code>love.js</code>文件。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;s.length;e++)s[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(s[e].el),s.splice(e,<span class="number">1</span>)):(s[e].y--,s[e].scale+=<span class="number">.004</span>,s[e].alpha-=<span class="number">.013</span>,s[e].el.style.cssText=<span class="string">"left:"</span>+s[e].x+<span class="string">"px;top:"</span>+s[e].y+<span class="string">"px;opacity:"</span>+s[e].alpha+<span class="string">";transform:scale("</span>+s[e].scale+<span class="string">","</span>+s[e].scale+<span class="string">") rotate(45deg);background:"</span>+s[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),o(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,s.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:c()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> s=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;,i(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),n(),r()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>hexo/themes/yilia/layout/_partial/footer.ejs</code>文件的最后， 添加以下代码：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--页面点击小红心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/love.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="十六、Hexo-Yilia代码块行号显示错乱问题"><a href="#十六、Hexo-Yilia代码块行号显示错乱问题" class="headerlink" title="十六、Hexo-Yilia代码块行号显示错乱问题"></a>十六、Hexo-Yilia代码块行号显示错乱问题</h2><img src="/archives/9a232bbe/%E4%BB%A3%E7%A0%81%E8%A1%8C%E5%87%BA%E9%94%99-%E4%BF%AE%E6%94%B9%E5%89%8D.png" class="" title="代码行出错-修改前">

<p>这是因为<code>yilia/source/main.0cf68a.css</code>文件中的pre标签的样式造成的，将<code>white-space: pre-wrap;</code>注释掉即可，这个问题是自动换行造成的，使用不自动换行的<code>white-space: pre;</code>即可，这样样式代码块部分会自动出现底部滚动条，行号错乱问题就没有了。</p>
<p>然后改一下滚动块样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.75</span>)&#125;</span><br></pre></td></tr></table></figure>

<p>下面是修改后的代码块：</p>
<img src="/archives/9a232bbe/%E4%BB%A3%E7%A0%81%E8%A1%8C%E5%87%BA%E9%94%99-%E4%BF%AE%E6%94%B9%E5%90%8E.png" class="" title="代码行出错-修改后">


<h2 id="十七、添加相册"><a href="#十七、添加相册" class="headerlink" title="十七、添加相册"></a>十七、添加相册</h2><h3 id="1、创建可以点击链接"><a href="#1、创建可以点击链接" class="headerlink" title="1、创建可以点击链接"></a>1、创建可以点击链接</h3><p>如果想单独创建一个可以单击的链接，方法是相同的，首先进入您的博客目录执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page photos</span><br></pre></td></tr></table></figure>

<p>立即在source下生成<code>photos/index.md</code>文件，这里<code>index.md</code>需要删除。</p>
<p>然后在主题站点的配置文件<code>theme/yilia/_config.yml</code>中添加点击的文案和跳转到位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  </span><br><span class="line">  主页: &#x2F;</span><br><span class="line">  </span><br><span class="line">  分类: &#x2F;categories</span><br><span class="line">  </span><br><span class="line">  归档: &#x2F;archives</span><br><span class="line">  </span><br><span class="line">  相册: &#x2F;photos&#x2F;index.html</span><br></pre></td></tr></table></figure>

<h3 id="2、拷贝他人的-photos-内容"><a href="#2、拷贝他人的-photos-内容" class="headerlink" title="2、拷贝他人的 photos 内容"></a>2、拷贝他人的 photos 内容</h3><p>可以参考<a href="https://github.com/dta0502/BlogPhotos/tree/master/source/photos" target="_blank" rel="noopener external nofollow noreferrer">别人做好的博客</a>,下载<code>source/photos</code>下的所有文件，拷贝到你对应的位置。</p>
<p>一般只需要修改<code>ins.js</code>文件的<code>render()</code>函数。这个函数式用来渲染数据的，里面配置了展示图片的链接地址，图片具体操作见下面。这里主要就修改minSrc、Src两个变量，改成自己的照片缩略图、照片的链接。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ulTmpl = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len2 = res.list.length; j &lt; len2; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = res.list[j].arr;</span><br><span class="line">    <span class="keyword">var</span> liTmpl = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = data.link.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> minSrc = <span class="string">'https://raw.githubusercontent.com/dta0502/BlogPhotos/master/min_photos/'</span> + data.link[i];</span><br><span class="line">      <span class="keyword">var</span> src = <span class="string">'https://raw.githubusercontent.com/dta0502/BlogPhotos/master/photos/'</span> + data.link[i];</span><br><span class="line">      <span class="keyword">var</span> type = data.type[i];</span><br><span class="line">      <span class="keyword">var</span> target = src + (type === <span class="string">'video'</span> ? <span class="string">'.mp4'</span> : <span class="string">'.jpg'</span>);</span><br><span class="line">      src += <span class="string">''</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3、图片放置"><a href="#3、图片放置" class="headerlink" title="3、图片放置"></a>3、图片放置</h3><h4 id="1）图片命名格式"><a href="#1）图片命名格式" class="headerlink" title="1）图片命名格式"></a>1）图片命名格式</h4><p>最前面是日期，然后用<code>_</code>进行分隔，后面是图片的描述信息，注意不要包含<code>_</code>和<code>.</code>符号。</p>
<p>举例来说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2018-10-05_西湖文化广场.jpg</span><br></pre></td></tr></table></figure>

<h4 id="2）图片放置目录"><a href="#2）图片放置目录" class="headerlink" title="2）图片放置目录"></a>2）图片放置目录</h4><p>然后在Hexo根目录下创建<code>photos</code>和<code>min_photos</code>文件夹，然后把图片原图放置到<code>photos</code>文件夹下，后面会用Python脚本对这个原图进行压缩处理，自动生成一个缩略图在<code>min_photos</code>文件夹下。</p>
<h3 id="4、处理图片并引入图片"><a href="#4、处理图片并引入图片" class="headerlink" title="4、处理图片并引入图片"></a>4、处理图片并引入图片</h3><h4 id="1）Python脚本处理图片"><a href="#1）Python脚本处理图片" class="headerlink" title="1）Python脚本处理图片"></a>1）Python脚本处理图片</h4><p>接下来就是最后一步，也是最重要的一步了，使用Python写的脚本，生成一套大图和一套小图，随即生成json文件，这个文件保存在<code>source/photos/data.json</code>中。</p>
<p>脚本下载地址：<a href="https://github.com/dta0502/BlogPhotos" target="_blank" rel="noopener external nofollow noreferrer">BlogPhotos</a></p>
<p>这里需要下载两个.py脚本（<code>ImageProcess.py</code>、<code>tool.py</code>），其中<code>ImageProcess.py</code>是<code>tool.py</code>这个脚本用到的。</p>
<p>然后执行<code>tool.py</code>脚本即可生成一套大图和一套小图，并且在<code>source/photos/</code>下生成这个json文件。</p>
<h4 id="2）上传图片到Github"><a href="#2）上传图片到Github" class="headerlink" title="2）上传图片到Github"></a>2）上传图片到Github</h4><p>然后我把<code>photos</code>和<code>min_photos</code>文件夹全部上传到Github上，然后得到了原图和缩略图的链接，这个链接就是<code>ins.js</code>文件的<code>render()</code>函数中需要修改的链接。</p>
<p>每次更新图片，都需要重新执行以下Python脚本，并且将图片上传到GitHub上。</p>
<h3 id="5、测试是否成功"><a href="#5、测试是否成功" class="headerlink" title="5、测试是否成功"></a>5、测试是否成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<h2 id="十八、Hexo增加RSS功能"><a href="#十八、Hexo增加RSS功能" class="headerlink" title="十八、Hexo增加RSS功能"></a>十八、Hexo增加RSS功能</h2><h3 id="安装RSS插件"><a href="#安装RSS插件" class="headerlink" title="安装RSS插件"></a>安装RSS插件</h3><p>注意一定要安装到blog的根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure>

<h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><p>在你的项目的<code>_config.yml</code>配置文件下找到<code>Extensions</code>添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions  #插件和主题</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">#RSS订阅</span><br><span class="line">plugins: hexo-generater-feed</span><br></pre></td></tr></table></figure>

<p>在主题配置文件里，在rss位置，添加<code>/atom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subnav:</span><br><span class="line">  #github: &quot;#&quot;</span><br><span class="line">  #weibo: &quot;#&quot;</span><br><span class="line">  rss: &quot;&#x2F;atom.xml&quot;</span><br></pre></td></tr></table></figure>

<h2 id="十九、Hexo增加谷歌统计"><a href="#十九、Hexo增加谷歌统计" class="headerlink" title="十九、Hexo增加谷歌统计"></a>十九、Hexo增加谷歌统计</h2><ol>
<li><p>注册一个google analytics账号</p>
</li>
<li><p>在主题配置文件里，在<code>google_analytics: &#39;&#39;</code>处添加统计ID，例如<code>UA-3534xxxx</code></p>
</li>
<li><p>使用google tag assistant来验证设置，google tag assistant是一款chrome扩展插件</p>
</li>
</ol>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Yilia</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建站教程</title>
    <url>/archives/7f189df5.html</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>这里我把个人博客托管在GitHub Pages上。GitHub Pages是一种静态站点托管服务，每个GitHub帐户或组织都可以有一个站点。</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装 Hexo 前要先安装：</p>
<ul>
<li>Node.js</li>
<li>Git</li>
</ul>
<p>Git初始化安装配置详见：<a href="https://tding.top/archives/b0004f5f.html">GitHub 初始化配置</a></p>
<h2 id="Hexo原理简要介绍"><a href="#Hexo原理简要介绍" class="headerlink" title="Hexo原理简要介绍"></a>Hexo原理简要介绍</h2><p>由于GitHub Pages存放的都是<strong>静态文件</strong>，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，那就太繁琐了，毕竟博客的关键是内容，hexo做的就是将这些md文件都放在本地，<strong>每次写完文章后框架会批量生成相关页面</strong>，然后我们只需要将生成的静态文件提交到GitHub即可。</p>
<p>注意：建议使用<code>Git Bash</code>来执行后续的所有命令。</p>
<h2 id="GitHub-Pages上搭建博客"><a href="#GitHub-Pages上搭建博客" class="headerlink" title="GitHub Pages上搭建博客"></a>GitHub Pages上搭建博客</h2><h3 id="GitHub创建仓库"><a href="#GitHub创建仓库" class="headerlink" title="GitHub创建仓库"></a>GitHub创建仓库</h3><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的GitHub用户名是<code>dta0502</code>，那么你就新建<code>dta0502.github.io</code>的仓库，将来你的网站访问地址就是 <a href="https://dta0502.github.io" target="_blank" rel="noopener external nofollow noreferrer">https://dta0502.github.io</a>。</p>
<p>由此可见，每一个GitHub账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>
<p>几个注意的地方：</p>
<ul>
<li>注册的邮箱一定要验证，否则不会成功</li>
<li>仓库名字必须是：<code>username.github.io</code>，其中username是你的用户名</li>
<li>仓库创建成功不会立即生效，需要过一段时间</li>
</ul>
<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<h3 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h3><p>在想要的路径下新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>D:\document\GitHub\hexo</code>，这个文件夹内就是你的Hexo博客的源文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d/document/GitHub/hexo/</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>输入以上命令后，hexo会自动下载一些文件到这个目录，包括<code>node_modules</code>，其中比较重要的几个文件的目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>注意：hexo有2个<code>_config.yml</code>文件，一个是站点根目录下的<code>_config.yml</code>，一个是theme（主题）下的<code>_config.yml</code>文件。</p>
<p>博客生成、预览：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g <span class="comment"># 生成</span></span><br><span class="line">hexo s <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure>

<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些就是你博客的静态文件，后续需要把这些提交到GitHub上。</p>
<p><code>hexo s</code>是开启本地预览服务，打开浏览器访问<code>http://localhost:4000</code>即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故。</p>
<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>这里以<code>hexo-theme-yilia</code>这个主题为例做一下说明。</p>
<p>首先下载<code>hexo-theme-yilia</code>这个主题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d/document/GitHub/hexo/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>

<p>下载的主题文件都在theme目录下。</p>
<p>然后我们将Hexo根目录下的<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: yilia</code>，然后重新执行<code>hexo g</code>来重新生成。</p>
<p><strong>注意：如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再重新生成。</strong></p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>如果你一切都配置好了，接下来就是把博客部署到GitHub上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>ssh key配置好。</li>
<li>配置<code>_config.yml</code>中有关deploy的部分（注意缩进）。</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:dta0502/dta0502.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>直接执行<code>hexo d</code>的话一般会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure>

<p>这是因为缺少了一个插件，我们可以通过如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后输入<code>hexo d</code>就会将本次有改动的代码全部提交。</p>
<h3 id="常用的hexo命令"><a href="#常用的hexo命令" class="headerlink" title="常用的hexo命令"></a>常用的hexo命令</h3><ul>
<li>常见命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span>      <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment"># 新建页面</span></span><br><span class="line">hexo generate            <span class="comment"># 生成静态页面至public目录</span></span><br><span class="line">hexo server              <span class="comment"># 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy              <span class="comment"># 部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>                <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version             <span class="comment"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure>

<ul>
<li>缩写命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<ul>
<li>组合命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s -g   <span class="comment"># 生成并本地预览</span></span><br><span class="line">hexo d -g   <span class="comment"># 生成并上传</span></span><br></pre></td></tr></table></figure>

<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>我们可以在hexo根目录下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">'my-first-blog'</span></span><br></pre></td></tr></table></figure>

<p>hexo会帮我们在<code>_posts</code>下生成相关md文件，我们只需要打开这个文件就可以开始写博客了，用这个命令的好处是帮我们自动生成了<strong>文章创建时间</strong>。</p>
<p>默认情况下，生成的博文目录会显示全部的文章内容，我们可以在文章合适的位置加上<code>&lt;!--more--&gt;</code>来设置文章摘要的长度。</p>
<p>举例来说：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Hexo 是一个快速、简洁且高效的博客框架。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener external nofollow noreferrer">使用hexo+github搭建免费个人博客详细教程</a></li>
<li><a href="https://tding.top/archives/b0004f5f.html">GitHub 初始化配置</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Python清除字符串中间空格的方法</title>
    <url>/archives/5da9daac.html</url>
    <content><![CDATA[<p>我们有多种方法来清除<strong>字符串中间</strong>的空格。</p>
<a id="more"></a>

<h2 id="1、使用字符串函数replace"><a href="#1、使用字符串函数replace" class="headerlink" title="1、使用字符串函数replace"></a>1、使用字符串函数replace</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line"><span class="string">'helloworld'</span></span><br></pre></td></tr></table></figure>


<h2 id="2、使用字符串函数split"><a href="#2、使用字符串函数split" class="headerlink" title="2、使用字符串函数split"></a>2、使用字符串函数split</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">''</span>.join(a.split())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python十进制转换为二进制-高位补零</title>
    <url>/archives/d1cb4559.html</url>
    <content><![CDATA[<p>这里需要使用内置函数<code>&#39;&#39;.format()</code></p>
<a id="more"></a>

<h2 id="高位补零"><a href="#高位补零" class="headerlink" title="高位补零"></a>高位补零</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">'&#123;:08b&#125;'</span>.format(a)</span><br></pre></td></tr></table></figure>

<p>输出结果为八位二进制，且高位补零。</p>
<h2 id="高位不补零"><a href="#高位不补零" class="headerlink" title="高位不补零"></a>高位不补零</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">'&#123;:8b&#125;'</span>.format(a)</span><br></pre></td></tr></table></figure>

<p>输出结果为八位二进制，但是高位不补零。</p>
<p><strong>需要注意的是，输出的结果类型都为str类型。</strong></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python更改pip源至国内镜像</title>
    <url>/archives/34737cef.html</url>
    <content><![CDATA[<p>在使用Python的时候经常需要安装各种模块，而pip是很强大的模块安装工具，但是由于国外官方pypi经常被墙，导致不可用，所以我们最好是将自己使用的pip源更换一下，这样就能解决被墙导致的装不上库的烦恼。</p>
<a id="more"></a>

<p>网上有很多可用的源，例如</p>
<ul>
<li>豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener external nofollow noreferrer">http://pypi.douban.com/simple/</a></li>
<li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener external nofollow noreferrer">https://pypi.tuna.tsinghua.edu.cn/simple</a></li>
</ul>
<p>最近使用得比较多并且比较顺手的是清华大学的pip源，它是官网pypi的镜像，每隔5分钟同步一次，地址<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener external nofollow noreferrer">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<h2 id="临时使用："><a href="#临时使用：" class="headerlink" title="临时使用："></a>临时使用：</h2><p>可以在使用pip的时候加参数<code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple gevent</span><br></pre></td></tr></table></figure>
<p>这样就会从清华这边的镜像去安装gevent库。</p>
<h2 id="永久修改，一劳永逸："><a href="#永久修改，一劳永逸：" class="headerlink" title="永久修改，一劳永逸："></a>永久修改，一劳永逸：</h2><ul>
<li>linux下，修改 <code>~/.pip/pip.conf</code>(没有就创建一个)， 修改<code>index-url</code>至<code>tuna</code>，内容如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>


<ul>
<li>windows下，直接在user目录中创建一个pip目录，如：<code>C:\Users\xx\pip</code>，新建文件<code>pip.ini</code>，内容如下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python</category>
        <category>pip</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB的sort()方法的size限制</title>
    <url>/archives/258f9245.html</url>
    <content><![CDATA[<p>当我对一个没有建索引的字段做find，然后做sort的时候，可能触发sort的size的32MB限制。</p>
<a id="more"></a>

<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#39;Hotel&#39;).find(&#123;&quot;time_stamp&quot;:&#123;&quot;$lte&quot;:1485878400&#125;&#125;).sort(&#123;&quot;time_stamp&quot;: -1&#125;)</span><br></pre></td></tr></table></figure>

<p>错误如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: error: &#123;</span><br><span class="line">&quot;$err&quot; : &quot;Executor error: Overflow sort stage buffered data usage of 33558548 bytes exceeds internal limit of 33554432 bytes&quot;,</span><br><span class="line">&quot;code&quot; : 17144</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="两种解决方法"><a href="#两种解决方法" class="headerlink" title="两种解决方法"></a>两种解决方法</h2><ul>
<li><strong>解决方法一：对需要排序的字段建索引</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.stotal.ensureIndex(&#123;&#39;type&#39;: -1&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>解决方法二：修改默认配置，把sort时可以用的内存设置大点：</strong>      </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.adminCommand(&#123;setParameter:1, internalQueryExecMaxBlockingSortBytes:335544320&#125;)</span><br></pre></td></tr></table></figure>

<p>这两种解决方法各有利弊：</p>
<ul>
<li>方法一：增加了索引会导致数据写入变慢，存储占用变多；</li>
<li>方法二：不建索引修改默认配置，会导致sort的时候占用更多的内存。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub学生包申请 &amp; Digital Ocean 50美元优惠码使用教程</title>
    <url>/archives/125d0d26.html</url>
    <content><![CDATA[<p>Github 学生包包含很多开发者工具，比较吸引的是DigitalOcean的50美元代金券和NameCheap的免费<code>.me</code>域名和Comodo的<code>SSL</code>证书。</p>
<a id="more"></a>

<h2 id="申请条件"><a href="#申请条件" class="headerlink" title="申请条件"></a>申请条件</h2><p>年龄大于 13 岁并正在进行可能被授予学位或学历的课程，意味着你从初中开始就可以申请学生包了。你只需要一个学校提供的电子邮箱地址，或有效的学生证件或是任何官方入学证明。</p>
<h2 id="GitHub学生包申请教程"><a href="#GitHub学生包申请教程" class="headerlink" title="GitHub学生包申请教程"></a>GitHub学生包申请教程</h2><p>1、进入申请地址：<a href="https://education.github.com/pack/" target="_blank" rel="noopener external nofollow noreferrer">https://education.github.com/pack/</a> ，点击 <code>Get your pack</code> </p>
<img src="/archives/125d0d26/1.png" class="" title="图1">


<p>2、然后提示你要登陆注册</p>
<p>如果没有github账户，需要注册一下。</p>
<p>3、再回到要申请的地方，点蓝色框</p>
<p>4、填写学校的edu邮箱，如果没有的话就需要上传学生证</p>
<p>下面是一个申请理由的模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I am a junior student from China, and I used Github to share my code with my classmates and friends since I entered university.</span><br></pre></td></tr></table></figure>

<p>5、等待一到两个工作日（我是秒通过）</p>
<p>看看你的邮件，一封名为 Powerup get! Welcome to the Student Developer Pack. 的邮件，证明你成功了！</p>
<p>6，打开 <a href="https://education.github.com/pack/offers" target="_blank" rel="noopener external nofollow noreferrer">https://education.github.com/pack/offers</a> ，你已经拿到优惠了！</p>
<h2 id="Digital-Ocean优惠使用说明"><a href="#Digital-Ocean优惠使用说明" class="headerlink" title="Digital Ocean优惠使用说明"></a>Digital Ocean优惠使用说明</h2><h3 id="1、注册DigitalOcean"><a href="#1、注册DigitalOcean" class="headerlink" title="1、注册DigitalOcean"></a>1、注册DigitalOcean</h3><p>Digital Ocean会给使用<a href="https://m.do.co/c/e42523de1c70" target="_blank" rel="noopener external nofollow noreferrer">此推广链接</a>的用户10美元，我也会有10美元。</p>
<p><strong>注：只有走推广链接注册的用户才会有10美元的优惠。</strong></p>
<p>注册需要绑定双币信用卡验证，或者使用Paypal支付5美元。 </p>
<h3 id="2、使用学生优惠码"><a href="#2、使用学生优惠码" class="headerlink" title="2、使用学生优惠码"></a>2、使用学生优惠码</h3><p><strong>由于DigitalOcean新规定，每个账户只能享有一次优惠，所以我们已经享有过新用户的优惠，需要提交工单让客服帮我们激活优惠码。</strong></p>
<p>大家可以在网站的support里提交一个ticket，也就是给客服发个邮件说明情况，客服一般会帮你手动添加的。<strong>鉴于每一封邮件往来时间需要一天，所以在发ticket的时候就把你的GitHub学生优惠码贴上。</strong></p>
<p>具体步骤如下：</p>
<ul>
<li>进入support页面</li>
</ul>
<p>网址：<a href="https://cloudsupport.digitalocean.com/s/my-tickets" target="_blank" rel="noopener external nofollow noreferrer">https://cloudsupport.digitalocean.com/s/my-tickets</a></p>
<img src="/archives/125d0d26/2.png" class="" title="图2">

<p>创建一个新的Ticket</p>
<ul>
<li>按照下图所示的内容，描述你的问题。</li>
</ul>
<img src="/archives/125d0d26/3.png" class="" title="图3">

<p>描述的模板如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello,</span><br><span class="line">I am a student .I got a student coupon on github, but when I typed this coupon on the website,it was remind that I couldn&#39;t use it. Could you help me? Here is my coupon code: &quot;这里填上你的优惠码&quot;.</span><br></pre></td></tr></table></figure>


<p>这样你就得到60$的优惠了，如果搭建最低配置的VPS，就可以使用一年多。</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>本地HTML中图片下载</title>
    <url>/archives/d8056465.html</url>
    <content><![CDATA[<p>有时候，网上看到好的文章，想要保存到本地，可以下载整个HTML文件，但是其中的图片还是引用的链接，为了更方便的查看，需要把这些图片下载到本地，下面是我的方法。</p>
<a id="more"></a>

<h2 id="一、单个文件中所有图片下载"><a href="#一、单个文件中所有图片下载" class="headerlink" title="一、单个文件中所有图片下载"></a>一、单个文件中所有图片下载</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure>

<h3 id="本地html文件读取到内存"><a href="#本地html文件读取到内存" class="headerlink" title="本地html文件读取到内存"></a>本地html文件读取到内存</h3><p>这里需要注意下编码方式！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'爬虫与API（上）.html'</span>,<span class="string">'r'</span>,encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    html = f.read()</span><br></pre></td></tr></table></figure>

<h3 id="页面解析"><a href="#页面解析" class="headerlink" title="页面解析"></a>页面解析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">selector = etree.HTML(html)</span><br><span class="line">img_list = selector.xpath(<span class="string">'//img/@src'</span>)</span><br><span class="line">img_list</span><br></pre></td></tr></table></figure>




<pre><code>[&apos;https://pic2.zhimg.com/v2-92e8bf502b2a8cb1c972215297161e40_b.jpg&apos;,
 &apos;https://pic3.zhimg.com/v2-8a64c355393635e51f486e8f77a31b11_b.jpg&apos;,
 &apos;https://pic3.zhimg.com/v2-b0b7e8426f7abe8bba55748830e1fedb_b.jpg&apos;,
 &apos;https://pic3.zhimg.com/v2-1ad5fce7304021d5e8240513242b1842_b.jpg&apos;,
 &apos;https://pic2.zhimg.com/v2-c4b13d820e724740b6d22d26cd1f78e4_b.jpg&apos;]</code></pre><h3 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> img_url <span class="keyword">in</span> img_list:</span><br><span class="line">    img = requests.get(img_url)</span><br><span class="line">    <span class="comment">#下面是新建文件夹、图片文件名</span></span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    img_dir = os.getcwd() + <span class="string">'/爬虫与API（上）/'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_dir):</span><br><span class="line">        os.makedirs(img_dir)</span><br><span class="line">    file_name = img_dir + str(num) + <span class="string">".png"</span></span><br><span class="line">    <span class="comment">#下面是图片文件的保存</span></span><br><span class="line">    <span class="keyword">with</span> open(file_name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img.content)</span><br></pre></td></tr></table></figure>

<h2 id="二、批量下载本目录所有文件的图片"><a href="#二、批量下载本目录所有文件的图片" class="headerlink" title="二、批量下载本目录所有文件的图片"></a>二、批量下载本目录所有文件的图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br></pre></td></tr></table></figure>

<p>获取本目录下所有的<code>.html</code>文件名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_list = glob.glob(<span class="string">'*.html'</span>)</span><br><span class="line">file_list</span><br></pre></td></tr></table></figure>




<pre><code>[&apos;xpath+mongodb抓取伯乐在线实战.html&apos;, &apos;代理IP设置.html&apos;, &apos;多线程爬虫实现（上）.html&apos;, &apos;爬虫基本原理.html&apos;]</code></pre><p>下面是批量下载所有图片过程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">    <span class="keyword">with</span> open(file,<span class="string">'r'</span>,encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        html = f.read()</span><br><span class="line">    selector = etree.HTML(html)</span><br><span class="line">    img_list = selector.xpath(<span class="string">'//img/@src'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#图片下载</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> img_url <span class="keyword">in</span> img_list:</span><br><span class="line">        img = requests.get(img_url)</span><br><span class="line">        print(img_url)</span><br><span class="line">        print(img.status_code)</span><br><span class="line">        <span class="comment">#下面是新建文件夹、图片文件名</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        img_dir = os.getcwd() + <span class="string">'/'</span> + file[:<span class="number">-5</span>] + <span class="string">'/'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_dir):</span><br><span class="line">            os.makedirs(img_dir)</span><br><span class="line">        file_name = img_dir + str(num) + <span class="string">".jpg"</span></span><br><span class="line">        <span class="comment">#下面是图片文件的保存</span></span><br><span class="line">        <span class="keyword">with</span> open(file_name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(img.content)</span><br></pre></td></tr></table></figure>

<pre><code>https://pic1.zhimg.com/v2-1adc1eb4791afceffe35cd726cd1ee1c_b.jpg
200
https://pic3.zhimg.com/v2-7f577f74b40e98f6c31430b8e884837e_b.jpg
200
https://pic2.zhimg.com/v2-4d9ab580eec66877f4f90688ee856675_b.jpg
200
https://pic3.zhimg.com/v2-dc7f2877b020191711c67b5c059cb7b6_b.jpg
200
https://pic1.zhimg.com/v2-e7b6728b7a35bbe2c035755ad776c89c_b.jpg
200
https://pic2.zhimg.com/v2-0be8b34bd0bf2611715ff1fcd1b32651_b.jpg
200
https://pic4.zhimg.com/v2-782237911b1a2146b07dc5b790f27363_b.jpg
200
https://pic3.zhimg.com/v2-6dd15768a0d9303f6af923440705b346_b.jpg
200
https://pic3.zhimg.com/v2-efb63eef398fb9f3c89ff7a7bf624a96_b.jpg
200
https://pic3.zhimg.com/v2-60b94f730a916a010ee9969233d26b1a_b.jpg
200
https://pic4.zhimg.com/v2-1c42198298f2ed0191c0c8c9bcc1c83f_b.jpg
200
https://pic3.zhimg.com/v2-152abf7e81663e83091507574c579176_b.jpg
200
https://pic2.zhimg.com/v2-5aefef22c1315ea30494576fd7a8fe49_b.jpg
200
https://pic1.zhimg.com/v2-137a8ec31194a86c562dafb9f8886bac_b.jpg
200
https://pic2.zhimg.com/v2-616f2b58e1709c54f5eb73a302f2a64a_b.jpg
400
https://pic4.zhimg.com/v2-a4933e53972df61721540cd84b28d1b8_b.jpg
200
https://pic4.zhimg.com/v2-17a19920c1fb8771f076a38014c88cd0_b.jpg
200
https://pic4.zhimg.com/v2-6841a49976a11bbd6cadd54530edc2f0_b.jpg
200
https://pic3.zhimg.com/v2-cfb2e2d1ba89674777f37cc354f04a30_b.jpg
400
https://pic3.zhimg.com/v2-0778cca50a17f1f9d35d56bd0bedebfd_b.jpg
200
https://pic3.zhimg.com/v2-5f31d4e31af4ec37c56d0266fa26fc93_b.jpg
200
https://pic2.zhimg.com/v2-1b7f1861e6dbf85866fdc540675366d4_b.jpg
400
https://pic1.zhimg.com/v2-c420c79953b45aaedba381445bc5be78_b.jpg
400
https://pic2.zhimg.com/v2-48cc47aff189b5c722862ecd32a4516a_b.jpg
400
https://pic3.zhimg.com/v2-a2580253cde081db3e3f1b8b66dddf93_b.jpg
200
https://pic4.zhimg.com/v2-6841a49976a11bbd6cadd54530edc2f0_b.jpg
200
https://pic1.zhimg.com/v2-569c1425597defc7f2fd5b54e7e3c3d2_b.jpg
400
https://pic1.zhimg.com/v2-850dd573365d9c9a1c9d58fa7f27532c_b.jpg
400
https://pic2.zhimg.com/v2-13c20a4c25725fb9d363c567ab4eb08d_b.jpg
400
https://pic1.zhimg.com/v2-c0235ab217e08e205305de260bea60e0_b.jpg
400
https://pic2.zhimg.com/v2-99be53d259d1d0c0755a63b578816f05_b.jpg
400
https://pic4.zhimg.com/v2-bb0040576245087202432c2c4ebbc88b_b.jpg
200
https://pic3.zhimg.com/v2-184bf0e862d37b5e2297f2c4289d8662_b.jpg
200
https://pic2.zhimg.com/v2-7d761d77317867021fd59e4e90c1bddd_b.jpg
400
https://pic4.zhimg.com/v2-9a315bb94c08e58ed5f63202e8a25d5b_b.jpg
200
https://pic2.zhimg.com/v2-8499b2eb6e641620474641daedb61931_b.jpg
400
https://pic1.zhimg.com/v2-11e49b3e1474035316b4bd2ae4d59a4c_b.jpg
400
https://pic2.zhimg.com/v2-88b64ae8861ace4172d54a6cdb81da31_b.jpg
400</code></pre><h2 id="三、问题"><a href="#三、问题" class="headerlink" title="三、问题"></a>三、问题</h2><p>上面的代码经常出现下载下来的图片无法打开，应该是没有下载成功。然后我看了如下的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = requests.get(img_url)</span><br><span class="line">print(img.status_code)</span><br></pre></td></tr></table></figure>

<p>发现很多请求返回的状态码是400，然后我看了下载下来的图片，确实正是那些返回的状态码为400的不能打开：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pic2.zhimg.com&#x2F;v2-8499b2eb6e641620474641daedb61931_b.jpg</span><br><span class="line">400</span><br><span class="line">https:&#x2F;&#x2F;pic1.zhimg.com&#x2F;v2-11e49b3e1474035316b4bd2ae4d59a4c_b.jpg</span><br><span class="line">400</span><br><span class="line">https:&#x2F;&#x2F;pic2.zhimg.com&#x2F;v2-88b64ae8861ace4172d54a6cdb81da31_b.jpg</span><br><span class="line">400</span><br></pre></td></tr></table></figure>

<p>然后我手动点了链接，发现会报：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You do not have permission to get URL &#39;&#x2F;v2-88b64ae8861ace4172d54a6cdb81da31_b.jpg&#39; from this server.</span><br></pre></td></tr></table></figure>

<p>我猜测大概是因为我这个代码没有设置headers中的referer。下面是改进版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_agent=<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 safari/537.36"</span></span><br><span class="line">referer=<span class="string">"https://www.zhihu.com/"</span></span><br><span class="line">headers=&#123;<span class="string">'User-Agent'</span>:user_agent,<span class="string">'Referer'</span>:referer&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">    <span class="keyword">with</span> open(file,<span class="string">'r'</span>,encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        html = f.read()</span><br><span class="line">    selector = etree.HTML(html)</span><br><span class="line">    img_list = selector.xpath(<span class="string">'//img/@src'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#图片下载</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> img_url <span class="keyword">in</span> img_list:</span><br><span class="line">        img = requests.get(img_url,headers = headers)</span><br><span class="line">        print(img_url)</span><br><span class="line">        print(img.status_code)</span><br><span class="line">        <span class="comment">#下面是新建文件夹、图片文件名</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        img_dir = os.getcwd() + <span class="string">'/'</span> + file[:<span class="number">-5</span>] + <span class="string">'/'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_dir):</span><br><span class="line">            os.makedirs(img_dir)</span><br><span class="line">        file_name = img_dir + str(num) + <span class="string">".jpg"</span></span><br><span class="line">        <span class="comment">#下面是图片文件的保存</span></span><br><span class="line">        <span class="keyword">with</span> open(file_name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(img.content)</span><br></pre></td></tr></table></figure>

<pre><code>https://pic2.zhimg.com/v2-616f2b58e1709c54f5eb73a302f2a64a_b.jpg
200
https://pic4.zhimg.com/v2-a4933e53972df61721540cd84b28d1b8_b.jpg
200
https://pic4.zhimg.com/v2-17a19920c1fb8771f076a38014c88cd0_b.jpg
200
https://pic4.zhimg.com/v2-6841a49976a11bbd6cadd54530edc2f0_b.jpg
200
https://pic3.zhimg.com/v2-cfb2e2d1ba89674777f37cc354f04a30_b.jpg
200
https://pic3.zhimg.com/v2-0778cca50a17f1f9d35d56bd0bedebfd_b.jpg
200
https://pic3.zhimg.com/v2-5f31d4e31af4ec37c56d0266fa26fc93_b.jpg
200
https://pic2.zhimg.com/v2-1b7f1861e6dbf85866fdc540675366d4_b.jpg
200
https://pic1.zhimg.com/v2-c420c79953b45aaedba381445bc5be78_b.jpg
200
https://pic2.zhimg.com/v2-48cc47aff189b5c722862ecd32a4516a_b.jpg
200
https://pic3.zhimg.com/v2-a2580253cde081db3e3f1b8b66dddf93_b.jpg
200
https://pic4.zhimg.com/v2-6841a49976a11bbd6cadd54530edc2f0_b.jpg
200
https://pic1.zhimg.com/v2-569c1425597defc7f2fd5b54e7e3c3d2_b.jpg
200
https://pic1.zhimg.com/v2-850dd573365d9c9a1c9d58fa7f27532c_b.jpg
200
https://pic2.zhimg.com/v2-13c20a4c25725fb9d363c567ab4eb08d_b.jpg
200
https://pic1.zhimg.com/v2-c0235ab217e08e205305de260bea60e0_b.jpg
200
https://pic2.zhimg.com/v2-99be53d259d1d0c0755a63b578816f05_b.jpg
200
https://pic4.zhimg.com/v2-bb0040576245087202432c2c4ebbc88b_b.jpg
200
https://pic3.zhimg.com/v2-184bf0e862d37b5e2297f2c4289d8662_b.jpg
200
https://pic2.zhimg.com/v2-7d761d77317867021fd59e4e90c1bddd_b.jpg
200
https://pic4.zhimg.com/v2-9a315bb94c08e58ed5f63202e8a25d5b_b.jpg
200
https://pic2.zhimg.com/v2-8499b2eb6e641620474641daedb61931_b.jpg
200
https://pic1.zhimg.com/v2-11e49b3e1474035316b4bd2ae4d59a4c_b.jpg
200
https://pic2.zhimg.com/v2-88b64ae8861ace4172d54a6cdb81da31_b.jpg
200</code></pre><p>问题解决！</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>图片下载</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas Series转换为DataFrame</title>
    <url>/archives/89309e35.html</url>
    <content><![CDATA[<p>虽然Series有一个<code>to_frame()</code>方法，但是当Series的index也需要转变为DataFrame的一列时，这个方法转换会有一点问题。所以，下面我采用将Series对象转换为list对象，然后将list对象转换为DataFrame对象。</p>
<a id="more"></a>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>这里的month为一个series对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type(month)</span><br><span class="line">pandas.core.series.Series</span><br></pre></td></tr></table></figure>

<p>它的index为月份，values为数量，下面将这两列都转换为DataFrame的columns。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dict_month = &#123;<span class="string">'month'</span>:month.index,<span class="string">'numbers'</span>:month.values&#125;</span><br><span class="line">df_month = pd.DataFrame(dict_month)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>数据处理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>kindle导入电子书方法</title>
    <url>/archives/5fc0cdcc.html</url>
    <content><![CDATA[<p>我们经常需要把第三方的电子书导入kindle，这里简单记录一下用邮箱推送电子书到kindle的方法。</p>
<a id="more"></a>

<h2 id="亚马逊官网设置"><a href="#亚马逊官网设置" class="headerlink" title="亚马逊官网设置"></a>亚马逊官网设置</h2><p>每一个kindle设备都要注册登录一个账号，这个账号是实现多终端同步的一个纽带。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">亚马逊官网——&gt;我的账户——&gt;内容和设备——&gt;管理我的内容和设备——&gt;设置——&gt;个人文档设置</span><br></pre></td></tr></table></figure>

<h3 id="个人文档设置处改变kindle邮箱名以及添加发送邮箱到白名单"><a href="#个人文档设置处改变kindle邮箱名以及添加发送邮箱到白名单" class="headerlink" title="个人文档设置处改变kindle邮箱名以及添加发送邮箱到白名单"></a>个人文档设置处改变kindle邮箱名以及添加发送邮箱到白名单</h3><p>下面是具体设置的图解：</p>
<img src="/archives/5fc0cdcc/1.png" class="" title="图1">



<ul>
<li><p>（1）在个人文档设置里面可以查看到你需要推送的设备对应的邮箱，其中邮箱的名字可以自己改</p>
</li>
<li><p>（2）需要把你发送的电子邮箱添加到白名单里</p>
</li>
</ul>
<h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><p>然后用自己的邮箱给kindle邮箱发送文件：</p>
<img src="/archives/5fc0cdcc/2.png" class="" title="图2">

<p>然后kindle上同步一下就会在个人图书馆中看到了！</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>kindle</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题目总结-SQL</title>
    <url>/archives/32d634f4.html</url>
    <content><![CDATA[<p>我最近总结了LeetCode下所有SQL题的多种解法。</p>
<a id="more"></a>

<ul>
<li><a href="#175-组合两个表">175-组合两个表</a></li>
<li><a href="#176-第二高的薪水">176-第二高的薪水</a></li>
<li><a href="#177-第n高的薪水">177-第n高的薪水</a></li>
<li><a href="#178-分数排名">178-分数排名</a></li>
<li><a href="#180-连续出现的数字">180-连续出现的数字</a></li>
<li><a href="#181-超过经理收入的员工">181-超过经理收入的员工</a></li>
<li><a href="#182-查找重复的电子邮箱">182-查找重复的电子邮箱</a></li>
<li><a href="#183-从不订购的客户">183-从不订购的客户</a></li>
<li><a href="#184-部门最高工资">184-部门最高工资</a></li>
<li><a href="#185-部门工资前三高的员工">185-部门工资前三高的员工</a></li>
<li><a href="#196-删除重复的电子邮箱">196-删除重复的电子邮箱</a></li>
<li><a href="#197-上升的温度">197-上升的温度</a></li>
<li><a href="#595-大的国家">595-大的国家</a></li>
<li><a href="#596-超过5名学生的课">596-超过5名学生的课</a></li>
<li><a href="#601-体育馆的人流量">601-体育馆的人流量</a></li>
<li><a href="#620-有趣的电影">620-有趣的电影</a></li>
<li><a href="#626-换座位">626-换座位</a></li>
<li><a href="#627-交换工资">627-交换工资</a></li>
</ul>
<h2 id="175-组合两个表"><a href="#175-组合两个表" class="headerlink" title="175-组合两个表"></a>175-组合两个表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个 salary 表，如下所示，有 m=男性 和 f=女性 的值 。交换所有的 f 和 m 值（例如，将所有 f 值更改为 m，反之亦然）。要求使用一个更新（Update）语句，并且没有中间临时表。</p>
<p>请注意，你必须编写一个 Update 语句，不要编写任何 Select 语句。</p>
<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | m   | 2500   |</span><br><span class="line">| 2  | B    | f   | 1500   |</span><br><span class="line">| 3  | C    | m   | 5500   |</span><br><span class="line">| 4  | D    | f   | 500    |</span><br></pre></td></tr></table></figure>

<p>运行你所编写的更新语句之后，将会得到以下表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | f   | 2500   |</span><br><span class="line">| 2  | B    | m   | 1500   |</span><br><span class="line">| 3  | C    | f   | 5500   |</span><br><span class="line">| 4  | D    | m   | 500    |</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本"><a href="#MySQL脚本" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `salary`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`salary`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salary`</span> (</span><br><span class="line">  <span class="string">`id`</span><span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span><span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span><span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARYKEY (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of salary</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salary`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'A'</span>, <span class="string">'m'</span>,<span class="string">'2500'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salary`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'B'</span>, <span class="string">'f'</span>,<span class="string">'1500'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salary`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'C'</span>, <span class="string">'m'</span>,<span class="string">'5500'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salary`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'D'</span>, <span class="string">'f'</span>,<span class="string">'500'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答"><a href="#本题回答" class="headerlink" title="本题回答"></a>本题回答</h3><p>方法一：使用if函数</p>
<p><code>IF(expr1, expr2, expr3)</code> 如果expr1为TRUE，则IF()的返回值为expr2；否则返回值为expr3。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">UPDATE</span> salary</span><br><span class="line"><span class="keyword">SET</span> sex = <span class="keyword">IF</span>(sex = <span class="string">"f"</span>,<span class="string">"m"</span>,<span class="string">"f"</span>);</span><br></pre></td></tr></table></figure>

<p>方法二：使用case…when..then..else..end</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary </span><br><span class="line"><span class="keyword">SET</span> sex  = (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="string">'m'</span> <span class="keyword">THEN</span> <span class="string">'f'</span> <span class="keyword">ELSE</span> <span class="string">'m'</span> <span class="keyword">END</span>);</span><br></pre></td></tr></table></figure>


<h2 id="176-第二高的薪水"><a href="#176-第二高的薪水" class="headerlink" title="176-第二高的薪水"></a>176-第二高的薪水</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure>

<p>例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+---------------------+</span><br><span class="line">| 200                 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-1"><a href="#本题回答-1" class="headerlink" title="本题回答"></a>本题回答</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>先查询出最高的身高值，然后查询身高小于该值的最高身高。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Max</span>(Salary) <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span> Employee</span><br><span class="line"><span class="keyword">WHERE</span> Salary &lt; (<span class="keyword">SELECT</span> <span class="keyword">Max</span>(Salary) <span class="keyword">FROM</span> Employee);</span><br></pre></td></tr></table></figure>

<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>((<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(Salary) </span><br><span class="line"><span class="keyword">FROM</span> Employee</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>,<span class="number">1</span>),<span class="literal">null</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure>

<p>这里加个IFNULL，只是为了可读性好一点？</p>
<p><strong>注：<code>IFNULL()</code>方法介绍：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IFNULL(expr1,expr2)</span><br></pre></td></tr></table></figure>

<p>如果 expr1 不是 NULL，<code>IFNULL()</code> 返回 expr1，否则它返回 expr2。<code>IFNULL()</code>返回一个数字或字符串值，取决于它被使用的上下文环境。</p>
<h2 id="177-第n高的薪水"><a href="#177-第n高的薪水" class="headerlink" title="177-第n高的薪水"></a>177-第n高的薪水</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个 SQL 查询，获取 Employee 表中第 n 高的薪水（Salary）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure>

<p>例如上述 Employee 表，<code>n = 2</code> 时，应返回第二高的薪水 200。如果不存在第 n 高的薪水，那么查询应返回 null。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------------------+</span><br><span class="line">| getNthHighestSalary(2) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 200                    |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-1"><a href="#MySQL脚本-1" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (Idint, Salary <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span>(<span class="string">'1'</span>, <span class="string">'100'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span>(<span class="string">'2'</span>, <span class="string">'200'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span>(<span class="string">'3'</span>, <span class="string">'300'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-2"><a href="#本题回答-2" class="headerlink" title="本题回答"></a>本题回答</h3><p>查询条件：</p>
<ul>
<li>1）返回第N高的薪水</li>
<li>2）如果不存在第N高的薪水，那么查询应返回 null</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SET</span> N = N<span class="number">-1</span>;</span><br><span class="line">  RETURN (</span><br><span class="line">      <span class="comment"># Write your MySQL query statement below.</span></span><br><span class="line">      <span class="keyword">SELECT</span>(</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">      <span class="keyword">FROM</span> Employee</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">      <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> N</span><br><span class="line">      )</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<p>注意：LIMIT子句后面不能做运算。</p>
<p>或者可以新定义一个变量x：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> x <span class="built_in">int</span>;</span><br><span class="line">  <span class="keyword">SET</span> x = N<span class="number">-1</span>;</span><br><span class="line">  RETURN (</span><br><span class="line">      <span class="comment"># Write your MySQL query statement below.</span></span><br><span class="line">      <span class="keyword">SELECT</span>(</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">      <span class="keyword">FROM</span> Employee</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">      <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> x</span><br><span class="line">      )</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>


<h2 id="178-分数排名"><a href="#178-分数排名" class="headerlink" title="178-分数排名"></a>178-分数排名</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------+</span><br><span class="line">| Id | Score |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line">| 6  | 3.65  |</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure>

<p>例如，根据上述给定的 Scores 表，你的查询应该返回（按分数从高到低排列）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-------+------+</span><br><span class="line">| Score | Rank |</span><br><span class="line">+-------+------+</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 3.85  | 2    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.50  | 4    |</span><br><span class="line">+-------+------+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-2"><a href="#MySQL脚本-2" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Scores (<span class="keyword">Id</span> <span class="built_in">int</span>,Score <span class="built_in">DECIMAL</span>(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Scores;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'1'</span>,<span class="string">'3.5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'2'</span>,<span class="string">'3.65'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'3'</span>,<span class="string">'4.0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'4'</span>,<span class="string">'3.85'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'5'</span>,<span class="string">'4.0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'6'</span>,<span class="string">'3.65'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-3"><a href="#本题回答-3" class="headerlink" title="本题回答"></a>本题回答</h3><h4 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h4><p>对于每一个分数，从表中找出有多少个大于或等于该分数的不重复分数，然后降序排列。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> Score,(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> s.Score)</span><br><span class="line">    <span class="keyword">FROM</span> Scores s</span><br><span class="line">    <span class="keyword">WHERE</span> s.Score &gt;= Scores.Score) <span class="keyword">AS</span> <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">FROM</span> Scores</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>这种方式虽然很简单，但是在select语句中使用<strong>子查询</strong>来生成rank，相当于对每一条记录都需要查询一次scores表，查询次数为 （记录条数^2），会很慢。</p>
<h4 id="方法2-1"><a href="#方法2-1" class="headerlink" title="方法2"></a>方法2</h4><p>在select语句中创建两个变量，其中<code>@PreScore</code>用来记录前一个分数，<code>@Ranker</code>用来记录当前排名。然后判断当前的分数是否等于前面的分数<code>@PreScore</code>，如果等于的话，排名值就为<code>@Ranker</code>，否则，排名值为<code>@Ranker+1</code>。</p>
<p>这里用了<code>CAST()</code>函数进行类型转换，其语法为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CAST(字段名 as 转换的类型 )</span><br></pre></td></tr></table></figure>

<p>其中类型可以为：</p>
<ul>
<li>CHAR[(N)] 字符型 </li>
<li>DATE  日期型</li>
<li>DATETIME  日期和时间型</li>
<li>DECIMAL  float型</li>
<li>SIGNED  int</li>
<li>TIME  时间型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Score,<span class="keyword">CAST</span>(</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">    <span class="keyword">WHEN</span> @PreScore = Score <span class="keyword">THEN</span> @Ranker</span><br><span class="line">    <span class="keyword">WHEN</span> @PreScore := Score <span class="keyword">THEN</span> @Ranker := @Ranker + <span class="number">1</span></span><br><span class="line">    <span class="keyword">ELSE</span> @Ranker := @Ranker + <span class="number">1</span></span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> SIGNED) <span class="keyword">AS</span> <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">FROM</span> Scores a,(<span class="keyword">SELECT</span> @PreScore := <span class="literal">NULL</span>, @Ranker := <span class="number">0</span>) r</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>


<h2 id="180-连续出现的数字"><a href="#180-连续出现的数字" class="headerlink" title="180-连续出现的数字"></a>180-连续出现的数字</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个 SQL 查询，查找所有至少连续出现三次的数字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-----+</span><br><span class="line">| Id | Num |</span><br><span class="line">+----+-----+</span><br><span class="line">| 1  |  1  |</span><br><span class="line">| 2  |  1  |</span><br><span class="line">| 3  |  1  |</span><br><span class="line">| 4  |  2  |</span><br><span class="line">| 5  |  1  |</span><br><span class="line">| 6  |  2  |</span><br><span class="line">| 7  |  2  |</span><br><span class="line">+----+-----+</span><br></pre></td></tr></table></figure>

<p>例如，给定上面的 Logs 表， 1 是唯一连续出现至少三次的数字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-----------------+</span><br><span class="line">| ConsecutiveNums |</span><br><span class="line">+-----------------+</span><br><span class="line">| 1               |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-3"><a href="#MySQL脚本-3" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span> <span class="built_in">int</span>,<span class="keyword">Num</span> <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> <span class="keyword">Logs</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'1'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'2'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'4'</span>,<span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'5'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'6'</span>,<span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'7'</span>,<span class="string">'2'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-4"><a href="#本题回答-4" class="headerlink" title="本题回答"></a>本题回答</h3><p>那么由于需要找三次相同数字，所以我们需要建立三个表的实例，我们可以用l1分别和l2, l3内交，l1和l2的Id下一个位置比，l1和l3的下两个位置比，然后将Num都相同的数字返回。</p>
<p><strong>注意：<code>SELECT DISTINCT l1.Num AS ConsecutiveNums</code>保证当连续的数字大于3个的时候，返回的还是一个<code>Num</code>。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> l1.Num <span class="keyword">AS</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Logs</span> l1 </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">Logs</span> l2</span><br><span class="line"><span class="keyword">ON</span> l1.Id = l2.Id - <span class="number">1</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">Logs</span> l3</span><br><span class="line"><span class="keyword">ON</span> l1.Id = l3.Id - <span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> l1.Num = l2.Num <span class="keyword">AND</span> l1.Num = l3.Num;</span><br></pre></td></tr></table></figure>


<h2 id="181-超过经理收入的员工"><a href="#181-超过经理收入的员工" class="headerlink" title="181-超过经理收入的员工"></a>181-超过经理收入的员工</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p><code>Employee</code> 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| Id | Name  | Salary | ManagerId |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| 1  | Joe   | 70000  | 3         |</span><br><span class="line">| 2  | Henry | 80000  | 4         |</span><br><span class="line">| 3  | Sam   | 60000  | NULL      |</span><br><span class="line">| 4  | Max   | 90000  | NULL      |</span><br><span class="line">+----+-------+--------+-----------+</span><br></pre></td></tr></table></figure>

<p>给定 <code>Employee</code> 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| Employee |</span><br><span class="line">+----------+</span><br><span class="line">| Joe      |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-4"><a href="#MySQL脚本-4" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, ManagerId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'70000'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'4'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-5"><a href="#本题回答-5" class="headerlink" title="本题回答"></a>本题回答</h3><p>我们可以生成两个实例对象通过ManagerId和Id进行<code>INNER JOIN</code>，然后限制条件是一个Salary大于另一个。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> b.Name <span class="keyword">AS</span> Employee</span><br><span class="line"><span class="keyword">FROM</span> Employee a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Employee b</span><br><span class="line"><span class="keyword">ON</span> a.Id = b.ManagerId <span class="keyword">AND</span> b.Salary &gt; a.Salary;</span><br></pre></td></tr></table></figure>


<h2 id="182-查找重复的电子邮箱"><a href="#182-查找重复的电子邮箱" class="headerlink" title="182-查找重复的电子邮箱"></a>182-查找重复的电子邮箱</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个 SQL 查询，查找 Person 表中所有重复的电子邮箱。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+---------+</span><br><span class="line">| Id | Email   |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line">| 3  | a@b.com |</span><br><span class="line">+----+---------+</span><br></pre></td></tr></table></figure>

<p>根据以上输入，你的查询应返回以下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| Email   |</span><br><span class="line">+---------+</span><br><span class="line">| a@b.com |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure>

<p>说明：所有电子邮箱都是小写字母。</p>
<h3 id="MySQL脚本-5"><a href="#MySQL脚本-5" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Person (<span class="keyword">Id</span> <span class="built_in">int</span>,Email <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'1'</span>,<span class="string">'a@b.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'2'</span>,<span class="string">'c@d.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'3'</span>,<span class="string">'a@b.com'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-6"><a href="#本题回答-6" class="headerlink" title="本题回答"></a>本题回答</h3><p>寻找重复的数据：用group by Email分组后 数据个数大于1的就是重复的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> Email</span><br><span class="line"><span class="keyword">FROM</span> Person</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Email</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">Count</span>(*) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>


<h2 id="183-从不订购的客户"><a href="#183-从不订购的客户" class="headerlink" title="183-从不订购的客户"></a>183-从不订购的客户</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。</p>
<p>Customers 表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------+</span><br><span class="line">| Id | Name  |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | Joe   |</span><br><span class="line">| 2  | Henry |</span><br><span class="line">| 3  | Sam   |</span><br><span class="line">| 4  | Max   |</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure>

<p>Orders 表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+------------+</span><br><span class="line">| Id | CustomerId |</span><br><span class="line">+----+------------+</span><br><span class="line">| 1  | 3          |</span><br><span class="line">| 2  | 1          |</span><br><span class="line">+----+------------+</span><br></pre></td></tr></table></figure>

<p>例如给定上述表格，你的查询应返回：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| Customers |</span><br><span class="line">+-----------+</span><br><span class="line">| Henry     |</span><br><span class="line">| Max       |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-6"><a href="#MySQL脚本-6" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Customers (Idint, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Orders (<span class="keyword">Id</span> <span class="built_in">int</span>,CustomerId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Customers;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span>(<span class="string">'1'</span>, <span class="string">'Joe'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span>(<span class="string">'2'</span>, <span class="string">'Henry'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span>(<span class="string">'3'</span>, <span class="string">'Sam'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span>(<span class="string">'4'</span>, <span class="string">'Max'</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Orders;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (<span class="keyword">Id</span>, CustomerId) <span class="keyword">values</span>(<span class="string">'1'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (<span class="keyword">Id</span>, CustomerId) <span class="keyword">values</span>(<span class="string">'2'</span>, <span class="string">'1'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-7"><a href="#本题回答-7" class="headerlink" title="本题回答"></a>本题回答</h3><h4 id="方法1——LEFT-JOIN"><a href="#方法1——LEFT-JOIN" class="headerlink" title="方法1——LEFT JOIN"></a>方法1——LEFT JOIN</h4><p>直接让两个表左外连接，然后只要找出右边的CustomerId为Null的顾客就是没有下订单的顾客。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.Name <span class="keyword">AS</span> Customers</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.Id = Orders.CustomerId</span><br><span class="line"><span class="keyword">WHERE</span> Orders.CustomerId <span class="keyword">IS</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h4 id="方法2——NOT-IN"><a href="#方法2——NOT-IN" class="headerlink" title="方法2——NOT IN"></a>方法2——NOT IN</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.Name <span class="keyword">AS</span> Customers</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> c</span><br><span class="line"><span class="keyword">WHERE</span> c.Id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CustomerId</span><br><span class="line">    <span class="keyword">FROM</span> Orders</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h2 id="184-部门最高工资"><a href="#184-部门最高工资" class="headerlink" title="184-部门最高工资"></a>184-部门最高工资</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>Employee 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure>

<p>Department 表包含公司所有部门的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure>

<p>编写一个 SQL 查询，找出每个部门工资最高的员工。例如，根据上述给定的表格，Max 在 IT 部门有最高工资，Henry 在 Sales 部门有最高工资。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-7"><a href="#MySQL脚本-7" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (Idint, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (Idint, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary,DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary,DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary,DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary,DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span>(<span class="string">'1'</span>, <span class="string">'IT'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span>(<span class="string">'2'</span>, <span class="string">'Sales'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-8"><a href="#本题回答-8" class="headerlink" title="本题回答"></a>本题回答</h3><p>通过<code>GROUP BY</code>把每个部门的最高工资找出来，再通过联结表，找到相应的员工名字和部门名字。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> d.name <span class="keyword">AS</span> Department, e.name <span class="keyword">AS</span> Employee, e.Salary <span class="keyword">AS</span> Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee e,Department d</span><br><span class="line"><span class="keyword">WHERE</span> e.DepartmentId = d.Id </span><br><span class="line"><span class="keyword">AND</span> ((e.DepartmentId,e.Salary) <span class="keyword">IN</span> (<span class="keyword">SELECT</span> DepartmentId,<span class="keyword">Max</span>(Salary) <span class="keyword">AS</span> MSalary</span><br><span class="line">                                   <span class="keyword">FROM</span> Employee</span><br><span class="line">                                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId));</span><br></pre></td></tr></table></figure>


<h2 id="185-部门工资前三高的员工"><a href="#185-部门工资前三高的员工" class="headerlink" title="185-部门工资前三高的员工"></a>185-部门工资前三高的员工</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>Employee 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">| 5  | Janet | 69000  | 1            |</span><br><span class="line">| 6  | Randy | 85000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure>

<p>Department 表包含公司所有部门的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure>

<p>编写一个 SQL 查询，找出每个部门工资前三高的员工。例如，根据上述给定的表格，查询结果应返回：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Randy    | 85000  |</span><br><span class="line">| IT         | Joe      | 70000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">| Sales      | Sam      | 60000  |</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-8"><a href="#MySQL脚本-8" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Janet'</span>, <span class="string">'69000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'Randy'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'Will'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-9"><a href="#本题回答-9" class="headerlink" title="本题回答"></a>本题回答</h3><h4 id="方法1-2"><a href="#方法1-2" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.Name <span class="keyword">AS</span> Department,e1.Name <span class="keyword">AS</span> Employee,e1.Salary <span class="keyword">AS</span> Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> e1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Department <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">ON</span> e1.DepartmentId = d.Id</span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> e2.Salary)</span><br><span class="line">    <span class="keyword">FROM</span> Employee <span class="keyword">AS</span> e2</span><br><span class="line">    <span class="keyword">WHERE</span> e2.DepartmentId = d.Id <span class="keyword">AND</span> e2.Salary &gt;= e1.Salary</span><br><span class="line">      ) &lt;= <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e1.DepartmentId,e1.Salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h4 id="方法2-2"><a href="#方法2-2" class="headerlink" title="方法2"></a>方法2</h4><blockquote>
<p>补充一个提交注意点，部门薪水前三高包含了相同薪水下排名相同的意思</p>
</blockquote>
<h5 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h5><p>查询出每个部门 <strong>薪水前三高</strong> 的员工。我们可以分解查询步骤,再组合。</p>
<h5 id="2、简化问题（分步骤）"><a href="#2、简化问题（分步骤）" class="headerlink" title="2、简化问题（分步骤）"></a>2、简化问题（分步骤）</h5><p>分解步骤的思路,可以依据必要存在的步骤进行分解</p>
<p>1.根据 部门 (升)，薪水 (降) 顺序查询出每个部门的员工 (Department, Employee, Salary)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dep.Name <span class="keyword">AS</span> Department, emp.Name <span class="keyword">AS</span> Employee, emp.Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Department <span class="keyword">AS</span> dep </span><br><span class="line"><span class="keyword">ON</span> emp.DepartmentId = dep.Id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> emp.DepartmentId, emp.Salary <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p>2.每个部门的员工根据薪水进行排序</p>
<p>由于原本没有排序的字段,所以这里就需要自定义变量补充一个字段出来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> te.DepartmentId, te.Salary,</span><br><span class="line">       <span class="keyword">CASE</span> </span><br><span class="line">            <span class="keyword">WHEN</span> @pre = DepartmentId <span class="keyword">THEN</span> @<span class="keyword">rank</span>:= @<span class="keyword">rank</span> + <span class="number">1</span></span><br><span class="line">            <span class="keyword">WHEN</span> @pre := DepartmentId <span class="keyword">THEN</span> @<span class="keyword">rank</span>:= <span class="number">1</span></span><br><span class="line">       <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">RANK</span></span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> @pre:=<span class="literal">null</span>, @<span class="keyword">rank</span>:=<span class="number">0</span>)tt,</span><br><span class="line">     (</span><br><span class="line">         <span class="keyword">SELECT</span> DepartmentId,Salary</span><br><span class="line">         <span class="keyword">FROM</span> Employee</span><br><span class="line">         <span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId,Salary</span><br><span class="line">         <span class="keyword">ORDER</span> <span class="keyword">BY</span> DepartmentId,Salary <span class="keyword">DESC</span></span><br><span class="line">     ) te</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------------+--------+------+</span><br><span class="line">| DepartmentId | Salary | RANK |</span><br><span class="line">+--------------+--------+------+</span><br><span class="line">|            1 |  90000 |    1 |</span><br><span class="line">|            1 |  85000 |    2 |</span><br><span class="line">|            1 |  70000 |    3 |</span><br><span class="line">|            1 |  69000 |    4 |</span><br><span class="line">|            2 |  80000 |    1 |</span><br><span class="line">|            2 |  60000 |    2 |</span><br><span class="line">+--------------+--------+------+</span><br></pre></td></tr></table></figure>

<h5 id="3、组合步骤"><a href="#3、组合步骤" class="headerlink" title="3、组合步骤"></a>3、组合步骤</h5><p>组合步骤时,尽量将每个步骤变成一个 结果集（不存在二次查询），再将所有步骤的 结果集进行关联，从而提高性能。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dep.Name Department, emp.Name Employee, emp.Salary</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> te.DepartmentId, te.Salary,</span><br><span class="line">               <span class="keyword">CASE</span> </span><br><span class="line">                    <span class="keyword">WHEN</span> @pre = DepartmentId <span class="keyword">THEN</span> @<span class="keyword">rank</span>:= @<span class="keyword">rank</span> + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">WHEN</span> @pre := DepartmentId <span class="keyword">THEN</span> @<span class="keyword">rank</span>:= <span class="number">1</span></span><br><span class="line">               <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">RANK</span></span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> @pre:=<span class="literal">null</span>, @<span class="keyword">rank</span>:=<span class="number">0</span>)tt,</span><br><span class="line">             (</span><br><span class="line">                 <span class="keyword">SELECT</span> DepartmentId,Salary</span><br><span class="line">                 <span class="keyword">FROM</span> Employee</span><br><span class="line">                 <span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId,Salary</span><br><span class="line">                 <span class="keyword">ORDER</span> <span class="keyword">BY</span> DepartmentId,Salary <span class="keyword">DESC</span></span><br><span class="line">             )te</span><br><span class="line">       )t</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Department dep </span><br><span class="line"><span class="keyword">ON</span> t.DepartmentId = dep.Id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Employee emp </span><br><span class="line"><span class="keyword">ON</span> t.DepartmentId = emp.DepartmentId <span class="keyword">and</span> t.Salary = emp.Salary <span class="keyword">and</span> t.RANK &lt;= <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t.DepartmentId, t.Salary <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      |  90000 |</span><br><span class="line">| IT         | Joe      |  85000 |</span><br><span class="line">| IT         | Randy    |  85000 |</span><br><span class="line">| IT         | Will     |  70000 |</span><br><span class="line">| Sales      | Henry    |  80000 |</span><br><span class="line">| Sales      | Sam      |  60000 |</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure>


<h2 id="196-删除重复的电子邮箱"><a href="#196-删除重复的电子邮箱" class="headerlink" title="196-删除重复的电子邮箱"></a>196-删除重复的电子邮箱</h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个 SQL 查询，来删除 Person 表中所有重复的电子邮箱，重复的邮箱里只保留 Id 最小 的那个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span><br><span class="line">Id 是这个表的主键。</span><br></pre></td></tr></table></figure>

<p>例如，在运行你的查询语句之后，上面的 Person 表应返回以下几行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-9"><a href="#MySQL脚本-9" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `person`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`person`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`person`</span> (</span><br><span class="line"> <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`Email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of person</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`person`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>,<span class="string">'john@example.com'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`person`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>,<span class="string">'bob@example.com'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`person`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>,<span class="string">'john@example.com'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-10"><a href="#本题回答-10" class="headerlink" title="本题回答"></a>本题回答</h3><ul>
<li>查询目标：删除一条记录</li>
<li>查询范围：Person表</li>
<li>查询条件：删除所有重复的电子邮箱 ，重复的邮箱里只保留Id最小的哪个。</li>
</ul>
<p>显然，通过这个查询条件可以提取出来两条and关系的条件：</p>
<ul>
<li>找出所有重复的电子邮箱</li>
<li>删除Id大的重复邮箱</li>
<li>对于条件（1），需要判断出所有重复的电子邮箱，即<code>p1.Email = p2.Email</code>；</li>
<li>对于条件（2），需要判断重复邮箱中Id较大的：<code>p1.Id &gt; p2.Id</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">DELETE</span> p1</span><br><span class="line"><span class="keyword">FROM</span> Person p1,Person p2</span><br><span class="line"><span class="keyword">WHERE</span> (p1.Email = p2.Email) <span class="keyword">AND</span> (p1.Id &gt; p2.Id);</span><br></pre></td></tr></table></figure>


<h2 id="197-上升的温度"><a href="#197-上升的温度" class="headerlink" title="197-上升的温度"></a>197-上升的温度</h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个 Weather 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+------------------+------------------+</span><br><span class="line">| Id(INT) | RecordDate(DATE) | Temperature(INT) |</span><br><span class="line">+---------+------------------+------------------+</span><br><span class="line">|       1 |       2015-01-01 |               10 |</span><br><span class="line">|       2 |       2015-01-02 |               25 |</span><br><span class="line">|       3 |       2015-01-03 |               20 |</span><br><span class="line">|       4 |       2015-01-04 |               30 |</span><br><span class="line">+---------+------------------+------------------+</span><br></pre></td></tr></table></figure>

<p>例如，根据上述给定的 Weather 表格，返回如下 Id:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+</span><br><span class="line">| Id |</span><br><span class="line">+----+</span><br><span class="line">|  2 |</span><br><span class="line">|  4 |</span><br><span class="line">+----+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-10"><a href="#MySQL脚本-10" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `weather`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`weather`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`weather`</span> (</span><br><span class="line"> <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`RecordDate`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`Temperature`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of weather</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`weather`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>,<span class="string">'2015-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`weather`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>,<span class="string">'2015-01-02'</span>, <span class="string">'25'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`weather`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>,<span class="string">'2015-01-03'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`weather`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>,<span class="string">'2015-01-04'</span>, <span class="string">'30'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题答案"><a href="#本题答案" class="headerlink" title="本题答案"></a>本题答案</h3><p>我们可以使用MySQL的函数<code>DATEDIFF</code>来计算两个日期的差值，我们的限制条件是温度高且日期差1。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> a.Id</span><br><span class="line"><span class="keyword">FROM</span> Weather a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Weather b</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">DATEDIFF</span>(a.RecordDate,b.RecordDate) = <span class="number">1</span> <span class="keyword">AND</span> a.Temperature &gt; b.Temperature;</span><br></pre></td></tr></table></figure>


<h2 id="595-大的国家"><a href="#595-大的国家" class="headerlink" title="595-大的国家"></a>595-大的国家</h2><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><p>这里有张 World 表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-----------------+------------+------------+--------------+---------------+</span><br><span class="line">| name            | continent  | area       | population   | gdp           |</span><br><span class="line">+-----------------+------------+------------+--------------+---------------+</span><br><span class="line">| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span><br><span class="line">| Albania         | Europe     | 28748      | 2831741      | 12960000      |</span><br><span class="line">| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span><br><span class="line">| Andorra         | Europe     | 468        | 78115        | 3712000       |</span><br><span class="line">| Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span><br><span class="line">+-----------------+------------+------------+--------------+---------------+</span><br></pre></td></tr></table></figure>

<p>如果一个国家的面积超过300万平方公里，或者人口超过2500万，那么这个国家就是大国家。</p>
<p>编写一个SQL查询，输出表中所有大国家的名称、人口和面积。</p>
<p>例如，根据上表，我们应该输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------------+-------------+--------------+</span><br><span class="line">| name         | population  | area         |</span><br><span class="line">+--------------+-------------+--------------+</span><br><span class="line">| Afghanistan  | 25500100    | 652230       |</span><br><span class="line">| Algeria      | 37100000    | 2381741      |</span><br><span class="line">+--------------+-------------+--------------+</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-11"><a href="#MySQL脚本-11" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `world`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`world`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`world`</span> (</span><br><span class="line">  <span class="string">`name`</span><span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`continent`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`area`</span><span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`population`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`gdp`</span><span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of world</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`world`</span> <span class="keyword">VALUES</span> (<span class="string">'Afghanistan'</span>,<span class="string">'Asia'</span>, <span class="string">'652230'</span>, <span class="string">'25500100'</span>, <span class="string">'20343000000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`world`</span> <span class="keyword">VALUES</span> (<span class="string">'Albania'</span>,<span class="string">'Europe'</span>, <span class="string">'28748'</span>, <span class="string">'2831741'</span>, <span class="string">'12960000000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`world`</span> <span class="keyword">VALUES</span> (<span class="string">'Algeria'</span>,<span class="string">'Africa'</span>, <span class="string">'2381741'</span>, <span class="string">'37100000'</span>, <span class="string">'188681000000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`world`</span> <span class="keyword">VALUES</span> (<span class="string">'Andorra'</span>,<span class="string">'Europe'</span>, <span class="string">'468'</span>, <span class="string">'78115'</span>, <span class="string">'3712000000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`world`</span> <span class="keyword">VALUES</span> (<span class="string">'Angola'</span>, <span class="string">'Africa'</span>,<span class="string">'1246700'</span>, <span class="string">'20609294'</span>, <span class="string">'100990000000'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-11"><a href="#本题回答-11" class="headerlink" title="本题回答"></a>本题回答</h3><p>需要注意的是：如果一个国家的面积超过300万平方公里，<strong>或者</strong>人口超过2500万，那么这个国家就是大国家。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,population,area</span><br><span class="line"><span class="keyword">FROM</span> World</span><br><span class="line"><span class="keyword">WHERE</span> area &gt; <span class="number">3000000</span> <span class="keyword">OR</span> population &gt; <span class="number">25000000</span>;</span><br></pre></td></tr></table></figure>


<h2 id="596-超过5名学生的课"><a href="#596-超过5名学生的课" class="headerlink" title="596-超过5名学生的课"></a>596-超过5名学生的课</h2><h3 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一个courses 表 ，有: student (学生) 和 class (课程)。</p>
<p>请列出所有超过或等于5名学生的课。</p>
<p>例如,表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+------------+</span><br><span class="line">| student | class      |</span><br><span class="line">+---------+------------+</span><br><span class="line">| A       | Math       |</span><br><span class="line">| B       | English    |</span><br><span class="line">| C       | Math       |</span><br><span class="line">| D       | Biology    |</span><br><span class="line">| E       | Math       |</span><br><span class="line">| F       | Computer   |</span><br><span class="line">| G       | Math       |</span><br><span class="line">| H       | Math       |</span><br><span class="line">| I       | Math       |</span><br><span class="line">+---------+------------+</span><br></pre></td></tr></table></figure>

<p>应该输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| class   |</span><br><span class="line">+---------+</span><br><span class="line">| Math    |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure>

<p><strong>Note:学生在每个课中不应被重复计算。</strong></p>
<h3 id="MySQL脚本-12"><a href="#MySQL脚本-12" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `courses`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`courses`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`courses`</span> (</span><br><span class="line"> <span class="string">`student`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`class`</span><span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of courses</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`courses`</span> <span class="keyword">VALUES</span> (<span class="string">'A'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`courses`</span> <span class="keyword">VALUES</span> (<span class="string">'B'</span>, <span class="string">'English'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`courses`</span> <span class="keyword">VALUES</span> (<span class="string">'C'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`courses`</span> <span class="keyword">VALUES</span> (<span class="string">'D'</span>, <span class="string">'Biology'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`courses`</span> <span class="keyword">VALUES</span> (<span class="string">'E'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`courses`</span> <span class="keyword">VALUES</span> (<span class="string">'F'</span>, <span class="string">'Computer'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`courses`</span> <span class="keyword">VALUES</span> (<span class="string">'G'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`courses`</span> <span class="keyword">VALUES</span> (<span class="string">'H'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`courses`</span> <span class="keyword">VALUES</span> (<span class="string">'I'</span>, <span class="string">'Math'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-12"><a href="#本题回答-12" class="headerlink" title="本题回答"></a>本题回答</h3><p>这表里有重复记录的，<strong>比如A学生选了Math的记录可以有多条，但是认为Math只被A学生选了1次</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">FROM</span> courses</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> student) &gt;= <span class="number">5</span>;</span><br></pre></td></tr></table></figure>


<h2 id="601-体育馆的人流量"><a href="#601-体育馆的人流量" class="headerlink" title="601-体育馆的人流量"></a>601-体育馆的人流量</h2><h3 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h3><p>X 市建了一个新的体育馆，每日人流量信息被记录在这三列信息中：序号 (id)、日期 (date)、 人流量 (people)。</p>
<p>请编写一个查询语句，找出高峰期时段，要求连续三天及以上，并且每天人流量均不少于100。</p>
<p>例如，表 stadium：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------------+-----------+</span><br><span class="line">| id   | date       | people    |</span><br><span class="line">+------+------------+-----------+</span><br><span class="line">| 1    | 2017-01-01 | 10        |</span><br><span class="line">| 2    | 2017-01-02 | 109       |</span><br><span class="line">| 3    | 2017-01-03 | 150       |</span><br><span class="line">| 4    | 2017-01-04 | 99        |</span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+------+------------+-----------+</span><br></pre></td></tr></table></figure>

<p>对于上面的示例数据，输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------------+-----------+</span><br><span class="line">| id   | date       | people    |</span><br><span class="line">+------+------------+-----------+</span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+------+------------+-----------+</span><br></pre></td></tr></table></figure>

<p><strong>Note:每天只有一行记录，日期随着 id 的增加而增加</strong>。</p>
<h3 id="MySQL脚本-13"><a href="#MySQL脚本-13" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> stadium (<span class="keyword">id</span> <span class="built_in">int</span>, visit_date <span class="built_in">DATE</span> <span class="literal">NULL</span>, people <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> stadium;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2017-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2017-01-02'</span>, <span class="string">'109'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2017-01-03'</span>, <span class="string">'150'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2017-01-04'</span>, <span class="string">'99'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'2017-01-05'</span>, <span class="string">'145'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2017-01-06'</span>, <span class="string">'1455'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'2017-01-07'</span>, <span class="string">'199'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2017-01-08'</span>, <span class="string">'188'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-13"><a href="#本题回答-13" class="headerlink" title="本题回答"></a>本题回答</h3><p>举例来说：<code>(29,&#39;2017-5-29&#39;,150)</code>,<code>(30,&#39;2017-6-1&#39;,150)</code>, 没有5月30日，<strong>按照日期检索就会直接跳过，但这个其实是算连续的，所以只能按照id来检索</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> t1.*</span><br><span class="line"><span class="keyword">FROM</span> stadium t1, stadium t2, stadium t3</span><br><span class="line"><span class="keyword">WHERE</span> t1.people &gt;= <span class="number">100</span> <span class="keyword">AND</span> t2.people &gt;= <span class="number">100</span> <span class="keyword">AND</span> t3.people &gt;= <span class="number">100</span></span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">(</span><br><span class="line">    (t1.id - t2.id = <span class="number">1</span> <span class="keyword">AND</span> t1.id - t3.id = <span class="number">2</span> <span class="keyword">AND</span> t2.id - t3.id = <span class="number">1</span>) </span><br><span class="line">    <span class="keyword">OR</span></span><br><span class="line">    (t2.id - t1.id = <span class="number">1</span> <span class="keyword">AND</span> t2.id - t3.id = <span class="number">2</span> <span class="keyword">AND</span> t1.id - t3.id = <span class="number">1</span>) </span><br><span class="line">    <span class="keyword">OR</span></span><br><span class="line">    (t3.id - t2.id = <span class="number">1</span> <span class="keyword">AND</span> t2.id - t1.id = <span class="number">1</span> <span class="keyword">AND</span> t3.id - t1.id = <span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t1.id;</span><br></pre></td></tr></table></figure>


<h2 id="620-有趣的电影"><a href="#620-有趣的电影" class="headerlink" title="620-有趣的电影"></a>620-有趣的电影</h2><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><p>某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着影评和相关电影描述。</p>
<p>作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有影片描述为<code>非 boring (不无聊)</code> 的并且 <code>id 为奇数</code> 的影片，结果请按等级 rating 排列。</p>
<p>例如，下表 cinema:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">|   2     | Science   |   fiction    |   8.5     |</span><br><span class="line">|   3     | irish     |   boring     |   6.2     |</span><br><span class="line">|   4     | Ice song  |   Fantacy    |   8.6     |</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br></pre></td></tr></table></figure>

<p>对于上面的例子，则正确的输出是为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br></pre></td></tr></table></figure>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="MySQL判断奇偶数的方法"><a href="#MySQL判断奇偶数的方法" class="headerlink" title="MySQL判断奇偶数的方法"></a>MySQL判断奇偶数的方法</h4><blockquote>
<p><a href="https://blog.csdn.net/dta0502/article/details/88104725" target="_blank" rel="noopener external nofollow noreferrer">MySQL判断奇偶数的方法</a></p>
</blockquote>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul>
<li>查询结果可以用ORDER BY 排序；</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> item</span><br></pre></td></tr></table></figure>

<ul>
<li>默认按照升序排序（由小到大），也可变为降序（由大到小）；</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> item <span class="keyword">ASC</span>     //升序（默认）</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> item <span class="keyword">DESC</span>     //降序</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以用多个字段进行排序；</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> item1 <span class="keyword">ASC</span>,item2 <span class="keyword">DESC</span></span><br><span class="line">//先按item1字段排序（升序），item1字段相等就按照item2字段排序（降序）。</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-14"><a href="#本题回答-14" class="headerlink" title="本题回答"></a>本题回答</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,movie,description,rating</span><br><span class="line"><span class="keyword">FROM</span> cinema</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> REGEXP <span class="string">'[13579]$'</span> <span class="keyword">AND</span> description != <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> rating <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>


<h2 id="626-换座位"><a href="#626-换座位" class="headerlink" title="626-换座位"></a>626-换座位</h2><h3 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h3><p>小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。</p>
<p>其中纵列的 id 是连续递增的</p>
<p>小美想改变相邻俩学生的座位。</p>
<p>你能不能帮她写一个 SQL query 来输出小美想要的结果呢？</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Abbot   |</span><br><span class="line">|    2    | Doris   |</span><br><span class="line">|    3    | Emerson |</span><br><span class="line">|    4    | Green   |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure>

<p>假如数据输入的是上表，则输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Doris   |</span><br><span class="line">|    2    | Abbot   |</span><br><span class="line">|    3    | Green   |</span><br><span class="line">|    4    | Emerson |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure>

<p><strong>注意：如果学生人数是奇数，则不需要改变最后一个同学的座位。</strong></p>
<h3 id="MySQL脚本-14"><a href="#MySQL脚本-14" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> seat(<span class="keyword">id</span> <span class="built_in">int</span>, studentvarchar(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> seat;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'1'</span>,<span class="string">'Abbot'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'2'</span>,<span class="string">'Doris'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'3'</span>,<span class="string">'Emerson'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'4'</span>,<span class="string">'Green'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'5'</span>,<span class="string">'Jeames'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-15"><a href="#本题回答-15" class="headerlink" title="本题回答"></a>本题回答</h3><p>我们可以分成三块来写，第一块就是id为偶数的，id-1就相当于和奇数的互换了，第二块是id为奇数的，id+1就相当于和偶数的互换了，最后一块是<strong>最后一个为奇数的</strong>，不换，然后三块合并排序就出来结果了。</p>
<h4 id="方法1-3"><a href="#方法1-3" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> s.id,s.student</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> (<span class="keyword">id</span><span class="number">-1</span>) <span class="keyword">AS</span> <span class="keyword">id</span>,student</span><br><span class="line">      <span class="keyword">FROM</span> seat</span><br><span class="line">      <span class="keyword">WHERE</span> <span class="keyword">mod</span>(<span class="keyword">id</span>,<span class="number">2</span>) = <span class="number">0</span></span><br><span class="line">      <span class="keyword">UNION</span></span><br><span class="line">      <span class="keyword">SELECT</span> (<span class="keyword">id</span>+<span class="number">1</span>) <span class="keyword">AS</span> <span class="keyword">id</span>,student</span><br><span class="line">      <span class="keyword">FROM</span> seat</span><br><span class="line">      <span class="keyword">WHERE</span> <span class="keyword">mod</span>(<span class="keyword">id</span>,<span class="number">2</span>) = <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">id</span> != (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> seat)</span><br><span class="line">      <span class="keyword">UNION</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">id</span>,student</span><br><span class="line">      <span class="keyword">FROM</span> seat</span><br><span class="line">      <span class="keyword">WHERE</span> <span class="keyword">mod</span>(<span class="keyword">id</span>,<span class="number">2</span>) = <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">id</span> = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> seat)) s</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s.id;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，最后一块的过滤条件为<code>WHERE mod(id,2) = 1 AND id = (SELECT COUNT(*) FROM seat</code>，需要保证<code>id</code>不为偶数。</p>
<h4 id="方法2——CASE-WHEN"><a href="#方法2——CASE-WHEN" class="headerlink" title="方法2——CASE WHEN"></a>方法2——CASE WHEN</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> (<span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">MOD</span>(<span class="keyword">id</span>,<span class="number">2</span>)!=<span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">id</span>!=counts <span class="keyword">THEN</span> <span class="keyword">id</span>+<span class="number">1</span>  </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">MOD</span>(<span class="keyword">id</span>,<span class="number">2</span>)!=<span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">id</span>=counts <span class="keyword">THEN</span> <span class="keyword">id</span>  </span><br><span class="line">        <span class="keyword">ELSE</span> <span class="keyword">id</span><span class="number">-1</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="keyword">id</span>,student </span><br><span class="line">        <span class="keyword">FROM</span> seat,(<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> counts <span class="keyword">FROM</span> seat) <span class="keyword">AS</span> seat_counts  </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure>


<h2 id="627-交换工资"><a href="#627-交换工资" class="headerlink" title="627-交换工资"></a>627-交换工资</h2><h3 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个 salary 表，如下所示，有 m=男性 和 f=女性 的值 。交换所有的 f 和 m 值（例如，将所有 f 值更改为 m，反之亦然）。要求使用一个更新（Update）语句，并且没有中间临时表。</p>
<p>请注意，你必须编写一个 Update 语句，不要编写任何 Select 语句。</p>
<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | m   | 2500   |</span><br><span class="line">| 2  | B    | f   | 1500   |</span><br><span class="line">| 3  | C    | m   | 5500   |</span><br><span class="line">| 4  | D    | f   | 500    |</span><br></pre></td></tr></table></figure>

<p>运行你所编写的更新语句之后，将会得到以下表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|----|------|-----|--------|</span><br><span class="line">| 1  | A    | f   | 2500   |</span><br><span class="line">| 2  | B    | m   | 1500   |</span><br><span class="line">| 3  | C    | f   | 5500   |</span><br><span class="line">| 4  | D    | m   | 500    |</span><br></pre></td></tr></table></figure>

<h3 id="MySQL脚本-15"><a href="#MySQL脚本-15" class="headerlink" title="MySQL脚本"></a>MySQL脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `salary`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`salary`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salary`</span> (</span><br><span class="line">  <span class="string">`id`</span><span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span><span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span><span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARYKEY (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of salary</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salary`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'A'</span>, <span class="string">'m'</span>,<span class="string">'2500'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salary`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'B'</span>, <span class="string">'f'</span>,<span class="string">'1500'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salary`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'C'</span>, <span class="string">'m'</span>,<span class="string">'5500'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salary`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'D'</span>, <span class="string">'f'</span>,<span class="string">'500'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="本题回答-16"><a href="#本题回答-16" class="headerlink" title="本题回答"></a>本题回答</h3><p>方法一：使用if函数</p>
<p><code>IF(expr1, expr2, expr3)</code> 如果expr1为TRUE，则IF()的返回值为expr2；否则返回值为expr3。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">UPDATE</span> salary</span><br><span class="line"><span class="keyword">SET</span> sex = <span class="keyword">IF</span>(sex = <span class="string">"f"</span>,<span class="string">"m"</span>,<span class="string">"f"</span>);</span><br></pre></td></tr></table></figure>

<p>方法二：使用case…when..then..else..end</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary </span><br><span class="line"><span class="keyword">SET</span> sex  = (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="string">'m'</span> <span class="keyword">THEN</span> <span class="string">'f'</span> <span class="keyword">ELSE</span> <span class="string">'m'</span> <span class="keyword">END</span>);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>计算机基础</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10下MySQL安装配置</title>
    <url>/archives/72ae4f3c.html</url>
    <content><![CDATA[<h2 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h2><p>下面是<code>mysql-8.0.13-winx64.zip</code>版下载链接：</p>
<p><a href="https://dev.mysql.com/downloads/file/?id=480557" target="_blank" rel="noopener external nofollow noreferrer">https://dev.mysql.com/downloads/file/?id=480557</a></p>
<a id="more"></a>

<h2 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h2><p>复制解压后的mysql到C盘或者其他磁盘下。</p>
<p>我们去系统的环境变量的path里添加一个mysql的配置 ，<strong>指向mysql的bin目录</strong>。</p>
<h2 id="配置初始化的my-ini文件的文件"><a href="#配置初始化的my-ini文件的文件" class="headerlink" title="配置初始化的my.ini文件的文件"></a>配置初始化的my.ini文件的文件</h2><p>解压后的目录并没有的my.ini文件，没关系可以自行创建在安装根目录下添加的my.ini（新建文本文件，将文件类型改为的.ini），写入基本配置： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port&#x3D;3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir&#x3D;X:\\software\mysql-8.0.13-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir&#x3D;X:\\software\mysql-8.0.13-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"># 允许连接失败的次数。</span><br><span class="line">max_connect_errors&#x3D;10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">#mysql_native_password</span><br><span class="line">default_authentication_plugin&#x3D;mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port&#x3D;3306</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure>


<p><strong>注意这里保存时编码为ANSI</strong>，否则下一步安装会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld: [ERROR] Found option without preceding group in config file X:\software\</span><br><span class="line">mysql-8.0.13-winx64\my.ini at line 1.</span><br><span class="line">mysqld: [ERROR] Fatal error in defaults handling. Program aborted!</span><br></pre></td></tr></table></figure>

<p>特别说明<code>.ini文件</code>是Window里面的配置文件。保存里面各种默认的数据。安装版的是在安装的时候让你自己选然后系统给你保存进来，zip archive是自己写，都一样。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在MySQL的安装目录的仓目录（<code>X:\\software\mysql-8.0.13-winx64\bin</code>）下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure>

<p>安装成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2018-12-20T06:53:02.660175Z 0 [System] [MY-013169] [Server] X:\software\mysql-8.0.13-winx64\bin\mysqld.exe (mysqld 8.0.13) initializing of server in progress as process 7384</span><br><span class="line">2018-12-20T06:53:02.677176Z 0 [Warning] [MY-013242] [Server] --character-set-server: &#39;utf8&#39; is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.</span><br><span class="line">2018-12-20T06:53:14.639860Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: A#7L*VV!u-lt</span><br><span class="line">2018-12-20T06:53:20.538197Z 0 [System] [MY-013170] [Server] X:\software\mysql-8.0.13-winx64\bin\mysqld.exe (mysqld 8.0.13) initializing of server has completed</span><br></pre></td></tr></table></figure>


<h2 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h2><p>在MySQL的安装目录的仓目录（<code>X:\\software\mysql-8.0.13-winx64\bin</code>）下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --install [服务名]（服务名可以不加默认为mysql）</span><br></pre></td></tr></table></figure>

<p>服务安装成功之后通过命令<code>net start mysql</code>启动MySQL的服务。</p>
<h2 id="进入MySQL，更改密码"><a href="#进入MySQL，更改密码" class="headerlink" title="进入MySQL，更改密码"></a>进入MySQL，更改密码</h2><p>执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>下面修改密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'新密码'</span>;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 报错 mysql Failed to open file &#39;sqlname.sql&#39;, error_ 2 解决方案</title>
    <url>/archives/b7ed4949.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Linux服务器上MySQL导入数据库文件失败，报错内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to open file &#39;sqlname.sql&#39;, error: 2</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>首先我们来看一下网上盛行的MySQL导入数据库文件的两种方法：</p>
<p>方法一：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> databasename;</span><br><span class="line">source /path/sqlfile.sql;</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u username -p password database &lt; /path/sqlfile.sql;</span><br></pre></td></tr></table></figure>

<p>后面网上查询了一下，mysql里面那些路径的东西在Linux下貌似是以相对路径的形式来查询的，比如我们在<code>/usr/local/tomcat</code>里面打开的MySQL，那么里面的所有路径都是在<code>/usr/local/tomcat</code>目录下进行相对路径查询的。</p>
<p>比如我们之前写的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source /sqlfile/20160825012.sql;</span><br></pre></td></tr></table></figure>

<p>那在MySQL看来，我们给的指令就是让它找<code>/usr/local/tomcat/sqlfile/20160825012.sql</code>文件，这样肯定找不到了。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决办法就挺简单的，我们首先找到准确的目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /sqlfile</span><br></pre></td></tr></table></figure>

<p>然后ls一下确定我们的sql文件在这个路径下。<strong>然后打开MySQL</strong>，输入指令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source 20160825012.sql;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 运行 service mongod start 后服务没有启动成功</title>
    <url>/archives/62b59f61.html</url>
    <content><![CDATA[<p>查看日志（<code>/var/log/mongodb/mongodb.log</code>）有如下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Wiredtiger error(13).....file:WiredTiger.wt,connection:&#x2F;var&#x2F;lib&#x2F;mongodb&#x2F;WiredTiger.turtle:handle-open:open:Permission denied</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="一、问题分析"><a href="#一、问题分析" class="headerlink" title="一、问题分析"></a>一、问题分析</h2><p>主要是权限问题。</p>
<p><code>service mongod start</code>启动时使用的用户默认为<code>mongodb</code>，具体可查看系统文件（<code>/lib/systemd/system/mongod.service</code>）</p>
<p>其中含有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">User&#x3D;mongodb</span><br><span class="line">Group&#x3D;mongodb</span><br></pre></td></tr></table></figure>

<p>然后在查看（<code>/var/lib/mongodb/WiredTiger.turtle</code>）的文件权限，使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib</span><br><span class="line">ls -l /var/lib/mongodb</span><br></pre></td></tr></table></figure>

<p>查看权限发现 <code>WiredTiger.turtle</code>以及其他若干个文件的权限为root。<strong>所以由于mogodb用户的权限无法访问root权限下的文件造成服务启动失败。</strong></p>
<p>但是为什么这几个文件的权限会变为root呢？</p>
<p>我的原因是曾经使用过root用户操作过数据库（在root下使用mongod命令等），导致文件的权限变化从而无法再使用（service mongod start）。</p>
<h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><p>采用以下命令将数据文件权限改回<code>mongodb</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># storage.dbPath</span></span><br><span class="line">chown -R mongodb:mongodb /var/lib/mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># systemLog.path</span></span><br><span class="line">sudo chown -R mongodb:mongodb /var/<span class="built_in">log</span>/mongodb</span><br></pre></td></tr></table></figure>

<p>然后再次启动 <code>service mongo start</code>就可以了，但是如果再以root用户去操作数据库仍会出现上述问题。同时官方极不推荐在root用户下使用数据库。</p>
<h3 id="方案二（从安全性考虑不推荐）："><a href="#方案二（从安全性考虑不推荐）：" class="headerlink" title="方案二（从安全性考虑不推荐）："></a>方案二（从安全性考虑不推荐）：</h3><p>修改<code>/lib/systemd/system/mongod.service</code>中的<code>user</code>为<code>root</code>,<code>Group</code>为<code>root</code>。</p>
<p>然后再次启动 <code>service mongod start</code>。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB旋转日志</title>
    <url>/archives/aa727c9b.html</url>
    <content><![CDATA[<p>MongoDB的日志增长的很快，<code>/var</code>所在的空间马上就占满了。</p>
<p><strong>这时候可以使用旋转日志。</strong></p>
<a id="more"></a>

<h2 id="使用logRotate命令"><a href="#使用logRotate命令" class="headerlink" title="使用logRotate命令"></a>使用<code>logRotate</code>命令</h2><p>不需要重启MongoDB服务的方法重新开启一个新日志文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;use admin</span><br><span class="line">&gt;db.runCommand(&#123;<span class="attr">logRotate</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML入门笔记</title>
    <url>/archives/ea82bb07.html</url>
    <content><![CDATA[<h2 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Title&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;This is text.&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;h2&gt;Sub-Title&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;p&gt;This is text.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>这个元素中的所有内容都会显示在浏览器的主窗口中。</p>
<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>body元素前面，包含这个页面的信息。</p>
<h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>head元素中的title元素，显示在浏览器的顶端。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p lang&#x3D;&quot;en-us&quot;&gt;Paragraph in English&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>六个级别：h1、h2、h3、h4、h5、h6</p>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p><code>&lt;p&gt;</code></p>
<h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p><code>&lt;b&gt;</code></p>
<h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p><code>&lt;i&gt;</code></p>
<h3 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h3><p><code>&lt;sup&gt;</code></p>
<h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><p><code>&lt;sub&gt;</code></p>
<h3 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h3><p>当浏览器遇到两个或以上的连续空格时，只将其显示为一个空格，这一特性成为<strong>白色空间折叠</strong>。</p>
<h3 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h3><p><code>&lt;br /&gt;</code></p>
<h3 id="水平符"><a href="#水平符" class="headerlink" title="水平符"></a>水平符</h3><p><code>&lt;hr /&gt;</code></p>
<h3 id="语义化标记"><a href="#语义化标记" class="headerlink" title="语义化标记"></a>语义化标记</h3><p>不影响网页结构，却为所在页面添加了额外信息。</p>
<ul>
<li><code>&lt;strong&gt;</code>元素：加粗</li>
<li><code>&lt;em&gt;</code>元素：表明重点</li>
<li><code>&lt;blockquote&gt;</code>元素：表明引用</li>
</ul>
<h3 id="缩写词和首字母缩写词"><a href="#缩写词和首字母缩写词" class="headerlink" title="缩写词和首字母缩写词"></a>缩写词和首字母缩写词</h3><ul>
<li>HTML4：缩写词：<code>&lt;abbr&gt;</code>；首字母缩写词：<code>&lt;acronym&gt;</code></li>
<li>HTML5：均采用<code>&lt;abbr&gt;</code></li>
</ul>
<h3 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h3><p><code>&lt;cite&gt;</code></p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><code>&lt;dfn&gt;</code></p>
<h3 id="设计者详细信息"><a href="#设计者详细信息" class="headerlink" title="设计者详细信息"></a>设计者详细信息</h3><p><code>&lt;address&gt;</code></p>
<h3 id="内容的修改"><a href="#内容的修改" class="headerlink" title="内容的修改"></a>内容的修改</h3><ul>
<li><code>&lt;ins&gt;</code>：通常带有下划线</li>
<li><code>&lt;del&gt;</code>：通常带有删除线</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>

<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><ul>
<li><code>&lt;dt&gt;</code>用来包含被定义的术语</li>
<li><code>&lt;dd&gt;</code>用来包含定义</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;&lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dt&gt;&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>

<h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;Text1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;Text2</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;Text2.1&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;Text2.2&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接是由<code>&lt;a&gt;</code>元素建立的，用户可以点击位于起始标签和结束标签之间的任何内容。使用<code>href</code>特性来指定要链接到的页面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.imdb.com&quot;&gt;IMDB&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="指向其他网站的链接"><a href="#指向其他网站的链接" class="headerlink" title="指向其他网站的链接"></a>指向其他网站的链接</h3><p>采用绝对URL。</p>
<h3 id="指向同一网站中其它页面的链接"><a href="#指向同一网站中其它页面的链接" class="headerlink" title="指向同一网站中其它页面的链接"></a>指向同一网站中其它页面的链接</h3><p>采用相对URL。</p>
<ul>
<li>相同的文件夹：<code>href=&quot;reviews.html&quot;</code></li>
<li>子文件夹：<code>href=&quot;music/listings.html&quot;</code></li>
<li>父文件夹：<code>href=&quot;../index.html&quot;</code></li>
</ul>
<h3 id="EMAIL链接"><a href="#EMAIL链接" class="headerlink" title="EMAIL链接"></a>EMAIL链接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;mailto:jon@example.org&quot;&gt;Email Jon&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="在新窗口打开链接"><a href="#在新窗口打开链接" class="headerlink" title="在新窗口打开链接"></a>在新窗口打开链接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.imdb.com&quot; target&#x3D;&quot;_blank&quot;&gt;Internet Movie Database&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="链接到当前页面的某个特定位置"><a href="#链接到当前页面的某个特定位置" class="headerlink" title="链接到当前页面的某个特定位置"></a>链接到当前页面的某个特定位置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 id&#x3D;&quot;top&quot;&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;#top&quot;&gt;Top&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="链接到其他页面的某个特定位置"><a href="#链接到其他页面的某个特定位置" class="headerlink" title="链接到其他页面的某个特定位置"></a>链接到其他页面的某个特定位置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.htmlandcssbook.com&#x2F;#bottom&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><h3 id="添加图像"><a href="#添加图像" class="headerlink" title="添加图像"></a>添加图像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;images&#x2F;qukka.jpg&quot; alt&#x3D;&quot;说明&quot; title&#x3D;&quot;附加信息&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>height：像素为单位指定图像的高度（现在交给CSS）</li>
<li>width：像素为单位指定图像的宽度（现在交给CSS）</li>
</ul>
<h3 id="图像格式"><a href="#图像格式" class="headerlink" title="图像格式"></a>图像格式</h3><ul>
<li>JPEG：当图片包含多种不同的颜色</li>
<li>PNG、GIF：当图像中包含少量的颜色或者大面积的同色区域</li>
</ul>
<h3 id="图像大小"><a href="#图像大小" class="headerlink" title="图像大小"></a>图像大小</h3><p>在保存网站中所使用的图像时，它的宽度和高度应该与你希望它在页面中显示的大小保持一致。</p>
<h3 id="图像的衡量和分辨率"><a href="#图像的衡量和分辨率" class="headerlink" title="图像的衡量和分辨率"></a>图像的衡量和分辨率</h3><p>采用像素来衡量，因为显示在计算机屏幕的图像由称为像素的小方块构成。屏幕的分辨率就是每英寸的屏幕上所容纳的像素数，在大多数计算机上，这个数值是可以提高或降低的。</p>
<p>如果一个屏幕的分辨率设置为<code>640像素*480像素</code>，然后将分辨率提高为<code>1024像素*768像素</code>，屏幕上显示的图像和文本将变小，这是因为在同样大小的空间内显示了更多的像素。</p>
<h3 id="矢量图像"><a href="#矢量图像" class="headerlink" title="矢量图像"></a>矢量图像</h3><ul>
<li>创建：通过在网格上设置关键点并绘制这些点之间的线条来完成，然后就可以在已经创建的线条上填充颜色。</li>
<li>SVG：可伸缩矢量图形</li>
</ul>
<h3 id="HTML5：图形和图形说明"><a href="#HTML5：图形和图形说明" class="headerlink" title="HTML5：图形和图形说明"></a>HTML5：图形和图形说明</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;figure&gt;</span><br><span class="line">    &lt;img&gt;</span><br><span class="line">    &lt;br &#x2F;&gt;</span><br><span class="line">    &lt;figcaption&gt;&lt;&#x2F;figcaption&gt;</span><br><span class="line">&lt;&#x2F;figure&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>figure</code>：包含图像以及对图像的说明</li>
<li><code>figcaption</code>：让网页设计人员给图像添加说明</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>tr：每行的起始</li>
<li>td：每个单元格</li>
</ul>
<h3 id="表格的标题"><a href="#表格的标题" class="headerlink" title="表格的标题"></a>表格的标题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th scope&#x3D;&quot;col&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th scope&#x3D;&quot;col&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope&#x3D;&quot;row&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope&#x3D;&quot;raw&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>th：表示列或行的标题（table heading）</li>
<li>scope特性：表明此元素是列标题还是行标题</li>
</ul>
<h3 id="跨列-行"><a href="#跨列-行" class="headerlink" title="跨列/行"></a>跨列/行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th scope&#x3D;&quot;col&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th scope&#x3D;&quot;col&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope&#x3D;&quot;row&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope&#x3D;&quot;raw&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;td colspan&#x3D;&quot;2&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>colspan：跨列</li>
<li>rawspan：跨行</li>
</ul>
<h3 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h3><ul>
<li>thead：标题所在元素</li>
<li>tbody：主体部分</li>
<li>tfoot：脚注所在元素</li>
</ul>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="表单结构"><a href="#表单结构" class="headerlink" title="表单结构"></a>表单结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;www.example.com&#x2F;subscribe.php&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>action：服务器一个页面的URL，这个页面用来在用户提交表单时接收表单中的信息。</li>
<li>method<ul>
<li>get：表单上的值附加在action特性所指定的URL末尾，适用于短表单、检索数据</li>
<li>post：表单上的值被放在HTTP头部信息进行发送，适用于上传文件、非常长、包含敏感信息、向数据库添加/删除信息</li>
</ul>
</li>
</ul>
<h3 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;www.example.com&#x2F;subscribe.php&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;Username:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; size&#x3D;&quot;15&quot; maxlength&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;input&gt;</code>元素用来创建多种不同的表单控件，其type特性的值决定它将要创建哪种控件。</li>
<li><code>type=&quot;text&quot;</code>：创建一个单行文本框</li>
<li><code>name</code>：这个特性值对表单控件进行标识</li>
<li><code>size</code>：指定文本框的宽度</li>
<li><code>maxlength</code>：限制用户在文本区域输入字符的数量</li>
</ul>
<h3 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h3><ul>
<li><code>type=&quot;password&quot;</code>：类似单行文本框，但是字符被掩盖</li>
</ul>
<h3 id="文本域（多行文本框）"><a href="#文本域（多行文本框）" class="headerlink" title="文本域（多行文本框）"></a>文本域（多行文本框）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;www.example.com&#x2F;subscribe.php&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;textarea name&#x3D;&quot;comments&quot; cols&#x3D;&quot;20&quot; rows&#x3D;&quot;4&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;textarea&gt;</code>：与其他input元素不同，<code>&lt;textarea&gt;</code>元素并非空元素，因此它包含起始标签和结束标签。</li>
<li>cols、rows现在应该使用CSS来控制</li>
</ul>
<h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;genre&quot; value&#x3D;&quot;pop&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>name：这个问题的所有单选按钮的name特性值都应该相同</li>
<li>value：被选中时要发送到服务器的值</li>
</ul>
<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;service&quot; value&#x3D;&quot;itunes&quot; checked&#x3D;&quot;checked&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="下拉列表框"><a href="#下拉列表框" class="headerlink" title="下拉列表框"></a>下拉列表框</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;ipod&quot;&gt;iPod&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;radio&quot;&gt;Radio&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="文件上传域"><a href="#文件上传域" class="headerlink" title="文件上传域"></a>文件上传域</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;www.example.com&#x2F;subscribe.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;p&gt;Upload your song in MP3 format:&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;user-song&quot; &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Upload&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;form&gt;</code>元素上的method特性值必须设置为post。</li>
<li><code>type=&quot;file&quot;</code>这个类型的input会创建一个后面附有Browse按钮的类似文本框的控件。</li>
<li><code>type=&quot;submit&quot;</code>提交按钮用来将表单发送到服务器。<code>value</code>特性用于控制按钮上显示的文本。</li>
</ul>
<h3 id="图像按钮"><a href="#图像按钮" class="headerlink" title="图像按钮"></a>图像按钮</h3><p>使用图像作为提交按钮。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;www.example.com&#x2F;subscribe.php&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;Subscribe to our email list:&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;image&quot; src&#x3D;&quot;images&#x2F;subscribe.jpg&quot;  &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="按钮和隐藏控件"><a href="#按钮和隐藏控件" class="headerlink" title="按钮和隐藏控件"></a>按钮和隐藏控件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;www.example.com&#x2F;subscribe.php&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">    &lt;button&gt;&lt;img src&#x3D;&quot;images&#x2F;add.gif&quot; alt&#x3D;&quot;add&quot; &#x2F;&gt; Add&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;bookmark&quot; value&#x3D;&quot;lyrics&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>引入<code>&lt;button&gt;</code>元素是为了让用户更好地控制按钮的显示方式，并且允许其他元素出现在<code>&lt;button&gt;</code>元素内。</li>
<li><code>type=&quot;hidden&quot;</code>表示隐藏表单控件，这类控件不会显示在页面上。</li>
</ul>
<h3 id="标签表单控件"><a href="#标签表单控件" class="headerlink" title="标签表单控件"></a>标签表单控件</h3><p>每个表单控件最好使用相应的<code>&lt;label&gt;</code>元素来代替简单的文本。</p>
<ul>
<li>用法一：将文本说明和表单输入框全部包围起来</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;label&gt;Age: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;age&quot; &#x2F;&gt;&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>用法二：与表单控件分开，使用for特性来指明<code>&lt;label&gt;</code>元素所关联的表单控件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;label for&#x3D;&quot;female&quot;&gt;Female &lt;&#x2F;label&gt;</span><br><span class="line">&lt;input id&#x3D;&quot;female&quot; type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;f&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>


<h3 id="组合表单元素"><a href="#组合表单元素" class="headerlink" title="组合表单元素"></a>组合表单元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;fieldset&gt;</span><br><span class="line">    &lt;legend&gt;Contact details&lt;&#x2F;legend&gt;</span><br><span class="line">    &lt;label&gt;Email:&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; &#x2F;&gt;&lt;&#x2F;label&gt;&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;label&gt;Mobile:&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;mobile&quot; &#x2F;&gt;&lt;&#x2F;label&gt;&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;label&gt;Telephone:&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;telephone&quot; &#x2F;&gt;&lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;fieldset&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;fieldset&gt;</code>：将置于其中的相关的表单控件分成一组</li>
<li><code>&lt;legend&gt;</code>：直接跟在起始标签<code>&lt;fieldset&gt;</code>后面并且包含一个标题</li>
</ul>
<h3 id="HTML5控件"><a href="#HTML5控件" class="headerlink" title="HTML5控件"></a>HTML5控件</h3><ul>
<li>表单验证：增加了一个<code>required</code>特性</li>
<li>日期控件：<code>&lt;input type=&quot;date&quot; name=&quot;depart&quot; /&gt;</code></li>
<li>电子邮件：<code>&lt;input type=&quot;email&quot; name=&quot;email&quot; /&gt;</code></li>
<li>URL输入：<code>&lt;input type=&quot;url&quot; name=&quot;website&quot; /&gt;</code></li>
<li>搜索输入控件：<code>&lt;input type=&quot;search&quot; name=&quot;search&quot; /&gt;</code></li>
</ul>
<h2 id="其他标记"><a href="#其他标记" class="headerlink" title="其他标记"></a>其他标记</h2><h3 id="DOCTYPE（文档类型）"><a href="#DOCTYPE（文档类型）" class="headerlink" title="DOCTYPE（文档类型）"></a>DOCTYPE（文档类型）</h3><p>因为HTML存在多个版本，因此每个网页的开头都应该用一个DOCTYPE声明来告诉浏览器此页使用了HTML的哪个版本。</p>
<p>HTML5：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="HTML中的注释"><a href="#HTML中的注释" class="headerlink" title="HTML中的注释"></a>HTML中的注释</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- --&gt;</span><br></pre></td></tr></table></figure>

<h3 id="id特性"><a href="#id特性" class="headerlink" title="id特性"></a>id特性</h3><p>每个HTML元素都可以附带id特性，id特性用来从页面中的其他元素中对一个元素进行唯一标识。</p>
<p><strong>注意：在一个页面中，没有哪两个元素的id特性值是相同的！</strong></p>
<h3 id="class特性"><a href="#class特性" class="headerlink" title="class特性"></a>class特性</h3><p>每个HTML元素都可以附带一个class特性，有时候你希望有一种方法可以指定多个元素并将这些元素和页面上的其他元素区分出来。</p>
<h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>有些元素在浏览器窗口中显示时总是另起一行，这些元素被称为<strong>块级元素</strong>。</p>
<p>块级元素的实例：</p>
<ul>
<li><code>&lt;h1&gt;</code></li>
<li><code>&lt;p&gt;</code></li>
<li><code>&lt;ul&gt;</code></li>
<li><code>&lt;li&gt;</code></li>
</ul>
<h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><p>有些元素在显示时总是与它的邻近元素出现在同一行内，这些元素被称为<strong>内联元素</strong>。</p>
<p>内联元素的实例：</p>
<ul>
<li><code>&lt;a&gt;</code></li>
<li><code>&lt;b&gt;</code></li>
<li><code>&lt;em&gt;</code></li>
<li><code>&lt;img&gt;</code></li>
</ul>
<h3 id="将文本和元素集中在一个块级元素中"><a href="#将文本和元素集中在一个块级元素中" class="headerlink" title="将文本和元素集中在一个块级元素中"></a>将文本和元素集中在一个块级元素中</h3><p><code>&lt;div&gt;</code>元素允许你将一组元素集中到一个块级元素内。</p>
<p>在浏览器中，<code>&lt;div&gt;</code>元素的内容会另起一行显示，但除了这一点，它不会使页面的呈现有什么不同。</p>
<h3 id="将文本和元素集中在一个内联元素中"><a href="#将文本和元素集中在一个内联元素中" class="headerlink" title="将文本和元素集中在一个内联元素中"></a>将文本和元素集中在一个内联元素中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Anish Kapoor won the Turner Prize in 1991 and exhibited at the &lt;span class&#x3D;&quot;gallery&quot;&gt;Tate Modern&lt;&#x2F;span&gt; gallery in London in 2003.&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;span&gt;</code>元素就像是<code>&lt;div&gt;</code>元素的内联版本。人们使用<code>&lt;span&gt;</code>元素最常见的原因就是可以利用CSS来控制<code>&lt;span&gt;</code>元素中的内容的外观。</p>
<h3 id="内嵌框架"><a href="#内嵌框架" class="headerlink" title="内嵌框架"></a>内嵌框架</h3><p><code>&lt;iframe&gt;</code>这一术语是<code>inline frame（内嵌框架）</code>的缩写。在网页中嵌入Google地图是内嵌框架的一种常用方式。内嵌框架中的内容可以是任何html页面。</p>
<p><code>&lt;iframe&gt;</code>的几个特性：</p>
<ul>
<li>src：指定要在框架中显示的页面的URL</li>
<li>height：指定内嵌框架高度的像素值</li>
<li>width：指定内嵌框架宽度的像素值</li>
<li>scrolling（HTML5不再支持）：表明是否在内嵌框架上显示滚动条</li>
<li>frameborder（HTML5不再支持）：表明是否显示框架的边框</li>
<li>seamless（HTML5的新特性）：应用在不希望出现滚动条的地方</li>
</ul>
<h3 id="页面信息"><a href="#页面信息" class="headerlink" title="页面信息"></a>页面信息</h3><p><code>&lt;meta&gt;</code>元素位于<code>&lt;head&gt;</code>元素中并包含着所在页面的相关信息。<code>&lt;meta&gt;</code>元素是空元素，所以它没有结束标签。<strong>它通过特性来携带信息。</strong></p>
<p>最常见的特性：</p>
<ul>
<li>name：你要设定的属性</li>
<li>content：你想给这个属性指定的值</li>
</ul>
<p>下面是<code>name</code>特性常见的值：</p>
<ul>
<li>description：页面的描述信息</li>
<li>keywords：一组以逗号分隔的关键词列表</li>
<li>robots：用于指定搜索引擎是否可以将这个页面加入到它们的搜索结果中</li>
</ul>
<p>下面是<code>http-equiv</code>特性常见的值：</p>
<ul>
<li>author：定义网页的设计者</li>
<li>pragma：用于防止浏览器对页面的缓存</li>
<li>expires：指定页面的过期时间</li>
</ul>
<p>下面是一个实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0, minimum-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;no&quot;&gt;</span><br><span class="line">    &lt;title&gt;算法图解-图书-图灵社区&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;apple-mobile-web-app-capable&quot; content&#x3D;&quot;yes&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;format-detection&quot; content&#x3D;&quot;telephone&#x3D;no&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>有一些字符用于编写HTML代码并作为HTML的保留字符。因此，如果想要在页面中显示这些字符，你就需要使用<strong>“转义”字符</strong>。</p>
<ul>
<li><code>&lt;</code>:<code>&amp;lt;</code></li>
<li><code>&gt;</code>:<code>&amp;gt;</code></li>
<li><code>&amp;</code>:<code>&amp;amp;</code></li>
<li><code>&quot;</code>:<code>&amp;quot;</code></li>
<li><code>&#39;</code>:<code>&amp;lsquo;</code></li>
<li><code>&#39;</code>:<code>&amp;rsquo;</code></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>TMDb电影数据分析</title>
    <url>/archives/7e380af2.html</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在电影上映之前，我们可以说一部电影的成功吗？</p>
<p>鉴于制作成本超过1亿美元的电影仍然会失败，这个问题比以往任何时候都更加重要。</p>
<a id="more"></a>

<h2 id="TMDb数据集"><a href="#TMDb数据集" class="headerlink" title="TMDb数据集"></a>TMDb数据集</h2><p>此数据集来源<a href="https://www.kaggle.com/tmdb/tmdb-movie-metadata" target="_blank" rel="noopener external nofollow noreferrer">Kaggle TMDB 5000 Movie Dataset</a>，共计4803部电影，主要为美国地区一百年间（1916-2016）的电影作品。</p>
<p>下面是其包含的特征简要介绍：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">budget                  电影预算</span><br><span class="line">genres                  电影类型</span><br><span class="line">homepage                电影主页</span><br><span class="line">id                      电影ID</span><br><span class="line">keywords                电影关键词</span><br><span class="line">original_language       电影原始语言</span><br><span class="line">original_title          电影原始标题</span><br><span class="line">overview                电影剧情摘要</span><br><span class="line">popularity              电影流行度</span><br><span class="line">production_companies    电影出品公司</span><br><span class="line">production_countries    电影出品国家</span><br><span class="line">release_date            电影档期</span><br><span class="line">revenue                 电影票房</span><br><span class="line">runtime                 电影时长</span><br><span class="line">spoken_languages        电影语言</span><br><span class="line">status                  电影状态</span><br><span class="line">tagline                 电影标语</span><br><span class="line">title                   电影标题</span><br><span class="line">vote_average            电影平均评分</span><br><span class="line">vote_count              电影评分次数</span><br><span class="line">cast                    电影演员列表  </span><br><span class="line">crew                    电影参与人列表</span><br></pre></td></tr></table></figure>

<p>由于本文是分析影响电影票房、评分的特征，所以这里我选取了下面这些可能跟票房、评分相关的特征：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">budget                  电影预算</span><br><span class="line">genres                  电影类型</span><br><span class="line">popularity              电影流行度</span><br><span class="line">production_companies    电影出品公司</span><br><span class="line">production_countries    电影出品国家</span><br><span class="line">release_date            电影档期</span><br><span class="line">revenue                 电影票房</span><br><span class="line">runtime                 电影时长</span><br><span class="line">title                   电影标题</span><br><span class="line">vote_average            电影平均评分</span><br><span class="line">vote_count              电影评分次数</span><br><span class="line">actors                  电影演员列表  </span><br><span class="line">director                电影导演</span><br></pre></td></tr></table></figure>

<p>需要注意的是，由于电影年份的跨度很大，如果考虑很大的时间跨度，会引入很多影响电影票房的因素，不利于发现规律，因此，我只选取2000年以后上映的电影。</p>
<p>另外，我还去掉了其中评分人数过少、票房、预算为0的电影，这些异常数据会影响最后的统计效果。</p>
<h2 id="TMDb电影数据分析"><a href="#TMDb电影数据分析" class="headerlink" title="TMDb电影数据分析"></a>TMDb电影数据分析</h2><p>下面我从影片类型、导演、主演、档期等因素来分析其对票房、评分的影响。</p>
<h3 id="票房TOP10"><a href="#票房TOP10" class="headerlink" title="票房TOP10"></a>票房TOP10</h3><img src="/archives/7e380af2/%E7%A5%A8%E6%88%BFTOP10.png" class="" title="票房TOP10">

<p>我们可以看出，这十部电影的预算是亿级（美元）的，票房是十亿级的，属于高投入高收入的影片。</p>
<h3 id="票房、预算和投资回报率（ROI）变化趋势"><a href="#票房、预算和投资回报率（ROI）变化趋势" class="headerlink" title="票房、预算和投资回报率（ROI）变化趋势"></a>票房、预算和投资回报率（ROI）变化趋势</h3><img src="/archives/7e380af2/%E7%A5%A8%E6%88%BF%E3%80%81%E9%A2%84%E7%AE%97%E6%80%BB%E5%92%8C%E5%8F%98%E5%8C%96%E8%B6%8B%E5%8A%BF.png" class="" title="票房、预算总和变化趋势">

<img src="/archives/7e380af2/%E6%8A%95%E8%B5%84%E5%9B%9E%E6%8A%A5%E7%8E%87%E5%8F%98%E5%8C%96%E8%B6%8B%E5%8A%BF.png" class="" title="投资回报率变化趋势">

<p>2000年至2015年间，电影制作的经费投入并没有显著增长，但票房收入呈上升趋势，相应地，ROI从2000年的1.4升到了2015年的2.5，电影行业正处于稳步上升的阶段。</p>
<h3 id="评分TOP10"><a href="#评分TOP10" class="headerlink" title="评分TOP10"></a>评分TOP10</h3><img src="/archives/7e380af2/%E8%AF%84%E5%88%86TOP10.png" class="" title="评分TOP10">

<ul>
<li>TOP10的评分比较接近</li>
<li>没有明显的某个类型占比很大。</li>
<li>TOP评分跟票房的关联性也不大</li>
</ul>
<h3 id="评分变化的趋势"><a href="#评分变化的趋势" class="headerlink" title="评分变化的趋势"></a>评分变化的趋势</h3><img src="/archives/7e380af2/%E8%AF%84%E5%88%86%E5%8F%98%E5%8C%96%E8%B6%8B%E5%8A%BF.png" class="" title="评分变化趋势">

<p>电影评分随年份变化的趋势不明显，总体上在6.25上下小幅度波动。</p>
<h3 id="票房、评分的影响因素"><a href="#票房、评分的影响因素" class="headerlink" title="票房、评分的影响因素"></a>票房、评分的影响因素</h3><p>下面我计算了开支、流行度、时长、评分数、年份跟票房、评分的相关性。</p>
<img src="/archives/7e380af2/TMDb%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E7%A5%A8%E6%88%BF%E3%80%81%E8%AF%84%E5%88%86%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0.png" class="" title="TMDb数据分析-票房、评分的影响因素">

<ul>
<li>票房与预算、评论数的相关性较大，但评论数和票房一样，只能等到电影上映后才知道具体数值。</li>
<li>评分与票房、预算、热度、评论数的相关性都不大。</li>
</ul>
<h3 id="类型数目统计"><a href="#类型数目统计" class="headerlink" title="类型数目统计"></a>类型数目统计</h3><p>首先我们先看下上映电影的类型，如果一个电影有多个类型，那么每个类型都会计算一次。</p>
<img src="/archives/7e380af2/%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%9B%AE%E7%BB%9F%E8%AE%A1.png" class="" title="类型数目统计">

<ul>
<li>影片有18种类型，剧情、喜剧、惊悚、动作这4种类型的影片最多，西部片和纪录片最少。</li>
<li>剧情片数目较多，毕竟不少类型电影都可以说包含剧情这一元素。</li>
</ul>
<h3 id="类型跟预算、票房以及ROI的关系"><a href="#类型跟预算、票房以及ROI的关系" class="headerlink" title="类型跟预算、票房以及ROI的关系"></a>类型跟预算、票房以及ROI的关系</h3><img src="/archives/7e380af2/%E5%B9%B3%E5%9D%87%E9%A2%84%E7%AE%97%E3%80%81%E7%A5%A8%E6%88%BF%E5%92%8C%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%B3%E7%B3%BB.png" class="" title="平均预算、票房和类型的关系">

<p>这个统计可以很明显的看出，动作、冒险、家庭、科幻、幻想、动画等类型的电影票房非常高，为了更加公平的对比，下面比较一下它们的投资回报率（ROI）。</p>
<img src="/archives/7e380af2/ROI%E5%92%8C%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%B3%E7%B3%BB.png" class="" title="ROI和类型的关系">

<ul>
<li>从投资回报率可以看出，纪录片的投资回报率遥遥领先，如果为了能获得更好的收益，可以考虑去投资拍摄纪录片！</li>
<li>需要注意的是，历史、战争、西部电影的投资回报率非常低，其中历史和西部两种类型的电影的投资回报率甚至小于1，大家投资这类电影需要非常谨慎。</li>
</ul>
<h3 id="类型和评分的关系"><a href="#类型和评分的关系" class="headerlink" title="类型和评分的关系"></a>类型和评分的关系</h3><img src="/archives/7e380af2/%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AF%84%E5%88%86%E7%9A%84%E5%85%B3%E7%B3%BB.png" class="" title="类型和评分的关系">

<ul>
<li>纪录片不但ROI位于首位，评分也是遥遥领先。</li>
<li>这里和前面的票房、ROI正好相反，前面ROI比较低的历史、战争、西部电影在这边平均评分普遍较高，如果单纯为了高评价，不考虑投资回报率，大家可以考虑去拍摄这几类电影。</li>
</ul>
<h3 id="档期的分布"><a href="#档期的分布" class="headerlink" title="档期的分布"></a>档期的分布</h3><p>下面统计了不同月份的上映电影数目，其中9月和12月数目偏多。</p>
<img src="/archives/7e380af2/%E6%A1%A3%E6%9C%9F%E6%9C%88%E4%BB%BD%E5%88%86%E5%B8%83.png" class="" title="档期月份分布">


<h3 id="档期跟票房的关系"><a href="#档期跟票房的关系" class="headerlink" title="档期跟票房的关系"></a>档期跟票房的关系</h3><img src="/archives/7e380af2/%E6%A1%A3%E6%9C%9F%E5%B9%B3%E5%9D%87%E7%A5%A8%E6%88%BF%E5%88%86%E5%B8%83.png" class="" title="档期平均票房分布">

<p>其中5-7月的票房有一个高峰。</p>
<h3 id="档期跟评分的关系"><a href="#档期跟评分的关系" class="headerlink" title="档期跟评分的关系"></a>档期跟评分的关系</h3><img src="/archives/7e380af2/%E6%A1%A3%E6%9C%9F%E5%B9%B3%E5%9D%87%E8%AF%84%E5%88%86%E5%88%86%E5%B8%83.png" class="" title="档期平均评分分布">


<h3 id="导演平均票房分析"><a href="#导演平均票房分析" class="headerlink" title="导演平均票房分析"></a>导演平均票房分析</h3><p>下面统计了导演平均票房分布。</p>
<img src="/archives/7e380af2/TMDb%E7%94%B5%E5%BD%B1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%AF%BC%E6%BC%94%E5%B9%B3%E5%9D%87%E7%A5%A8%E6%88%BF%E5%88%86%E5%B8%83.png" class="" title="TMDb电影数据分析-导演平均票房分布">

<p>典型的长尾分布，极少数导演的吸金能力特别强。</p>
<h3 id="导演平均评分分析"><a href="#导演平均评分分析" class="headerlink" title="导演平均评分分析"></a>导演平均评分分析</h3><p>下面统计了导演平均评分分布。</p>
<img src="/archives/7e380af2/TMDb%E7%94%B5%E5%BD%B1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%AF%BC%E6%BC%94%E5%B9%B3%E5%9D%87%E8%AF%84%E5%88%86%E5%88%86%E5%B8%83.png" class="" title="TMDb电影数据分析-导演平均评分分布">

<p>导演的评分近似正态分布，在6-7分之间的人最多。</p>
<h3 id="主演平均票房分析"><a href="#主演平均票房分析" class="headerlink" title="主演平均票房分析"></a>主演平均票房分析</h3><p>我们知道电影主演对票房的贡献有轻重之分，如果忽略这一点，使用和电影类型一样的计算方法，则计算结果可能会显示常演配角的人比常演主角的人的票房更高。这里尝试通过一个加权系数体现这个区别。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#按不同权重统计演员的票房：</span><br><span class="line">r4 &#x3D; [0.4, 0.3, 0.2, 0.1]    #如果有4位主演，按此加权，以下类似</span><br><span class="line">r3 &#x3D; [0.4, 0.3, 0.3]</span><br><span class="line">r2 &#x3D; [0.6, 0.4]</span><br><span class="line">r1 &#x3D; [1]</span><br></pre></td></tr></table></figure>

<img src="/archives/7e380af2/TMDb%E7%94%B5%E5%BD%B1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E4%B8%BB%E6%BC%94%E5%B9%B3%E5%9D%87%E7%A5%A8%E6%88%BF%E5%88%86%E5%B8%83.png" class="" title="TMDb电影数据分析-主演平均票房分布">



<h3 id="主演平均评分分析"><a href="#主演平均评分分析" class="headerlink" title="主演平均评分分析"></a>主演平均评分分析</h3><p>下面统计了主演平均评分分布。</p>
<img src="/archives/7e380af2/TMDb%E7%94%B5%E5%BD%B1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E4%B8%BB%E6%BC%94%E5%B9%B3%E5%9D%87%E8%AF%84%E5%88%86%E5%88%86%E5%B8%83.png" class="" title="TMDb电影数据分析-主演平均评分分布">

<p>主演的评分近似正态分布，在6-7分之间的人最多。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h3 id="票房相关"><a href="#票房相关" class="headerlink" title="票房相关"></a>票房相关</h3><ul>
<li>2000年至2015年间，电影制作的经费投入并没有显著增长，但票房收入呈上升趋势，相应地，ROI从2000年的1.4升到了2015年的2.5，电影行业正处于稳步上升的阶段。</li>
<li>票房与预算、评论数的相关性较大，但评论数和票房一样，只能等到电影上映后才知道具体数值，所以想要获取高票房，增加投入是比较好的选择。</li>
<li>纪录片的投资回报率遥遥领先，如果为了能获得更好的收益，可以考虑去投资拍摄纪录片！</li>
<li>历史、战争、西部电影的投资回报率非常低，其中历史和西部两种类型的电影的投资回报率甚至小于1，大家投资这类电影需要非常谨慎。</li>
<li>其中5-7月的票房有一个高峰。</li>
<li>只有极少数导演的吸金能力特别强。</li>
<li>只有极少数主演的吸金能力特别强。</li>
</ul>
<h3 id="评分相关"><a href="#评分相关" class="headerlink" title="评分相关"></a>评分相关</h3><ul>
<li>评分与票房、预算、热度、评论数的相关性都不大。</li>
<li>纪录片不但ROI位于首位，评分也是遥遥领先。</li>
<li>这里和前面的票房、ROI正好相反，前面ROI比较低的历史、战争、西部电影在这边平均评分普遍较高，如果单纯为了高评价，不考虑投资回报率，大家可以考虑去拍摄这几类电影。</li>
<li>导演的评分近似正态分布，大部分导演的平均评分在6-7分之间。</li>
<li>主演的评分近似正态分布，大部分主演的平均评分在6-7分之间。</li>
</ul>
]]></content>
      <categories>
        <category>数据分析</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB大于、小于、大于等于、小于等于</title>
    <url>/archives/57734367.html</url>
    <content><![CDATA[<p>我在使用MongoDB筛选数据时需要用到大于、小于、大于等于、小于等于，本文简单记录一下它们的用法。</p>
<a id="more"></a>

<h2 id="一、用法"><a href="#一、用法" class="headerlink" title="一、用法"></a>一、用法</h2><ul>
<li><code>$gt</code>:大于</li>
<li><code>$lt</code>:小于</li>
<li><code>$gte</code>:大于或等于</li>
<li><code>$lte</code>:小于或等于</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$gt</span>: value &#125; &#125; ); <span class="comment">// greater than : field &gt; value</span></span><br><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$lt</span>: value &#125; &#125; ); <span class="comment">// less than : field &lt; value</span></span><br><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$gte</span>: value &#125; &#125; ); <span class="comment">// greater than or equal to : field &gt;= value</span></span><br><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$lte</span>: value &#125; &#125; ); <span class="comment">// less than or equal to : field &lt;= value</span></span><br></pre></td></tr></table></figure>

<h2 id="二、具体实例"><a href="#二、具体实例" class="headerlink" title="二、具体实例"></a>二、具体实例</h2><p>查询j大于3,小于4:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.things.find(&#123;<span class="attr">j</span> : &#123;<span class="attr">$lt</span>: <span class="number">3</span>&#125;&#125;);</span><br><span class="line">db.things.find(&#123;<span class="attr">j</span> : &#123;<span class="attr">$gte</span>: <span class="number">4</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>也可以合并在一条语句内:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$gt</span>: value1, <span class="attr">$lt</span>: value2 &#125; &#125; ); <span class="comment">// value1 &lt; field &lt; value</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux源码的编译安装和卸载</title>
    <url>/archives/93a650.html</url>
    <content><![CDATA[<p>本文主要说明怎么方便的卸载用<code>make install</code>编译安装的软件。</p>
<a id="more"></a>

<h2 id="正常的编译安装-卸载"><a href="#正常的编译安装-卸载" class="headerlink" title="正常的编译安装/卸载"></a>正常的编译安装/卸载</h2><p>源码的安装一般由3个步骤组成：</p>
<ul>
<li>配置(<code>configure</code>)</li>
<li>编译(<code>make</code>)</li>
<li>安装(<code>make install</code>)。</li>
</ul>
<p><code>configure</code>文件是一个可执行的脚本文件，它有很多选项，在待安装的源码目录下使用命令<code>./configure –help</code>可以输出详细的选项列表。 </p>
<p>其中<code>--prefix</code>选项是配置安装目录，如果不配置该选项，安装后可执行文件默认放在<code>/usr /local/bin</code>，库文件默认放在<code>/usr/local/lib</code>，配置文件默认放在<code>/usr/local/etc</code>，其它的资源文件放在<code>/usr /local/share</code>，比较凌乱。</p>
<p>如果配置了<code>--prefix</code>，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>安装后的所有资源文件都会被放在<code>/usr/local/test</code>目录中，不会分散到其他目录。</p>
<p>使用<code>--prefix</code>选项的另一个好处是<strong>方便卸载软件或移植软件</strong></p>
<ul>
<li>当某个安装的软件不再需要时，只须简单的删除该安装目录，就可以把软件卸载干净；</li>
<li>移植软件只需拷贝整个目录到另外一个机器即可（相同的操作系统下）</li>
</ul>
<p>当然要卸载程序，也可以在原来的<code>make</code>目录下用一次<code>make uninstall</code>，但前提是<code>Makefile</code>文件有<code>uninstall</code>命令。</p>
<h2 id="make-install-PREFIX-path"><a href="#make-install-PREFIX-path" class="headerlink" title="make install PREFIX=path"></a>make install PREFIX=path</h2><p>这里<code>PREFIX</code>必须大写，其实绝大部分情况下 <code>make install</code> 都不能再指定 <code>PREFIX</code> 了，因为大部分程序都会 <code>configure</code> 时得到的 <code>prefix</code> 写入 <code>config.h</code>，然后在编译时编译到可执行文件内部，以便在执行时读取资源文件等。</p>
<p>这样在编译完毕后，就不能再修改 <code>prefix</code> 了。只有运行时不需要资源文件的小工具，才可能在安装的时候随意选择 <code>PREFIX</code>，或者具有 <code>loader</code> 的大程序，在执行时通过 <code>loader</code> 传入路径……</p>
<h2 id="关于卸载"><a href="#关于卸载" class="headerlink" title="关于卸载"></a>关于卸载</h2><p>如果没有配置<code>--prefix</code>选项，源码包也没有提供<code>make uninstall</code>，则可以通过以下方式可以完整卸载：</p>
<p>一个临时目录重新安装一遍，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/tmp/to_remove &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>然后遍历<code>/tmp/to_remove</code>的文件，删除对应安装位置的文件即可（因为<code>/tmp/to_remove</code>里的目录结构就是没有配置<code>--prefix</code>选项时的目录结构）。</p>
<blockquote>
<p>本文转载于：<a href="https://www.cnblogs.com/zhangbo127/p/4556008.html" target="_blank" rel="noopener external nofollow noreferrer">Linux ./configure &amp;&amp; make &amp;&amp; make install 编译安装和卸载</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB获取最后N条记录</title>
    <url>/archives/7a30939c.html</url>
    <content><![CDATA[<p>我们可以按照<code>_id</code>字段进行排序，因为自动创建的<code>_id</code>字段有一个日期嵌入其中。然后我们就可以筛选得到最后N条记录。</p>
<a id="more"></a>

<h2 id="一、升序排列（最旧到最新）"><a href="#一、升序排列（最旧到最新）" class="headerlink" title="一、升序排列（最旧到最新）"></a>一、升序排列（最旧到最新）</h2><p>这将返回从最旧到最新排序的所有文档。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.foo.find().sort(&#123;&quot;_id&quot;:1&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="二、降序排列（最新到最旧）"><a href="#二、降序排列（最新到最旧）" class="headerlink" title="二、降序排列（最新到最旧）"></a>二、降序排列（最新到最旧）</h2><p>这将返回从最新到最旧排序的所有文档。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.foo.find().sort(&#123;&quot;_id&quot;:-1&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="三、采用-limit-方法进行限制"><a href="#三、采用-limit-方法进行限制" class="headerlink" title="三、采用.limit()方法进行限制"></a>三、采用<code>.limit()</code>方法进行限制</h2><p>当数据很多的时候，可以添加一个限制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.foo.find().sort(&#123;&quot;_id&quot;:1&#125;).limit(50)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04下MongoDB的安装和使用</title>
    <url>/archives/c3de71c2.html</url>
    <content><![CDATA[<p>本文是在Ubuntu16.04下面安装和使用MongoDB的简单笔记。</p>
<a id="more"></a>

<h2 id="一、MongoDB-安装"><a href="#一、MongoDB-安装" class="headerlink" title="一、MongoDB 安装"></a>一、MongoDB 安装</h2><h3 id="1、正常安装方法"><a href="#1、正常安装方法" class="headerlink" title="1、正常安装方法"></a>1、正常安装方法</h3><p>1)、Ubuntu软件包管理工具（即dpkg和apt）通过要求分销商使用GPG密钥签署软件包来确保软件包的一致性和真实性。以下命令用来导入MongoDB公共GPG密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</span><br></pre></td></tr></table></figure>

<p>2)、下面生成<code>/etc/apt/sources.list.d/mongodb-org-3.6.list</code>文件：</p>
<p><strong>注意：下面命令针对Ubuntu16.04版本，在其他Ubuntu版本系统请查看MongoDB官网。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</span><br></pre></td></tr></table></figure>

<p>3)、重新加载本地包数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>4)、安装最新的稳定版MongoDB：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure>

<p>5)、安装完成后，在终端输入以下命令查看MongoDB的最新版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo -version</span><br></pre></td></tr></table></figure>

<h3 id="2、阿里云源安装方法"><a href="#2、阿里云源安装方法" class="headerlink" title="2、阿里云源安装方法"></a>2、阿里云源安装方法</h3><p>因为官方网站安装时下载速度很慢，基本下载不下来，所以把源替换为国内阿里云的源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;opsx.alibaba.com&#x2F;mirror</span><br></pre></td></tr></table></figure>

<p>只需要改变上面方法的第2步：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb [ arch=amd64,arm64 ] http://mirrors.aliyun.com/mongodb/apt/ubuntu xenial/mongodb-org/3.4 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</span><br></pre></td></tr></table></figure>

<p>然后如果第4步下载失败，说明阿里镜像还没有最新版的文件，可在镜像网站上查看可用的版本。</p>
<p>比如安装指定版本3.6.2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org=3.6.2 mongodb-org-server=3.6.2 mongodb-org-shell=3.6.2 mongodb-org-mongos=3.6.2 mongodb-org-tools=3.6.2</span><br></pre></td></tr></table></figure>



<h2 id="二、启动、重新启动和关闭mongodb命令"><a href="#二、启动、重新启动和关闭mongodb命令" class="headerlink" title="二、启动、重新启动和关闭mongodb命令"></a>二、启动、重新启动和关闭mongodb命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mongod start</span><br><span class="line"></span><br><span class="line">sudo service mongod stop</span><br><span class="line"></span><br><span class="line">sudo service mongod restart</span><br></pre></td></tr></table></figure>

<h3 id="1、查看是否启动成功"><a href="#1、查看是否启动成功" class="headerlink" title="1、查看是否启动成功"></a>1、查看是否启动成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /var/<span class="built_in">log</span>/mongodb/mongod.log</span><br></pre></td></tr></table></figure>

<p>在 <code>mongod.log</code> 日志中若出现如下信息，说明启动成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[initandlisten] waiting for connections on port 27017</span><br></pre></td></tr></table></figure>

<h2 id="三、MongoDB-卸载"><a href="#三、MongoDB-卸载" class="headerlink" title="三、MongoDB 卸载"></a>三、MongoDB 卸载</h2><p>删除 MongoDB 包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge mongodb-org*</span><br></pre></td></tr></table></figure>

<p>删除 MongoDB 数据库和日志文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -r /var/<span class="built_in">log</span>/mongodb</span><br><span class="line">sudo rm -r /var/lib/mongodb</span><br></pre></td></tr></table></figure>

<h2 id="四、MongoDB-使用"><a href="#四、MongoDB-使用" class="headerlink" title="四、MongoDB 使用"></a>四、MongoDB 使用</h2><h3 id="1、shell命令模式"><a href="#1、shell命令模式" class="headerlink" title="1、shell命令模式"></a>1、shell命令模式</h3><p>输入mongo进入shell命令模式，默认连接的数据库是test数据库，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>

<h3 id="2、常用操作命令："><a href="#2、常用操作命令：" class="headerlink" title="2、常用操作命令："></a>2、常用操作命令：</h3><ul>
<li><code>show dbs</code>：显示数据库列表 </li>
<li><code>show collections</code>：显示当前数据库中的集合（类似关系数据库中的表table） </li>
<li><code>show users</code>：显示所有用户 </li>
<li><code>use yourDB</code>：切换当前数据库至yourDB </li>
<li><code>db.help()</code> ：显示数据库操作命令 </li>
<li><code>db.yourCollection.help()</code> ：显示集合操作命令，yourCollection是集合名</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库迁移</title>
    <url>/archives/bf0f30e5.html</url>
    <content><![CDATA[<p>本文主要包括以下两个内容：</p>
<ul>
<li>MongoDB数据导出为JSON格式、CSV格式以及从JSON格式、CSV格式数据导入到MongoDB数据库的方法。</li>
<li>MongoDB数据库备份与恢复的方法。</li>
</ul>
<a id="more"></a>

<h2 id="一、MongoDB数据导入与导出"><a href="#一、MongoDB数据导入与导出" class="headerlink" title="一、MongoDB数据导入与导出"></a>一、MongoDB数据导入与导出</h2><h3 id="1、数据导出mongoexport"><a href="#1、数据导出mongoexport" class="headerlink" title="1、数据导出mongoexport"></a>1、数据导出mongoexport</h3><ul>
<li>1)、概念：</li>
</ul>
<p>MongoDB中的mongoexport工具可以把一个collection导出成JSON格式或CSV格式的文件。可以通过参数指定导出的数据项，也可以根据指定的条件导出数据。</p>
<ul>
<li>2)、语法：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongoexport -d dbname -c collectionname -o file --<span class="built_in">type</span> json/csv -f field</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d ：数据库名</span><br><span class="line">-c ：collection名</span><br><span class="line">-o ：输出的文件名</span><br><span class="line">--type ： 输出的格式，默认为json</span><br><span class="line">-f ：输出的字段，如果-type为csv，则需要加上-f &quot;字段名&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>3)、示例：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongoexport -d mongotest -c users -o /home/python/Desktop/mongoDB/users.json --<span class="built_in">type</span> json -f <span class="string">"_id,user_id,user_name,age,status"</span></span><br></pre></td></tr></table></figure>

<h3 id="2、数据导入mongoimport"><a href="#2、数据导入mongoimport" class="headerlink" title="2、数据导入mongoimport"></a>2、数据导入mongoimport</h3><ul>
<li>1)、语法：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongoimport -d dbname -c collectionname --file filename --headerline --<span class="built_in">type</span> json/csv -f field</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d ：数据库名</span><br><span class="line">-c ：collection名</span><br><span class="line">--type ：导入的格式默认json</span><br><span class="line">-f ：导入的字段名</span><br><span class="line">--headerline ：如果导入的格式是csv，则可以使用第一行的标题作为导入的字段</span><br><span class="line">--file ：要导入的文件</span><br></pre></td></tr></table></figure>

<ul>
<li>2)、示例：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongoimport -d mongotest -c users --file /home/mongodump/articles.json --<span class="built_in">type</span> json</span><br></pre></td></tr></table></figure>

<h2 id="二、MongoDB备份与恢复"><a href="#二、MongoDB备份与恢复" class="headerlink" title="二、MongoDB备份与恢复"></a>二、MongoDB备份与恢复</h2><h3 id="1、MongoDB数据库备份"><a href="#1、MongoDB数据库备份" class="headerlink" title="1、MongoDB数据库备份"></a>1、MongoDB数据库备份</h3><ul>
<li>1)、语法：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-h： MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</span><br><span class="line">-d： 需要备份的数据库实例，例如：test</span><br><span class="line">-o： 备份的数据存放位置，例如：&#x2F;home&#x2F;mongodump&#x2F;，当然该目录需要提前建立，这个目录里面存放该数据库实例的备份数据。</span><br></pre></td></tr></table></figure>

<ul>
<li>2)、实例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongodump -h 127.0.0.1:27017 -d itcast -o &#x2F;home&#x2F;mongodump&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="2、MongoDB数据库恢复"><a href="#2、MongoDB数据库恢复" class="headerlink" title="2、MongoDB数据库恢复"></a>2、MongoDB数据库恢复</h3><ul>
<li>1)、语法：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongorestore -h dbhost -d dbname --dir dbdirectory</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-h： MongoDB所在服务器地址</span><br><span class="line">-d： 需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</span><br><span class="line">--dir： 备份数据所在位置，例如：&#x2F;home&#x2F;mongodump&#x2F;itcast&#x2F;</span><br><span class="line">--drop： 恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用！</span><br></pre></td></tr></table></figure>

<ul>
<li>2)、实例：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongorestore -h 127.0.0.1:27017 -d itcast_restore --dir /home/mongodump/itcast/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下MongoDB的安装及配置</title>
    <url>/archives/c50964b5.html</url>
    <content><![CDATA[<p>本文是在Windows下面安装MongoDB的简单笔记。</p>
<a id="more"></a>

<h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><p>登录Mongodb官网<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener external nofollow noreferrer">https://www.mongodb.com/download-center#community</a> 下载安装包。</p>
<h2 id="二、安装MongoDB"><a href="#二、安装MongoDB" class="headerlink" title="二、安装MongoDB"></a>二、安装MongoDB</h2><p>安装比较简单，中间主要是选择“Custom”自定义，安装路径修改下：<code>D:\software\MongoDB</code>，然后不断“下一步”，安装至结束。</p>
<p><strong>需要注意的是最后一步，勾选掉<code>mongo db compass</code>，不安装，不然会因为一直下载这个工具，导致安装卡住。</strong><code>mongo db compass</code>是个图形工具，可以方便直接管理MongoDB数据，不过都是我们一般都是基于命令行工作，所以也不需要。</p>
<p>安装比较容易。<strong>难点在启动Mongodb的服务以及将MongoDB设置成Windows服务。</strong></p>
<h2 id="三、先创建数据库文件的存放位置"><a href="#三、先创建数据库文件的存放位置" class="headerlink" title="三、先创建数据库文件的存放位置"></a>三、先创建数据库文件的存放位置</h2><p>在MongoDB下创建data，在data下再创建db：<code>D:\software\MongoDB\data\db</code></p>
<p>因为启动MongoDB服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。</p>
<h2 id="四、启动MongoDB服务"><a href="#四、启动MongoDB服务" class="headerlink" title="四、启动MongoDB服务"></a>四、启动MongoDB服务</h2><ul>
<li>1.打开cmd命令行</li>
<li>2.进入<code>D:\software\MongoDB\bin</code>目录（注意：先输入d:进入d盘，然后输入<code>cd D:\software\MongoDB\bin</code>）</li>
<li>3.输入如下的命令启动mongodb服务：<code>mongod --dbpath D:\software\MongoDB\data\db</code> ，意思是在第三步创建的数据库存放文件路径下启动。</li>
<li>4.在浏览器输入<code>http://localhost:27017</code> （27017是mongodb的端口号）查看，若显示：<code>It looks like you are trying to access MongoDB over HTTP on the native driver port.</code>则表示连接成功。如果不成功，可以查看端口是否被占用。</li>
</ul>
<p>现在打开“服务”看下，我们会发现在本地Windows“服务”中，是没有配置上MongoDB服务的。</p>
<h2 id="五、配置本地Windows-MongoDB服务"><a href="#五、配置本地Windows-MongoDB服务" class="headerlink" title="五、配置本地Windows MongoDB服务"></a>五、配置本地Windows MongoDB服务</h2><p>这样就可以<strong>开机自启动</strong>。同时也可以手动启动关闭，如通过命令行<code>net start MongoDB</code>启动。</p>
<h3 id="1-先在data文件下创建一个新文件夹log（用来存放日志文件）"><a href="#1-先在data文件下创建一个新文件夹log（用来存放日志文件）" class="headerlink" title="1.先在data文件下创建一个新文件夹log（用来存放日志文件）"></a>1.先在data文件下创建一个新文件夹log（用来存放日志文件）</h3><h3 id="2-在Mongodb文件夹下新建配置文件mongo-config"><a href="#2-在Mongodb文件夹下新建配置文件mongo-config" class="headerlink" title="2.在Mongodb文件夹下新建配置文件mongo.config"></a>2.在Mongodb文件夹下新建配置文件<code>mongo.config</code></h3><p>下面介绍下创建<code>.config</code>配置文件简单的方法：</p>
<p>先创建一个<code>mongo.txt</code>文件，再打开，点击”另存为“，将底下的文件类型更改为”全部类型“，并更改文件名称为<code>mongo.config</code>。这样就可以创建一个<code>.config</code>的配置文件了。</p>
<h3 id="3-用记事本打开mongo-config，并输入"><a href="#3-用记事本打开mongo-config，并输入" class="headerlink" title="3.用记事本打开mongo.config，并输入"></a>3.用记事本打开<code>mongo.config</code>，并输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbpath&#x3D;D:\software\MongoDB\data\db</span><br><span class="line">logpath&#x3D;D:\software\MongoDB\data\log\mongo.log</span><br></pre></td></tr></table></figure>

<h3 id="4-配置windows服务"><a href="#4-配置windows服务" class="headerlink" title="4.配置windows服务"></a>4.配置windows服务</h3><p>用管理员身份打开cmd，先跳转到 <code>D:\software\MongoDB\bin</code>目录下。输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --config <span class="string">"D:\software\Mongodb\mongo.config"</span> --install --serviceName <span class="string">"MongoDB"</span></span><br></pre></td></tr></table></figure>

<p>即根据刚创建的<code>mongo.config</code>配置文件安装服务，名称为<code>MongoDB</code>。</p>
<p>完成后，再次查看本地的服务。如果成功的话，会发现本地服务多了”MongoDB”服务。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
</search>
